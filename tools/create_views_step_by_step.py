#!/usr/bin/env python3
"""
WINCASA Phase 2.1 - Views Step-by-step Creator
Erstellt die Views einzeln wegen Firebird DDL Limitations
"""

from database_connection import execute_query, get_cursor


def create_mieter_view():
    """Erstellt vw_mieter_komplett View"""
    print("üìù Erstelle vw_mieter_komplett...")
    
    # Zuerst dropppen falls existiert
    try:
        execute_query("DROP VIEW vw_mieter_komplett")
        print("   ‚úÖ Alte View gel√∂scht")
    except:
        print("   ‚ÑπÔ∏è  Keine alte View vorhanden")
    
    # View erstellen
    create_sql = """
CREATE VIEW vw_mieter_komplett AS
SELECT 
  BEWADR.BEWNR,
  CAST(BEWADR.BVNAME || ' ' || BEWADR.BNAME AS VARCHAR(100)) AS MIETER_NAME,
  CASE 
    WHEN BEWADR.BVNAME2 IS NOT NULL AND BEWADR.BNAME2 IS NOT NULL
    THEN CAST(BEWADR.BVNAME2 || ' ' || BEWADR.BNAME2 AS VARCHAR(100))
    ELSE NULL 
  END AS PARTNER_NAME,
  OBJEKTE.OSTRASSE AS GEBAEUDE_ADRESSE,
  WOHNUNG.EBEZ AS WOHNUNG,
  CAST(OBJEKTE.OSTRASSE || ', ' || WOHNUNG.EBEZ AS VARCHAR(200)) AS VOLLSTAENDIGE_ADRESSE,
  CASE 
    WHEN POSITION(' ' IN OBJEKTE.OPLZORT) > 0 
    THEN SUBSTRING(OBJEKTE.OPLZORT FROM 1 FOR POSITION(' ' IN OBJEKTE.OPLZORT) - 1)
    ELSE OBJEKTE.OPLZORT
  END AS PLZ,
  CASE 
    WHEN POSITION(' ' IN OBJEKTE.OPLZORT) > 0 
    THEN TRIM(SUBSTRING(OBJEKTE.OPLZORT FROM POSITION(' ' IN OBJEKTE.OPLZORT) + 1))
    ELSE ''
  END AS STADT,
  BEWADR.BTEL AS TELEFON,
  BEWADR.BEMAIL AS EMAIL,
  BEWADR.BHANDY AS HANDY,
  BEWOHNER.VBEGINN AS MIETBEGINN,
  BEWOHNER.VENDE AS MIETENDE,
  CASE 
    WHEN BEWOHNER.VENDE IS NULL THEN 'Unbefristet'
    WHEN BEWOHNER.VENDE > CURRENT_DATE THEN 'Aktiv bis ' || CAST(BEWOHNER.VENDE AS VARCHAR(10))
    ELSE 'Beendet am ' || CAST(BEWOHNER.VENDE AS VARCHAR(10))
  END AS MIETSTATUS,
  CASE 
    WHEN BEWOHNER.VENDE IS NULL OR BEWOHNER.VENDE > CURRENT_DATE
    THEN EXTRACT(YEAR FROM CURRENT_DATE) - EXTRACT(YEAR FROM BEWOHNER.VBEGINN)
    ELSE EXTRACT(YEAR FROM BEWOHNER.VENDE) - EXTRACT(YEAR FROM BEWOHNER.VBEGINN)
  END AS MIETDAUER_JAHRE,
  COALESCE(BEWOHNER.Z1, 0) + COALESCE(BEWOHNER.Z2, 0) + 
  COALESCE(BEWOHNER.Z3, 0) + COALESCE(BEWOHNER.Z4, 0) AS WARMMIETE_AKTUELL,
  BEWOHNER.Z1 AS KALTMIETE,
  BEWOHNER.Z3 AS BETRIEBSKOSTEN_VORAUSZAHLUNG,
  BEWOHNER.Z4 AS HEIZKOSTEN_VORAUSZAHLUNG,
  COALESCE(KONTEN.KBRUTTO, 0) AS KONTOSALDO,
  CASE 
    WHEN KONTEN.KBRUTTO > 10 THEN 'R√ºckstand'
    WHEN KONTEN.KBRUTTO BETWEEN -10 AND 10 THEN 'Ausgeglichen'  
    WHEN KONTEN.KBRUTTO < -10 THEN 'Guthaben'
    ELSE 'Unbekannt'
  END AS ZAHLUNGSSTATUS,
  CAST(EIGADR.EVNAME || ' ' || EIGADR.ENAME AS VARCHAR(100)) AS EIGENTUEMER_NAME,
  EIGADR.ENOTIZ AS EIGENTUEMER_KUERZEL,
  BEWOHNER.ONR,
  BEWOHNER.ENR,
  BEWOHNER.KNR,
  OBJEKTE.EIGNR
FROM BEWADR
  RIGHT OUTER JOIN BEWOHNER ON (BEWADR.BEWNR = BEWOHNER.BEWNR)
  LEFT OUTER JOIN WOHNUNG ON (BEWOHNER.ONR = WOHNUNG.ONR AND BEWOHNER.ENR = WOHNUNG.ENR)
  LEFT OUTER JOIN OBJEKTE ON (BEWOHNER.ONR = OBJEKTE.ONR)
  LEFT OUTER JOIN EIGADR ON (OBJEKTE.EIGNR = EIGADR.EIGNR)
  LEFT OUTER JOIN KONTEN ON (BEWOHNER.ONR = KONTEN.ONR 
                             AND BEWOHNER.KNR = KONTEN.KNR 
                             AND BEWOHNER.ENR = KONTEN.ENR
                             AND KONTEN.KUSCHLNR1 = -1)
WHERE
  BEWADR.BEWNR >= 0
  AND OBJEKTE.ONR < 890
  AND (BEWOHNER.VENDE IS NULL OR BEWOHNER.VENDE >= CURRENT_DATE)
"""
    
    execute_query(create_sql)
    print("   ‚úÖ vw_mieter_komplett erstellt")
    
    # Test
    result = execute_query("SELECT COUNT(*) FROM vw_mieter_komplett")
    print(f"   üìä {result[0][0]} Mieter gefunden")

def create_eigentuemer_view():
    """Erstellt vw_eigentuemer_portfolio View"""
    print("üìù Erstelle vw_eigentuemer_portfolio...")
    
    try:
        execute_query("DROP VIEW vw_eigentuemer_portfolio")
        print("   ‚úÖ Alte View gel√∂scht")
    except:
        print("   ‚ÑπÔ∏è  Keine alte View vorhanden")
    
    create_sql = """
CREATE VIEW vw_eigentuemer_portfolio AS
SELECT 
  EIGADR.EIGNR,
  CAST(
    CASE 
      WHEN EIGADR.EVNAME2 IS NOT NULL AND EIGADR.ENAME2 IS NOT NULL
      THEN EIGADR.EVNAME || ' ' || EIGADR.ENAME || ' & ' || EIGADR.EVNAME2 || ' ' || EIGADR.ENAME2
      ELSE EIGADR.EVNAME || ' ' || EIGADR.ENAME
    END AS VARCHAR(150)
  ) AS EIGENTUEMER_NAME,
  CASE 
    WHEN EIGADR.EFIRMA = 'J' THEN 'Gewerblich'
    ELSE 'Privatperson'
  END AS EIGENTUEMER_TYP,
  EIGADR.EFIRMANAME AS FIRMENNAME,
  EIGADR.ESTR AS STRASSE,
  EIGADR.EPLZORT AS PLZ_ORT,
  EIGADR.ETEL1 AS TELEFON,
  EIGADR.EEMAIL AS EMAIL,
  EIGADR.EHANDY AS HANDY,
  EIGADR.EBANK AS BANK_NAME,
  EIGADR.EIBAN AS IBAN,
  EIGADR.EBIC AS BIC,
  EIGADR.EKONTOINH AS KONTOINHABER,
  CASE 
    WHEN EIGADR.SEPA_MAN_NR IS NOT NULL THEN 'Aktiv'
    ELSE 'Fehlend'
  END AS SEPA_MANDAT_STATUS,
  EIGADR.SEPA_MAN_DAT AS SEPA_MANDAT_DATUM,
  COUNT(DISTINCT OBJEKTE.ONR) AS ANZAHL_OBJEKTE,
  COUNT(DISTINCT EIGENTUEMER.ONR || '-' || EIGENTUEMER.ENR) AS ANZAHL_EINHEITEN,
  SUM(COALESCE(OBJEKTE.GA1, 0)) AS GESAMTE_WOHNFLAECHE,
  SUM(COALESCE(OBJEKTE.GA2, 0)) AS GESAMTE_GEWERBEFLAECHE,
  SUM(COALESCE(OBJEKTE.KTOSTAND, 0)) AS GESAMT_KONTOSTAND,
  SUM(COALESCE(OBJEKTE.RKTOSTAND, 0)) AS GESAMT_RUECKLAGEN,
  CASE 
    WHEN COUNT(DISTINCT OBJEKTE.ONR) >= 10 THEN 'Gro√ü-Investor'
    WHEN COUNT(DISTINCT OBJEKTE.ONR) >= 5 THEN 'Portfolio-Eigent√ºmer'  
    WHEN COUNT(DISTINCT OBJEKTE.ONR) >= 2 THEN 'Multi-Objekt'
    WHEN COUNT(DISTINCT OBJEKTE.ONR) = 1 THEN 'Einzel-Eigent√ºmer'
    ELSE 'Kein Objekt'
  END AS PORTFOLIO_KATEGORIE,
  CASE 
    WHEN EIGADR.EEMAIL IS NULL OR TRIM(EIGADR.EEMAIL) = '' THEN 'E-Mail fehlt'
    WHEN EIGADR.SEPA_MAN_NR IS NULL THEN 'SEPA-Mandat fehlt'
    WHEN COUNT(DISTINCT OBJEKTE.ONR) = 0 THEN 'Keine Objekte'
    ELSE 'Vollst√§ndig'
  END AS DATENVOLLSTAENDIGKEIT,
  EIGADR.ENOTIZ AS EIGENTUEMER_KUERZEL
FROM EIGADR
  LEFT JOIN EIGENTUEMER ON (EIGADR.EIGNR = EIGENTUEMER.EIGNR)
  LEFT JOIN OBJEKTE ON (EIGENTUEMER.ONR = OBJEKTE.ONR AND OBJEKTE.ONR < 890)
WHERE 
  EIGADR.EIGNR <> -1
  AND EIGADR.EIGNR > 0
GROUP BY 
  EIGADR.EIGNR,
  EIGADR.EVNAME, EIGADR.ENAME, EIGADR.EVNAME2, EIGADR.ENAME2,
  EIGADR.EFIRMA, EIGADR.EFIRMANAME,
  EIGADR.ESTR, EIGADR.EPLZORT, EIGADR.ETEL1, EIGADR.EEMAIL, EIGADR.EHANDY,
  EIGADR.EBANK, EIGADR.EIBAN, EIGADR.EBIC, EIGADR.EKONTOINH,
  EIGADR.SEPA_MAN_NR, EIGADR.SEPA_MAN_DAT, EIGADR.ENOTIZ
"""
    
    execute_query(create_sql)
    print("   ‚úÖ vw_eigentuemer_portfolio erstellt")
    
    result = execute_query("SELECT COUNT(*) FROM vw_eigentuemer_portfolio")
    print(f"   üìä {result[0][0]} Eigent√ºmer gefunden")

def create_objekte_view():
    """Erstellt vw_objekte_details View"""
    print("üìù Erstelle vw_objekte_details...")
    
    try:
        execute_query("DROP VIEW vw_objekte_details")
        print("   ‚úÖ Alte View gel√∂scht")
    except:
        print("   ‚ÑπÔ∏è  Keine alte View vorhanden")
    
    create_sql = """
CREATE VIEW vw_objekte_details AS
SELECT 
  OBJEKTE.ONR,
  OBJEKTE.OSTRASSE AS GEBAEUDE_ADRESSE,
  OBJEKTE.OBEZ AS LIEGENSCHAFTSKUERZEL,
  CASE 
    WHEN POSITION(' ' IN OBJEKTE.OPLZORT) > 0 
    THEN SUBSTRING(OBJEKTE.OPLZORT FROM 1 FOR POSITION(' ' IN OBJEKTE.OPLZORT) - 1)
    ELSE OBJEKTE.OPLZORT
  END AS PLZ,
  CASE 
    WHEN POSITION(' ' IN OBJEKTE.OPLZORT) > 0 
    THEN TRIM(SUBSTRING(OBJEKTE.OPLZORT FROM POSITION(' ' IN OBJEKTE.OPLZORT) + 1))
    ELSE ''
  END AS STADT,
  OBJEKTE.OANZEINH AS ANZAHL_EINHEITEN_TOTAL,
  COALESCE(OBJEKTE.GA1, 0) AS WOHNFLAECHE_QM,
  COALESCE(OBJEKTE.GA2, 0) AS GEWERBEFLAECHE_QM,
  OBJEKTE.ART AS OBJEKTART,
  COUNT(CASE 
    WHEN BEWOHNER.VENDE IS NULL OR BEWOHNER.VENDE > CURRENT_DATE
    THEN 1 
  END) AS EINHEITEN_VERMIETET,
  (OBJEKTE.OANZEINH - COUNT(CASE 
    WHEN BEWOHNER.VENDE IS NULL OR BEWOHNER.VENDE > CURRENT_DATE 
    THEN 1 
  END)) AS EINHEITEN_LEERSTAND,
  CASE 
    WHEN OBJEKTE.OANZEINH > 0 
    THEN ROUND(
      (COUNT(CASE WHEN BEWOHNER.VENDE IS NULL OR BEWOHNER.VENDE > CURRENT_DATE THEN 1 END) * 100.0) 
      / OBJEKTE.OANZEINH, 1)
    ELSE 0
  END AS VERMIETUNGSGRAD_PROZENT,
  CASE 
    WHEN OBJEKTE.OANZEINH = 0 THEN 'Keine Einheiten'
    WHEN COUNT(CASE WHEN BEWOHNER.VENDE IS NULL OR BEWOHNER.VENDE > CURRENT_DATE THEN 1 END) = OBJEKTE.OANZEINH 
         THEN 'Vollvermietet'
    WHEN COUNT(CASE WHEN BEWOHNER.VENDE IS NULL OR BEWOHNER.VENDE > CURRENT_DATE THEN 1 END) = 0 
         THEN 'Komplett leer'
    ELSE 'Teilvermietet'
  END AS VERMIETUNGSSTATUS,
  COALESCE(OBJEKTE.KTOSTAND, 0) AS HAUSGELD_KONTOSTAND,
  COALESCE(OBJEKTE.RKTOSTAND, 0) AS RUECKLAGEN_KONTOSTAND,
  OBJEKTE.KTOASTAND AS KONTOSTAND_DATUM,
  OBJEKTE.RKTOASTAND AS RUECKLAGEN_DATUM,
  CASE 
    WHEN OBJEKTE.KTOSTAND > 5000 THEN 'Hohes Guthaben'
    WHEN OBJEKTE.KTOSTAND > 1000 THEN 'Positiv'
    WHEN OBJEKTE.KTOSTAND BETWEEN -1000 AND 1000 THEN 'Ausgeglichen'
    WHEN OBJEKTE.KTOSTAND < -5000 THEN 'Kritisch'
    ELSE 'Negativ'
  END AS FINANZSTATUS,
  OBJEKTE.VERWNAME AS VERWALTER_NAME,
  OBJEKTE.VERWFIRMA AS VERWALTER_FIRMA,
  OBJEKTE.VERWTEL AS VERWALTER_TELEFON,
  OBJEKTE.VERWEMAIL AS VERWALTER_EMAIL,
  CASE 
    WHEN OBJEKTE.VERWALTUNGSENDE IS NULL THEN 'Unbefristet'
    WHEN OBJEKTE.VERWALTUNGSENDE > CURRENT_DATE THEN 'Aktiv bis ' || CAST(OBJEKTE.VERWALTUNGSENDE AS VARCHAR(10))
    ELSE 'Beendet am ' || CAST(OBJEKTE.VERWALTUNGSENDE AS VARCHAR(10))
  END AS VERWALTUNGSSTATUS,
  EIGADR.EIGNR,
  CAST(EIGADR.EVNAME || ' ' || EIGADR.ENAME AS VARCHAR(100)) AS EIGENTUEMER_NAME,
  CASE 
    WHEN EIGADR.EFIRMA = 'J' THEN 'Gewerblich'
    ELSE 'Privatperson'  
  END AS EIGENTUEMER_TYP,
  EIGADR.ENOTIZ AS EIGENTUEMER_KUERZEL,
  SUM(CASE 
    WHEN BEWOHNER.VENDE IS NULL OR BEWOHNER.VENDE > CURRENT_DATE
    THEN COALESCE(BEWOHNER.Z1, 0) + COALESCE(BEWOHNER.Z2, 0) + 
         COALESCE(BEWOHNER.Z3, 0) + COALESCE(BEWOHNER.Z4, 0)
    ELSE 0
  END) AS MIETEINNAHMEN_MONATLICH,
  SUBSTRING(COALESCE(OBJEKTE.FRINH1, '') FROM 1 FOR 200) AS OBJEKTBESCHREIBUNG
FROM OBJEKTE
  INNER JOIN EIGADR ON (OBJEKTE.EIGNR = EIGADR.EIGNR)
  LEFT JOIN WOHNUNG ON (OBJEKTE.ONR = WOHNUNG.ONR)
  LEFT JOIN BEWOHNER ON (WOHNUNG.ONR = BEWOHNER.ONR AND WOHNUNG.ENR = BEWOHNER.ENR)
WHERE
  OBJEKTE.ONR <> 0
  AND OBJEKTE.ONR < 890
GROUP BY 
  OBJEKTE.ONR, OBJEKTE.OSTRASSE, OBJEKTE.OBEZ, OBJEKTE.OPLZORT,
  OBJEKTE.OANZEINH, OBJEKTE.GA1, OBJEKTE.GA2, OBJEKTE.ART,
  OBJEKTE.KTOSTAND, OBJEKTE.RKTOSTAND, OBJEKTE.KTOASTAND, OBJEKTE.RKTOASTAND,
  OBJEKTE.VERWNAME, OBJEKTE.VERWFIRMA, OBJEKTE.VERWTEL, OBJEKTE.VERWEMAIL,
  OBJEKTE.VERWALTUNGSENDE, OBJEKTE.FRINH1,
  EIGADR.EIGNR, EIGADR.EVNAME, EIGADR.ENAME, EIGADR.EFIRMA, EIGADR.ENOTIZ
"""
    
    execute_query(create_sql)
    print("   ‚úÖ vw_objekte_details erstellt")
    
    result = execute_query("SELECT COUNT(*) FROM vw_objekte_details")
    print(f"   üìä {result[0][0]} Objekte gefunden")

def main():
    """F√ºhrt View-Erstellung durch"""
    print("üöÄ Starte Phase 2.1 View-Erstellung...")
    
    try:
        create_mieter_view()
        create_eigentuemer_view() 
        create_objekte_view()
        
        print("\n‚úÖ Alle Views erfolgreich erstellt!")
        print("üìã Verf√ºgbare Views:")
        print("   - vw_mieter_komplett")
        print("   - vw_eigentuemer_portfolio")
        print("   - vw_objekte_details")
        
    except Exception as e:
        print(f"‚ùå Fehler bei View-Erstellung: {e}")

if __name__ == "__main__":
    main()