name: Create Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  create-release:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Generate changelog
      id: changelog
      run: |
        # Get commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        
        if [ -z "$LAST_TAG" ]; then
          COMMITS=$(git log --oneline --pretty=format:"- %s (%h)" HEAD~10..HEAD)
        else
          COMMITS=$(git log --oneline --pretty=format:"- %s (%h)" $LAST_TAG..HEAD)
        fi
        
        # Create changelog
        cat > CHANGELOG.md << EOF
        # Changelog for ${{ steps.version.outputs.version }}
        
        ## 🚀 New Features
        $(echo "$COMMITS" | grep -i "feat:" || echo "- No new features in this release")
        
        ## 🐛 Bug Fixes  
        $(echo "$COMMITS" | grep -i "fix:" || echo "- No bug fixes in this release")
        
        ## 📚 Documentation
        $(echo "$COMMITS" | grep -i "docs:" || echo "- No documentation updates in this release")
        
        ## 🧪 Testing
        $(echo "$COMMITS" | grep -i "test:" || echo "- No test updates in this release")
        
        ## 🔧 Other Changes
        $(echo "$COMMITS" | grep -v -i -E "(feat:|fix:|docs:|test:)" || echo "- No other changes in this release")
        
        ## 📋 Full Commit History
        $COMMITS
        EOF
        
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat CHANGELOG.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create release package
      run: |
        # Create release directory
        mkdir -p release
        
        # Copy essential files for release
        cp -r *.py release/
        cp -r output/ release/ 2>/dev/null || echo "Output directory not found"
        cp -r lib/ release/ 2>/dev/null || echo "Lib directory not found"
        cp *.md release/
        cp *.sh release/ 2>/dev/null || echo "Shell scripts not found"
        
        # Create requirements.txt
        cat > release/requirements.txt << EOF
        langchain>=0.1.0
        langchain-community>=0.0.10
        langchain-openai>=0.0.5
        streamlit>=1.28.0
        pandas>=1.5.0
        numpy>=1.24.0
        scikit-learn>=1.3.0
        fdb>=2.0.2
        faiss-cpu>=1.7.4
        tiktoken>=0.5.0
        PyYAML>=6.0
        python-dotenv>=1.0.0
        arize-phoenix>=1.0.0
        EOF
        
        # Create installation script
        cat > release/install.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "🚀 Installing WINCASA - Intelligent Database Query System"
        echo "========================================================="
        
        # Check Python version
        python_version=$(python3 -c "import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}')")
        echo "✅ Python version: $python_version"
        
        # Install dependencies
        echo "📦 Installing dependencies..."
        pip install -r requirements.txt
        
        # Install Phoenix monitoring
        echo "🔍 Installing Phoenix monitoring..."
        pip install arize-phoenix || echo "⚠️  Phoenix installation failed (optional)"
        
        # Set up directories
        echo "📁 Setting up directories..."
        mkdir -p output logs
        
        # Make scripts executable
        chmod +x *.sh 2>/dev/null || echo "No shell scripts found"
        
        echo "✅ Installation completed!"
        echo ""
        echo "🎯 Quick Start:"
        echo "  1. Configure your API keys in /home/envs/openai.env"
        echo "  2. Place your Firebird database file (WINCASA2022.FDB)"
        echo "  3. Run: ./start_enhanced_qa_direct.sh"
        echo "  4. Open: http://localhost:8501"
        echo ""
        echo "📊 Phoenix Monitoring:"
        echo "  Dashboard: http://localhost:6006"
        echo ""
        echo "📖 Documentation: README.md"
        EOF
        
        chmod +x release/install.sh
        
        # Create archive
        cd release
        tar -czf ../wincasa-${{ steps.version.outputs.version }}.tar.gz .
        cd ..
        
        # Create zip for Windows users
        cd release
        zip -r ../wincasa-${{ steps.version.outputs.version }}.zip .
        cd ..

    - name: Create GitHub Release
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        release_name: WINCASA ${{ steps.version.outputs.version }}
        body: |
          # WINCASA - Intelligent Database Query System ${{ steps.version.outputs.version }}
          
          ## 🎯 Production-Ready Natural Language Database Query System
          
          **Features:**
          - ✅ **Phoenix AI Observability**: Comprehensive monitoring with dashboard
          - ✅ **Enhanced Multi-Stage RAG**: Intelligent document retrieval
          - ✅ **Direct Firebird Integration**: Optimized database connectivity
          - ✅ **Streamlit Web Interface**: Production-ready UI
          - ✅ **Automated Testing**: 26 comprehensive unit tests
          
          ## 📊 System Metrics
          - **Database**: 151 tables, 517 apartments, 698 residents
          - **Knowledge Base**: 248 YAML files, compiled knowledge base
          - **Performance**: Enhanced Mode 22.5s avg, 63.6% success rate
          - **Monitoring**: Phoenix dashboard at http://localhost:6006
          
          ## 🚀 Installation
          
          ### Quick Start
          ```bash
          # Download and extract release
          tar -xzf wincasa-${{ steps.version.outputs.version }}.tar.gz
          cd wincasa-${{ steps.version.outputs.version }}
          
          # Run installation script
          ./install.sh
          
          # Configure API keys
          echo "OPENAI_API_KEY=your_key_here" > /home/envs/openai.env
          
          # Start system
          ./start_enhanced_qa_direct.sh
          ```
          
          ### URLs
          - **Main Interface**: http://localhost:8501
          - **Phoenix Dashboard**: http://localhost:6006
          
          ${{ steps.changelog.outputs.changelog }}
          
          ## 🔧 System Requirements
          - Python 3.8+
          - Firebird database
          - OpenAI API key
          - 4GB+ RAM recommended
          
          ## 📚 Documentation
          - [Technical Guide](CLAUDE.md)
          - [Implementation Status](implementation_status.md)
          - [Architecture Documentation](architecture_documentation.md)
        draft: false
        prerelease: false

    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./wincasa-${{ steps.version.outputs.version }}.tar.gz
        asset_name: wincasa-${{ steps.version.outputs.version }}.tar.gz
        asset_content_type: application/gzip

    - name: Upload ZIP Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./wincasa-${{ steps.version.outputs.version }}.zip
        asset_name: wincasa-${{ steps.version.outputs.version }}.zip
        asset_content_type: application/zip