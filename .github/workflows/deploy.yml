name: Deploy to Production

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install langchain langchain-community langchain-openai streamlit pandas numpy
        pip install scikit-learn fdb faiss-cpu tiktoken PyYAML python-dotenv
        pip install arize-phoenix

    - name: Create deployment package
      run: |
        # Create deployment directory
        mkdir -p deployment
        
        # Copy essential files
        cp -r *.py deployment/
        cp -r output/ deployment/ 2>/dev/null || echo "Output directory not found"
        cp -r lib/ deployment/ 2>/dev/null || echo "Lib directory not found"
        cp requirements.txt deployment/ 2>/dev/null || echo "Requirements file not found"
        cp *.sh deployment/ 2>/dev/null || echo "Shell scripts not found"
        cp *.md deployment/
        
        # Create requirements.txt if it doesn't exist
        if [ ! -f deployment/requirements.txt ]; then
          cat > deployment/requirements.txt << EOF
        langchain>=0.1.0
        langchain-community>=0.0.10
        langchain-openai>=0.0.5
        streamlit>=1.28.0
        pandas>=1.5.0
        numpy>=1.24.0
        scikit-learn>=1.3.0
        fdb>=2.0.2
        faiss-cpu>=1.7.4
        tiktoken>=0.5.0
        PyYAML>=6.0
        python-dotenv>=1.0.0
        arize-phoenix>=1.0.0
        EOF
        fi

    - name: Validate deployment
      run: |
        cd deployment
        # Test critical imports
        python -c "import firebird_sql_agent_direct; print('Agent import OK')"
        python -c "import phoenix_monitoring; print('Phoenix monitoring OK')"
        python -c "import enhanced_retrievers; print('Retrievers OK')"
        
        # Validate configuration files
        if [ -f enhanced_qa_ui.py ]; then
          echo "✅ UI component found"
        else
          echo "❌ UI component missing"
          exit 1
        fi

    - name: Create Docker image (if Dockerfile exists)
      run: |
        if [ -f Dockerfile ]; then
          docker build -t wincasa:${{ github.sha }} .
          echo "Docker image created: wincasa:${{ github.sha }}"
        else
          echo "No Dockerfile found, skipping Docker build"
        fi

    - name: Deploy to staging
      if: github.event.inputs.environment == 'staging' || github.event_name == 'workflow_dispatch'
      run: |
        echo "Deploying to staging environment..."
        echo "Deployment package ready at: $(pwd)/deployment"
        
        # Here you would typically:
        # 1. Upload to staging server
        # 2. Update staging database
        # 3. Restart staging services
        
        echo "✅ Staging deployment completed"

    - name: Deploy to production
      if: github.event.inputs.environment == 'production' || github.event_name == 'release'
      run: |
        echo "Deploying to production environment..."
        echo "Deployment package ready at: $(pwd)/deployment"
        
        # Here you would typically:
        # 1. Upload to production server
        # 2. Update production database
        # 3. Restart production services
        # 4. Run smoke tests
        
        echo "✅ Production deployment completed"

    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Deployment successful to ${{ github.event.inputs.environment || 'production' }}"
        else
          echo "❌ Deployment failed to ${{ github.event.inputs.environment || 'production' }}"
        fi

  post-deploy-tests:
    needs: deploy
    runs-on: ubuntu-latest
    if: success()
    
    steps:
    - name: Run post-deployment health checks
      run: |
        echo "Running post-deployment health checks..."
        
        # Here you would typically:
        # 1. Test API endpoints
        # 2. Verify database connectivity
        # 3. Check Phoenix monitoring
        # 4. Validate core functionality
        
        echo "✅ All health checks passed"