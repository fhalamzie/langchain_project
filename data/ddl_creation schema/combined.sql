-- Wincasa Datenbank DDL
-- Generiert: 2025-05-31 10:26:42

-- ========== TABELLEN ==========

-- Tabelle: ABRANTEILE
CREATE TABLE ABRANTEILE (
ID INTEGER NULL,
ONR SMALLINT NULL,
KNR INTEGER NULL,
S1 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S2 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S3 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S4 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S5 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S6 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S7 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S8 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S9 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S10 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S11 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S12 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S13 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S14 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S15 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S16 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S17 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S18 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S19 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S20 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S21 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S22 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S23 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S24 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S25 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S26 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S27 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S28 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S29 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S30 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S31 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S32 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S33 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S34 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S35 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S36 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S37 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S38 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S39 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S40 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S41 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S42 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S43 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S44 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S45 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S46 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S47 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S48 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S49 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S50 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S51 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S52 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S53 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S54 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S55 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S56 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S57 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S58 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S59 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S60 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S61 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S62 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S63 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S64 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S65 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S66 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S67 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S68 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S69 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S70 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S71 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S72 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S73 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S74 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S75 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S76 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S77 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S78 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S79 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S80 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S81 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S82 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S83 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S84 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S85 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S86 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S87 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S88 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S89 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S90 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S91 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S92 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S93 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S94 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S95 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S96 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S97 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S98 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S99 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
ENR INTEGER NULL,
HEIZK NUMERIC(15,2) NULL,
WIPLHEIZK NUMERIC(15,2) NULL,
    PRIMARY KEY (ID, ONR, KNR)
);

-- Tabelle: ABRFIRM
CREATE TABLE ABRFIRM (
ID INTEGER NULL,
FIRMA VARCHAR NULL,
STR VARCHAR NULL,
ORT VARCHAR NULL,
TEL VARCHAR NULL,
FAX VARCHAR NULL,
MAIL VARCHAR NULL,
STANDARD CHAR NULL,
KUNDENNR VARCHAR NULL,
    PRIMARY KEY (ID)
);

-- Tabelle: ANRUF
CREATE TABLE ANRUF (
ID INTEGER NULL,
VORGANG_ID INTEGER NULL,
ONR INTEGER NULL,
DATUM TIMESTAMP NULL,
STATUS SMALLINT NULL,
BETREFF VARCHAR NULL,
NAME VARCHAR NULL,
PRIORITAET SMALLINT NULL DEFAULT DEFAULT 0,
KATEGORIE_ID INTEGER NULL,
ENR INTEGER NULL,
BKNR INTEGER NULL,
EKNR INTEGER NULL,
KKNR INTEGER NULL,
NOTIZ BLOB NULL,
TYP SMALLINT NULL DEFAULT DEFAULT 0,
TEL VARCHAR NULL,
ERINNERUNG TIMESTAMP NULL,
ERINNERUNG_IN SMALLINT NULL,
ERFASST TIMESTAMP NULL,
ZULETZT TIMESTAMP NULL,
ERFASST_ID INTEGER NULL,
ZULETZT_ID INTEGER NULL,
IDM1 INTEGER NULL,
IDM2 INTEGER NULL,
IDM3 INTEGER NULL,
IDM4 INTEGER NULL,
IDM5 INTEGER NULL,
IDM6 INTEGER NULL,
IDM7 INTEGER NULL,
IDM8 INTEGER NULL,
IDM9 INTEGER NULL,
IDM10 INTEGER NULL,
IDM11 INTEGER NULL,
IDM12 INTEGER NULL,
OBJ_INFO VARCHAR NULL,
ISVORLAGE SMALLINT NULL DEFAULT DEFAULT 0,
BEWNR INTEGER NULL DEFAULT DEFAULT -1,
EIGNR INTEGER NULL DEFAULT DEFAULT -1,
    PRIMARY KEY (ID),
    FOREIGN KEY (KATEGORIE_ID) REFERENCES KATEGORIE_CRM(ID),
    FOREIGN KEY (VORGANG_ID) REFERENCES VORGANG(ID)
);

-- Tabelle: ANTBACK
CREATE TABLE ANTBACK (
ONR INTEGER NULL,
S1 NUMERIC(15,4) NULL,
S2 NUMERIC(15,4) NULL,
S3 NUMERIC(15,4) NULL,
S4 NUMERIC(15,4) NULL,
S5 NUMERIC(15,4) NULL,
S6 NUMERIC(15,4) NULL,
S7 NUMERIC(15,4) NULL,
S8 NUMERIC(15,4) NULL,
S9 NUMERIC(15,4) NULL,
S10 NUMERIC(15,4) NULL,
S11 NUMERIC(15,4) NULL,
S12 NUMERIC(15,4) NULL,
S13 NUMERIC(15,4) NULL,
S14 NUMERIC(15,4) NULL,
S15 NUMERIC(15,4) NULL,
S16 NUMERIC(15,4) NULL,
S17 NUMERIC(15,4) NULL,
S18 NUMERIC(15,4) NULL,
S19 NUMERIC(15,4) NULL,
S20 NUMERIC(15,4) NULL,
S21 NUMERIC(15,4) NULL,
S22 NUMERIC(15,4) NULL,
S23 NUMERIC(15,4) NULL,
S24 NUMERIC(15,4) NULL,
S25 NUMERIC(15,4) NULL,
S26 NUMERIC(15,4) NULL,
S27 NUMERIC(15,4) NULL,
S28 NUMERIC(15,4) NULL,
S29 NUMERIC(15,4) NULL,
S30 NUMERIC(15,4) NULL,
S31 NUMERIC(15,4) NULL,
S32 NUMERIC(15,4) NULL,
S33 NUMERIC(15,4) NULL,
S34 NUMERIC(15,4) NULL,
S35 NUMERIC(15,4) NULL,
S36 NUMERIC(15,4) NULL,
S37 NUMERIC(15,4) NULL,
S38 NUMERIC(15,4) NULL,
S39 NUMERIC(15,4) NULL,
S40 NUMERIC(15,4) NULL,
S41 NUMERIC(15,4) NULL,
S42 NUMERIC(15,4) NULL,
S43 NUMERIC(15,4) NULL,
S44 NUMERIC(15,4) NULL,
S45 NUMERIC(15,4) NULL,
S46 NUMERIC(15,4) NULL,
S47 NUMERIC(15,4) NULL,
S48 NUMERIC(15,4) NULL,
S49 NUMERIC(15,4) NULL,
S50 NUMERIC(15,4) NULL,
S51 NUMERIC(15,4) NULL,
S52 NUMERIC(15,4) NULL,
S53 NUMERIC(15,4) NULL,
S54 NUMERIC(15,4) NULL,
S55 NUMERIC(15,4) NULL,
S56 NUMERIC(15,4) NULL,
S57 NUMERIC(15,4) NULL,
S58 NUMERIC(15,4) NULL,
S59 NUMERIC(15,4) NULL,
S60 NUMERIC(15,4) NULL,
S61 NUMERIC(15,4) NULL,
S62 NUMERIC(15,4) NULL,
S63 NUMERIC(15,4) NULL,
S64 NUMERIC(15,4) NULL,
S65 NUMERIC(15,4) NULL,
S66 NUMERIC(15,4) NULL,
S67 NUMERIC(15,4) NULL,
S68 NUMERIC(15,4) NULL,
S69 NUMERIC(15,4) NULL,
S70 NUMERIC(15,4) NULL,
S71 NUMERIC(15,4) NULL,
S72 NUMERIC(15,4) NULL,
S73 NUMERIC(15,4) NULL,
S74 NUMERIC(15,4) NULL,
S75 NUMERIC(15,4) NULL,
S76 NUMERIC(15,4) NULL,
S77 NUMERIC(15,4) NULL,
S78 NUMERIC(15,4) NULL,
S79 NUMERIC(15,4) NULL,
S80 NUMERIC(15,4) NULL,
S81 NUMERIC(15,4) NULL,
S82 NUMERIC(15,4) NULL,
S83 NUMERIC(15,4) NULL,
S84 NUMERIC(15,4) NULL,
S85 NUMERIC(15,4) NULL,
S86 NUMERIC(15,4) NULL,
S87 NUMERIC(15,4) NULL,
S88 NUMERIC(15,4) NULL,
S89 NUMERIC(15,4) NULL,
S90 NUMERIC(15,4) NULL,
S91 NUMERIC(15,4) NULL,
S92 NUMERIC(15,4) NULL,
S93 NUMERIC(15,4) NULL,
S94 NUMERIC(15,4) NULL,
S95 NUMERIC(15,4) NULL,
S96 NUMERIC(15,4) NULL,
S97 NUMERIC(15,4) NULL,
S98 NUMERIC(15,4) NULL,
S99 NUMERIC(15,4) NULL,
KONTO INTEGER NULL,
HEIZK NUMERIC(15,2) NULL,
H1 NUMERIC(15,2) NULL,
H2 NUMERIC(15,2) NULL,
H3 NUMERIC(15,2) NULL,
H4 NUMERIC(15,2) NULL,
ZF1 NUMERIC(15,4) NULL,
ZF2 NUMERIC(15,4) NULL,
ZF3 NUMERIC(15,4) NULL,
ZF4 NUMERIC(15,4) NULL,
BACKUP_ID INTEGER NULL,
KNR INTEGER NULL,
    PRIMARY KEY (ONR, BACKUP_ID, KNR),
    FOREIGN KEY (ONR) REFERENCES OBJEKTE(ONR),
    FOREIGN KEY (BACKUP_ID) REFERENCES ANTBACK_ID(BACKUP_ID),
    FOREIGN KEY (ONR) REFERENCES KONTEN(ONR),
    FOREIGN KEY (ONR) REFERENCES KONTEN(KNR),
    FOREIGN KEY (KNR) REFERENCES KONTEN(ONR),
    FOREIGN KEY (KNR) REFERENCES KONTEN(KNR)
);

-- Tabelle: ANTBACK_ID
CREATE TABLE ANTBACK_ID (
BACKUP_ID INTEGER NULL,
BEZ VARCHAR NULL,
ONR INTEGER NULL,
    PRIMARY KEY (BACKUP_ID),
    FOREIGN KEY (ONR) REFERENCES OBJEKTE(ONR)
);

-- Tabelle: ANTEILE
CREATE TABLE ANTEILE (
ONR SMALLINT NULL,
KNR INTEGER NULL,
S1 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S2 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S3 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S4 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S5 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S6 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S7 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S8 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S9 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S10 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S11 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S12 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S13 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S14 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S15 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S16 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S17 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S18 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S19 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S20 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S21 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S22 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S23 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S24 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S25 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S26 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S27 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S28 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S29 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S30 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S31 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S32 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S33 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S34 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S35 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S36 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S37 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S38 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S39 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S40 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S41 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S42 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S43 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S44 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S45 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S46 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S47 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S48 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S49 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S50 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S51 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S52 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S53 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S54 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S55 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S56 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S57 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S58 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S59 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S60 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S61 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S62 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S63 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S64 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S65 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S66 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S67 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S68 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S69 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S70 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S71 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S72 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S73 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S74 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S75 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S76 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S77 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S78 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S79 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S80 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S81 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S82 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S83 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S84 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S85 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S86 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S87 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S88 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S89 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S90 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S91 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S92 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S93 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S94 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S95 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S96 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S97 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S98 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
S99 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
HEIZK NUMERIC(15,2) NULL DEFAULT DEFAULT 0,
H1 NUMERIC(15,2) NULL DEFAULT DEFAULT 0,
H2 NUMERIC(15,2) NULL DEFAULT DEFAULT 0,
H3 NUMERIC(15,2) NULL DEFAULT DEFAULT 0,
H4 NUMERIC(15,2) NULL DEFAULT DEFAULT 0,
ZF1 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
ZF2 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
ZF3 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
ZF4 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
WIPLHEIZK NUMERIC(15,2) NULL DEFAULT DEFAULT 0,
HEIZKWHG NUMERIC(15,2) NULL DEFAULT DEFAULT 0,
BEZ VARCHAR NULL,
ID INTEGER NULL,
H5 NUMERIC(15,2) NULL DEFAULT DEFAULT 0,
ZF5 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
ABRTAGE INTEGER NULL,
NWG NUMERIC(18,2) NULL DEFAULT DEFAULT 0,
    PRIMARY KEY (ONR, KNR),
    FOREIGN KEY (ONR) REFERENCES KONTEN(ONR),
    FOREIGN KEY (ONR) REFERENCES KONTEN(KNR),
    FOREIGN KEY (KNR) REFERENCES KONTEN(ONR),
    FOREIGN KEY (KNR) REFERENCES KONTEN(KNR)
);

-- Tabelle: ARCHIV_TREE
CREATE TABLE ARCHIV_TREE (
NR INTEGER NULL,
BEZ VARCHAR NULL,
ICON SMALLINT NULL,
    PRIMARY KEY (NR)
);

-- Tabelle: AUFGABE
CREATE TABLE AUFGABE (
ID INTEGER NULL,
VORGANG_ID INTEGER NULL,
ONR INTEGER NULL,
BAUTEIL_ID INTEGER NULL,
KATEGORIE_ID INTEGER NULL,
BEGINNT_AM TIMESTAMP NULL,
ENDET_AM TIMESTAMP NULL,
STATUS SMALLINT NULL,
BETREFF VARCHAR NULL,
PRIORITAET SMALLINT NULL,
ENR INTEGER NULL,
BKNR INTEGER NULL,
EKNR INTEGER NULL,
ERINNERUNG TIMESTAMP NULL,
SERIE INTEGER NULL,
NOTIZ BLOB NULL,
PROZENT_ERLEDIGT SMALLINT NULL,
BESTAETIGUNG SMALLINT NULL,
ERINNERUNG_IN SMALLINT NULL,
ZULETZT TIMESTAMP NULL,
ERFASST TIMESTAMP NULL,
ZULETZT_ID INTEGER NULL,
ERFASST_ID INTEGER NULL,
ANZ_DOC INTEGER NULL,
IDF1 INTEGER NULL,
IDF2 INTEGER NULL,
IDF3 INTEGER NULL,
IDF4 INTEGER NULL,
IDF5 INTEGER NULL,
IDM1 INTEGER NULL,
IDM2 INTEGER NULL,
IDM3 INTEGER NULL,
IDM4 INTEGER NULL,
IDM5 INTEGER NULL,
IDM6 INTEGER NULL,
IDM7 INTEGER NULL,
IDM8 INTEGER NULL,
IDM9 INTEGER NULL,
IDM10 INTEGER NULL,
IDM11 INTEGER NULL,
IDM12 INTEGER NULL,
OBJ_INFO VARCHAR NULL,
ENDET CHAR NULL,
ISVORLAGE SMALLINT NULL DEFAULT DEFAULT 0,
IDF6 INTEGER NULL,
IDF7 INTEGER NULL,
IDF8 INTEGER NULL,
IDF9 INTEGER NULL,
IDF10 INTEGER NULL,
CPSTATUS INTEGER NULL,
ARBEITSAUFWAND NUMERIC(12,2) NULL,
    PRIMARY KEY (ID),
    FOREIGN KEY (ONR) REFERENCES OBJEKTE(ONR),
    FOREIGN KEY (KATEGORIE_ID) REFERENCES KATEGORIE_CRM(ID),
    FOREIGN KEY (VORGANG_ID) REFERENCES VORGANG(ID)
);

-- Tabelle: AUFTRAG
CREATE TABLE AUFTRAG (
ANR INTEGER NULL,
EMPF VARCHAR NULL,
AGEBER VARCHAR NULL,
EMPFBANK VARCHAR NULL,
EMPFORT VARCHAR NULL,
ORT VARCHAR NULL,
AGEBERORT VARCHAR NULL,
AGEBERSTR VARCHAR NULL,
EMPFKONTO VARCHAR NULL,
AGEBERKONTO VARCHAR NULL,
EMPFBLZ VARCHAR NULL,
AGEBERBLZ VARCHAR NULL,
BETRAG NUMERIC(15,2) NULL,
DATUM DATE NULL,
AGEBERBANK VARCHAR NULL,
VZWECK1 VARCHAR NULL,
VZWECK2 VARCHAR NULL,
EMPFSTR VARCHAR NULL,
BANKNR INTEGER NULL,
AART SMALLINT NULL,
KTEXT BLOB NULL,
SCHECKSTR VARCHAR NULL,
SCHECKNR VARCHAR NULL,
WSYMBOL VARCHAR NULL,
ABNR INTEGER NULL,
DRUCKEN CHAR NULL DEFAULT DEFAULT 'N',
ONR INTEGER NULL,
KNR INTEGER NULL,
OP INTEGER NULL,
EMPFBIC VARCHAR NULL,
EMPFIBAN VARCHAR NULL,
AGEBERBIC VARCHAR NULL,
AGEBERIBAN VARCHAR NULL,
BETRAG_SKONTO NUMERIC(15,2) NULL,
    PRIMARY KEY (ANR)
);

-- Tabelle: A_EXP
CREATE TABLE A_EXP (
ONR SMALLINT NULL,
ENR SMALLINT NULL,
NUTZERNR VARCHAR NULL,
OBEZ VARCHAR NULL,
OSTRASSE VARCHAR NULL,
OPLZORT VARCHAR NULL,
EBEZ VARCHAR NULL,
EBEWOHNER VARCHAR NULL,
ABRART SMALLINT NULL,
VNAME VARCHAR NULL,
    PRIMARY KEY (ONR, ENR)
);

-- Tabelle: BANKEN
CREATE TABLE BANKEN (
NR INTEGER NULL,
ART SMALLINT NULL,
KURZBEZ VARCHAR NULL,
BEZEICHNUNG VARCHAR NULL,
BLZ VARCHAR NULL,
KONTO VARCHAR NULL,
INHABER VARCHAR NULL,
KSTAND NUMERIC(15,2) NULL DEFAULT DEFAULT 0,
STR VARCHAR NULL,
PLZORT VARCHAR NULL,
LFALTNR INTEGER NULL,
KAUSZUGNR INTEGER NULL,
KAUSZUGBLATT INTEGER NULL,
DATEVKNR SMALLINT NULL,
ONLNEU CHAR NULL DEFAULT DEFAULT 'N',
ONLVON DATE NULL,
ONLBIS DATE NULL,
ONLUMSVON NUMERIC(15,2) NULL DEFAULT DEFAULT 0,
ONLUMSBIS NUMERIC(15,2) NULL DEFAULT DEFAULT 0,
ONLZULVON DATE NULL,
ONLZULBIS DATE NULL,
ONLGEBONR INTEGER NULL,
ONLGEBKNR INTEGER NULL,
ONLKASSE INTEGER NULL,
ONLUMS INTEGER NULL,
BIC VARCHAR NULL,
IBAN VARCHAR NULL,
    PRIMARY KEY (NR)
);

-- Tabelle: BANKORT
CREATE TABLE BANKORT (
BANK VARCHAR NULL,
BLZ VARCHAR NULL,
KURZBEZ VARCHAR NULL,
ART SMALLINT NULL,
BIC VARCHAR NULL,
    PRIMARY KEY (BANK)
);

-- Tabelle: BANK_AUSNAHMEN
CREATE TABLE BANK_AUSNAHMEN (
ID INTEGER NOT NULL,
BLZ_BIC VARCHAR NOT NULL DEFAULT DEFAULT '',
KONTO_IBAN VARCHAR NOT NULL DEFAULT DEFAULT '',
    PRIMARY KEY (ID)
);

-- Tabelle: BAUSZUG940
CREATE TABLE BAUSZUG940 (
NR INTEGER NULL,
STATUS SMALLINT NULL,
BETRAG NUMERIC(15,2) NULL,
SH CHAR NULL,
VERWBLZ VARCHAR NULL,
VERWKONTO VARCHAR NULL,
NAMEKUNDE VARCHAR NULL,
DATUM DATE NULL,
VZWECK1 VARCHAR NULL,
UMSINFO VARCHAR NULL,
GVC SMALLINT NULL,
KUNDEBLZ VARCHAR NULL,
KUNDEKONTO VARCHAR NULL,
BETRAGOPC NUMERIC(15,2) NULL,
SHC CHAR NULL,
BKONTOC SMALLINT NULL,
BKONTOSTRC VARCHAR NULL,
KNR INTEGER NULL,
KNRSTR VARCHAR NULL,
KBEZ VARCHAR NULL,
ONR SMALLINT NULL,
GEBUCHT CHAR NULL,
WINCASA VARCHAR NULL,
WINCASA2 CHAR NULL,
RUECKBKTO INTEGER NULL,
OPBNR INTEGER NULL,
GKTOAKT INTEGER NULL,
BELNR INTEGER NULL,
MWST NUMERIC(15,2) NULL,
BNR INTEGER NULL,
ART INTEGER NULL,
TEXT VARCHAR NULL,
    PRIMARY KEY (NR)
);

-- Tabelle: BENUTZERGRUPPEN
CREATE TABLE BENUTZERGRUPPEN (
ID INTEGER NULL,
NAME VARCHAR NULL,
    PRIMARY KEY (ID)
);

-- Tabelle: BENUTZERRECHTE
CREATE TABLE BENUTZERRECHTE (
ID INTEGER NULL,
BGR_ID INTEGER NULL,
GRUPPE VARCHAR NULL,
UNTERGRUPPE VARCHAR NULL,
FUNKTION VARCHAR NULL,
RECHTE CHAR NULL,
FUNKTION_NR INTEGER NULL,
    PRIMARY KEY (ID),
    FOREIGN KEY (BGR_ID) REFERENCES BENUTZERGRUPPEN(ID)
);

-- Tabelle: BESCHLUSS
CREATE TABLE BESCHLUSS (
ONR INTEGER NULL,
LFDNR INTEGER NULL,
DATUM DATE NULL,
ORT VARCHAR NULL,
ART SMALLINT NULL,
STATUS SMALLINT NULL,
THEMA VARCHAR NULL,
BEARBEITER VARCHAR NULL,
OEFFNUNGSKLAUSEL CHAR NULL,
TEXT BLOB NULL,
GEHOERTZU INTEGER NULL,
THEMA_INDEX VARCHAR NULL,
STATUS_TEXT VARCHAR NULL,
DATUM_BEARBEITET DATE NULL,
VERMERK BLOB NULL,
    PRIMARY KEY (ONR, LFDNR),
    FOREIGN KEY (ONR) REFERENCES OBJEKTE(ONR)
);

-- Tabelle: BESCHLUSS_ANH
CREATE TABLE BESCHLUSS_ANH (
NR INTEGER NULL,
ONR INTEGER NULL,
LFDNR INTEGER NULL,
PFAD VARCHAR NULL,
INFO VARCHAR NULL,
    PRIMARY KEY (NR),
    FOREIGN KEY (ONR) REFERENCES BESCHLUSS(ONR),
    FOREIGN KEY (ONR) REFERENCES BESCHLUSS(LFDNR),
    FOREIGN KEY (LFDNR) REFERENCES BESCHLUSS(ONR),
    FOREIGN KEY (LFDNR) REFERENCES BESCHLUSS(LFDNR)
);

-- Tabelle: BESCHLUSS_V
CREATE TABLE BESCHLUSS_V (
NR INTEGER NULL,
ONR INTEGER NULL,
LFDNR INTEGER NULL,
DATUM DATE NULL,
BEARBEITER VARCHAR NULL,
VERMERK BLOB NULL,
    PRIMARY KEY (NR),
    FOREIGN KEY (ONR) REFERENCES BESCHLUSS(ONR),
    FOREIGN KEY (ONR) REFERENCES BESCHLUSS(LFDNR),
    FOREIGN KEY (LFDNR) REFERENCES BESCHLUSS(ONR),
    FOREIGN KEY (LFDNR) REFERENCES BESCHLUSS(LFDNR)
);

-- Tabelle: BETREUT
CREATE TABLE BETREUT (
ONR INTEGER NULL,
KNR INTEGER NULL,
PFLEGESTUFE VARCHAR NULL,
PFLEGEORGA VARCHAR NULL,
VERSICHERUNG1 VARCHAR NULL,
VNUMMER1 VARCHAR NULL,
VTEL1 VARCHAR NULL,
VFAX1 VARCHAR NULL,
VSTRASSE1 VARCHAR NULL,
VORT1 VARCHAR NULL,
VBEARBEITER1 VARCHAR NULL,
VERSICHERUNG2 VARCHAR NULL,
VNUMMER2 VARCHAR NULL,
VTEL2 VARCHAR NULL,
VFAX2 VARCHAR NULL,
VSTRASSE2 VARCHAR NULL,
VORT2 VARCHAR NULL,
VBEARBEITER2 VARCHAR NULL,
VORKEHRUNGEN BLOB NULL,
KRANKHEIT BLOB NULL,
DAUERMED BLOB NULL,
BEDARFMED BLOB NULL,
HILFSMITTEL BLOB NULL,
PFLEGELEISTUNGEN BLOB NULL,
PVER CHAR NULL,
VV CHAR NULL,
BVER CHAR NULL,
FACHA1ID INTEGER NULL,
FACHA2ID INTEGER NULL,
HAUSAID INTEGER NULL,
TODID INTEGER NULL,
GESCHAEFTID INTEGER NULL,
SONSTLEISTUNGEN BLOB NULL,
ANG1ID INTEGER NULL,
ANG2ID INTEGER NULL,
ANG3ID INTEGER NULL,
GEBURTSTAG DATE NULL,
GEBURTSORT VARCHAR NULL,
GEBURTSNAME VARCHAR NULL,
KONFESSION VARCHAR NULL,
FAMILIENSTAND VARCHAR NULL,
INTERESSEN BLOB NULL,
PROBLEME BLOB NULL,
ESSEN VARCHAR NULL,
    PRIMARY KEY (ONR, KNR),
    FOREIGN KEY (ONR) REFERENCES KONTEN(ONR),
    FOREIGN KEY (ONR) REFERENCES KONTEN(KNR),
    FOREIGN KEY (KNR) REFERENCES KONTEN(ONR),
    FOREIGN KEY (KNR) REFERENCES KONTEN(KNR)
);

-- Tabelle: BEWADR
CREATE TABLE BEWADR (
BEWNR INTEGER NULL,
BANREDE VARCHAR NULL,
BANREDE2 VARCHAR NULL,
BBRIEFAN VARCHAR NULL,
BBRIEFAN2 VARCHAR NULL,
BVNAME VARCHAR NULL,
BNAME VARCHAR NULL,
BVNAME2 VARCHAR NULL,
BNAME2 VARCHAR NULL,
BAGEBER VARCHAR NULL,
BSTR VARCHAR NULL,
BPLZORT VARCHAR NULL,
BBANK VARCHAR NULL,
BTEL VARCHAR NULL,
BFAX VARCHAR NULL,
BTEL2 VARCHAR NULL,
BBLZ VARCHAR NULL,
BKONTO VARCHAR NULL,
BKONTOINH VARCHAR NULL,
BTITEL VARCHAR NULL,
BTITEL2 VARCHAR NULL,
BZUSATZ VARCHAR NULL,
BZUSATZ2 VARCHAR NULL,
BEMAIL VARCHAR NULL,
BHANDY VARCHAR NULL,
BINTERNET VARCHAR NULL,
EMAIL_JA CHAR NULL DEFAULT DEFAULT 'N',
FAX_JA CHAR NULL DEFAULT DEFAULT 'N',
GEBURTSDATUM DATE NULL,
GEBURTSDATUM2 DATE NULL,
BBIC VARCHAR NULL,
BIBAN VARCHAR NULL,
BSTR2 VARCHAR NULL,
BPLZORT2 VARCHAR NULL,
BLAND CHAR NULL,
BVIRTKTO VARCHAR NULL,
BTELBEW2 VARCHAR NULL,
BTEL2BEW2 VARCHAR NULL,
BHANDYBEW2 VARCHAR NULL,
BFAXBEW2 VARCHAR NULL,
BEMAILBEW2 VARCHAR NULL,
BBANK2 VARCHAR NULL,
BBLZ2 VARCHAR NULL,
BKONTO2 VARCHAR NULL,
BKONTOINH2 VARCHAR NULL,
BBIC2 VARCHAR NULL,
BIBAN2 VARCHAR NULL,
ADR_NR_POSTANSCHRIFT INTEGER NULL,
EINWILLIGUNG VARCHAR NULL DEFAULT DEFAULT 'NNNNNN',
CPSTATUS SMALLINT NULL,
CPDATUMZUGANG DATE NULL,
POSTANSCHRIFT_ART VARCHAR NULL,
ANONYM CHAR NULL DEFAULT DEFAULT 'N',
KOMMUNIKATIONSKANAL SMALLINT NULL,
BFIRMA CHAR NULL,
BFIRMANAME VARCHAR NULL,
    PRIMARY KEY (BEWNR)
);

-- Tabelle: BEWOHNER
CREATE TABLE BEWOHNER (
ONR SMALLINT NULL,
KNR INTEGER NULL,
ENR SMALLINT NULL,
ID INTEGER NULL,
Z1 NUMERIC(15,2) NULL,
Z2 NUMERIC(15,2) NULL,
Z3 NUMERIC(15,2) NULL,
Z4 NUMERIC(15,2) NULL,
Z5 NUMERIC(15,2) NULL,
Z6 NUMERIC(15,2) NULL,
Z7 NUMERIC(15,2) NULL,
Z8 NUMERIC(15,2) NULL,
MIETE1 NUMERIC(15,2) NULL,
MIETE2 NUMERIC(15,2) NULL,
MIETE3 NUMERIC(15,2) NULL,
MIETE4 NUMERIC(15,2) NULL,
MIETDATUM DATE NULL,
KAUT_VEREINBART NUMERIC(15,2) NULL,
KAUT_ZEILE1 VARCHAR NULL,
KAUT_ZEILE2 VARCHAR NULL,
KAUT_ZEILE3 VARCHAR NULL,
KAUT_ABGERECHNET DATE NULL,
KAUT_BEZ_KONTO VARCHAR NULL,
KAUT_KONTO VARCHAR NULL,
KAUT_BANK VARCHAR NULL,
KAUT_BLZ VARCHAR NULL,
MIETDATUM1 DATE NULL,
MIETDATUM2 DATE NULL,
MIETDATUM3 DATE NULL,
MIETDATUM4 DATE NULL,
BLASTJA CHAR NULL DEFAULT DEFAULT 'N',
BMAHNSPERRE CHAR NULL DEFAULT DEFAULT 'N',
VABSCHLUS DATE NULL,
VBEGINN DATE NULL,
VENDE DATE NULL,
EERHDATUM DATE NULL,
VNAMEMIETER VARCHAR NULL,
VNAMEVERMIETER VARCHAR NULL,
VNOTIZ BLOB NULL,
VKFRIST INTEGER NULL,
VZUMJAHRESENDE CHAR NULL DEFAULT DEFAULT 'J',
BANREDE VARCHAR NULL,
BANREDE2 VARCHAR NULL,
BBRIEFAN VARCHAR NULL,
BBRIEFAN2 VARCHAR NULL,
BVNAME VARCHAR NULL,
BNAME VARCHAR NULL,
BVNAME2 VARCHAR NULL,
BNAME2 VARCHAR NULL,
BAGEBER VARCHAR NULL,
BSTR VARCHAR NULL,
BPLZORT VARCHAR NULL,
BBANK VARCHAR NULL,
BTEL VARCHAR NULL,
BFAX VARCHAR NULL,
BTEL2 VARCHAR NULL,
BBLZ VARCHAR NULL,
BKONTO VARCHAR NULL,
BABRVON DATE NULL,
BABRBIS DATE NULL,
BGEKAM DATE NULL,
BBESTAETIGT VARCHAR NULL,
BVON VARCHAR NULL,
BWEGEN VARCHAR NULL,
BABNMIETER DATE NULL,
BABNVERMIETER DATE NULL,
BMWSTAUSW CHAR NULL DEFAULT DEFAULT 'N',
BMWSTSATZ SMALLINT NULL,
BKONTOINH VARCHAR NULL,
BKURZ VARCHAR NULL,
BTITEL VARCHAR NULL,
BTITEL2 VARCHAR NULL,
BZUSATZ VARCHAR NULL,
BZUSATZ2 VARCHAR NULL,
BEMAIL VARCHAR NULL,
BHANDY VARCHAR NULL,
MIETE5 NUMERIC(15,2) NULL,
MIETE6 NUMERIC(15,2) NULL,
MIETDATUM5 DATE NULL,
MIETDATUM6 DATE NULL,
VERTRART SMALLINT NULL,
ZA1 NUMERIC(15,2) NULL,
ZA2 NUMERIC(15,2) NULL,
ZA3 NUMERIC(15,2) NULL,
ZA4 NUMERIC(15,2) NULL,
ZA5 NUMERIC(15,2) NULL,
ZA6 NUMERIC(15,2) NULL,
ZA7 NUMERIC(15,2) NULL,
ZA8 NUMERIC(15,2) NULL,
STAFFEL CHAR NULL DEFAULT DEFAULT 'N',
MIETE7 NUMERIC(15,2) NULL,
MIETE8 NUMERIC(15,2) NULL,
MIETE9 NUMERIC(15,2) NULL,
MIETE10 NUMERIC(15,2) NULL,
MIETDATUM7 DATE NULL,
MIETDATUM8 DATE NULL,
MIETDATUM9 DATE NULL,
MIETDATUM10 DATE NULL,
ZADATUM1 DATE NULL,
ZADATUM2 DATE NULL,
ZADATUM3 DATE NULL,
ZADATUM4 DATE NULL,
ZADATUM5 DATE NULL,
ZADATUM6 DATE NULL,
ZADATUM7 DATE NULL,
ZADATUM8 DATE NULL,
ZDATUM1 DATE NULL,
ZDATUM2 DATE NULL,
ZDATUM3 DATE NULL,
ZDATUM4 DATE NULL,
ZDATUM5 DATE NULL,
ZDATUM6 DATE NULL,
ZDATUM7 DATE NULL,
ZDATUM8 DATE NULL,
BKAUTION3 NUMERIC(15,2) NULL DEFAULT DEFAULT 0,
BDKAUTION1 DATE NULL,
BDKAUTION2 DATE NULL,
BDKAUTION3 DATE NULL,
KAUTVEREINB NUMERIC(15,2) NULL,
BKAUTIONMEMO BLOB NULL,
BINTERNET VARCHAR NULL,
DRUCKWAS SMALLINT NULL,
BEWSTATUS SMALLINT NULL,
BEWWARTE CHAR NULL,
BEWWARTEDATUM DATE NULL,
BEWWARTENR INTEGER NULL,
GEKDATUM DATE NULL,
SEV SMALLINT NULL,
EMAIL_JA CHAR NULL DEFAULT DEFAULT 'N',
FAX_JA CHAR NULL DEFAULT DEFAULT 'N',
DAUERAUFTRAG CHAR NULL DEFAULT DEFAULT 'N',
GEBURTSDATUM DATE NULL,
GEBURTSDATUM2 DATE NULL,
BNWG CHAR NULL DEFAULT DEFAULT 'N',
BBIC VARCHAR NULL,
BIBAN VARCHAR NULL,
SOLLTAG SMALLINT NULL DEFAULT DEFAULT 1,
IM_INDEX SMALLINT NULL,
IM_PROZMETHODE CHAR NULL,
IM_BASISJAHR SMALLINT NULL,
IM_DIFF NUMERIC(18,2) NULL,
IM_ERREICHEN CHAR NULL,
IM_MONAT SMALLINT NULL,
IM_JAHR SMALLINT NULL,
IM_ERHPROZ NUMERIC(18,1) NULL,
IM_ISINDEXMIETE CHAR NULL,
IM_INFO BLOB NULL,
IM_STATUS SMALLINT NULL,
IM_VPI_AKT NUMERIC(18,1) NULL,
IM_VPI_DATUM_AKT DATE NULL,
IM_PROZ_SCHWELLE CHAR NULL,
BSTR2 VARCHAR NULL,
BPLZORT2 VARCHAR NULL,
SEPA_MAN_NR VARCHAR NULL,
SEPA_MAN_DAT DATE NULL,
ADR_NR1 INTEGER NULL,
ADR_NR2 INTEGER NULL,
ADR_NR3 INTEGER NULL,
ADR_NR4 INTEGER NULL,
GESCHOSS SMALLINT NULL,
MIETEINNAHME_ART SMALLINT NULL,
SEPA_MAN_ART SMALLINT NULL DEFAULT DEFAULT 0,
KAUT_BIC VARCHAR NULL,
KAUT_IBAN VARCHAR NULL,
KAUT_BERECHNUNG SMALLINT NULL,
KAUT_VERZINSUNG_ART SMALLINT NULL,
KAUT_ZINSSATZREIHE INTEGER NULL,
KAUT_ZINSSATZ_FEST NUMERIC(18,2) NULL,
BLAND CHAR NULL,
SEPA_LS_TEXTSCHL SMALLINT NULL DEFAULT DEFAULT 5,
BVIRTKTO VARCHAR NULL,
WOHNUNGSGEBERBESCHEINIGUNG BLOB NULL,
WGEBERBESCH_PERSONEN BLOB NULL,
BTELBEW2 VARCHAR NULL,
BTEL2BEW2 VARCHAR NULL,
BHANDYBEW2 VARCHAR NULL,
BFAXBEW2 VARCHAR NULL,
BEMAILBEW2 VARCHAR NULL,
BBANK2 VARCHAR NULL,
BBLZ2 VARCHAR NULL,
BKONTO2 VARCHAR NULL,
BKONTOINH2 VARCHAR NULL,
BBIC2 VARCHAR NULL,
BIBAN2 VARCHAR NULL,
BUERGSCHAFT VARCHAR NULL,
BUERGSCHAFT_JN CHAR NULL,
EINWILLIGUNG VARCHAR NULL DEFAULT DEFAULT 'NNNNNN',
ADR_NR_POSTANSCHRIFT INTEGER NULL,
PFAENDUNG CHAR NULL,
BEWNR INTEGER NULL,
BEWWARTEZ1 NUMERIC(15,2) NULL,
BEWWARTEZ2 NUMERIC(15,2) NULL,
BEWWARTEZ3 NUMERIC(15,2) NULL,
BEWWARTEZ4 NUMERIC(15,2) NULL,
BEWWARTEZ5 NUMERIC(15,2) NULL,
BEWWARTEZ6 NUMERIC(15,2) NULL,
BEWWARTEZ7 NUMERIC(15,2) NULL,
BEWWARTEZ8 NUMERIC(15,2) NULL,
    PRIMARY KEY (ONR, KNR),
    FOREIGN KEY (ONR) REFERENCES KONTEN(ONR),
    FOREIGN KEY (ONR) REFERENCES KONTEN(KNR),
    FOREIGN KEY (KNR) REFERENCES KONTEN(ONR),
    FOREIGN KEY (KNR) REFERENCES KONTEN(KNR),
    FOREIGN KEY (BEWNR) REFERENCES BEWADR(BEWNR)
);

-- Tabelle: BGHUMSTELL
CREATE TABLE BGHUMSTELL (
ID INTEGER NULL,
ONR INTEGER NULL,
JAHR VARCHAR NULL,
STATUS SMALLINT NULL,
GESKOSTEN NUMERIC(18,2) NULL DEFAULT DEFAULT 0,
RL1 NUMERIC(18,2) NULL DEFAULT DEFAULT 0,
RL2 NUMERIC(18,2) NULL DEFAULT DEFAULT 0,
RL3 NUMERIC(18,2) NULL DEFAULT DEFAULT 0,
RL4 NUMERIC(18,2) NULL DEFAULT DEFAULT 0,
RL5 NUMERIC(18,2) NULL DEFAULT DEFAULT 0,
RL6 NUMERIC(18,2) NULL DEFAULT DEFAULT 0,
RL7 NUMERIC(18,2) NULL DEFAULT DEFAULT 0,
    PRIMARY KEY (ID)
);

-- Tabelle: BUCHHK_NWG
CREATE TABLE BUCHHK_NWG (
BNR INTEGER NULL,
ONR INTEGER NULL,
KNR INTEGER NULL,
    PRIMARY KEY (BNR),
    FOREIGN KEY (BNR) REFERENCES BUCHUNG(BNR),
    FOREIGN KEY (ONR) REFERENCES KONTEN(ONR),
    FOREIGN KEY (ONR) REFERENCES KONTEN(KNR),
    FOREIGN KEY (KNR) REFERENCES KONTEN(ONR),
    FOREIGN KEY (KNR) REFERENCES KONTEN(KNR)
);

-- Tabelle: BUCHKAUT
CREATE TABLE BUCHKAUT (
NR INTEGER NULL,
ONR INTEGER NULL,
KNR INTEGER NULL,
BETRAG NUMERIC(15,2) NULL DEFAULT DEFAULT 0,
TEXT VARCHAR NULL,
TEXT1 VARCHAR NULL,
TEXT2 VARCHAR NULL,
DATUM DATE NULL,
EINZAHLUNG CHAR NULL,
    PRIMARY KEY (NR),
    FOREIGN KEY (ONR) REFERENCES KONTEN(ONR),
    FOREIGN KEY (ONR) REFERENCES KONTEN(KNR),
    FOREIGN KEY (KNR) REFERENCES KONTEN(ONR),
    FOREIGN KEY (KNR) REFERENCES KONTEN(KNR)
);

-- Tabelle: BUCHLETZT
CREATE TABLE BUCHLETZT (
ONR INTEGER NULL,
BNR INTEGER NULL,
    PRIMARY KEY (ONR)
);

-- Tabelle: BUCHUNG
CREATE TABLE BUCHUNG (
BNR INTEGER NULL,
ONRSOLL SMALLINT NULL,
ONRHABEN SMALLINT NULL,
KSOLL INTEGER NULL,
KHABEN INTEGER NULL,
DATUM DATE NULL,
MWST NUMERIC(15,2) NULL,
BELEGNR INTEGER NULL,
BETRAG NUMERIC(15,2) NULL DEFAULT DEFAULT 0,
TEXT VARCHAR NULL,
KSTRSOLL VARCHAR NULL,
KSTRHABEN VARCHAR NULL,
LBNR INTEGER NULL,
OPNR INTEGER NULL,
LASTERZEUGT SMALLINT NULL,
WDATUM DATE NULL,
KAUSZUGNR INTEGER NULL,
KAUSZUGBLATT SMALLINT NULL,
BRENNSTMENGE FLOAT NULL,
OPBETRAG NUMERIC(15,2) NULL,
MAHNSTUFE SMALLINT NULL,
BANKNRSOLL INTEGER NULL,
BANKNRHABEN INTEGER NULL,
LASTBANK INTEGER NULL,
ARTSOLL SMALLINT NULL,
ARTHABEN SMALLINT NULL,
SPLITNR INTEGER NULL,
BSTRSOLL VARCHAR NULL,
BSTRHABEN VARCHAR NULL,
ARTOP INTEGER NULL,
KNROP INTEGER NULL,
MWSTOP NUMERIC(15,2) NULL,
SEVKNR INTEGER NULL,
SEVJAHRMONAT INTEGER NULL,
ZZDATUM DATE NULL,
NICHTUMLEGEN CHAR NULL DEFAULT DEFAULT 'N',
GN SMALLINT NULL DEFAULT DEFAULT 0,
VERZUGSZINSEN_BNR INTEGER NULL,
VERWALTER_ID INTEGER NULL,
MITARBEITER_ID INTEGER NULL,
ERFASSUNGSDATUM TIMESTAMP NULL DEFAULT DEFAULT 'NOW',
IS_ABRL CHAR NULL DEFAULT DEFAULT 'N',
MITARBEITER_EDIT_ID INTEGER NULL,
VERWALTER_EDIT_ID INTEGER NULL,
ZULETZT_GEMAHNT DATE NULL,
BELEGLINK VARCHAR NULL DEFAULT DEFAULT NULL,
CO2BETRAG NUMERIC(15,2) NULL,
CO2ART SMALLINT NULL,
    PRIMARY KEY (BNR),
    FOREIGN KEY (BANKNRHABEN) REFERENCES BANKEN(NR),
    FOREIGN KEY (BANKNRSOLL) REFERENCES BANKEN(NR),
    FOREIGN KEY (LASTBANK) REFERENCES BANKEN(NR),
    FOREIGN KEY (SPLITNR) REFERENCES SPLITBUCH(BNR),
    FOREIGN KEY (ONRHABEN) REFERENCES KONTEN(ONR),
    FOREIGN KEY (ONRHABEN) REFERENCES KONTEN(KNR),
    FOREIGN KEY (KHABEN) REFERENCES KONTEN(ONR),
    FOREIGN KEY (KHABEN) REFERENCES KONTEN(KNR),
    FOREIGN KEY (LBNR) REFERENCES SLEVBUCH(LBNR),
    FOREIGN KEY (ONRSOLL) REFERENCES KONTEN(ONR),
    FOREIGN KEY (ONRSOLL) REFERENCES KONTEN(KNR),
    FOREIGN KEY (KSOLL) REFERENCES KONTEN(ONR),
    FOREIGN KEY (KSOLL) REFERENCES KONTEN(KNR)
);

-- Tabelle: BUCHUNGEN_GEL
CREATE TABLE BUCHUNGEN_GEL (
NUM INTEGER NULL,
DATUMDEL DATE NULL,
NICKNAME VARCHAR NULL,
HAUS SMALLINT NULL,
DATUM DATE NULL,
WDATUM DATE NULL,
KONTOS VARCHAR NULL,
KONTOH VARCHAR NULL,
BELNR INTEGER NULL,
TEXT VARCHAR NULL,
MWST NUMERIC(15,2) NULL,
BETRAG NUMERIC(15,2) NULL,
    PRIMARY KEY (NUM)
);

-- Tabelle: BUCHUNGTEMP
CREATE TABLE BUCHUNGTEMP (
BNR INTEGER NULL,
ONR SMALLINT NULL,
KONTO INTEGER NULL,
DATUM DATE NULL,
MWST FLOAT NULL,
BELEGNR INTEGER NULL,
BETRAG NUMERIC(15,2) NULL DEFAULT DEFAULT 0,
ART SMALLINT NULL,
TEXT VARCHAR NULL,
GKONTO INTEGER NULL,
KONTOSTR VARCHAR NULL,
GKONTOSTR VARCHAR NULL,
LBNR INTEGER NULL DEFAULT DEFAULT -1,
SZNR INTEGER NULL,
LAST SMALLINT NULL,
LFALTNR INTEGER NULL,
WDATUM DATE NULL,
RUECKKTO INTEGER NULL,
KAUSZUGNR INTEGER NULL,
KAUSZUGBLATT SMALLINT NULL,
BRENNSTMENGE FLOAT NULL,
BETRAG2 NUMERIC(15,2) NULL,
ISLOCK SMALLINT NULL,
SBANR INTEGER NULL,
OPKONTO INTEGER NULL,
    PRIMARY KEY (BNR),
    FOREIGN KEY (ONR) REFERENCES KONTEN(ONR),
    FOREIGN KEY (ONR) REFERENCES KONTEN(KNR),
    FOREIGN KEY (KONTO) REFERENCES KONTEN(ONR),
    FOREIGN KEY (KONTO) REFERENCES KONTEN(KNR)
);

-- Tabelle: BUCHUNGTEMPBNR
CREATE TABLE BUCHUNGTEMPBNR (
BNR INTEGER NULL,
    PRIMARY KEY (BNR)
);

-- Tabelle: BUCHUNGTEMPERR
CREATE TABLE BUCHUNGTEMPERR (
BNR INTEGER NULL,
ONR SMALLINT NULL,
KONTO INTEGER NULL,
DATUM DATE NULL,
MWST FLOAT NULL,
BELEGNR INTEGER NULL,
BETRAG NUMERIC(15,2) NULL DEFAULT DEFAULT 0,
ART SMALLINT NULL,
TEXT VARCHAR NULL,
GKONTO INTEGER NULL,
STANDALTBANK NUMERIC(15,2) NULL,
STANDNEUBANK NUMERIC(15,2) NULL,
HINWEIS VARCHAR NULL,
    PRIMARY KEY (BNR)
);

-- Tabelle: BUCHUNG_ZUFRLVORC20
CREATE TABLE BUCHUNG_ZUFRLVORC20 (
BNR INTEGER NULL,
ONRSOLL SMALLINT NULL,
ONRHABEN SMALLINT NULL,
KSOLL INTEGER NULL,
KHABEN INTEGER NULL,
DATUM DATE NULL,
MWST NUMERIC(15,2) NULL,
BELEGNR INTEGER NULL,
BETRAG NUMERIC(15,2) NULL DEFAULT DEFAULT 0,
TEXT VARCHAR NULL,
WDATUM DATE NULL,
    PRIMARY KEY (BNR)
);

-- Tabelle: BUCHVORL
CREATE TABLE BUCHVORL (
NR INTEGER NULL,
TEXT VARCHAR NULL,
KONTOSTR VARCHAR NULL,
BETRAG NUMERIC(15,2) NULL,
EIN CHAR NULL,
MWST NUMERIC(15,2) NULL,
ONR INTEGER NULL,
BNR INTEGER NULL,
KONTOSTRH VARCHAR NULL,
    PRIMARY KEY (NR)
);

-- Tabelle: BUCHVORL_SPLIT
CREATE TABLE BUCHVORL_SPLIT (
ID INTEGER NULL,
NR_VORL INTEGER NULL,
TEXT VARCHAR NULL,
BETRAG NUMERIC(15,2) NULL,
MWST NUMERIC(15,2) NULL,
ONR INTEGER NULL,
KONTOSTR VARCHAR NULL,
BNR INTEGER NULL,
    PRIMARY KEY (ID),
    FOREIGN KEY (NR_VORL) REFERENCES BUCHVORL(NR)
);

-- Tabelle: BUCHZAHL
CREATE TABLE BUCHZAHL (
NR INTEGER NULL,
BNR INTEGER NULL,
KNR INTEGER NULL,
BETRAG NUMERIC(15,2) NULL,
OPNR INTEGER NULL,
ARTOP INTEGER NULL,
MWSTOP NUMERIC(15,2) NULL,
    PRIMARY KEY (NR),
    FOREIGN KEY (BNR) REFERENCES BUCHUNG(BNR)
);

-- Tabelle: BUSCHLU
CREATE TABLE BUSCHLU (
LFDNR INTEGER NULL,
NR SMALLINT NULL,
ONR SMALLINT NULL,
MKRNR SMALLINT NULL,
BEZ VARCHAR NULL,
EINHEIT VARCHAR NULL,
WEG CHAR NULL,
DEZ SMALLINT NULL,
ART SMALLINT NULL,
VERWENDET CHAR NULL,
ZAEHLER CHAR NULL,
ZSUMME INTEGER NULL,
    PRIMARY KEY (LFDNR),
    FOREIGN KEY (MKRNR) REFERENCES MUSTERKR(MKRNR),
    FOREIGN KEY (ONR) REFERENCES OBJEKTE(ONR)
);

-- Tabelle: CASALOCK
CREATE TABLE CASALOCK (
SATZ INTEGER NULL,
    PRIMARY KEY (SATZ)
);

-- Tabelle: CP_LIEFONR
CREATE TABLE CP_LIEFONR (
ID INTEGER NULL,
ONR INTEGER NULL,
KNR INTEGER NULL,
    PRIMARY KEY (ID)
);

-- Tabelle: DASI_HISTORY
CREATE TABLE DASI_HISTORY (
DATUM_ZEIT TIMESTAMP NULL,
PFAD VARCHAR NULL,
DATEN SMALLINT NULL,
BEMERKUNG VARCHAR NULL,
    PRIMARY KEY (DATUM_ZEIT)
);

-- Tabelle: DATEVBUCHSTAPEL
CREATE TABLE DATEVBUCHSTAPEL (
NR INTEGER NULL,
STATUS INTEGER NULL,
STATUSTEXT VARCHAR NULL,
UMSATZ NUMERIC(15,2) NULL,
KONTO INTEGER NULL,
GEGENKONTO INTEGER NULL,
TEXT VARCHAR NULL,
DATUM DATE NULL,
STATUSICON INTEGER NULL,
SKONTO NUMERIC(15,2) NULL DEFAULT DEFAULT 0,
BU_SCHLUESSEL INTEGER NULL,
HD_ART INTEGER NULL,
HD_LOHN NUMERIC(15,2) NULL,
WINCASA_ONR INTEGER NULL,
RENR VARCHAR NULL,
BELEGLINK VARCHAR NULL,
DAUERRECHNUNG VARCHAR NULL,
AUSRUEKLAGE VARCHAR NULL,
ZAHLWEISE VARCHAR NULL,
SPLITNR INTEGER NULL,
FDATUM DATE NULL,
SOLLHABEN VARCHAR NULL,
SKONTOBETRAG FLOAT NULL DEFAULT DEFAULT 0,
FEHLER INTEGER NULL,
LDATUM DATE NULL,
EMPF VARCHAR NULL,
EMPFBANK VARCHAR NULL,
EMPFKONTO VARCHAR NULL,
EMPFBLZ VARCHAR NULL,
EMPFBIC VARCHAR NULL,
EMPFIBAN VARCHAR NULL,
    PRIMARY KEY (NR)
);

-- Tabelle: DATEVMAN
CREATE TABLE DATEVMAN (
NR INTEGER NULL,
NAME VARCHAR NULL,
ZUSATZ VARCHAR NULL,
STR VARCHAR NULL,
PLZORT VARCHAR NULL,
TEL VARCHAR NULL,
FAX VARCHAR NULL,
MOBIL VARCHAR NULL,
EMAIL VARCHAR NULL,
INTERNET VARCHAR NULL,
STEUERBERATER VARCHAR NULL,
BERATERNR INTEGER NULL,
MANDANTENNR INTEGER NULL,
SACHBEARB CHAR NULL,
PFAD VARCHAR NULL,
DATEVOBE CHAR NULL,
DATUMDRUCK CHAR NULL,
KENNWORT CHAR NULL,
OBJEKTE VARCHAR NULL,
ONRTEXT CHAR NULL,
    PRIMARY KEY (NR)
);

-- Tabelle: DATEVS04
CREATE TABLE DATEVS04 (
KNR INTEGER NULL,
KONTO VARCHAR NULL,
FINANZ CHAR NULL,
ART VARCHAR NULL,
STEXP CHAR NULL,
KOST1 VARCHAR NULL,
KOST2 VARCHAR NULL,
    PRIMARY KEY (KNR)
);

-- Tabelle: DOKUMENTVORLAGEN
CREATE TABLE DOKUMENTVORLAGEN (
NR INTEGER NULL,
BEZEICHNUNG VARCHAR NULL,
ZUSATZ VARCHAR NULL,
DATUMZEIT TIMESTAMP NULL,
BEARBEITER VARCHAR NULL,
TREE_IDX INTEGER NULL,
DATEI BLOB NULL,
DATEI2 BLOB NULL,
    PRIMARY KEY (NR)
);

-- Tabelle: DOKUMENT_TREE
CREATE TABLE DOKUMENT_TREE (
NR INTEGER NULL,
BEZ VARCHAR NULL,
ICON SMALLINT NULL
);

-- Tabelle: EIGADR
CREATE TABLE EIGADR (
EIGNR INTEGER NULL,
EANREDE VARCHAR NULL,
EANREDE2 VARCHAR NULL,
EBRIEFAN VARCHAR NULL,
EBRIEFAN2 VARCHAR NULL,
ETITEL VARCHAR NULL,
ETITEL2 VARCHAR NULL,
EVNAME VARCHAR NULL,
EVNAME2 VARCHAR NULL,
ENAME VARCHAR NULL,
ENAME2 VARCHAR NULL,
EZUSATZ VARCHAR NULL,
EZUSATZ2 VARCHAR NULL,
ESTR VARCHAR NULL,
ELAND CHAR NULL,
EPLZORT VARCHAR NULL,
ETEL1 VARCHAR NULL,
ETEL2 VARCHAR NULL,
EFAX VARCHAR NULL,
EEMAIL VARCHAR NULL,
EHANDY VARCHAR NULL,
ENOTIZ BLOB NULL,
EBLZ VARCHAR NULL,
EKONTO VARCHAR NULL,
EKONTOINH VARCHAR NULL,
EBANK VARCHAR NULL,
LFALTNR INTEGER NULL,
INTERNET VARCHAR NULL,
EMAIL_JA CHAR NULL DEFAULT DEFAULT 'N',
FAX_JA CHAR NULL DEFAULT DEFAULT 'N',
GEBURTSDATUM DATE NULL,
GEBURTSDATUM2 DATE NULL,
DRUCKWAS SMALLINT NULL,
EBIC VARCHAR NULL,
EIBAN VARCHAR NULL,
SEPA_MAN_NR VARCHAR NULL,
SEPA_MAN_DAT DATE NULL,
SEPA_MAN_ART SMALLINT NULL DEFAULT DEFAULT 0,
ETEL1EIG2 VARCHAR NULL,
ETEL2EIG2 VARCHAR NULL,
EHANDYEIG2 VARCHAR NULL,
EFAXEIG2 VARCHAR NULL,
EEMAILEIG2 VARCHAR NULL,
EBANK2 VARCHAR NULL,
EBLZ2 VARCHAR NULL,
EKONTO2 VARCHAR NULL,
EKONTOINH2 VARCHAR NULL,
EBIC2 VARCHAR NULL,
EIBAN2 VARCHAR NULL,
EINWILLIGUNG VARCHAR NULL DEFAULT DEFAULT 'NNNNNN',
ADR_NR_POSTANSCHRIFT INTEGER NULL,
CPSTATUS SMALLINT NULL,
CPDATUMZUGANG DATE NULL,
POSTANSCHRIFT_ART VARCHAR NULL,
EIGENNUTZER_BEWNR INTEGER NULL DEFAULT DEFAULT 0,
ANONYM CHAR NULL DEFAULT DEFAULT 'N',
KOMMUNIKATIONSKANAL SMALLINT NULL,
EFIRMA CHAR NULL,
EFIRMANAME VARCHAR NULL,
    PRIMARY KEY (EIGNR)
);

-- Tabelle: EIGBANKEN
CREATE TABLE EIGBANKEN (
ID INTEGER NULL,
EIGNR INTEGER NULL,
BLZ VARCHAR NULL,
KONTO VARCHAR NULL,
KONTOINH VARCHAR NULL,
BANK VARCHAR NULL,
BIC VARCHAR NULL,
IBAN VARCHAR NULL,
    PRIMARY KEY (ID),
    FOREIGN KEY (EIGNR) REFERENCES EIGADR(EIGNR)
);

-- Tabelle: EIGENTUEMER
CREATE TABLE EIGENTUEMER (
ONR SMALLINT NULL,
KNR INTEGER NULL,
ENR SMALLINT NULL,
ID INTEGER NULL,
Z1 NUMERIC(15,2) NULL,
Z2 NUMERIC(15,2) NULL,
Z3 NUMERIC(15,2) NULL,
Z4 NUMERIC(15,2) NULL,
Z5 NUMERIC(15,2) NULL,
Z6 NUMERIC(15,2) NULL,
Z7 NUMERIC(15,2) NULL,
Z8 NUMERIC(15,2) NULL,
ERUECK NUMERIC(15,2) NULL,
EBEMERKUNG BLOB NULL,
ELASTJA CHAR NULL DEFAULT DEFAULT 'N',
EMAHNSPERRE CHAR NULL DEFAULT DEFAULT 'N',
EERHDATUM DATE NULL,
ELETZTHAUSGELD NUMERIC(15,2) NULL,
EMWSTAUSW CHAR NULL DEFAULT DEFAULT 'N',
EMWSTSATZ SMALLINT NULL,
EZBEGINN DATE NULL,
EZENDE DATE NULL,
ZA1 NUMERIC(15,2) NULL,
ZA2 NUMERIC(15,2) NULL,
ZA3 NUMERIC(15,2) NULL,
ZA4 NUMERIC(15,2) NULL,
ZA5 NUMERIC(15,2) NULL,
ZA6 NUMERIC(15,2) NULL,
ZA7 NUMERIC(15,2) NULL,
ZA8 NUMERIC(15,2) NULL,
ZADATUM1 DATE NULL,
ZADATUM2 DATE NULL,
ZADATUM3 DATE NULL,
ZADATUM4 DATE NULL,
ZADATUM5 DATE NULL,
ZADATUM6 DATE NULL,
ZADATUM7 DATE NULL,
ZADATUM8 DATE NULL,
DRUCKWAS SMALLINT NULL,
EIGNR INTEGER NULL,
ZDATUM1 DATE NULL,
ZDATUM2 DATE NULL,
ZDATUM3 DATE NULL,
ZDATUM4 DATE NULL,
ZDATUM5 DATE NULL,
ZDATUM6 DATE NULL,
ZDATUM7 DATE NULL,
ZDATUM8 DATE NULL,
USTID VARCHAR NULL,
RECHNR INTEGER NULL,
RECHNRSTR VARCHAR NULL,
SEV SMALLINT NULL,
EIGENNUTZER CHAR NULL DEFAULT DEFAULT 'N',
EIGNR2 INTEGER NULL,
EIGNR3 INTEGER NULL,
EIGNR4 INTEGER NULL,
EIGNR5 INTEGER NULL,
IST_RL_POS NUMERIC(15,2) NULL,
SOLL_RL_POS NUMERIC(15,2) NULL,
DAUERAUFTRAG CHAR NULL DEFAULT DEFAULT 'N',
ENWG CHAR NULL DEFAULT DEFAULT 'N',
SOLLTAG SMALLINT NULL DEFAULT DEFAULT 1,
STEUERNUMMER VARCHAR NULL,
FINANZAMT VARCHAR NULL,
SEPA_MAN_ART SMALLINT NULL DEFAULT DEFAULT 0,
SEPA_MAN_NR VARCHAR NULL,
SEPA_MAN_DAT DATE NULL,
SEPA_LS_TEXTSCHL SMALLINT NULL DEFAULT DEFAULT 5,
EVIRTKTO VARCHAR NULL,
BANKID INTEGER NULL,
BANKID2 INTEGER NULL,
PFAENDUNG CHAR NULL,
GEMEINSCHAFTSTYP INTEGER NULL,
Z9 NUMERIC(18,2) NULL,
Z10 NUMERIC(18,2) NULL,
Z11 NUMERIC(18,2) NULL,
Z12 NUMERIC(18,2) NULL,
Z13 NUMERIC(18,2) NULL,
Z14 NUMERIC(18,2) NULL,
Z15 NUMERIC(18,2) NULL,
Z16 NUMERIC(18,2) NULL,
Z17 NUMERIC(18,2) NULL,
Z18 NUMERIC(18,2) NULL,
Z19 NUMERIC(18,2) NULL,
Z20 NUMERIC(18,2) NULL,
Z21 NUMERIC(18,2) NULL,
Z22 NUMERIC(18,2) NULL,
Z23 NUMERIC(18,2) NULL,
Z24 NUMERIC(18,2) NULL,
Z25 NUMERIC(18,2) NULL,
Z26 NUMERIC(18,2) NULL,
Z27 NUMERIC(18,2) NULL,
Z28 NUMERIC(18,2) NULL,
Z29 NUMERIC(18,2) NULL,
Z30 NUMERIC(18,2) NULL,
Z31 NUMERIC(18,2) NULL,
Z32 NUMERIC(18,2) NULL,
Z33 NUMERIC(18,2) NULL,
Z34 NUMERIC(18,2) NULL,
Z35 NUMERIC(18,2) NULL,
Z36 NUMERIC(18,2) NULL,
Z37 NUMERIC(18,2) NULL,
Z38 NUMERIC(18,2) NULL,
Z39 NUMERIC(18,2) NULL,
Z40 NUMERIC(18,2) NULL,
Z41 NUMERIC(18,2) NULL,
Z42 NUMERIC(18,2) NULL,
Z43 NUMERIC(18,2) NULL,
Z44 NUMERIC(18,2) NULL,
Z45 NUMERIC(18,2) NULL,
Z46 NUMERIC(18,2) NULL,
Z47 NUMERIC(18,2) NULL,
Z48 NUMERIC(18,2) NULL,
ZA9 NUMERIC(18,2) NULL,
ZA10 NUMERIC(18,2) NULL,
ZA11 NUMERIC(18,2) NULL,
ZA12 NUMERIC(18,2) NULL,
ZA13 NUMERIC(18,2) NULL,
ZA14 NUMERIC(18,2) NULL,
ZA15 NUMERIC(18,2) NULL,
ZA16 NUMERIC(18,2) NULL,
ZA17 NUMERIC(18,2) NULL,
ZA18 NUMERIC(18,2) NULL,
ZA19 NUMERIC(18,2) NULL,
ZA20 NUMERIC(18,2) NULL,
ZA21 NUMERIC(18,2) NULL,
ZA22 NUMERIC(18,2) NULL,
ZA23 NUMERIC(18,2) NULL,
ZA24 NUMERIC(18,2) NULL,
ZA25 NUMERIC(18,2) NULL,
ZA26 NUMERIC(18,2) NULL,
ZA27 NUMERIC(18,2) NULL,
ZA28 NUMERIC(18,2) NULL,
ZA29 NUMERIC(18,2) NULL,
ZA30 NUMERIC(18,2) NULL,
ZA31 NUMERIC(18,2) NULL,
ZA32 NUMERIC(18,2) NULL,
ZA33 NUMERIC(18,2) NULL,
ZA34 NUMERIC(18,2) NULL,
ZA35 NUMERIC(18,2) NULL,
ZA36 NUMERIC(18,2) NULL,
ZA37 NUMERIC(18,2) NULL,
ZA38 NUMERIC(18,2) NULL,
ZA39 NUMERIC(18,2) NULL,
ZA40 NUMERIC(18,2) NULL,
ZA41 NUMERIC(18,2) NULL,
ZA42 NUMERIC(18,2) NULL,
ZA43 NUMERIC(18,2) NULL,
ZA44 NUMERIC(18,2) NULL,
ZA45 NUMERIC(18,2) NULL,
ZA46 NUMERIC(18,2) NULL,
ZA47 NUMERIC(18,2) NULL,
ZA48 NUMERIC(18,2) NULL,
    PRIMARY KEY (ONR, KNR),
    FOREIGN KEY (EIGNR) REFERENCES EIGADR(EIGNR),
    FOREIGN KEY (ONR) REFERENCES KONTEN(ONR),
    FOREIGN KEY (ONR) REFERENCES KONTEN(KNR),
    FOREIGN KEY (KNR) REFERENCES KONTEN(ONR),
    FOREIGN KEY (KNR) REFERENCES KONTEN(KNR)
);

-- Tabelle: EMAILVORLAGEN
CREATE TABLE EMAILVORLAGEN (
NR INTEGER NULL,
BETREFF VARCHAR NULL,
TEXT BLOB NULL,
ART SMALLINT NULL,
NAME VARCHAR NULL,
TEXT2 BLOB NULL,
    PRIMARY KEY (NR)
);

-- Tabelle: EMAIL_KONTEN
CREATE TABLE EMAIL_KONTEN (
ID INTEGER NULL,
MITARBEITER_ID INTEGER NULL,
ISPOP3 CHAR NULL DEFAULT DEFAULT 'J',
HOST VARCHAR NULL DEFAULT DEFAULT 'Ihr.Postausgangsserver.de',
PASS VARCHAR NULL DEFAULT DEFAULT 'Ihr.Passwort',
PORT INTEGER NULL DEFAULT DEFAULT 110,
USERNAME VARCHAR NULL DEFAULT DEFAULT 'Ihr.Benutzername',
USETLS SMALLINT NULL DEFAULT DEFAULT 0,
EMAIL VARCHAR NULL,
SMTP VARCHAR NULL,
SMTP_PORT INTEGER NULL,
AUF_SERVER_BELASSEN CHAR NULL,
AUF_SERVER_BELASSEN_TAGE SMALLINT NULL DEFAULT DEFAULT 14,
NAME VARCHAR NULL,
SIGNATUR BLOB NULL,
SSLMODE CHAR NULL DEFAULT DEFAULT 'E',
DATEIPFAD VARCHAR NULL,
AKTIV CHAR NULL DEFAULT DEFAULT 'J',
SENT_COPY CHAR NULL DEFAULT DEFAULT 'J',
ZUGANG_SMTP CHAR NULL DEFAULT DEFAULT 'N',
USERNAME_SMTP VARCHAR NULL,
PASS_SMTP VARCHAR NULL,
MAILOUOA2AC BLOB NULL,
MAILOUOA2RE BLOB NULL,
MAILOUOA2REEX TIMESTAMP NULL,
    PRIMARY KEY (ID),
    FOREIGN KEY (MITARBEITER_ID) REFERENCES MITARBEITER(ID)
);

-- Tabelle: EPOST_LETTER
CREATE TABLE EPOST_LETTER (
LETTERID INTEGER NULL DEFAULT DEFAULT 0,
FILENAME VARCHAR NULL,
STATUSID INTEGER NULL DEFAULT DEFAULT 0,
STATUSDETAILS VARCHAR NULL,
CREATEDDATE TIMESTAMP NULL,
PROCESSEDDATE TIMESTAMP NULL,
PRINTUPLOADDATE TIMESTAMP NULL,
PRINTFEEDBACKDATE TIMESTAMP NULL,
TESTFLAG SMALLINT NULL DEFAULT DEFAULT 0,
TESTEMAIL VARCHAR NULL,
TESTSHOWRESTRICTEDAREA SMALLINT NULL DEFAULT DEFAULT 0,
REGISTEREDLETTERID VARCHAR NULL,
BATCHID INTEGER NULL DEFAULT DEFAULT 0,
COVERLETTER SMALLINT NULL DEFAULT DEFAULT 0,
NOOFPAGES INTEGER NULL DEFAULT DEFAULT 0,
SUBVENDORID VARCHAR NULL,
CUSTOM1 VARCHAR NULL,
CUSTOM2 VARCHAR NULL,
CUSTOM3 VARCHAR NULL,
CUSTOM4 VARCHAR NULL,
CUSTOM5 VARCHAR NULL,
ZIPCODE VARCHAR NULL,
CITY VARCHAR NULL,
COUNTRY VARCHAR NULL,
ISCOLOR SMALLINT NULL DEFAULT DEFAULT 0,
ISDUPLEX SMALLINT NULL DEFAULT DEFAULT 0,
ERRORLIST VARCHAR NULL,
    PRIMARY KEY (LETTERID, FILENAME)
);

-- Tabelle: EUSCHLU
CREATE TABLE EUSCHLU (
LFDNR INTEGER NULL,
NR SMALLINT NULL,
ONR SMALLINT NULL,
MKRNR SMALLINT NULL,
BEZ VARCHAR NULL,
EINHEIT VARCHAR NULL,
WEG CHAR NULL,
DEZ SMALLINT NULL,
ART SMALLINT NULL,
VERWENDET CHAR NULL,
ZAEHLER CHAR NULL,
ZSUMME INTEGER NULL,
    PRIMARY KEY (LFDNR),
    FOREIGN KEY (MKRNR) REFERENCES MUSTERKR(MKRNR),
    FOREIGN KEY (ONR) REFERENCES OBJEKTE(ONR)
);

-- Tabelle: FOTOS
CREATE TABLE FOTOS (
ID INTEGER NULL,
ONR INTEGER NULL,
ENR INTEGER NULL,
KNR INTEGER NULL,
LIEFNR INTEGER NULL,
PFAD VARCHAR NULL,
BESCHR VARCHAR NULL,
    PRIMARY KEY (ID)
);

-- Tabelle: HDBESCH
CREATE TABLE HDBESCH (
NR INTEGER NULL,
ONR INTEGER NULL,
BEW INTEGER NULL,
PARAGRAF INTEGER NULL,
USCHLNR INTEGER NULL,
BETRAGGES NUMERIC(15,2) NULL,
BETRAGGES_BUCH NUMERIC(15,2) NULL,
SANTEIL FLOAT NULL,
SGESAMT FLOAT NULL,
IHRABRTAGE INTEGER NULL,
ABRTAGE INTEGER NULL,
SBEZ VARCHAR NULL,
SEINH VARCHAR NULL,
BETRAGANT NUMERIC(15,2) NULL,
    PRIMARY KEY (NR)
);

-- Tabelle: HDBUCH
CREATE TABLE HDBUCH (
NR INTEGER NULL,
BNR INTEGER NULL,
ZTNR INTEGER NULL,
BETRAG NUMERIC(18,2) NULL,
TEXT VARCHAR NULL,
VON DATE NULL,
BIS DATE NULL,
LIEFKNR INTEGER NULL,
ART SMALLINT NULL,
GROUPNR INTEGER NULL,
BETRAG_GES NUMERIC(18,2) NULL,
BETRAG_MATERIAL NUMERIC(18,2) NULL,
BEONRDIREKT INTEGER NULL,
BEKNRDIREKT INTEGER NULL,
    PRIMARY KEY (NR),
    FOREIGN KEY (BNR) REFERENCES BUCHUNG(BNR),
    FOREIGN KEY (ZTNR) REFERENCES ZTERMIN(ZTNR),
    FOREIGN KEY (BEONRDIREKT) REFERENCES KONTEN(ONR),
    FOREIGN KEY (BEONRDIREKT) REFERENCES KONTEN(KNR),
    FOREIGN KEY (BEKNRDIREKT) REFERENCES KONTEN(ONR),
    FOREIGN KEY (BEKNRDIREKT) REFERENCES KONTEN(KNR)
);

-- Tabelle: HDBUCHUNG
CREATE TABLE HDBUCHUNG (
BNR INTEGER NULL,
BETRAG1 NUMERIC(15,2) NULL,
BETRAG2 NUMERIC(15,2) NULL,
BETRAG3 NUMERIC(15,2) NULL,
BETRAG4 NUMERIC(15,2) NULL,
BETRAG5 NUMERIC(15,2) NULL,
    PRIMARY KEY (BNR),
    FOREIGN KEY (BNR) REFERENCES BUCHUNG(BNR)
);

-- Tabelle: HDBUCH_VORL
CREATE TABLE HDBUCH_VORL (
NR INTEGER NULL,
BETRAG NUMERIC(18,2) NULL,
TEXT VARCHAR NULL,
ART SMALLINT NULL,
BETRAG_GES NUMERIC(18,2) NULL,
BETRAG_MATERIAL NUMERIC(18,2) NULL,
NR_VORL INTEGER NULL,
    PRIMARY KEY (NR),
    FOREIGN KEY (NR_VORL) REFERENCES BUCHVORL(NR)
);

-- Tabelle: HDDETAIL
CREATE TABLE HDDETAIL (
NR INTEGER NULL,
ONR INTEGER NULL,
KNR INTEGER NULL,
BETRAG NUMERIC(15,2) NULL,
TEXT VARCHAR NULL,
VON DATE NULL,
BIS DATE NULL,
LIEFKNR INTEGER NULL,
ART SMALLINT NULL,
BETRAG_GES NUMERIC(15,2) NULL,
BETRAG_MATERIAL NUMERIC(15,2) NULL,
BETRAGHD_GES NUMERIC(15,2) NULL,
USCHL_BEZ VARCHAR NULL,
KBEW CHAR NULL,
    PRIMARY KEY (NR)
);

-- Tabelle: HK_KOSTEN
CREATE TABLE HK_KOSTEN (
ID INTEGER NULL,
ONR SMALLINT NULL,
KOSTENSCHLUESSEL SMALLINT NULL,
KOSTENART VARCHAR NULL,
KENNZEICHEN CHAR NULL,
RECHNUNGSDATUM DATE NULL,
BETRAG FLOAT NULL,
WAEHRUNG CHAR NULL,
MENGE FLOAT NULL,
MWST FLOAT NULL,
IHEIZEXT SMALLINT NULL,
KONTOSTR VARCHAR NULL,
HDART SMALLINT NULL,
HDBETRAG NUMERIC(17,2) NULL,
CO2BETRAG NUMERIC(15,2) NULL,
CO2ART SMALLINT NULL,
    PRIMARY KEY (ID)
);

-- Tabelle: HK_WOHN
CREATE TABLE HK_WOHN (
ONR SMALLINT NULL,
ENR SMALLINT NULL,
WOHNVON DATE NULL,
WOHNBIS DATE NULL,
WINCASA_ID VARCHAR NULL,
ABRFIRMA_ID VARCHAR NULL,
NUTZERNR VARCHAR NULL,
EBEZ VARCHAR NULL,
NAME VARCHAR NULL,
VNAME VARCHAR NULL,
QM FLOAT NULL,
QMWARMW FLOAT NULL,
MWSTAUSW CHAR NULL,
    PRIMARY KEY (ONR, ENR, WOHNVON, WOHNBIS)
);

-- Tabelle: IEIGADR
CREATE TABLE IEIGADR (
EIGNR INTEGER NULL,
EANREDE VARCHAR NULL,
EANREDE2 VARCHAR NULL,
EBRIEFAN VARCHAR NULL,
EBRIEFAN2 VARCHAR NULL,
ETITEL VARCHAR NULL,
ETITEL2 VARCHAR NULL,
EVNAME VARCHAR NULL,
EVNAME2 VARCHAR NULL,
ENAME VARCHAR NULL,
ENAME2 VARCHAR NULL,
EZUSATZ VARCHAR NULL,
EZUSATZ2 VARCHAR NULL,
ESTR VARCHAR NULL,
ELAND CHAR NULL,
EPLZORT VARCHAR NULL,
ETEL1 VARCHAR NULL,
ETEL2 VARCHAR NULL,
EFAX VARCHAR NULL,
EEMAIL VARCHAR NULL,
EHANDY VARCHAR NULL,
ENOTIZ BLOB NULL,
EBLZ VARCHAR NULL,
EKONTO VARCHAR NULL,
EKONTOINH VARCHAR NULL,
EBANK VARCHAR NULL,
LFALTNR INTEGER NULL,
INTERNET VARCHAR NULL,
    PRIMARY KEY (EIGNR)
);

-- Tabelle: ILIEFERAN
CREATE TABLE ILIEFERAN (
KNR INTEGER NULL,
NAME VARCHAR NULL,
BANK VARCHAR NULL,
KONTO VARCHAR NULL,
BLZ VARCHAR NULL,
ANREDE VARCHAR NULL,
STRASSE VARCHAR NULL,
PLZ VARCHAR NULL,
ORT VARCHAR NULL,
BRANCHE VARCHAR NULL,
KATEGORIE VARCHAR NULL,
VZWECK1 VARCHAR NULL,
VZWECK2 VARCHAR NULL,
EMAIL VARCHAR NULL,
MOBIL VARCHAR NULL,
TEL1 VARCHAR NULL,
TEL2 VARCHAR NULL,
FAX VARCHAR NULL,
ANSPRECH VARCHAR NULL,
ONR INTEGER NULL,
VORNAME VARCHAR NULL,
ZUSATZ VARCHAR NULL,
TITEL VARCHAR NULL,
BRIEFAN VARCHAR NULL,
LAND CHAR NULL,
KONTOINH VARCHAR NULL,
NOTIZ BLOB NULL,
INTERNET VARCHAR NULL,
LIEFKNR INTEGER NULL,
    PRIMARY KEY (KNR)
);

-- Tabelle: KATEGORIE_CRM
CREATE TABLE KATEGORIE_CRM (
ID INTEGER NULL,
BEZEICHNUNG VARCHAR NULL,
    PRIMARY KEY (ID)
);

-- Tabelle: KONTAKTGRUPPEN
CREATE TABLE KONTAKTGRUPPEN (
ID INTEGER NULL,
BEZEICHNUNG VARCHAR NULL,
TEXT BLOB NULL,
    PRIMARY KEY (ID)
);

-- Tabelle: KONTAKTONR
CREATE TABLE KONTAKTONR (
KONTAKTNR INTEGER NULL,
ONR INTEGER NULL,
    PRIMARY KEY (KONTAKTNR, ONR),
    FOREIGN KEY (KONTAKTNR) REFERENCES LIEFERAN(KNR)
);

-- Tabelle: KONTEN
CREATE TABLE KONTEN (
ONR SMALLINT NULL,
KNR INTEGER NULL,
KBEZ VARCHAR NULL,
KBRUTTO NUMERIC(15,2) NULL DEFAULT DEFAULT 0,
OPBETRAG NUMERIC(15,2) NULL DEFAULT DEFAULT 0,
KUST NUMERIC(15,2) NULL,
KVERTEILUNG CHAR NULL,
KKSTNR SMALLINT NULL,
KUSCHLNR1 SMALLINT NULL,
KUSCHLNR2 SMALLINT NULL,
KUSCHLPROZ1 SMALLINT NULL DEFAULT DEFAULT 100,
KUSCHLPROZ2 SMALLINT NULL DEFAULT DEFAULT 0,
KMAHNSTUFE SMALLINT NULL,
KBEW CHAR NULL,
KNRSTR VARCHAR NULL,
KABRECHNEN SMALLINT NULL,
KWBRUTTO NUMERIC(15,2) NULL DEFAULT DEFAULT 0,
KWBRUTTOALT NUMERIC(15,2) NULL DEFAULT DEFAULT 0,
MAHNDATUM DATE NULL,
MAHNGEDRUCKT SMALLINT NULL,
BUTEXT1 VARCHAR NULL,
BUTEXT2 VARCHAR NULL,
BUTEXT3 VARCHAR NULL,
BUTEXT4 VARCHAR NULL,
BUTEXT5 VARCHAR NULL,
LINR INTEGER NULL,
KKLASSE SMALLINT NULL DEFAULT DEFAULT 1,
STSATZ SMALLINT NULL,
EA SMALLINT NULL DEFAULT DEFAULT 1,
SELCODE VARCHAR NULL,
SFREI1 VARCHAR NULL,
SFREI2 VARCHAR NULL,
RFREI1 NUMERIC(15,2) NULL DEFAULT DEFAULT 0,
KBRUTTOWJ NUMERIC(15,2) NULL DEFAULT DEFAULT 0,
BFREI1 CHAR NULL,
IFREI1 INTEGER NULL DEFAULT DEFAULT 2,
IFREI2 INTEGER NULL,
FESTB NUMERIC(15,2) NULL,
FESTBPROZ FLOAT NULL,
IHRABRVON DATE NULL,
IHRABRBIS DATE NULL,
BHEIZ CHAR NULL,
HEIZKOSTEN NUMERIC(15,2) NULL,
USTVOR NUMERIC(15,2) NULL DEFAULT DEFAULT 16,
IHEIZK SMALLINT NULL,
KWERTBRUTTO NUMERIC(15,2) NULL,
MAWAGNIS CHAR NULL,
IHEIZEXT SMALLINT NULL,
DATEVKNR INTEGER NULL,
ENR INTEGER NULL,
MAW NUMERIC(15,2) NULL,
NEUTRAL SMALLINT NULL DEFAULT DEFAULT 1,
RLPOS INTEGER NULL,
BANKNR INTEGER NULL,
BKART VARCHAR NULL,
BKBEMERKUNG VARCHAR NULL,
SEV SMALLINT NULL,
SEVKNR INTEGER NULL,
INAKTIV CHAR NULL DEFAULT DEFAULT 'N',
KGESAMTMITNUML NUMERIC(18,4) NULL,
KGESAMTMITNUMLNETTO NUMERIC(18,4) NULL,
BEW SMALLINT NULL DEFAULT DEFAULT 0,
SOLL_IN_NK SMALLINT NULL,
OSI_STFREI CHAR NULL DEFAULT DEFAULT 'N',
KSTANDABRECHNEN SMALLINT NULL DEFAULT DEFAULT 0,
NICHT_IN_EAR CHAR NULL DEFAULT DEFAULT 'N',
DATEVKNR2 INTEGER NULL,
ZU_RL CHAR NULL DEFAULT DEFAULT 'N',
CAEXIM_KAT INTEGER NULL DEFAULT DEFAULT 0,
WIPL_OHNE_MINUS NUMERIC(15,2) NULL DEFAULT DEFAULT 0,
NBK_16KOSTEN NUMERIC(15,2) NULL,
FESTB_NETTO SMALLINT NULL DEFAULT DEFAULT -1,
    PRIMARY KEY (ONR, KNR),
    FOREIGN KEY (ONR) REFERENCES OBJEKTE(ONR),
    FOREIGN KEY (DATEVKNR) REFERENCES DATEVS04(KNR)
);

-- Tabelle: LDOKUMENTE
CREATE TABLE LDOKUMENTE (
ID INTEGER NULL,
LIEGNR INTEGER NULL,
PFAD VARCHAR NULL,
BESCHR VARCHAR NULL,
    PRIMARY KEY (ID),
    FOREIGN KEY (LIEGNR) REFERENCES LIEGEN(NR)
);

-- Tabelle: LFOTOS
CREATE TABLE LFOTOS (
ID INTEGER NULL,
LIEGNR INTEGER NULL,
PFAD VARCHAR NULL,
BESCHR VARCHAR NULL,
    PRIMARY KEY (ID),
    FOREIGN KEY (LIEGNR) REFERENCES LIEGEN(NR)
);

-- Tabelle: LIEFERAN
CREATE TABLE LIEFERAN (
KNR INTEGER NULL,
NAME VARCHAR NULL,
BANK VARCHAR NULL,
KONTO VARCHAR NULL,
BLZ VARCHAR NULL,
ANREDE VARCHAR NULL,
STRASSE VARCHAR NULL,
PLZ VARCHAR NULL,
ORT VARCHAR NULL,
BRANCHE VARCHAR NULL,
KATEGORIE VARCHAR NULL,
VZWECK1 VARCHAR NULL,
VZWECK2 VARCHAR NULL,
EMAIL VARCHAR NULL,
MOBIL VARCHAR NULL,
TEL1 VARCHAR NULL,
TEL2 VARCHAR NULL,
FAX VARCHAR NULL,
ANSPRECH VARCHAR NULL,
ONR INTEGER NULL,
VORNAME VARCHAR NULL,
ZUSATZ VARCHAR NULL,
TITEL VARCHAR NULL,
BRIEFAN VARCHAR NULL,
LAND CHAR NULL,
KONTOINH VARCHAR NULL,
NOTIZ BLOB NULL,
INTERNET VARCHAR NULL,
LIEFKNR INTEGER NULL,
BIC VARCHAR NULL,
IBAN VARCHAR NULL,
SKONTOPROZ1 NUMERIC(18,2) NULL,
SKONTOPROZ2 NUMERIC(18,2) NULL,
SKONTOTAGE1 SMALLINT NULL,
SKONTOTAGE2 SMALLINT NULL,
ENTRYID INTEGER NULL,
FIRMA VARCHAR NULL,
FOTO BLOB NULL,
FREIINH1 VARCHAR NULL,
FREIINH2 VARCHAR NULL,
FREIINH3 VARCHAR NULL,
FREIINH4 VARCHAR NULL,
FREIINH5 VARCHAR NULL,
FREIINH6 VARCHAR NULL,
FREIINH7 VARCHAR NULL,
FREIINH8 VARCHAR NULL,
FREIINH9 VARCHAR NULL,
FREIINH10 VARCHAR NULL,
CPSTATUS SMALLINT NULL DEFAULT DEFAULT 0,
KOMMUNIKATIONSKANAL SMALLINT NULL,
USTID VARCHAR NULL,
BLINDVERARBEITUNG CHAR NULL DEFAULT DEFAULT 'J',
    PRIMARY KEY (KNR)
);

-- Tabelle: LIEFONRKNR
CREATE TABLE LIEFONRKNR (
LNR INTEGER NULL,
ONR INTEGER NULL,
KNR INTEGER NULL,
LIEFKNR INTEGER NULL,
    PRIMARY KEY (LNR, ONR, KNR),
    FOREIGN KEY (LNR) REFERENCES LIEFERAN(KNR),
    FOREIGN KEY (ONR) REFERENCES OBJEKTE(ONR),
    FOREIGN KEY (ONR) REFERENCES KONTEN(ONR),
    FOREIGN KEY (ONR) REFERENCES KONTEN(KNR),
    FOREIGN KEY (KNR) REFERENCES KONTEN(ONR),
    FOREIGN KEY (KNR) REFERENCES KONTEN(KNR)
);

-- Tabelle: LIEGEN
CREATE TABLE LIEGEN (
NR INTEGER NULL,
ONR INTEGER NULL,
ENR INTEGER NULL,
NOTIZ BLOB NULL,
MODELL VARCHAR NULL,
SNR VARCHAR NULL,
KAUFDATUM DATE NULL,
BAUJAHR DATE NULL,
GERAETENAME VARCHAR NULL,
BEZEICHNUNG VARCHAR NULL,
EIGENTUM VARCHAR NULL,
GERAETESTATUS VARCHAR NULL,
HID INTEGER NULL,
KID INTEGER NULL,
LID INTEGER NULL,
BID INTEGER NULL,
VID INTEGER NULL,
    PRIMARY KEY (NR)
);

-- Tabelle: MITARBEITER
CREATE TABLE MITARBEITER (
ID INTEGER NULL,
NAME VARCHAR NULL,
VORNAME VARCHAR NULL,
CPPW VARCHAR NULL,
ZUGRIFF SMALLINT NULL DEFAULT DEFAULT 2,
TEL VARCHAR NULL,
HANDY VARCHAR NULL,
MAILOUTLOOK CHAR NULL,
LOGINNAME VARCHAR NULL,
EMAIL VARCHAR NULL,
EMAILPFAD VARCHAR NULL,
IP_ADRESSE VARCHAR NULL,
NICKNAME VARCHAR NULL,
CHAT_STATUS SMALLINT NULL,
QUICKTEXT BLOB NULL,
BGRUPPE_NR INTEGER NULL,
EXTERNAL_APP_PASSWORD VARCHAR NULL,
MAILOUTLOOKTMS CHAR NULL DEFAULT DEFAULT 'N',
    PRIMARY KEY (ID)
);

-- Tabelle: MODULE
CREATE TABLE MODULE (
MODULEID INTEGER NOT NULL,
STATUS VARCHAR NULL DEFAULT DEFAULT 'F',
LIMITDATE DATE NULL,
    PRIMARY KEY (MODULEID)
);

-- Tabelle: MUSTERKR
CREATE TABLE MUSTERKR (
MKRNR INTEGER NULL,
NAME VARCHAR NULL,
INTNR VARCHAR NULL,
INTNR2 VARCHAR NULL DEFAULT DEFAULT '000624',
ZAEHLNAM1 VARCHAR NULL DEFAULT DEFAULT 'Kaltwasser',
ZAEHLNAM2 VARCHAR NULL DEFAULT DEFAULT 'Warmwasser',
ZAEHLNAM3 VARCHAR NULL DEFAULT default 'GaszÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤hler',
ZAEHLNAM4 VARCHAR NULL DEFAULT DEFAULT 'Heizstrom',
ZAEHLNAM5 VARCHAR NULL,
ZAEHLNAM6 VARCHAR NULL,
ZAEHLNAM7 VARCHAR NULL,
ZAEHLNAM8 VARCHAR NULL,
ZAEHLNAM9 VARCHAR NULL,
ZAEHLNAM10 VARCHAR NULL,
ZAEHLNAM11 VARCHAR NULL,
ZAEHLNAM12 VARCHAR NULL,
ZAEHLEINH1 VARCHAR NULL DEFAULT DEFAULT 'qbm',
ZAEHLEINH2 VARCHAR NULL DEFAULT DEFAULT 'qbm',
ZAEHLEINH3 VARCHAR NULL DEFAULT DEFAULT 'qbm',
ZAEHLEINH4 VARCHAR NULL DEFAULT DEFAULT 'kW/h',
ZAEHLEINH5 VARCHAR NULL,
ZAEHLEINH6 VARCHAR NULL,
ZAEHLEINH7 VARCHAR NULL,
ZAEHLEINH8 VARCHAR NULL,
ZAEHLEINH9 VARCHAR NULL,
ZAEHLEINH10 VARCHAR NULL,
ZAEHLEINH11 VARCHAR NULL,
ZAEHLEINH12 VARCHAR NULL,
ZAEHLBK1 CHAR NULL,
ZAEHLBK2 CHAR NULL,
ZAEHLBK3 CHAR NULL,
ZAEHLBK4 CHAR NULL,
ZAEHLBK5 CHAR NULL,
ZAEHLBK6 CHAR NULL,
ZAEHLBK7 CHAR NULL,
ZAEHLBK8 CHAR NULL,
ZAEHLBK9 CHAR NULL,
ZAEHLBK10 CHAR NULL,
ZAEHLBK11 CHAR NULL,
ZAEHLBK12 CHAR NULL,
LFALTNR INTEGER NULL,
LAND INTEGER NULL,
ZAEHLNAM13 VARCHAR NULL,
ZAEHLNAM14 VARCHAR NULL,
ZAEHLNAM15 VARCHAR NULL,
ZAEHLNAM16 VARCHAR NULL,
ZAEHLEINH13 VARCHAR NULL,
ZAEHLEINH14 VARCHAR NULL,
ZAEHLEINH15 VARCHAR NULL,
ZAEHLEINH16 VARCHAR NULL,
ZAEHLBK13 CHAR NULL,
ZAEHLBK14 CHAR NULL,
ZAEHLBK15 CHAR NULL,
ZAEHLBK16 CHAR NULL,
    PRIMARY KEY (MKRNR)
);

-- Tabelle: NACHWEIS
CREATE TABLE NACHWEIS (
NR INTEGER NULL,
DATUM DATE NULL,
ZEIT TIME NULL,
BETREFF VARCHAR NULL,
WOTAG CHAR NULL,
KNR INTEGER NULL,
OBJEKT SMALLINT NULL,
LIEF INTEGER NULL,
EIG INTEGER NULL,
BEARBEITER VARCHAR NULL,
KATEGORIE VARCHAR NULL,
BEMERKUNG BLOB NULL,
GEAENDERT DATE NULL,
GEAENDERTVON VARCHAR NULL,
DOKUMENT VARCHAR NULL,
ERLEDIGT CHAR NULL,
GNR INTEGER NULL,
ARCHIV_TREE_NR INTEGER NULL,
DATEI BLOB NULL,
BLOBFILE_TYPE SMALLINT NULL,
BEWEIG SMALLINT NULL,
PORTALKATEGORIE VARCHAR NULL,
PORTALDOKUMENT VARCHAR NULL,
PORTALSTATUS SMALLINT NULL,
IMWEB SMALLINT NULL,
ENR INTEGER NULL,
BEWEIG_ID INTEGER NULL,
BEWEIG_ALT SMALLINT NULL,
PORTALKATEGORIE_ALT VARCHAR NULL,
PORTALDOKUMENT_ALT VARCHAR NULL,
ENR_ALT INTEGER NULL,
OBJEKT_ALT SMALLINT NULL,
KNR_ALT INTEGER NULL,
BEWEIG_ID_ALT INTEGER NULL,
DOKUMENT_ALT VARCHAR NULL,
SYNC SMALLINT NULL,
PC_NAME VARCHAR NULL,
BEW INTEGER NULL,
ANZ_DOC INTEGER NULL,
ANZ_DOCIMWEB INTEGER NULL,
    PRIMARY KEY (NR),
    FOREIGN KEY (EIG) REFERENCES EIGADR(EIGNR),
    FOREIGN KEY (LIEF) REFERENCES LIEFERAN(KNR),
    FOREIGN KEY (OBJEKT) REFERENCES OBJEKTE(ONR),
    FOREIGN KEY (BEW) REFERENCES BEWADR(BEWNR)
);

-- Tabelle: NACHWEIS_DOC
CREATE TABLE NACHWEIS_DOC (
ID INTEGER NULL,
FILENAME VARCHAR NULL,
NR INTEGER NULL,
CPID SMALLINT NULL,
CATEGORY VARCHAR NULL,
CPSTATUS SMALLINT NULL,
BEWEIG_ID INTEGER NULL,
IST_EIG CHAR NULL,
ONR INTEGER NULL,
KNR INTEGER NULL,
CPDATUM DATE NULL,
CP_DOCSERVER_ID VARCHAR NULL,
ONR_BEW_EIG SMALLINT NULL,
    PRIMARY KEY (ID),
    FOREIGN KEY (NR) REFERENCES NACHWEIS(NR)
);

-- Tabelle: NACHWEIS_DOKUMENTE
CREATE TABLE NACHWEIS_DOKUMENTE (
NR INTEGER NULL,
DOKUMENT VARCHAR NULL,
    FOREIGN KEY (NR) REFERENCES NACHWEIS(NR)
);

-- Tabelle: NKANPASS
CREATE TABLE NKANPASS (
ONR INTEGER NULL,
KNR INTEGER NULL,
NAME VARCHAR NULL,
WOHNUNG VARCHAR NULL,
ART SMALLINT NULL,
BETRAG NUMERIC(15,2) NULL,
ABRBIS DATE NULL,
STATUS CHAR NULL,
ABRVON DATE NULL,
SOLLGEST VARCHAR NULL,
RUECKLBEZ VARCHAR NULL,
    PRIMARY KEY (ONR, KNR, ART),
    FOREIGN KEY (ONR) REFERENCES KONTEN(ONR),
    FOREIGN KEY (ONR) REFERENCES KONTEN(KNR),
    FOREIGN KEY (KNR) REFERENCES KONTEN(ONR),
    FOREIGN KEY (KNR) REFERENCES KONTEN(KNR)
);

-- Tabelle: NKARCHIV
CREATE TABLE NKARCHIV (
ONR INTEGER NULL,
ABRVON DATE NULL,
ABRBIS DATE NULL,
KNR INTEGER NULL,
KNAME VARCHAR NULL,
KBRUTTO NUMERIC(18,2) NULL,
    PRIMARY KEY (ONR, ABRVON, ABRBIS, KNR)
);

-- Tabelle: NKDETAIL
CREATE TABLE NKDETAIL (
NR INTEGER NULL,
ONR INTEGER NULL,
KNR INTEGER NULL,
KNAME VARCHAR NULL,
SNAME VARCHAR NULL,
SEINH VARCHAR NULL,
KGESAMT NUMERIC(15,2) NULL,
KANTEIL NUMERIC(15,2) NULL,
KBEW CHAR NULL,
KKST SMALLINT NULL,
SART SMALLINT NULL,
ABRNR SMALLINT NULL,
KANRS VARCHAR NULL,
KBBEZ VARCHAR NULL,
KBNRS VARCHAR NULL,
FEST CHAR NULL,
FESTBPROZ FLOAT NULL,
NAME VARCHAR NULL,
KBRUTTOGESAMT NUMERIC(15,2) NULL,
KBRUTTOANTEIL NUMERIC(15,2) NULL,
MWST1 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
NETTO1 NUMERIC(15,2) NULL DEFAULT DEFAULT 0,
MWST2 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
NETTO2 NUMERIC(15,2) NULL DEFAULT DEFAULT 0,
MWST3 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
NETTO3 NUMERIC(15,2) NULL DEFAULT DEFAULT 0,
MWST4 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
NETTO4 NUMERIC(15,2) NULL DEFAULT DEFAULT 0,
MWST5 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
NETTO5 NUMERIC(15,2) NULL DEFAULT DEFAULT 0,
MWST6 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
NETTO6 NUMERIC(15,2) NULL DEFAULT DEFAULT 0,
SGESAMT NUMERIC(18,4) NULL,
SANTEIL NUMERIC(18,4) NULL,
EAR SMALLINT NULL,
KKLASSE INTEGER NULL,
KGESAMTMITUML NUMERIC(18,4) NULL,
KANTEIL_NICHTUML NUMERIC(18,2) NULL,
HAUPT_NR INTEGER NULL,
    PRIMARY KEY (NR)
);

-- Tabelle: NKDETAIL_WIPL
CREATE TABLE NKDETAIL_WIPL (
NR INTEGER NOT NULL,
ONR INTEGER NULL,
KNR INTEGER NULL,
KNAME VARCHAR NULL,
SNAME VARCHAR NULL,
SEINH VARCHAR NULL,
KGESAMT NUMERIC(15,2) NULL,
KANTEIL NUMERIC(15,2) NULL,
KBEW CHAR NULL,
KKST SMALLINT NULL,
SART SMALLINT NULL,
ABRNR SMALLINT NULL,
KANRS VARCHAR NULL,
KBBEZ VARCHAR NULL,
KBNRS VARCHAR NULL,
FEST CHAR NULL,
FESTBPROZ FLOAT NULL,
NAME VARCHAR NULL,
KBRUTTOGESAMT NUMERIC(15,2) NULL,
KBRUTTOANTEIL NUMERIC(15,2) NULL,
MWST1 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
NETTO1 NUMERIC(15,2) NULL DEFAULT DEFAULT 0,
MWST2 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
NETTO2 NUMERIC(15,2) NULL DEFAULT DEFAULT 0,
MWST3 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
NETTO3 NUMERIC(15,2) NULL DEFAULT DEFAULT 0,
MWST4 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
NETTO4 NUMERIC(15,2) NULL DEFAULT DEFAULT 0,
MWST5 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
NETTO5 NUMERIC(15,2) NULL DEFAULT DEFAULT 0,
MWST6 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
NETTO6 NUMERIC(15,2) NULL DEFAULT DEFAULT 0,
SGESAMT NUMERIC(18,4) NULL,
SANTEIL NUMERIC(18,4) NULL,
EAR SMALLINT NULL,
KKLASSE INTEGER NULL,
KGESAMTMITUML NUMERIC(18,4) NULL,
KANTEIL_NICHTUML NUMERIC(18,2) NULL,
HAUPT_NR INTEGER NULL,
    PRIMARY KEY (NR)
);

-- Tabelle: NKGUTNA
CREATE TABLE NKGUTNA (
ONR INTEGER NULL,
KNR INTEGER NULL,
ABRVON DATE NULL,
ABRBIS DATE NULL,
GESERG NUMERIC(15,2) NULL,
SOLLG CHAR NULL,
KBEZ VARCHAR NULL,
KNRSTR VARCHAR NULL,
STATUS SMALLINT NULL,
KOSTEN NUMERIC(15,2) NULL,
VZ NUMERIC(15,2) NULL,
OPGN NUMERIC(15,2) NULL,
RL1 NUMERIC(15,2) NULL,
RL2 NUMERIC(15,2) NULL,
RL3 NUMERIC(15,2) NULL,
RL4 NUMERIC(15,2) NULL,
RL5 NUMERIC(15,2) NULL,
RL6 NUMERIC(15,2) NULL,
RL7 NUMERIC(15,2) NULL,
RL8 NUMERIC(18,2) NULL,
RL9 NUMERIC(18,2) NULL,
RL10 NUMERIC(18,2) NULL,
RL11 NUMERIC(18,2) NULL,
RL12 NUMERIC(18,2) NULL,
RL13 NUMERIC(18,2) NULL,
RL14 NUMERIC(18,2) NULL,
RL15 NUMERIC(18,2) NULL,
RL16 NUMERIC(18,2) NULL,
RL17 NUMERIC(18,2) NULL,
RL18 NUMERIC(18,2) NULL,
RL19 NUMERIC(18,2) NULL,
RL20 NUMERIC(18,2) NULL,
RL21 NUMERIC(18,2) NULL,
RL22 NUMERIC(18,2) NULL,
RL23 NUMERIC(18,2) NULL,
RL24 NUMERIC(18,2) NULL,
RL25 NUMERIC(18,2) NULL,
RL26 NUMERIC(18,2) NULL,
RL27 NUMERIC(18,2) NULL,
RL28 NUMERIC(18,2) NULL,
RL29 NUMERIC(18,2) NULL,
RL30 NUMERIC(18,2) NULL,
RL31 NUMERIC(18,2) NULL,
RL32 NUMERIC(18,2) NULL,
RL33 NUMERIC(18,2) NULL,
RL34 NUMERIC(18,2) NULL,
RL35 NUMERIC(18,2) NULL,
RL36 NUMERIC(18,2) NULL,
RL37 NUMERIC(18,2) NULL,
RL38 NUMERIC(18,2) NULL,
RL39 NUMERIC(18,2) NULL,
RL40 NUMERIC(18,2) NULL,
RL41 NUMERIC(18,2) NULL,
RL42 NUMERIC(18,2) NULL,
RL43 NUMERIC(18,2) NULL,
RL44 NUMERIC(18,2) NULL,
RL45 NUMERIC(18,2) NULL,
RL46 NUMERIC(18,2) NULL,
RL47 NUMERIC(18,2) NULL,
RL48 NUMERIC(18,2) NULL,
RL49 NUMERIC(18,2) NULL,
    PRIMARY KEY (ONR, KNR),
    FOREIGN KEY (ONR) REFERENCES KONTEN(ONR),
    FOREIGN KEY (ONR) REFERENCES KONTEN(KNR),
    FOREIGN KEY (KNR) REFERENCES KONTEN(ONR),
    FOREIGN KEY (KNR) REFERENCES KONTEN(KNR)
);

-- Tabelle: NKMASTER
CREATE TABLE NKMASTER (
ONR INTEGER NULL,
KNR INTEGER NULL,
ANREDE VARCHAR NULL,
NAME VARCHAR NULL,
NAME_2 VARCHAR NULL,
STRASSE VARCHAR NULL,
FREI VARCHAR NULL,
PLZ_ORT VARCHAR NULL,
ORT_DATUM VARCHAR NULL,
HAUS_WOHNUNG VARCHAR NULL,
BRIEF_ANREDE VARCHAR NULL,
ABRVON DATE NULL,
ABRBIS DATE NULL,
IHRABRVON DATE NULL,
IHRABRBIS DATE NULL,
BKVZ NUMERIC(15,2) NULL,
HKVZ NUMERIC(15,2) NULL,
BKGES NUMERIC(15,2) NULL,
HKGES NUMERIC(15,2) NULL,
BKANT NUMERIC(15,2) NULL,
HKANT NUMERIC(15,2) NULL,
BKERG NUMERIC(15,2) NULL,
HKERG NUMERIC(15,2) NULL,
GESERG NUMERIC(15,2) NULL,
HAUSGGES NUMERIC(15,2) NULL,
HAUSGANT NUMERIC(15,2) NULL,
HAUSGVZ NUMERIC(15,2) NULL,
HAUSGERG NUMERIC(15,2) NULL,
ABRTAGE INTEGER NULL,
IHRABRTAGE INTEGER NULL,
KNRSTR VARCHAR NULL,
KBEZ VARCHAR NULL,
SOLLG CHAR NULL,
ABRAM VARCHAR NULL,
STATUS SMALLINT NULL,
IPNR INTEGER NULL,
MWSTAUS DOUBLE PRECISION NULL,
BKNEUVZ NUMERIC(15,2) NULL,
HKNEUVZ NUMERIC(15,2) NULL,
HGNEUVZ NUMERIC(15,2) NULL,
ALT CHAR NULL,
MONATE FLOAT NULL,
VERW_NAME VARCHAR NULL,
VERW_ZUSATZ VARCHAR NULL,
VERW_STRASSE VARCHAR NULL,
VERW_PLZ_ORT VARCHAR NULL,
VERW_TEL VARCHAR NULL,
VERW_FAX VARCHAR NULL,
EINL_ZEILE1 VARCHAR NULL,
EINL_ZEILE2 VARCHAR NULL,
EINL_ZEILE3 VARCHAR NULL,
ABSCHL_ZEILE1 VARCHAR NULL,
ABSCHL_ZEILE2 VARCHAR NULL,
ABSCHL_ZEILE3 VARCHAR NULL,
BKVZUST NUMERIC(15,2) NULL,
HKVZUST NUMERIC(15,2) NULL,
HAUSGVZUST NUMERIC(15,2) NULL,
NKANTUST NUMERIC(15,2) NULL,
ENR INTEGER NULL,
MIETTEXT VARCHAR NULL,
MIETE NUMERIC(15,2) NULL,
OPGN NUMERIC(15,2) NULL,
HAUSGES_NETTO NUMERIC(15,2) NULL,
WSYMBOL CHAR NULL,
SPITZEAUSW CHAR NULL,
SPITZEMONATE SMALLINT NULL,
HGALT NUMERIC(15,2) NULL,
RECHNR VARCHAR NULL,
UST_ID VARCHAR NULL,
VERW_BANK VARCHAR NULL,
ERSTELLTAM VARCHAR NULL,
ADR_1 VARCHAR NULL,
ADR_2 VARCHAR NULL,
OP NUMERIC(15,2) NULL,
MAWAGNIS NUMERIC(15,2) NULL,
FAX VARCHAR NULL,
EMAIL VARCHAR NULL,
WEG_ZUF_GES_IST NUMERIC(15,2) NULL,
WEG_ZUF_GES_SOLL NUMERIC(15,2) NULL,
WEG_ZUF_ANTEIL_FEHLBETRAG NUMERIC(15,2) NULL,
ENTRL_ANTEIL NUMERIC(15,2) NULL,
ENTRL_ANTEIL_UST NUMERIC(15,2) NULL,
STEUERNUMMER VARCHAR NULL,
FINANZAMT VARCHAR NULL,
GESAMTMITNUML NUMERIC(18,2) NULL,
GESAMTMITNUMLNETTO NUMERIC(18,2) NULL,
NEUVZ1 NUMERIC(18,2) NULL,
NEUVZ2 NUMERIC(18,2) NULL,
NEUVZ3 NUMERIC(18,2) NULL,
NEUVZ4 NUMERIC(18,2) NULL,
NEUVZ5 NUMERIC(18,2) NULL,
NEUVZ6 NUMERIC(18,2) NULL,
NEUVZ7 NUMERIC(18,2) NULL,
NEUVZ8 NUMERIC(18,2) NULL,
HG_IST NUMERIC(18,2) NULL DEFAULT DEFAULT 0,
HG_GESAMTVZ NUMERIC(18,2) NULL DEFAULT DEFAULT 0,
RL_GESAMTSOLL NUMERIC(18,2) NULL DEFAULT DEFAULT 0,
ENTRL_GESAMT NUMERIC(18,2) NULL DEFAULT DEFAULT 0,
IS_SOLLABR CHAR NULL DEFAULT DEFAULT 'N',
HG_SOLL NUMERIC(18,2) NULL DEFAULT DEFAULT 0,
OFFENE_SONUML NUMERIC(18,2) NULL DEFAULT DEFAULT 0,
SONUML_ANTEIL NUMERIC(18,2) NULL DEFAULT DEFAULT 0,
SONUML_GESAMT NUMERIC(18,2) NULL DEFAULT DEFAULT 0,
SONUML_UST NUMERIC(18,2) NULL DEFAULT DEFAULT 0,
ZWEITESEITE VARCHAR NULL,
ADR_1EIG VARCHAR NULL,
ADR_2EIG VARCHAR NULL,
STRASSEEIG VARCHAR NULL,
PLZ_ORTEIG VARCHAR NULL,
ADR VARCHAR NULL,
HKNEUVZ_INFO VARCHAR NULL DEFAULT DEFAULT '',
KOMMUNIKATIONSKANAL SMALLINT NULL,
    PRIMARY KEY (ONR, KNR)
);

-- Tabelle: NKMASTER_WIPL
CREATE TABLE NKMASTER_WIPL (
ONR INTEGER NOT NULL,
KNR INTEGER NOT NULL,
ANREDE VARCHAR NULL,
NAME VARCHAR NULL,
NAME_2 VARCHAR NULL,
STRASSE VARCHAR NULL,
FREI VARCHAR NULL,
PLZ_ORT VARCHAR NULL,
ORT_DATUM VARCHAR NULL,
HAUS_WOHNUNG VARCHAR NULL,
BRIEF_ANREDE VARCHAR NULL,
ABRVON DATE NULL,
ABRBIS DATE NULL,
IHRABRVON DATE NULL,
IHRABRBIS DATE NULL,
BKVZ NUMERIC(15,2) NULL,
HKVZ NUMERIC(15,2) NULL,
BKGES NUMERIC(15,2) NULL,
HKGES NUMERIC(15,2) NULL,
BKANT NUMERIC(15,2) NULL,
HKANT NUMERIC(15,2) NULL,
BKERG NUMERIC(15,2) NULL,
HKERG NUMERIC(15,2) NULL,
GESERG NUMERIC(15,2) NULL,
HAUSGGES NUMERIC(15,2) NULL,
HAUSGANT NUMERIC(15,2) NULL,
HAUSGVZ NUMERIC(15,2) NULL,
HAUSGERG NUMERIC(15,2) NULL,
ABRTAGE INTEGER NULL,
IHRABRTAGE INTEGER NULL,
KNRSTR VARCHAR NULL,
KBEZ VARCHAR NULL,
SOLLG CHAR NULL,
ABRAM VARCHAR NULL,
STATUS SMALLINT NULL,
IPNR INTEGER NULL,
MWSTAUS DOUBLE PRECISION NULL,
BKNEUVZ NUMERIC(15,2) NULL,
HKNEUVZ NUMERIC(15,2) NULL,
HGNEUVZ NUMERIC(15,2) NULL,
ALT CHAR NULL,
MONATE FLOAT NULL,
VERW_NAME VARCHAR NULL,
VERW_ZUSATZ VARCHAR NULL,
VERW_STRASSE VARCHAR NULL,
VERW_PLZ_ORT VARCHAR NULL,
VERW_TEL VARCHAR NULL,
VERW_FAX VARCHAR NULL,
EINL_ZEILE1 VARCHAR NULL,
EINL_ZEILE2 VARCHAR NULL,
EINL_ZEILE3 VARCHAR NULL,
ABSCHL_ZEILE1 VARCHAR NULL,
ABSCHL_ZEILE2 VARCHAR NULL,
ABSCHL_ZEILE3 VARCHAR NULL,
BKVZUST NUMERIC(15,2) NULL,
HKVZUST NUMERIC(15,2) NULL,
HAUSGVZUST NUMERIC(15,2) NULL,
NKANTUST NUMERIC(15,2) NULL,
ENR INTEGER NULL,
MIETTEXT VARCHAR NULL,
MIETE NUMERIC(15,2) NULL,
OPGN NUMERIC(15,2) NULL,
HAUSGES_NETTO NUMERIC(15,2) NULL,
WSYMBOL CHAR NULL,
SPITZEAUSW CHAR NULL,
SPITZEMONATE SMALLINT NULL,
HGALT NUMERIC(15,2) NULL,
RECHNR VARCHAR NULL,
UST_ID VARCHAR NULL,
VERW_BANK VARCHAR NULL,
ERSTELLTAM VARCHAR NULL,
ADR_1 VARCHAR NULL,
ADR_2 VARCHAR NULL,
OP NUMERIC(15,2) NULL,
MAWAGNIS NUMERIC(15,2) NULL,
FAX VARCHAR NULL,
EMAIL VARCHAR NULL,
WEG_ZUF_GES_IST NUMERIC(15,2) NULL,
WEG_ZUF_GES_SOLL NUMERIC(15,2) NULL,
WEG_ZUF_ANTEIL_FEHLBETRAG NUMERIC(15,2) NULL,
ENTRL_ANTEIL NUMERIC(15,2) NULL,
ENTRL_ANTEIL_UST NUMERIC(15,2) NULL,
STEUERNUMMER VARCHAR NULL,
FINANZAMT VARCHAR NULL,
GESAMTMITNUML NUMERIC(18,2) NULL,
GESAMTMITNUMLNETTO NUMERIC(18,2) NULL,
NEUVZ1 NUMERIC(18,2) NULL,
NEUVZ2 NUMERIC(18,2) NULL,
NEUVZ3 NUMERIC(18,2) NULL,
NEUVZ4 NUMERIC(18,2) NULL,
NEUVZ5 NUMERIC(18,2) NULL,
NEUVZ6 NUMERIC(18,2) NULL,
NEUVZ7 NUMERIC(18,2) NULL,
NEUVZ8 NUMERIC(18,2) NULL,
HG_IST NUMERIC(18,2) NULL DEFAULT DEFAULT 0,
HG_GESAMTVZ NUMERIC(18,2) NULL DEFAULT DEFAULT 0,
RL_GESAMTSOLL NUMERIC(18,2) NULL DEFAULT DEFAULT 0,
ENTRL_GESAMT NUMERIC(18,2) NULL DEFAULT DEFAULT 0,
IS_SOLLABR CHAR NULL DEFAULT DEFAULT 'N',
HG_SOLL NUMERIC(18,2) NULL DEFAULT DEFAULT 0,
OFFENE_SONUML NUMERIC(18,2) NULL DEFAULT DEFAULT 0,
SONUML_ANTEIL NUMERIC(18,2) NULL DEFAULT DEFAULT 0,
SONUML_GESAMT NUMERIC(18,2) NULL DEFAULT DEFAULT 0,
SONUML_UST NUMERIC(18,2) NULL DEFAULT DEFAULT 0,
ZWEITESEITE VARCHAR NULL,
ADR_1EIG VARCHAR NULL,
ADR_2EIG VARCHAR NULL,
STRASSEEIG VARCHAR NULL,
PLZ_ORTEIG VARCHAR NULL,
ADR VARCHAR NULL,
HKNEUVZ_INFO VARCHAR NULL DEFAULT DEFAULT '',
KOMMUNIKATIONSKANAL SMALLINT NULL,
    PRIMARY KEY (ONR, KNR)
);

-- Tabelle: OBJBANKEN
CREATE TABLE OBJBANKEN (
ONR INTEGER NULL,
KNR INTEGER NULL,
BANKNR INTEGER NULL,
    PRIMARY KEY (ONR, KNR),
    FOREIGN KEY (BANKNR) REFERENCES BANKEN(NR),
    FOREIGN KEY (ONR) REFERENCES KONTEN(ONR),
    FOREIGN KEY (ONR) REFERENCES KONTEN(KNR),
    FOREIGN KEY (KNR) REFERENCES KONTEN(ONR),
    FOREIGN KEY (KNR) REFERENCES KONTEN(KNR)
);

-- Tabelle: OBJEKTE
CREATE TABLE OBJEKTE (
ONR SMALLINT NULL,
OBEZ VARCHAR NULL,
OSTRASSE VARCHAR NULL,
OPLZORT VARCHAR NULL,
OANZEINH SMALLINT NULL,
GA1 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA2 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA3 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA4 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA5 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA6 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA7 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA8 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA9 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA10 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA11 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA12 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA13 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA14 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA15 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA16 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA17 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA18 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA19 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA20 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA21 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA22 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA23 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA24 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA25 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA26 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA27 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA28 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA29 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA30 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA31 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA32 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA33 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA34 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA35 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA36 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA37 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA38 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA39 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA40 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA41 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA42 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA43 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA44 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA45 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA46 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA47 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA48 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA49 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA50 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA51 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA52 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA53 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA54 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA55 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA56 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA57 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA58 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA59 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA60 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA61 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA62 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA63 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA64 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA65 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA66 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA67 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA68 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA69 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA70 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA71 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA72 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA73 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA74 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA75 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA76 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA77 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA78 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA79 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA80 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA81 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA82 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA83 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA84 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA85 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA86 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA87 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA88 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA89 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA90 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA91 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA92 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA93 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA94 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA95 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA96 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA97 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA98 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
GA99 NUMERIC(15,4) NULL DEFAULT DEFAULT 0,
BANK VARCHAR NULL,
NAME VARCHAR NULL,
KTO VARCHAR NULL,
BLZ VARCHAR NULL,
KTOSTAND NUMERIC(15,2) NULL,
KTOASTAND NUMERIC(15,2) NULL,
FUSSZ1 VARCHAR NULL,
FUSSZ2 VARCHAR NULL,
BAUTOSOLL INTEGER NULL,
SOLL_KOPF CHAR NULL,
SOLL_FUSS CHAR NULL,
RKTOSTAND NUMERIC(15,2) NULL,
RKTOASTAND NUMERIC(15,2) NULL,
LEVBANKNR INTEGER NULL,
SMIETE NUMERIC(15,2) NULL,
SVORAUSZ NUMERIC(15,2) NULL,
SHAUSGELD NUMERIC(15,2) NULL,
BKVON DATE NULL,
BKBIS DATE NULL,
HKVON DATE NULL,
HKBIS DATE NULL,
VERWNAME VARCHAR NULL,
VERWFIRMA VARCHAR NULL,
VERWORT VARCHAR NULL,
VERWTEL VARCHAR NULL,
VERWFAX VARCHAR NULL,
VERWSTR VARCHAR NULL,
FRINH1 VARCHAR NULL,
FRINH2 VARCHAR NULL,
FRINH3 VARCHAR NULL,
FRINH4 VARCHAR NULL,
FRINH5 VARCHAR NULL,
FRINH6 VARCHAR NULL,
FRINH7 VARCHAR NULL,
FRINH8 VARCHAR NULL,
FRINH9 VARCHAR NULL,
FRINH10 VARCHAR NULL,
FRINH11 VARCHAR NULL,
FRINH12 VARCHAR NULL,
VERWTEL2 VARCHAR NULL,
VERWHANDY VARCHAR NULL,
VERWEMAIL VARCHAR NULL,
BEXTINT CHAR NULL,
HUWERT FLOAT NULL,
WWASMW FLOAT NULL,
HEIZMEDIUM FLOAT NULL,
BWWASSER CHAR NULL,
HKVERKTO FLOAT NULL,
HEIZSYSTEM VARCHAR NULL,
HKDIENST VARCHAR NULL,
BSONST SMALLINT NULL,
EIGNR INTEGER NULL,
ABRFUSSZ1 VARCHAR NULL,
ABRFUSSZ2 VARCHAR NULL,
ABRFUSSZ3 VARCHAR NULL,
HMNAME VARCHAR NULL,
HMFIRMA VARCHAR NULL,
HMSTR VARCHAR NULL,
HMORT VARCHAR NULL,
HMTEL VARCHAR NULL,
HMTEL2 VARCHAR NULL,
HMHANDY VARCHAR NULL,
HMFAX VARCHAR NULL,
HMEMAIL VARCHAR NULL,
NOTIZ BLOB NULL,
ART VARCHAR NULL,
FUSSZE1 VARCHAR NULL,
FUSSZE2 VARCHAR NULL,
LEVBANKNR2 INTEGER NULL,
WIBEGIN DATE NULL,
WIENDE DATE NULL,
WIALTBEGIN DATE NULL,
WIALTENDE DATE NULL,
WIDATENALT CHAR NULL,
WIBDATUM CHAR NULL,
HEIZEXTERN CHAR NULL,
FERNWAERME CHAR NULL,
BRENNSTOFFART SMALLINT NULL,
HEIZANFMENGE FLOAT NULL,
HEIZANFBETRAG NUMERIC(15,2) NULL,
HEIZANFPREISEINH FLOAT NULL,
HEIZVERBRMENGE FLOAT NULL,
HEIZBRENNK NUMERIC(15,2) NULL,
HEIZRESTMENGE FLOAT NULL,
BRENNKOSTKTO INTEGER NULL,
WARMWASSTEMP FLOAT NULL,
WARMWASSVERBR FLOAT NULL,
HEIZWERT FLOAT NULL,
HEIZPARA9 CHAR NULL,
HEIZWARMWPROZ FLOAT NULL,
HEIZBRENNKPROZ FLOAT NULL,
BUSCHLPROZ1 FLOAT NULL,
BUSCHLPROZ2 FLOAT NULL,
WUSCHLPROZ1 FLOAT NULL,
WUSCHLPROZ2 FLOAT NULL,
BUSCHL1 SMALLINT NULL,
BUSCHL2 SMALLINT NULL,
WUSCHL1 SMALLINT NULL,
WUSCHL2 SMALLINT NULL,
HEIZEINH VARCHAR NULL,
GESHEIZK NUMERIC(15,2) NULL,
GESWWK NUMERIC(15,2) NULL,
WWFEST FLOAT NULL,
GESHEIZANLK NUMERIC(15,2) NULL,
HEIZNEBENK NUMERIC(15,2) NULL,
HEIZZUSATZK NUMERIC(15,2) NULL,
WWZUSATZK NUMERIC(15,2) NULL,
HEIZK NUMERIC(15,2) NULL,
WWK NUMERIC(15,2) NULL,
EXTHEIZART SMALLINT NULL,
BKTORUECKLAS INTEGER NULL,
BKTOMAHN INTEGER NULL,
EKTORUECKLAS INTEGER NULL,
EKTOMAHN INTEGER NULL,
BELNR INTEGER NULL,
WIPLHEIZK NUMERIC(15,2) NULL,
ABRNKEINLTEXT BLOB NULL,
ABRNKABSCHLTEXTGUTH BLOB NULL,
ABRNKABSCHLTEXTNACHZ BLOB NULL,
ABRWEGEINLTEXT BLOB NULL,
ABRWEGABSCHLTEXTGUTH BLOB NULL,
ABRWEGABSCHLTEXTNACHZ BLOB NULL,
WIPLEINLTEXT BLOB NULL,
WIPLABSCHLTEXT BLOB NULL,
ISLOCK INTEGER NULL,
USTID VARCHAR NULL,
RECHNR INTEGER NULL DEFAULT DEFAULT 0,
RECHNRSTR VARCHAR NULL,
KWUSCHL INTEGER NULL,
GESKWKOSTEN NUMERIC(15,2) NULL,
GESHEIZKNETTO NUMERIC(15,2) NULL,
HFREI1 VARCHAR NULL,
HFREI2 VARCHAR NULL,
HFREI3 VARCHAR NULL,
HFREI4 VARCHAR NULL,
HFREI5 VARCHAR NULL,
HFREI6 VARCHAR NULL,
HFREI7 VARCHAR NULL,
HFREI8 VARCHAR NULL,
HFREI9 VARCHAR NULL,
HFREI10 VARCHAR NULL,
HFREI11 VARCHAR NULL,
HFREI12 VARCHAR NULL,
WFREI1 VARCHAR NULL,
WFREI2 VARCHAR NULL,
WFREI3 VARCHAR NULL,
WFREI4 VARCHAR NULL,
WFREI5 VARCHAR NULL,
WFREI6 VARCHAR NULL,
WFREI7 VARCHAR NULL,
WFREI8 VARCHAR NULL,
WFREI9 VARCHAR NULL,
WFREI10 VARCHAR NULL,
WFREI11 VARCHAR NULL,
WFREI12 VARCHAR NULL,
VERWWWW VARCHAR NULL,
VERWNR INTEGER NULL,
VBR_NAME VARCHAR NULL,
VBR_FIRMA VARCHAR NULL,
VBR_STR VARCHAR NULL,
VBR_ORT VARCHAR NULL,
VBR_TEL VARCHAR NULL,
VBR_TEL2 VARCHAR NULL,
VBR_HANDY VARCHAR NULL,
VBR_FAX VARCHAR NULL,
VBR_EMAIL VARCHAR NULL,
ENERGWW NUMERIC(18,4) NULL DEFAULT DEFAULT 0,
ENERGHEIZ NUMERIC(18,4) NULL DEFAULT DEFAULT 0,
GESKWNETTO NUMERIC(18,2) NULL,
VBR_NR1 INTEGER NULL,
VBR_NR2 INTEGER NULL,
VBR_NR3 INTEGER NULL,
BETREUER_NR1 INTEGER NULL,
STEUERNUMMER VARCHAR NULL,
FINANZAMT VARCHAR NULL,
ENVBR_KENNWERT_REF NUMERIC(18,2) NULL,
SEPA_CI VARCHAR NULL,
SEPA_MANDAT_STD VARCHAR NULL,
VBR_NR4 INTEGER NULL,
VBR_NR5 INTEGER NULL,
VBR_NR6 INTEGER NULL,
VBR_NR_VORSITZ INTEGER NULL,
HMANREDE VARCHAR NULL,
HMBRIEFAN VARCHAR NULL,
SONUMLAGEBETRAG NUMERIC(18,2) NULL,
BKTOVERZUGSZINSEN INTEGER NULL,
EKTOVERZUGSZINSEN INTEGER NULL,
EIGNR2 INTEGER NULL,
EIGNR3 INTEGER NULL,
KOSTENSTELLE VARCHAR NULL,
FRINH13 VARCHAR NULL,
FRINH14 VARCHAR NULL,
FRINH15 VARCHAR NULL,
FRINH16 BLOB NULL,
HFREI13 VARCHAR NULL,
HFREI14 VARCHAR NULL,
HFREI15 VARCHAR NULL,
HFREI16 VARCHAR NULL,
FRINH17 VARCHAR NULL,
FRINH18 VARCHAR NULL,
FRINH19 VARCHAR NULL,
FRINH20 VARCHAR NULL,
HFREI17 VARCHAR NULL,
HFREI18 VARCHAR NULL,
HFREI19 VARCHAR NULL,
HFREI20 VARCHAR NULL,
ABRWEGANSCHREIBEN_EINL BLOB NULL DEFAULT default 'nachfolgend erhalten Sie Ihre Jahresabrechnung bestehend aus:- Gesamtdarstellung der Einnahmen und Ausgaben- Einzelabrechnung fÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼r Ihre Wohnung- Enwicklung der InstandhaltungsrÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼cklage mit Ausweis der RÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼ckstÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤nde- Ihre Vorauszahlungen fÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼r das Abrechnungsjahr- Entwicklung der Geldkonten- Bescheinigung ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â§35a "Haushaltsnahe Dienstleistungen"',
ABRWEGANSCHREIBEN_ABSCHL BLOB NULL DEFAULT default 'Fragen zur Abrechnung bitten wir im Vorfeld zu klÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ren. Dadurch kÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¶nnen unnÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¶tige VerzÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¶gerungen und Diskussionen in der Versammlung vermieden werden. Abrechnung bei Eigentumswechsel: Es wird darauf hingewiesen, dass lt. Urteil des BGH vom 15.5.1989 (AZ V ZB 14/88) derjenige EigentÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼mer fÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼r die Abrechnungsspitze haftet, der zum Zeitpunkt der Beschlussfassung im Grundbuch eingetragen ist.',
ABRWEGANSCHREIBEN_GUTH VARCHAR NULL DEFAULT default 'Gutschriften ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼berweisen wir Ihnen innerhalb von 14 Tagen auf Ihr Konto.',
ABRWEGANSCHREIBEN_NACHZ VARCHAR NULL DEFAULT default 'Bitte ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼berweisen Sie im Falle einer Nachzahlung den zu zahlenden Betrag auf das unten stehende Konto. Wenn Sie am Lastschriftverfahren teilnehmen, wird die Nachzahlung mit dem nÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤chsten Hausgeld eingezogen.',
HEIZKOSTEN_WEG_DIFF NUMERIC(15,2) NULL,
HEIZKOSTEN_WEG_DIFF_ALT NUMERIC(15,2) NULL,
HEIZKOSTEN_WEG_DIFF_USCHL INTEGER NULL,
KTOUNEINBRINGLICH INTEGER NULL,
SEPA_CI2 VARCHAR NULL,
MAHNGEB1 NUMERIC(15,2) NULL,
MAHNGEB2 NUMERIC(15,2) NULL,
MAHNGEB3 NUMERIC(15,2) NULL,
MAHNTAGE1 SMALLINT NULL,
MAHNTAGE2 SMALLINT NULL,
MAHNTAGE3 SMALLINT NULL,
MAHNENAB NUMERIC(15,2) NULL,
MAHNZIEL_TAGE SMALLINT NULL,
SOLLTAG SMALLINT NULL,
BMAHNEINL_1 BLOB NULL,
BMAHNABSCHL_1 BLOB NULL,
BMAHNEINL_2 BLOB NULL,
BMAHNABSCHL_2 BLOB NULL,
BMAHNEINL_3 BLOB NULL,
BMAHNABSCHL_3 BLOB NULL,
EMAHNEINL_1 BLOB NULL,
EMAHNABSCHL_1 BLOB NULL,
EMAHNEINL_2 BLOB NULL,
EMAHNABSCHL_2 BLOB NULL,
EMAHNEINL_3 BLOB NULL,
EMAHNABSCHL_3 BLOB NULL,
MAHNALT VARCHAR NULL,
VERWALTUNGSBEGINN DATE NULL,
VERWALTUNGSENDE DATE NULL,
ARCHIVIERT CHAR NULL,
CPSTATUS SMALLINT NULL,
KTORUNDUNGSDIFF INTEGER NULL,
SONUMLAGEBETRAG2 NUMERIC(18,2) NULL,
SONUMLAGEBETRAG3 NUMERIC(18,2) NULL,
SONUMLAGEBETRAG4 NUMERIC(18,2) NULL,
SONUMLAGEBETRAG5 NUMERIC(18,2) NULL,
SONUMLSCHL1 INTEGER NULL,
SONUMLSCHL2 INTEGER NULL,
SONUMLSCHL3 INTEGER NULL,
SONUMLSCHL4 INTEGER NULL,
SONUMLSCHL5 INTEGER NULL,
LAST_UPDATE TIMESTAMP NULL DEFAULT DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (ONR),
    FOREIGN KEY (EIGNR) REFERENCES EIGADR(EIGNR),
    FOREIGN KEY (VERWNR) REFERENCES VERWALTER(NR)
);

-- Tabelle: OBJPORTAL_TEXTE
CREATE TABLE OBJPORTAL_TEXTE (
ONR INTEGER NULL,
BEWEIG SMALLINT NULL,
KATEGORIE INTEGER NULL,
TEXT VARCHAR NULL,
SYNC SMALLINT NULL,
    PRIMARY KEY (ONR, BEWEIG, KATEGORIE),
    FOREIGN KEY (ONR) REFERENCES OBJEKTE(ONR)
);

-- Tabelle: ONLBBLZ
CREATE TABLE ONLBBLZ (
BLZ INTEGER NULL,
BANK VARCHAR NULL,
BIC VARCHAR NULL,
LAND INTEGER NULL,
PLZ VARCHAR NULL,
ORT VARCHAR NULL,
PZ CHAR NULL DEFAULT DEFAULT '00',
NBLZ CHAR NULL DEFAULT DEFAULT '00000000',
IBAN_REGEL CHAR NULL DEFAULT DEFAULT '000000',
    PRIMARY KEY (BIC, BLZ, LAND)
);

-- Tabelle: ONLBLERN
CREATE TABLE ONLBLERN (
NR INTEGER NULL,
ONR INTEGER NULL,
KNR INTEGER NULL,
LERNTEXT VARCHAR NULL,
BUCHUNGSTEXT VARCHAR NULL,
BANKNR INTEGER NULL,
    PRIMARY KEY (NR)
);

-- Tabelle: PERSONEN
CREATE TABLE PERSONEN (
LFNR INTEGER NULL,
ONR SMALLINT NULL,
KNR INTEGER NULL,
ANZ FLOAT NULL,
AB DATE NULL,
PTNR SMALLINT NULL DEFAULT DEFAULT 1,
    PRIMARY KEY (LFNR),
    FOREIGN KEY (ONR) REFERENCES KONTEN(ONR),
    FOREIGN KEY (ONR) REFERENCES KONTEN(KNR),
    FOREIGN KEY (KNR) REFERENCES KONTEN(ONR),
    FOREIGN KEY (KNR) REFERENCES KONTEN(KNR)
);

-- Tabelle: PMALT
CREATE TABLE PMALT (
LSTNR INTEGER NULL,
ONR INTEGER NULL,
ENR INTEGER NULL,
KNR INTEGER NULL,
NAME VARCHAR NULL,
VON DATE NULL,
BIS DATE NULL,
PERS NUMERIC(15,2) NULL,
TAGE NUMERIC(15,2) NULL
);

-- Tabelle: QUICKTEXTE
CREATE TABLE QUICKTEXTE (
ID INTEGER NULL,
BEZEICHNUNG VARCHAR NULL,
ORDNER VARCHAR NULL,
TEXT BLOB NULL,
    PRIMARY KEY (ID)
);

-- Tabelle: RUECKBKT
CREATE TABLE RUECKBKT (
NR INTEGER NULL,
ONR SMALLINT NULL,
KNR INTEGER NULL,
RUECKPOS INTEGER NULL,
BEZ VARCHAR NULL,
BEZ2 VARCHAR NULL,
BLZ VARCHAR NULL,
KONTO VARCHAR NULL,
BANK VARCHAR NULL,
POS1 NUMERIC(15,2) NULL,
POS2 NUMERIC(15,2) NULL,
POS3 NUMERIC(15,2) NULL,
POS4 NUMERIC(15,2) NULL,
POS5 NUMERIC(15,2) NULL,
POS6 NUMERIC(15,2) NULL,
ANFSTAND NUMERIC(15,2) NULL DEFAULT DEFAULT 0,
ENDSTAND NUMERIC(15,2) NULL DEFAULT DEFAULT 0,
ZUF NUMERIC(15,2) NULL DEFAULT DEFAULT 0,
ENTN NUMERIC(15,2) NULL DEFAULT DEFAULT 0,
BIC VARCHAR NULL,
IBAN VARCHAR NULL,
POS7 NUMERIC(15,2) NULL DEFAULT DEFAULT 0.0,
POS8 NUMERIC(15,2) NULL DEFAULT DEFAULT 0.0,
POS9 NUMERIC(15,2) NULL DEFAULT DEFAULT 0.0,
POS10 NUMERIC(15,2) NULL DEFAULT DEFAULT 0.0,
    PRIMARY KEY (NR),
    FOREIGN KEY (RUECKPOS) REFERENCES RUECKPOS(NR)
);

-- Tabelle: RUECKPOS
CREATE TABLE RUECKPOS (
NR INTEGER NULL,
ONR INTEGER NULL,
NAME VARCHAR NULL DEFAULT default 'RÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼cklagen',
KZUF INTEGER NULL DEFAULT DEFAULT 30000,
KENTN INTEGER NULL DEFAULT DEFAULT 30100,
KNRP INTEGER NULL,
ANFSTAND NUMERIC(15,2) NULL DEFAULT DEFAULT 0,
USCHL SMALLINT NULL DEFAULT DEFAULT 52,
POS1 NUMERIC(15,2) NULL,
POS2 NUMERIC(15,2) NULL,
POS3 NUMERIC(15,2) NULL,
POS4 NUMERIC(15,2) NULL,
POS5 NUMERIC(15,2) NULL,
POS6 NUMERIC(15,2) NULL,
POS1NAME VARCHAR NULL DEFAULT DEFAULT 'Zinsen',
POS2NAME VARCHAR NULL DEFAULT DEFAULT 'Zinsabschlagsteuer',
POS3NAME VARCHAR NULL DEFAULT default 'SolidaritÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤tszuschlag',
POS4NAME VARCHAR NULL DEFAULT DEFAULT 'Kapitalertragssteuer',
POS5NAME VARCHAR NULL DEFAULT DEFAULT 'Frei definierbar',
POS6NAME VARCHAR NULL DEFAULT DEFAULT 'Frei definierbar',
POS1CHECK CHAR NULL DEFAULT DEFAULT 'N',
POS2CHECK CHAR NULL DEFAULT DEFAULT 'N',
POS3CHECK CHAR NULL DEFAULT DEFAULT 'N',
POS4CHECK CHAR NULL DEFAULT DEFAULT 'N',
POS5CHECK CHAR NULL DEFAULT DEFAULT 'N',
POS6CHECK CHAR NULL DEFAULT DEFAULT 'N',
ENDSTAND NUMERIC(15,2) NULL,
ZUF NUMERIC(15,2) NULL DEFAULT DEFAULT 0,
ENTN NUMERIC(15,2) NULL DEFAULT DEFAULT 0,
DTVON DATE NULL,
DTBIS DATE NULL,
ZUF_SOLL NUMERIC(18,2) NULL DEFAULT DEFAULT 0,
ENDSTAND_SOLL NUMERIC(18,2) NULL,
KONTO_VZ INTEGER NULL,
ZUFNACHZ NUMERIC(18,2) NULL DEFAULT DEFAULT 0,
POS7 NUMERIC(15,2) NULL DEFAULT DEFAULT 0.0,
POS7NAME VARCHAR NULL DEFAULT DEFAULT 'Frei definierbar',
POS7CHECK CHAR NULL DEFAULT DEFAULT 'N',
POS8 NUMERIC(15,2) NULL DEFAULT DEFAULT 0.0,
POS8NAME VARCHAR NULL DEFAULT DEFAULT 'Frei definierbar',
POS8CHECK CHAR NULL DEFAULT DEFAULT 'N',
POS9 NUMERIC(15,2) NULL DEFAULT DEFAULT 0.0,
POS9NAME VARCHAR NULL DEFAULT DEFAULT 'Frei definierbar',
POS9CHECK CHAR NULL DEFAULT DEFAULT 'N',
POS10 NUMERIC(15,2) NULL DEFAULT DEFAULT 0.0,
POS10NAME VARCHAR NULL DEFAULT DEFAULT 'Frei definierbar',
POS10CHECK CHAR NULL DEFAULT DEFAULT 'N',
ANFSTAND_SOLL NUMERIC(15,2) NULL DEFAULT DEFAULT 0,
KSONDERZUF INTEGER NULL,
SONDERZUF NUMERIC(15,2) NULL,
KSONDERENTN INTEGER NULL,
SONDERENTN NUMERIC(15,2) NULL,
ZUFNACHZ_SOLL NUMERIC(18,2) NULL,
RAP_SOLL NUMERIC(18,2) NULL,
RAP_IST NUMERIC(18,2) NULL,
AB_GEBUCHT CHAR NULL DEFAULT DEFAULT 'N',
    PRIMARY KEY (NR),
    FOREIGN KEY (ONR) REFERENCES OBJEKTE(ONR)
);

-- Tabelle: SBUCHUNG
CREATE TABLE SBUCHUNG (
BNR INTEGER NULL,
BUCHNR INTEGER NULL,
ONR SMALLINT NULL,
KNR INTEGER NULL,
BETRAG NUMERIC(15,2) NULL,
ART SMALLINT NULL,
DATUM DATE NULL,
MWST NUMERIC(15,2) NULL,
WDATUM DATE NULL,
    PRIMARY KEY (BNR),
    FOREIGN KEY (BUCHNR) REFERENCES BUCHUNGTEMP(BNR)
);

-- Tabelle: SCHLUESSEL
CREATE TABLE SCHLUESSEL (
ID INTEGER NULL,
ONR INTEGER NULL,
BEZEICHNUNG VARCHAR NULL,
BESITZER VARCHAR NULL,
BEMERKUNG BLOB NULL,
GESAMTZAHL INTEGER NULL,
AUSGEGEBEN INTEGER NULL,
REST INTEGER NULL,
EBEZ VARCHAR NULL,
ENR INTEGER NULL,
    PRIMARY KEY (ID),
    FOREIGN KEY (ONR) REFERENCES OBJEKTE(ONR)
);

-- Tabelle: SCHLUESSEL_AUSGABE
CREATE TABLE SCHLUESSEL_AUSGABE (
ID INTEGER NULL,
KONTAKT_NR INTEGER NULL,
SCHLUESSEL_ID INTEGER NULL,
DATUM_AUSGABE DATE NULL,
DATUM_FRIST DATE NULL,
DATUM_ZURUECK DATE NULL,
ONR INTEGER NULL,
KNR INTEGER NULL,
KONTAKT VARCHAR NULL,
MENGE INTEGER NULL DEFAULT DEFAULT 1,
MITARBEITER_NR INTEGER NULL,
MITARBEITER_OHNE_CRM VARCHAR NULL,
BEMERKUNG BLOB NULL
);

-- Tabelle: SEEIG
CREATE TABLE SEEIG (
ONR INTEGER NULL,
KNR INTEGER NULL,
ART SMALLINT NULL,
FESTBETRAG NUMERIC(15,2) NULL,
UEBERWEISUNG CHAR NULL,
POS SMALLINT NULL,
    PRIMARY KEY (ONR, KNR),
    FOREIGN KEY (ONR) REFERENCES EIGENTUEMER(ONR),
    FOREIGN KEY (ONR) REFERENCES EIGENTUEMER(KNR),
    FOREIGN KEY (KNR) REFERENCES EIGENTUEMER(ONR),
    FOREIGN KEY (KNR) REFERENCES EIGENTUEMER(KNR)
);

-- Tabelle: SET_A
CREATE TABLE SET_A (
ORDNUNGSBEGRIFF VARCHAR NULL,
KUNDENNR INTEGER NULL,
ONR SMALLINT NULL,
ENR SMALLINT NULL,
NUTZERNR VARCHAR NULL,
ABRECHNUNGSART SMALLINT NULL,
OBEZ VARCHAR NULL,
OSTRASSE VARCHAR NULL,
OPLZORT VARCHAR NULL,
EBEZ VARCHAR NULL,
    PRIMARY KEY (ORDNUNGSBEGRIFF)
);

-- Tabelle: SET_B
CREATE TABLE SET_B (
ID INTEGER NULL,
ORDNUNGSBEGRIFF VARCHAR NULL,
ONR SMALLINT NULL,
ABRVON DATE NULL,
ABRBIS DATE NULL,
RUECKGABEWAEHRUNG CHAR NULL,
BRENNSTOFFART SMALLINT NULL,
ANFANGSBESTAND FLOAT NULL,
ANFANGSDATUM DATE NULL,
ENDBESTAND FLOAT NULL,
ENDDATUM DATE NULL,
ANFANGSBETRAG FLOAT NULL,
ENDBETRAG FLOAT NULL,
    PRIMARY KEY (ID)
);

-- Tabelle: SET_D
CREATE TABLE SET_D (
WINCASA_ID VARCHAR NULL,
ABRFIRMA_ID VARCHAR NULL,
ORDNUNGSBEGRIFF VARCHAR NULL,
KUNDENNR INTEGER NULL,
ONR SMALLINT NULL,
ENR SMALLINT NULL,
OBEZ VARCHAR NULL,
OSTRASSE VARCHAR NULL,
OPLZORT VARCHAR NULL,
EBEZ VARCHAR NULL,
NAME VARCHAR NULL,
VNAME VARCHAR NULL,
ABRVON DATE NULL,
LE_TAG_WOHN DATE NULL,
GESAMTKOSTEN FLOAT NULL,
GESAMTKOSTENSALDO FLOAT NULL,
MWST FLOAT NULL,
WAEHRUNG CHAR NULL,
    PRIMARY KEY (WINCASA_ID)
);

-- Tabelle: SET_W
CREATE TABLE SET_W (
WINCASA_ID VARCHAR NULL,
ABRFIRMA_ID VARCHAR NULL,
ORDNUNGSBEGRIFF VARCHAR NULL,
KUNDENNR INTEGER NULL,
ONR SMALLINT NULL,
ENR SMALLINT NULL,
OBEZ VARCHAR NULL,
OSTRASSE VARCHAR NULL,
OPLZORT VARCHAR NULL,
EBEZ VARCHAR NULL,
NAME VARCHAR NULL,
VNAME VARCHAR NULL,
ABRVON DATE NULL,
LE_TAG_WOHN DATE NULL,
GESAMTKOSTEN FLOAT NULL,
GESAMTKOSTENSALDO FLOAT NULL,
MWST FLOAT NULL,
WAEHRUNG CHAR NULL,
VERBRAUCH FLOAT NULL,
    PRIMARY KEY (WINCASA_ID)
);

-- Tabelle: SEVERTRAG
CREATE TABLE SEVERTRAG (
ONR INTEGER NULL,
SEVKNR INTEGER NULL,
EIGKNR INTEGER NULL,
EIGNR INTEGER NULL,
MIETBERECHNUNG SMALLINT NULL,
MIETGARANTIEART SMALLINT NULL,
MIETVZARTEN INTEGER NULL,
MIETFESTBETRAG NUMERIC(15,2) NULL,
MIETEQM NUMERIC(15,2) NULL,
USCHLQM SMALLINT NULL,
VERWPROZDERMETE NUMERIC(15,4) NULL,
VERWVZARTEN INTEGER NULL,
VERWPROZART SMALLINT NULL,
VERWPROZMINBETRAG NUMERIC(15,2) NULL,
VERWPROZMAXBETRAG NUMERIC(15,2) NULL,
VERWFESTBETRAG NUMERIC(15,2) NULL,
VERWPROZMIETELS NUMERIC(15,4) NULL,
VERWPROZARTLS SMALLINT NULL,
VERWPROZMINLS NUMERIC(15,2) NULL,
VERWPROZMAXLS NUMERIC(15,2) NULL,
VERWFESTBETRAGLS NUMERIC(15,2) NULL,
VERWMWSTSATZ SMALLINT NULL,
VERWNR INTEGER NULL,
HGWEG SMALLINT NULL,
HGBETRAG NUMERIC(15,2) NULL,
HGSOLL SMALLINT NULL,
HGMONAT SMALLINT NULL,
HGBANKNR INTEGER NULL,
HGAKTION SMALLINT NULL,
ABRTEXTVOR BLOB NULL,
ABRTEXTNACH BLOB NULL,
DATUMVON DATE NULL,
DATUMBIS DATE NULL,
SRLART SMALLINT NULL,
SRLPROZ NUMERIC(15,4) NULL,
SRLPROZMAXBETRAG NUMERIC(15,2) NULL,
SRLFESTBETRAG NUMERIC(15,2) NULL,
LETZTJAHRMON INTEGER NULL,
LETZTAUSZAHLUNG DATE NULL,
EIGBANKNR INTEGER NULL,
SEVBANKNR INTEGER NULL,
LEVEIG CHAR NULL,
BELEGNR INTEGER NULL,
UEBERSCHUSS NUMERIC(15,2) NULL,
MIETAUSZAHLUNG NUMERIC(15,2) NULL,
SALDOEIN NUMERIC(15,2) NULL,
SALDOAUS NUMERIC(15,2) NULL,
GARANTIEGEBER_NR INTEGER NULL,
SEPA_MAN_ART SMALLINT NULL DEFAULT DEFAULT 0,
SEPA_MAN_NR VARCHAR NULL,
SEPA_MAN_DAT DATE NULL,
SEPA_CI VARCHAR NULL,
GAR_KALTMIETE CHAR NULL DEFAULT DEFAULT 'N',
GAR_UEBZAHLEIG CHAR NULL DEFAULT DEFAULT 'J',
    PRIMARY KEY (ONR, SEVKNR),
    FOREIGN KEY (ONR) REFERENCES KONTEN(ONR),
    FOREIGN KEY (ONR) REFERENCES KONTEN(KNR),
    FOREIGN KEY (EIGKNR) REFERENCES KONTEN(ONR),
    FOREIGN KEY (EIGKNR) REFERENCES KONTEN(KNR),
    FOREIGN KEY (EIGNR) REFERENCES EIGADR(EIGNR),
    FOREIGN KEY (VERWNR) REFERENCES VERWALTER(NR)
);

-- Tabelle: SEVERTRAG_STD
CREATE TABLE SEVERTRAG_STD (
ONR INTEGER NULL,
SEVKNR INTEGER NULL,
MIETBERECHNUNG SMALLINT NULL,
MIETGARANTIEART SMALLINT NULL,
MIETVZARTEN INTEGER NULL,
MIETFESTBETRAG NUMERIC(15,2) NULL,
MIETEQM NUMERIC(15,2) NULL,
USCHLQM SMALLINT NULL,
VERWPROZDERMETE NUMERIC(15,4) NULL,
VERWVZARTEN INTEGER NULL,
VERWPROZART SMALLINT NULL,
VERWPROZMINBETRAG NUMERIC(15,2) NULL,
VERWPROZMAXBETRAG NUMERIC(15,2) NULL,
VERWFESTBETRAG NUMERIC(15,2) NULL,
VERWPROZMIETELS NUMERIC(15,4) NULL,
VERWPROZARTLS SMALLINT NULL,
VERWPROZMINLS NUMERIC(15,2) NULL,
VERWPROZMAXLS NUMERIC(15,2) NULL,
VERWFESTBETRAGLS NUMERIC(15,2) NULL,
VERWMWSTSATZ SMALLINT NULL,
HGBETRAG NUMERIC(15,2) NULL,
HGSOLL SMALLINT NULL,
HGMONAT SMALLINT NULL,
HGAKTION SMALLINT NULL,
ABRTEXTVOR BLOB NULL,
ABRTEXTNACH BLOB NULL,
SRLART SMALLINT NULL,
SRLPROZ NUMERIC(15,4) NULL,
SRLPROZMAXBETRAG NUMERIC(15,2) NULL,
SRLFESTBETRAG NUMERIC(15,2) NULL,
BELEGNR INTEGER NULL,
UEBERSCHUSS NUMERIC(15,2) NULL,
MIETAUSZAHLUNG NUMERIC(15,2) NULL,
SALDOEIN NUMERIC(15,2) NULL,
SALDOAUS NUMERIC(15,2) NULL,
GAR_KALTMIETE CHAR NULL DEFAULT DEFAULT 'N',
GAR_UEBZAHLEIG CHAR NULL DEFAULT DEFAULT 'J',
    PRIMARY KEY (ONR)
);

-- Tabelle: SEVMIETEN
CREATE TABLE SEVMIETEN (
BNR INTEGER NULL,
ONR INTEGER NULL,
KNR INTEGER NULL,
SEVKNR INTEGER NULL,
DATUM DATE NULL,
BELEGNR INTEGER NULL,
BETRAG NUMERIC(15,2) NULL,
TEXT VARCHAR NULL,
JAHRMONAT INTEGER NULL,
STATUS INTEGER NULL,
SEVBANKNR INTEGER NULL,
LBNR INTEGER NULL,
LIEFKNR INTEGER NULL,
MWST NUMERIC(15,2) NULL,
SLEVDATUM DATE NULL,
BUCHDATUM DATE NULL,
BUCHNR INTEGER NULL,
BETR_BK NUMERIC(15,2) NULL DEFAULT DEFAULT 0,
    PRIMARY KEY (BNR),
    FOREIGN KEY (ONR) REFERENCES SEVERTRAG(ONR),
    FOREIGN KEY (ONR) REFERENCES SEVERTRAG(SEVKNR),
    FOREIGN KEY (SEVKNR) REFERENCES SEVERTRAG(ONR),
    FOREIGN KEY (SEVKNR) REFERENCES SEVERTRAG(SEVKNR),
    FOREIGN KEY (SEVBANKNR) REFERENCES BANKEN(NR),
    FOREIGN KEY (ONR) REFERENCES SEVERTRAG(ONR),
    FOREIGN KEY (ONR) REFERENCES SEVERTRAG(SEVKNR),
    FOREIGN KEY (SEVKNR) REFERENCES SEVERTRAG(ONR),
    FOREIGN KEY (SEVKNR) REFERENCES SEVERTRAG(SEVKNR),
    FOREIGN KEY (BUCHNR) REFERENCES BUCHUNG(BNR)
);

-- Tabelle: SEVSOLLGEST
CREATE TABLE SEVSOLLGEST (
ONR SMALLINT NULL,
JAHR SMALLINT NULL,
SMONAT VARCHAR NULL,
    PRIMARY KEY (ONR, JAHR),
    FOREIGN KEY (ONR) REFERENCES OBJEKTE(ONR)
);

-- Tabelle: SKR03
CREATE TABLE SKR03 (
KNR INTEGER NULL,
KONTO VARCHAR NULL,
FINANZ CHAR NULL,
ART VARCHAR NULL,
STEXP CHAR NULL,
    PRIMARY KEY (KNR)
);

-- Tabelle: SKR04
CREATE TABLE SKR04 (
KNR INTEGER NULL,
KONTO VARCHAR NULL,
FINANZ CHAR NULL,
ART VARCHAR NULL,
STEXP CHAR NULL,
    PRIMARY KEY (KNR)
);

-- Tabelle: SLEVBUCH
CREATE TABLE SLEVBUCH (
LBNR INTEGER NULL,
BETRAG NUMERIC(15,2) NULL DEFAULT DEFAULT 0,
DATUM DATE NULL,
TEXT VARCHAR NULL,
BELEGNR INTEGER NULL,
BANKNR INTEGER NULL,
ONR SMALLINT NULL,
OPNR INTEGER NULL,
OPBETRAG NUMERIC(15,2) NULL,
    PRIMARY KEY (LBNR)
);

-- Tabelle: SOLLGEST
CREATE TABLE SOLLGEST (
ONR SMALLINT NULL,
JAHR SMALLINT NULL,
SMONAT VARCHAR NULL,
    PRIMARY KEY (ONR, JAHR),
    FOREIGN KEY (ONR) REFERENCES OBJEKTE(ONR)
);

-- Tabelle: SOLLGEST_VERWGEB
CREATE TABLE SOLLGEST_VERWGEB (
ONR SMALLINT NULL,
JAHR SMALLINT NULL,
SMONAT VARCHAR NULL,
    PRIMARY KEY (ONR, JAHR),
    FOREIGN KEY (ONR) REFERENCES OBJEKTE(ONR)
);

-- Tabelle: SONUML
CREATE TABLE SONUML (
NR INTEGER NULL,
ENR INTEGER NULL,
NAME VARCHAR NULL,
GESANT NUMERIC(15,2) NULL,
TEILANT NUMERIC(15,2) NULL,
BETRAG NUMERIC(15,2) NULL,
STATUS INTEGER NULL,
EIGNR INTEGER NULL,
ADR_1 VARCHAR NULL,
ADR_2 VARCHAR NULL,
STRASSE VARCHAR NULL,
PLZ_ORT VARCHAR NULL
);

-- Tabelle: SPLITBUCH
CREATE TABLE SPLITBUCH (
BNR INTEGER NULL,
BETRAG NUMERIC(15,2) NULL DEFAULT DEFAULT 0,
OPBETRAG NUMERIC(15,2) NULL,
    PRIMARY KEY (BNR)
);

-- Tabelle: SSOLL
CREATE TABLE SSOLL (
BNR INTEGER NULL,
SOLL VARCHAR NULL,
    PRIMARY KEY (BNR),
    FOREIGN KEY (BNR) REFERENCES BUCHUNGTEMP(BNR)
);

-- Tabelle: STAFFELVZ
CREATE TABLE STAFFELVZ (
ONR INTEGER NULL,
KNR INTEGER NULL,
ZPOS SMALLINT NULL,
BETRAG1 NUMERIC(18,2) NULL,
DATUM1 DATE NULL,
BETRAG2 NUMERIC(18,2) NULL,
DATUM2 DATE NULL,
BETRAG3 NUMERIC(18,2) NULL,
DATUM3 DATE NULL,
BETRAG4 NUMERIC(18,2) NULL,
DATUM4 DATE NULL,
BETRAG5 NUMERIC(18,2) NULL,
DATUM5 DATE NULL,
BETRAG6 NUMERIC(18,2) NULL,
DATUM6 DATE NULL,
BETRAG7 NUMERIC(18,2) NULL,
DATUM7 DATE NULL,
BETRAG8 NUMERIC(18,2) NULL,
DATUM8 DATE NULL,
BETRAG9 NUMERIC(18,2) NULL,
DATUM9 DATE NULL,
BETRAG10 NUMERIC(18,2) NULL,
DATUM10 DATE NULL,
    PRIMARY KEY (ONR, KNR, ZPOS),
    FOREIGN KEY (ONR) REFERENCES KONTEN(ONR),
    FOREIGN KEY (ONR) REFERENCES KONTEN(KNR),
    FOREIGN KEY (KNR) REFERENCES KONTEN(ONR),
    FOREIGN KEY (KNR) REFERENCES KONTEN(KNR)
);

-- Tabelle: STAMMKTO
CREATE TABLE STAMMKTO (
ONR SMALLINT NULL,
KNR INTEGER NULL,
KBEZ VARCHAR NULL,
KBRUTTO NUMERIC(15,2) NULL DEFAULT DEFAULT 0,
OPBETRAG NUMERIC(15,2) NULL DEFAULT DEFAULT 0,
KUST NUMERIC(15,2) NULL,
KVERTEILUNG CHAR NULL,
KKSTNR SMALLINT NULL,
KUSCHLNR1 SMALLINT NULL,
KUSCHLNR2 SMALLINT NULL,
KUSCHLPROZ1 SMALLINT NULL DEFAULT DEFAULT 100,
KUSCHLPROZ2 SMALLINT NULL DEFAULT DEFAULT 0,
KMAHNSTUFE SMALLINT NULL,
KBEW CHAR NULL,
KNRSTR VARCHAR NULL,
KABRECHNEN SMALLINT NULL,
KWBRUTTO NUMERIC(15,2) NULL DEFAULT DEFAULT 0,
KWBRUTTOALT NUMERIC(15,2) NULL DEFAULT DEFAULT 0,
MAHNDATUM DATE NULL,
MAHNGEDRUCKT SMALLINT NULL,
BUTEXT1 VARCHAR NULL,
BUTEXT2 VARCHAR NULL,
BUTEXT3 VARCHAR NULL,
BUTEXT4 VARCHAR NULL,
BUTEXT5 VARCHAR NULL,
LINR INTEGER NULL,
KKLASSE SMALLINT NULL DEFAULT DEFAULT 1,
STSATZ SMALLINT NULL,
EA SMALLINT NULL DEFAULT DEFAULT 1,
SELCODE VARCHAR NULL,
SFREI1 VARCHAR NULL,
SFREI2 VARCHAR NULL,
RFREI1 NUMERIC(15,2) NULL DEFAULT DEFAULT 0,
KBRUTTOWJ NUMERIC(15,2) NULL DEFAULT DEFAULT 0,
BFREI1 CHAR NULL,
IFREI1 INTEGER NULL DEFAULT DEFAULT 2,
IFREI2 INTEGER NULL,
FESTB NUMERIC(15,2) NULL,
FESTBPROZ FLOAT NULL,
IHRABRVON DATE NULL,
IHRABRBIS DATE NULL,
BHEIZ CHAR NULL,
HEIZKOSTEN NUMERIC(15,2) NULL,
USTVOR NUMERIC(15,2) NULL DEFAULT DEFAULT 16,
IHEIZK SMALLINT NULL,
KWERTBRUTTO NUMERIC(15,2) NULL,
MAWAGNIS CHAR NULL,
IHEIZEXT SMALLINT NULL,
DATEVKNR INTEGER NULL,
ENR INTEGER NULL,
MAW NUMERIC(15,2) NULL,
NEUTRAL SMALLINT NULL DEFAULT DEFAULT 1,
RLPOS INTEGER NULL,
BANKNR INTEGER NULL,
BKART VARCHAR NULL,
BKBEMERKUNG VARCHAR NULL,
SEV SMALLINT NULL,
SEVKNR INTEGER NULL,
INAKTIV CHAR NULL DEFAULT DEFAULT 'N',
KGESAMTMITNUML NUMERIC(18,4) NULL,
KGESAMTMITNUMLNETTO NUMERIC(18,4) NULL,
BEW SMALLINT NULL DEFAULT DEFAULT 0,
SOLL_IN_NK SMALLINT NULL,
OSI_STFREI CHAR NULL DEFAULT DEFAULT 'N',
NICHT_IN_EAR CHAR NULL DEFAULT DEFAULT 'N',
DATEVKNR2 INTEGER NULL,
KSTANDABRECHNEN SMALLINT NULL DEFAULT DEFAULT 0,
ZU_RL CHAR NULL DEFAULT DEFAULT 'N',
CAEXIM_KAT INTEGER NULL DEFAULT DEFAULT 0,
FESTB_NETTO SMALLINT NULL DEFAULT DEFAULT -1,
    PRIMARY KEY (ONR, KNR),
    FOREIGN KEY (ONR) REFERENCES MUSTERKR(MKRNR)
);

-- Tabelle: STATUS
CREATE TABLE STATUS (
NR INTEGER NULL DEFAULT DEFAULT 1,
IAKTOBJ SMALLINT NULL,
IAKTEINH SMALLINT NULL,
BELNR INTEGER NULL,
ISTBANK CHAR NULL,
VERWNAME VARCHAR NULL,
VERWFIRMA VARCHAR NULL,
VERWORT VARCHAR NULL,
VERWTEL VARCHAR NULL,
VERWFAX VARCHAR NULL,
VERWSTR VARCHAR NULL,
DRUCKRAND FLOAT NULL,
MAHNTAGE1 SMALLINT NULL,
MAHNGEB1 NUMERIC(15,2) NULL,
MAHNGEB2 NUMERIC(15,2) NULL,
MAHNGEB3 NUMERIC(15,2) NULL,
MAHNENAB NUMERIC(15,2) NULL,
SOLLTAG SMALLINT NULL,
MAHNTAGE2 SMALLINT NULL,
MAHNTAGE3 SMALLINT NULL,
VERWTEL2 VARCHAR NULL,
VERWHANDY VARCHAR NULL,
VERWEMAIL VARCHAR NULL,
FRNAME1 VARCHAR NULL,
FRNAME2 VARCHAR NULL,
FRNAME3 VARCHAR NULL,
FRNAME4 VARCHAR NULL,
FRNAME5 VARCHAR NULL,
FRNAME6 VARCHAR NULL,
FRNAME7 VARCHAR NULL,
FRNAME8 VARCHAR NULL,
FRNAME9 VARCHAR NULL,
FRNAME10 VARCHAR NULL,
FRNAME11 VARCHAR NULL,
FRNAME12 VARCHAR NULL,
BANFENDE CHAR NULL,
BEURO CHAR NULL DEFAULT DEFAULT 'J',
DMKONV FLOAT NULL DEFAULT DEFAULT 1,
EUROKONV FLOAT NULL,
BDMVOREIN CHAR NULL DEFAULT DEFAULT 'N',
GELDSYMBOL VARCHAR NULL,
WARGELDSYMBOL VARCHAR NULL,
BEUROOPT CHAR NULL DEFAULT DEFAULT 'N',
PRODID INTEGER NULL,
LIZENZNR VARCHAR NULL,
SONST1 INTEGER NULL,
SONST2 INTEGER NULL,
LASTBACKUP DATE NULL,
TREEVIEW CHAR NULL,
TREEIDX INTEGER NULL,
GENID INTEGER NULL,
LAND SMALLINT NULL DEFAULT DEFAULT 1,
KATEGORIE BLOB NULL,
ABUTEXTE BLOB NULL,
ANREDE BLOB NULL,
BANREDE BLOB NULL,
EART BLOB NULL,
EBUTEXTE BLOB NULL,
HEFELDER BLOB NULL,
KATEGOR BLOB NULL,
OART BLOB NULL,
TERMBEAR BLOB NULL,
TERMKAT BLOB NULL,
TITEL BLOB NULL,
UBUTEXTE BLOB NULL,
MWSTSATZ1 NUMERIC(15,4) NULL,
MWSTSATZ2 NUMERIC(15,4) NULL,
MWSTSATZ3 NUMERIC(15,4) NULL,
MWSTSATZ4 NUMERIC(15,4) NULL,
MWSTSATZ5 NUMERIC(15,4) NULL,
MWSTSATZ6 NUMERIC(15,4) NULL,
MWSTSATZ7 NUMERIC(15,4) NULL,
MWSTSATZ8 NUMERIC(15,4) NULL,
MWSTSATZ9 NUMERIC(15,4) NULL,
MWSTSATZ10 NUMERIC(15,4) NULL,
FIRST CHAR NULL,
TOUR CHAR NULL,
VERSION SMALLINT NULL,
CPPW VARCHAR NULL,
INTNR CHAR NULL,
INTNR2 CHAR NULL,
RCNEU CHAR NULL,
CE CHAR NULL,
BE CHAR NULL,
OL CHAR NULL,
LI CHAR NULL,
SE CHAR NULL,
MO7 CHAR NULL,
MO8 CHAR NULL,
MO9 CHAR NULL,
MO10 CHAR NULL,
WCNA INTEGER NULL,
VERWWWW VARCHAR NULL,
SERVICENEU BLOB NULL,
ISTBUCHHALTUNG SMALLINT NULL,
ABRNACHKOMMASTELLEN SMALLINT NULL,
HD_TAETIGKEIT BLOB NULL,
HD_DIENSTLEISTUNG BLOB NULL,
HD_EINLTEXT BLOB NULL,
HD_ABSCHLTEXT BLOB NULL,
ALLEOBJEKTEZEIGEN SMALLINT NULL,
CPSONST1 VARCHAR NULL,
CPSONST2 VARCHAR NULL,
PORTALGESTARTET INTEGER NULL,
SEPA_FORMAT CHAR NULL,
BMAHNEINL_1 BLOB NULL,
EMAHNEINL_1 BLOB NULL,
BMAHNABSCHL_1 BLOB NULL,
EMAHNABSCHL_1 BLOB NULL,
BMAHNEINL_2 BLOB NULL,
EMAHNEINL_2 BLOB NULL,
BMAHNABSCHL_2 BLOB NULL,
EMAHNABSCHL_2 BLOB NULL,
BMAHNEINL_3 BLOB NULL,
EMAHNEINL_3 BLOB NULL,
BMAHNABSCHL_3 BLOB NULL,
EMAHNABSCHL_3 BLOB NULL,
MAHNZIEL_TAGE SMALLINT NULL,
SONUML_EINL BLOB NULL,
SONUML_ABSCHL BLOB NULL,
SONUML_ABSCHL_LEV BLOB NULL,
VERSICHERUNGEN BLOB NULL,
CHATPORT INTEGER NULL,
CRM INTEGER NULL,
SEPA_COR1 CHAR NULL,
FBVERSION SMALLINT NULL,
VERZUGSZINSEN_JA CHAR NULL DEFAULT DEFAULT 'N',
VERZUGSZINSEN_TAGE SMALLINT NULL,
VERZUGSZINSEN_MINBETRAG NUMERIC(12,2) NULL,
VERZUGSZINSEN_BERECHNUNG SMALLINT NULL,
VERZUGSZINSEN_GEWERBE SMALLINT NULL,
VERZUGSZINSEN_DYNAMISCH NUMERIC(12,2) NULL,
VERZUGSZINSEN_STATISCH NUMERIC(12,2) NULL,
DATEV_SACHKTO SMALLINT NULL DEFAULT DEFAULT 4,
DATEV_ONR_KOSTENSTELLE SMALLINT NULL,
OHFREI_HIST1 BLOB NULL,
OHFREI_HIST2 BLOB NULL,
OHFREI_HIST3 BLOB NULL,
OHFREI_HIST4 BLOB NULL,
OHFREI_HIST5 BLOB NULL,
KUNDENNR INTEGER NULL,
NACHWEISPFAD VARCHAR NULL,
KFREI1 VARCHAR NULL,
KFREI2 VARCHAR NULL,
KFREI3 VARCHAR NULL,
KFREI4 VARCHAR NULL,
KFREI5 VARCHAR NULL,
KFREI6 VARCHAR NULL,
KFREI7 VARCHAR NULL,
KFREI8 VARCHAR NULL,
KFREI9 VARCHAR NULL,
KFREI10 VARCHAR NULL,
PORTALKATEGORIE BLOB NULL,
EPOST_DATEN BLOB NULL,
EPOST_BATCHID INTEGER NULL,
TZR SMALLINT NULL,
MODULELASTCHECK DATE NULL,
CASAVI_OBJ BLOB NULL,
    PRIMARY KEY (NR)
);

-- Tabelle: TAPITEL
CREATE TABLE TAPITEL (
TID INTEGER NULL,
BID INTEGER NULL,
EID INTEGER NULL,
LIEFID INTEGER NULL,
TEL1 DOUBLE PRECISION NULL,
TEL2 DOUBLE PRECISION NULL,
TEL3 DOUBLE PRECISION NULL,
    PRIMARY KEY (TID)
);

-- Tabelle: TECHDATA
CREATE TABLE TECHDATA (
ID INTEGER NULL,
FREITEXT1 VARCHAR NULL,
FREITEXT2 VARCHAR NULL,
FREITEXT3 VARCHAR NULL,
FREITEXT4 VARCHAR NULL,
FREITEXT5 VARCHAR NULL,
FREITEXT6 VARCHAR NULL,
FREITEXT7 VARCHAR NULL,
FREITEXT8 VARCHAR NULL,
FREITEXT9 VARCHAR NULL,
FREITEXT10 VARCHAR NULL,
FREITEXT11 VARCHAR NULL,
FREITEXT12 VARCHAR NULL,
FREIWERT1 VARCHAR NULL,
FREIWERT2 VARCHAR NULL,
FREIWERT3 VARCHAR NULL,
FREIWERT4 VARCHAR NULL,
FREIWERT5 VARCHAR NULL,
FREIWERT6 VARCHAR NULL,
FREIWERT7 VARCHAR NULL,
FREIWERT8 VARCHAR NULL,
FREIWERT9 VARCHAR NULL,
FREIWERT10 VARCHAR NULL,
FREIWERT11 VARCHAR NULL,
FREIWERT12 VARCHAR NULL,
NR INTEGER NULL,
    PRIMARY KEY (ID),
    FOREIGN KEY (NR) REFERENCES LIEGEN(NR)
);

-- Tabelle: TERMINE
CREATE TABLE TERMINE (
NR INTEGER NULL,
DATUM DATE NULL,
ZEIT TIME NULL,
BETREFF VARCHAR NULL,
WOTAG CHAR NULL,
KNR INTEGER NULL,
OBJEKT SMALLINT NULL,
LIEF INTEGER NULL,
EIG INTEGER NULL,
BEARBEITER VARCHAR NULL,
KATEGORIE VARCHAR NULL,
BEMERKUNG BLOB NULL,
GEAENDERT DATE NULL,
GEAENDERTVON VARCHAR NULL,
DOKUMENT VARCHAR NULL,
ERLEDIGT CHAR NULL,
GNR INTEGER NULL,
ARCHIV_TREE_NR INTEGER NULL,
DATEI BLOB NULL,
BLOBFILE_TYPE SMALLINT NULL,
BEWEIG SMALLINT NULL,
PORTALKATEGORIE VARCHAR NULL,
PORTALDOKUMENT VARCHAR NULL,
PORTALSTATUS SMALLINT NULL,
IMWEB SMALLINT NULL,
ENR INTEGER NULL,
BEWEIG_ID INTEGER NULL,
BEWEIG_ALT SMALLINT NULL,
PORTALKATEGORIE_ALT VARCHAR NULL,
PORTALDOKUMENT_ALT VARCHAR NULL,
ENR_ALT INTEGER NULL,
OBJEKT_ALT SMALLINT NULL,
KNR_ALT INTEGER NULL,
BEWEIG_ID_ALT INTEGER NULL,
DOKUMENT_ALT VARCHAR NULL,
SYNC SMALLINT NULL,
PC_NAME VARCHAR NULL,
BEW INTEGER NULL,
ANZ_DOC INTEGER NULL DEFAULT DEFAULT 0,
ANZ_DOCIMWEB INTEGER NULL DEFAULT DEFAULT 0,
    PRIMARY KEY (NR),
    FOREIGN KEY (EIG) REFERENCES EIGADR(EIGNR),
    FOREIGN KEY (LIEF) REFERENCES LIEFERAN(KNR),
    FOREIGN KEY (OBJEKT) REFERENCES OBJEKTE(ONR),
    FOREIGN KEY (BEW) REFERENCES BEWADR(BEWNR)
);

-- Tabelle: TERMINE_CRM
CREATE TABLE TERMINE_CRM (
NR INTEGER NULL,
VORGANG_ID INTEGER NULL,
ONR INTEGER NULL,
BETREFF VARCHAR NULL,
KATEGORIE_ID INTEGER NULL,
STATUS SMALLINT NULL,
BEGINNT_AM TIMESTAMP NULL,
ENDET_AM TIMESTAMP NULL,
PRIORITAET SMALLINT NULL DEFAULT DEFAULT 0,
ERINNERUNG TIMESTAMP NULL,
SERIE INTEGER NULL,
ENR INTEGER NULL,
EKNR INTEGER NULL,
BKNR INTEGER NULL,
KKNR INTEGER NULL,
NOTIZ BLOB NULL,
ERINNERUNG_IN SMALLINT NULL,
EVENTTYPE INTEGER NULL,
OPTIONS INTEGER NULL,
RECURRENCEINDEX INTEGER NULL,
RECURRENCEINFO BLOB NULL,
LABELCOLOR INTEGER NULL,
STATE INTEGER NULL,
ORT VARCHAR NULL,
SYNCID VARCHAR NULL,
ERFASST TIMESTAMP NULL,
ZULETZT TIMESTAMP NULL,
ERFASST_ID INTEGER NULL,
ZULETZT_ID INTEGER NULL,
OBJ_INFO VARCHAR NULL,
IDM1 INTEGER NULL,
IDM2 INTEGER NULL,
IDM3 INTEGER NULL,
IDM4 INTEGER NULL,
IDM5 INTEGER NULL,
IDM6 INTEGER NULL,
IDM7 INTEGER NULL,
IDM8 INTEGER NULL,
IDM9 INTEGER NULL,
IDM10 INTEGER NULL,
IDM11 INTEGER NULL,
IDM12 INTEGER NULL,
KONTAKT VARCHAR NULL,
ISVORLAGE SMALLINT NULL DEFAULT DEFAULT 0,
CLOUD_ID VARCHAR NULL,
CLOUD_ZULETZT TIMESTAMP NULL,
GNR INTEGER NULL DEFAULT DEFAULT -1,
TEILNEHMER VARCHAR NULL,
CPSTATUS INTEGER NULL,
    PRIMARY KEY (NR),
    FOREIGN KEY (ONR) REFERENCES OBJEKTE(ONR),
    FOREIGN KEY (VORGANG_ID) REFERENCES VORGANG(ID)
);

-- Tabelle: TIP2
CREATE TABLE TIP2 (
NR INTEGER NULL,
TEXT BLOB NULL,
    PRIMARY KEY (NR)
);

-- Tabelle: TIPTAG
CREATE TABLE TIPTAG (
NR INTEGER NULL,
TEXT BLOB NULL,
    PRIMARY KEY (NR)
);

-- Tabelle: TMP_A
CREATE TABLE TMP_A (
ORDNUNGSBEGRIFF VARCHAR NULL,
ONR SMALLINT NULL,
OBEZ VARCHAR NULL,
OSTRASSE VARCHAR NULL,
OPLZORT VARCHAR NULL,
ENR SMALLINT NULL,
EBEZ VARCHAR NULL,
NUTZERNR VARCHAR NULL,
KUNDENNR INTEGER NULL,
ABRECHNUNGSART SMALLINT NULL
);

-- Tabelle: UEBDTA
CREATE TABLE UEBDTA (
NR INTEGER NULL,
ONR INTEGER NULL,
KNR INTEGER NULL,
GKONTO INTEGER NULL,
TEXT VARCHAR NULL,
BETRAG NUMERIC(15,2) NULL,
LBNR INTEGER NULL,
ART INTEGER NULL,
OP INTEGER NULL,
BETRAG_SKONTO NUMERIC(15,2) NULL,
    PRIMARY KEY (NR)
);

-- Tabelle: UMLAGE
CREATE TABLE UMLAGE (
ONR SMALLINT NULL,
HKUMLAGESCHLUESSEL SMALLINT NULL,
HKBEZ VARCHAR NULL,
WASSERUMLAGESCHLUESSEL SMALLINT NULL,
WASSERBEZ VARCHAR NULL,
QMHEIZSCHLUESSEL SMALLINT NULL,
QMHEIZBEZ VARCHAR NULL,
QMWARMWSCHLUESSEL SMALLINT NULL,
QMWARMWBEZ VARCHAR NULL
);

-- Tabelle: UMLAGEAUSNAHME
CREATE TABLE UMLAGEAUSNAHME (
ONR INTEGER NULL,
KNR INTEGER NULL,
BEKNR INTEGER NULL,
    PRIMARY KEY (ONR, KNR, BEKNR),
    FOREIGN KEY (ONR) REFERENCES KONTEN(ONR),
    FOREIGN KEY (ONR) REFERENCES KONTEN(KNR),
    FOREIGN KEY (BEKNR) REFERENCES KONTEN(ONR),
    FOREIGN KEY (BEKNR) REFERENCES KONTEN(KNR),
    FOREIGN KEY (ONR) REFERENCES KONTEN(ONR),
    FOREIGN KEY (ONR) REFERENCES KONTEN(KNR),
    FOREIGN KEY (KNR) REFERENCES KONTEN(ONR),
    FOREIGN KEY (KNR) REFERENCES KONTEN(KNR)
);

-- Tabelle: UNTERGEMEINSCHAFT
CREATE TABLE UNTERGEMEINSCHAFT (
UNTERGEMEINSCHAFT_ID INTEGER NOT NULL,
UNTERGEMEINSCHAFT_NAME VARCHAR NOT NULL,
    PRIMARY KEY (UNTERGEMEINSCHAFT_ID)
);

-- Tabelle: USTSAETZE
CREATE TABLE USTSAETZE (
NR INTEGER NULL,
SATZ1 NUMERIC(15,4) NULL,
SATZ2 NUMERIC(15,4) NULL,
SATZ3 NUMERIC(15,4) NULL,
SATZ4 NUMERIC(15,4) NULL,
SATZ5 NUMERIC(15,4) NULL,
SATZ6 NUMERIC(15,4) NULL,
    PRIMARY KEY (NR)
);

-- Tabelle: VBDETAIL
CREATE TABLE VBDETAIL (
ID INTEGER NOT NULL,
BEREICH SMALLINT NOT NULL,
ONR SMALLINT NOT NULL,
ZUM_STICHTAG DATE NOT NULL,
BEZEICHNUNG VARCHAR NULL,
BETRAG NUMERIC(12,2) NOT NULL,
    PRIMARY KEY (ID)
);

-- Tabelle: VERBRANALYSEGES
CREATE TABLE VERBRANALYSEGES (
ONR INTEGER NULL,
DTVON DATE NULL,
DTBIS DATE NULL,
WOHNFLAECHE NUMERIC(18,2) NULL,
KWH_HEIZ NUMERIC(18,2) NULL,
KWH_WW NUMERIC(18,2) NULL,
NR INTEGER NULL,
BRENNSTMENGE NUMERIC(18,4) NULL,
BRENNST_EINH VARCHAR NULL,
BRENNST_BEZ VARCHAR NULL,
GRADTAGFAKTOR NUMERIC(18,2) NULL DEFAULT DEFAULT 1,
WW_CBM NUMERIC(18,4) NULL,
WW_GRAD NUMERIC(18,2) NULL,
WW_PROZ NUMERIC(18,4) NULL,
HEIZWERT NUMERIC(18,2) NULL,
WW_BERECHNUNGSART SMALLINT NULL,
ENERGIEVERBRAUCHSKENNWERT NUMERIC(18,2) NULL,
EUR_HEIZ NUMERIC(18,2) NULL,
EUR_WW NUMERIC(18,2) NULL,
    PRIMARY KEY (ONR, DTVON, DTBIS),
    UNIQUE (NR),
    FOREIGN KEY (ONR) REFERENCES OBJEKTE(ONR)
);

-- Tabelle: VERBRANALYSEWHG
CREATE TABLE VERBRANALYSEWHG (
ID INTEGER NULL,
NRGES INTEGER NULL,
ENR INTEGER NULL,
KWH_HEIZ NUMERIC(18,2) NULL,
KWH_WW NUMERIC(18,2) NULL,
EUR_HEIZ NUMERIC(18,2) NULL,
EUR_WW NUMERIC(18,2) NULL,
CBM_WW NUMERIC(18,2) NULL,
ENERGIEVERBRAUCHSKENNWERT NUMERIC(18,2) NULL,
    FOREIGN KEY (NRGES) REFERENCES VERBRANALYSEGES(NR)
);

-- Tabelle: VEREIG
CREATE TABLE VEREIG (
NR INTEGER NULL,
VERNR SMALLINT NULL,
ONR INTEGER NULL,
EIGNR INTEGER NULL,
EIGANTEIL DOUBLE PRECISION NULL,
VETRDURCH VARCHAR NULL,
VERTRDURCH VARCHAR NULL,
ABWESEND SMALLINT NULL DEFAULT DEFAULT 0,
EIGGESANTEIL DOUBLE PRECISION NULL,
    PRIMARY KEY (NR),
    FOREIGN KEY (VERNR) REFERENCES VERSAMMLUNG(VERNR),
    FOREIGN KEY (VERNR) REFERENCES VERSAMMLUNG(ONR),
    FOREIGN KEY (ONR) REFERENCES VERSAMMLUNG(VERNR),
    FOREIGN KEY (ONR) REFERENCES VERSAMMLUNG(ONR)
);

-- Tabelle: VERERG
CREATE TABLE VERERG (
ID INTEGER NULL,
VERNR INTEGER NULL,
ONR INTEGER NULL,
THEMAID INTEGER NULL,
EIGID INTEGER NULL,
NAME VARCHAR NULL,
SJA CHAR NULL,
SNEIN CHAR NULL,
SENTHALTUNG CHAR NULL,
SNOTAVA CHAR NULL,
EIGNR INTEGER NULL,
ENAME VARCHAR NULL,
EVNAME VARCHAR NULL,
    PRIMARY KEY (ID),
    FOREIGN KEY (THEMAID) REFERENCES VERTHEMEN(ID)
);

-- Tabelle: VERSAMMLUNG
CREATE TABLE VERSAMMLUNG (
VERNR SMALLINT NULL,
ONR INTEGER NULL,
OBEZ VARCHAR NULL,
OSTR VARCHAR NULL,
OPLZORT VARCHAR NULL,
VERBEZ VARCHAR NULL,
VERSTR VARCHAR NULL,
VERPLZORT VARCHAR NULL,
VERDAT DATE NULL,
VERZEIT TIME NULL,
VLNAME VARCHAR NULL,
PFNAME VARCHAR NULL,
VERTEILER VARCHAR NULL,
USCHL SMALLINT NULL,
VERART VARCHAR NULL,
VERZEITENDE TIME NULL,
    PRIMARY KEY (VERNR, ONR),
    FOREIGN KEY (ONR) REFERENCES OBJEKTE(ONR)
);

-- Tabelle: VERSICHERUNG
CREATE TABLE VERSICHERUNG (
ID INTEGER NULL,
VERS_ONR INTEGER NULL,
VERSBEZ VARCHAR NULL,
VERSNR VARCHAR NULL,
VERSKUNDEN_NR VARCHAR NULL,
KONTAKT_NR INTEGER NULL,
VERSSEIT DATE NULL,
VERSGEKUENDIGT DATE NULL,
VERSBEITRAG NUMERIC(18,2) NULL,
VERSNOTIZ BLOB NULL,
    PRIMARY KEY (ID),
    FOREIGN KEY (KONTAKT_NR) REFERENCES LIEFERAN(KNR),
    FOREIGN KEY (VERS_ONR) REFERENCES OBJEKTE(ONR)
);

-- Tabelle: VERTHEMEN
CREATE TABLE VERTHEMEN (
ID INTEGER NULL,
VERNR INTEGER NULL,
ONR INTEGER NULL,
HTP SMALLINT NULL,
UTP SMALLINT NULL,
KURZBEZ VARCHAR NULL,
TEXT BLOB NULL,
ABSTIMMUNG CHAR NULL,
BESCHLID INTEGER NULL,
IMPBESCHL CHAR NULL,
DOPPQUAL CHAR NULL,
ABSTIMMUNG_ART SMALLINT NULL DEFAULT DEFAULT 0,
TEXT_PROTOKOLL BLOB NULL,
THEMA_INDEX VARCHAR NULL,
ENTHALTUNG_COUNT INTEGER NULL,
JA_COUNT INTEGER NULL,
NEIN_COUNT INTEGER NULL,
BESCHLUSS_TEXT VARCHAR NULL,
    PRIMARY KEY (ID),
    FOREIGN KEY (VERNR) REFERENCES VERSAMMLUNG(VERNR),
    FOREIGN KEY (VERNR) REFERENCES VERSAMMLUNG(ONR),
    FOREIGN KEY (ONR) REFERENCES VERSAMMLUNG(VERNR),
    FOREIGN KEY (ONR) REFERENCES VERSAMMLUNG(ONR)
);

-- Tabelle: VERW
CREATE TABLE VERW (
VERWNAME VARCHAR NULL,
VERWFIRMA VARCHAR NULL,
VERWSTR VARCHAR NULL,
VERWORT VARCHAR NULL,
VERWTEL VARCHAR NULL,
VERWTEL2 VARCHAR NULL,
VERWFAX VARCHAR NULL,
VERWMOB VARCHAR NULL,
VERWMAIL VARCHAR NULL,
SONSTIGES VARCHAR NULL,
VERWWWW VARCHAR NULL
);

-- Tabelle: VERWALTER
CREATE TABLE VERWALTER (
NR INTEGER NULL,
VERWNAME VARCHAR NULL,
VERWFIRMA VARCHAR NULL,
VERWSTR VARCHAR NULL,
VERWORT VARCHAR NULL,
VERWTEL VARCHAR NULL,
VERWTEL2 VARCHAR NULL,
VERWFAX VARCHAR NULL,
VERWMOB VARCHAR NULL,
VERWMAIL VARCHAR NULL,
SONSTIGES VARCHAR NULL,
VERWWWW VARCHAR NULL,
KONTOINH VARCHAR NULL,
KONTO VARCHAR NULL,
BLZ VARCHAR NULL,
BANK VARCHAR NULL,
LIEFKNR INTEGER NULL,
USTID VARCHAR NULL,
RECHNR INTEGER NULL DEFAULT DEFAULT 0,
RECHNRSTR VARCHAR NULL,
MAILOUTLOOK CHAR NULL,
MAILSERVER VARCHAR NULL,
MAILLOGIN CHAR NULL,
MAILBENUTZER VARCHAR NULL,
MAILPASSWORT VARCHAR NULL,
MAILPORT INTEGER NULL,
IAKTOBJ INTEGER NULL,
IAKTEINH INTEGER NULL,
CPPW VARCHAR NULL,
LOGINNAME VARCHAR NULL,
FAXSERVER VARCHAR NULL,
STEUERNUMMER VARCHAR NULL,
FINANZAMT VARCHAR NULL,
BIC VARCHAR NULL,
IBAN VARCHAR NULL,
ALLEOBJEKTEZEIGEN SMALLINT NULL,
SEPA_CI VARCHAR NULL,
SEPA_MANDAT_STD VARCHAR NULL,
USETLS SMALLINT NULL,
SSLMODE CHAR NULL DEFAULT DEFAULT 'E',
BGRUPPE_NR INTEGER NULL,
SIGNATUR BLOB NULL,
EXTERNAL_APP_PASSWORD VARCHAR NULL,
MAILOUTLOOKTMS CHAR NULL DEFAULT DEFAULT 'N',
MAILOUOA2AC BLOB NULL,
MAILOUOA2RE BLOB NULL,
MAILOUOA2REEX TIMESTAMP NULL,
    PRIMARY KEY (NR)
);

-- Tabelle: VERWVERG
CREATE TABLE VERWVERG (
NR INTEGER NULL,
ONR INTEGER NULL,
BEZEICHNUNG VARCHAR NULL,
BERECHNUNG SMALLINT NULL,
SOLLSTELLEN SMALLINT NULL,
MWST_ART SMALLINT NULL,
MWST_SATZ SMALLINT NULL,
BETRAG_MIN NUMERIC(18,2) NULL,
BETRAG_MAX NUMERIC(18,2) NULL,
FESTBETRAG NUMERIC(18,2) NULL,
BETRAG_USCHL NUMERIC(18,2) NULL,
USCHLNR SMALLINT NULL,
PROZMIETE NUMERIC(18,4) NULL,
KNR INTEGER NULL,
BANKNR INTEGER NULL,
LIEFKNR INTEGER NULL,
UEBERW CHAR NULL,
VZARTEN INTEGER NULL,
BETRAG_BUCHEN NUMERIC(18,2) NULL,
SOLL_BUCHEN CHAR NULL,
INFO_BUCHEN VARCHAR NULL,
TEXT_BUCHEN VARCHAR NULL,
RECHNUNG CHAR NULL,
BBEW CHAR NULL,
VERTRAG_BIS DATE NULL,
VERTRAG_VON DATE NULL,
    PRIMARY KEY (NR, ONR),
    FOREIGN KEY (ONR) REFERENCES OBJEKTE(ONR)
);

-- Tabelle: VERW_MITARBEITER
CREATE TABLE VERW_MITARBEITER (
VERW_ID INTEGER NULL,
MITARBEITER_ID INTEGER NULL,
    PRIMARY KEY (VERW_ID, MITARBEITER_ID),
    FOREIGN KEY (MITARBEITER_ID) REFERENCES MITARBEITER(ID),
    FOREIGN KEY (VERW_ID) REFERENCES VERWALTER(NR)
);

-- Tabelle: VORAUSZ
CREATE TABLE VORAUSZ (
NR INTEGER NULL,
ONR INTEGER NULL,
BEZ VARCHAR NULL,
KKLASSE SMALLINT NULL,
SOLL SMALLINT NULL,
MONAT SMALLINT NULL,
PRIOR SMALLINT NULL,
MWSTSATZ INTEGER NULL,
KNR INTEGER NULL,
MWSTSATZ_G NUMERIC(15,4) NULL,
MWSTSATZ_P NUMERIC(15,4) NULL,
    PRIMARY KEY (NR),
    FOREIGN KEY (ONR) REFERENCES OBJEKTE(ONR)
);

-- Tabelle: VORGANG
CREATE TABLE VORGANG (
ID INTEGER NULL,
STATUS SMALLINT NULL DEFAULT DEFAULT 0,
ONR INTEGER NULL,
ENR INTEGER NULL,
BKNR INTEGER NULL,
EKNR INTEGER NULL,
BAUTEIL_ID INTEGER NULL,
KATEGORIE_ID INTEGER NULL,
STARTDATUM TIMESTAMP NULL,
ENDDATUM TIMESTAMP NULL,
GEWERK_ID INTEGER NULL,
PRIORITAET SMALLINT NULL DEFAULT DEFAULT 0,
BETREFF VARCHAR NULL,
NOTIZ BLOB NULL,
ERFASST TIMESTAMP NULL,
ZULETZT TIMESTAMP NULL,
ZULETZT_ID INTEGER NULL,
ERFASST_ID INTEGER NULL,
ERINNERUNG TIMESTAMP NULL,
ERINNERUNG_IN SMALLINT NULL,
ANZ_DOC INTEGER NULL,
IDM1 INTEGER NULL,
IDM2 INTEGER NULL,
IDM3 INTEGER NULL,
IDM4 INTEGER NULL,
IDM5 INTEGER NULL,
IDM6 INTEGER NULL,
IDM7 INTEGER NULL,
IDM8 INTEGER NULL,
IDM9 INTEGER NULL,
IDM10 INTEGER NULL,
IDM11 INTEGER NULL,
IDM12 INTEGER NULL,
IDF1 INTEGER NULL,
IDF2 INTEGER NULL,
IDF3 INTEGER NULL,
IDF4 INTEGER NULL,
IDF5 INTEGER NULL,
OBJ_INFO VARCHAR NULL,
ENDET CHAR NULL,
ISVORLAGE SMALLINT NULL DEFAULT DEFAULT 0,
IDF6 INTEGER NULL,
IDF7 INTEGER NULL,
IDF8 INTEGER NULL,
IDF9 INTEGER NULL,
IDF10 INTEGER NULL,
ARBEITSAUFWAND NUMERIC(12,2) NULL,
ONR2 INTEGER NULL,
BKNR2 INTEGER NULL,
EKNR2 INTEGER NULL,
ONR3 INTEGER NULL,
BKNR3 INTEGER NULL,
EKNR3 INTEGER NULL,
ONR4 INTEGER NULL,
BKNR4 INTEGER NULL,
EKNR4 INTEGER NULL,
ONR5 INTEGER NULL,
BKNR5 INTEGER NULL,
EKNR5 INTEGER NULL,
BESCHLUSS_ONR INTEGER NULL,
BESCHLUSS_LFDNR INTEGER NULL,
CPSTATUS INTEGER NULL,
    PRIMARY KEY (ID),
    FOREIGN KEY (KATEGORIE_ID) REFERENCES KATEGORIE_CRM(ID),
    FOREIGN KEY (ONR) REFERENCES OBJEKTE(ONR)
);

-- Tabelle: VORGANG_NACHWEIS
CREATE TABLE VORGANG_NACHWEIS (
VORGANG_ID INTEGER NULL,
NACHWEIS_NR INTEGER NULL,
    PRIMARY KEY (VORGANG_ID, NACHWEIS_NR),
    FOREIGN KEY (NACHWEIS_NR) REFERENCES NACHWEIS(NR),
    FOREIGN KEY (VORGANG_ID) REFERENCES VORGANG(ID)
);

-- Tabelle: WOHNUNG
CREATE TABLE WOHNUNG (
ONR SMALLINT NULL,
ENR SMALLINT NULL,
EBEZ VARCHAR NULL,
WNOTIZ BLOB NULL,
FRINH1 VARCHAR NULL,
FRINH2 VARCHAR NULL,
FRINH3 VARCHAR NULL,
FRINH4 VARCHAR NULL,
FRINH5 VARCHAR NULL,
FRINH6 VARCHAR NULL,
FRINH7 VARCHAR NULL,
FRINH8 VARCHAR NULL,
FRINH9 VARCHAR NULL,
FRINH10 VARCHAR NULL,
FRINH11 VARCHAR NULL,
FRINH12 VARCHAR NULL,
ART VARCHAR NULL DEFAULT DEFAULT 'Wohnung',
DRUCKWAS SMALLINT NULL,
BKNR INTEGER NULL,
EKNR INTEGER NULL,
    PRIMARY KEY (ONR, ENR),
    FOREIGN KEY (ONR) REFERENCES OBJEKTE(ONR)
);

-- Tabelle: ZAEHLERSTAMM
CREATE TABLE ZAEHLERSTAMM (
ID INTEGER NULL,
ONR INTEGER NULL,
ENR INTEGER NULL,
ZAEHLNAM VARCHAR NULL,
ZAEHLEINH VARCHAR NULL,
ZAEHLNR VARCHAR NULL,
MONTAGEORT_ID INTEGER NULL,
SORTIERUNG INTEGER NULL,
LIEFERANT_ID INTEGER NULL,
LETZTE_EICHUNG DATE NULL,
NAECHSTE_EICHUNG DATE NULL,
AUSSBAUDATUM DATE NULL,
EINBAUDATUM DATE NULL,
USCHLU1 INTEGER NULL,
USCHLU2 INTEGER NULL,
SAMMEL_ID INTEGER NULL,
ZUMRECH NUMERIC(18,4) NULL DEFAULT DEFAULT 1,
    PRIMARY KEY (ID),
    FOREIGN KEY (MONTAGEORT_ID) REFERENCES ZAEHLER_ORT(ID)
);

-- Tabelle: ZAEHLERSTAND
CREATE TABLE ZAEHLERSTAND (
ONR INTEGER NULL,
KNR INTEGER NULL,
ID_ZAEHLER INTEGER NULL,
ABLESEART INTEGER NULL DEFAULT DEFAULT 0,
ZANF NUMERIC(18,4) NULL DEFAULT DEFAULT 0,
ZENDE NUMERIC(18,4) NULL DEFAULT DEFAULT 0,
ZDANF DATE NULL,
ZDENDE DATE NULL,
    PRIMARY KEY (ONR, KNR, ID_ZAEHLER),
    FOREIGN KEY (ID_ZAEHLER) REFERENCES ZAEHLERSTAMM(ID),
    FOREIGN KEY (ONR) REFERENCES KONTEN(ONR),
    FOREIGN KEY (ONR) REFERENCES KONTEN(KNR),
    FOREIGN KEY (KNR) REFERENCES KONTEN(ONR),
    FOREIGN KEY (KNR) REFERENCES KONTEN(KNR)
);

-- Tabelle: ZAEHLERSTAND_BA
CREATE TABLE ZAEHLERSTAND_BA (
BACKUP_ID INTEGER NULL,
ONR INTEGER NULL,
KNR INTEGER NULL,
ID_ZAEHLER INTEGER NULL,
ABLESEART INTEGER NULL DEFAULT DEFAULT 0,
ZANF NUMERIC(18,4) NULL DEFAULT DEFAULT 0,
ZENDE NUMERIC(18,4) NULL DEFAULT DEFAULT 0,
ZDANF DATE NULL,
ZDENDE DATE NULL,
    PRIMARY KEY (BACKUP_ID, ONR, KNR, ID_ZAEHLER),
    FOREIGN KEY (ONR) REFERENCES KONTEN(ONR),
    FOREIGN KEY (ONR) REFERENCES KONTEN(KNR),
    FOREIGN KEY (KNR) REFERENCES KONTEN(ONR),
    FOREIGN KEY (KNR) REFERENCES KONTEN(KNR),
    FOREIGN KEY (BACKUP_ID) REFERENCES ANTBACK_ID(BACKUP_ID)
);

-- Tabelle: ZAEHLER_ORT
CREATE TABLE ZAEHLER_ORT (
ID INTEGER NULL,
ORT VARCHAR NULL,
    PRIMARY KEY (ID)
);

-- Tabelle: ZINSSAETZE
CREATE TABLE ZINSSAETZE (
ZINSSATZREIHE INTEGER NULL,
DATUM DATE NULL,
ZINS NUMERIC(18,2) NULL,
    PRIMARY KEY (ZINSSATZREIHE, DATUM),
    FOREIGN KEY (ZINSSATZREIHE) REFERENCES ZINSSATZREIHE(ID)
);

-- Tabelle: ZINSSATZREIHE
CREATE TABLE ZINSSATZREIHE (
ID INTEGER NULL,
BEZEICHNUNG VARCHAR NULL,
    PRIMARY KEY (ID)
);

-- Tabelle: ZTERMIN
CREATE TABLE ZTERMIN (
ZTNR INTEGER NULL,
HAUS INTEGER NULL,
TEXT VARCHAR NULL,
BETRAG NUMERIC(15,2) NULL,
KONTO INTEGER NULL,
GKONTO INTEGER NULL,
KONTOSTR VARCHAR NULL,
GKONTOSTR VARCHAR NULL,
FAELLIG DATE NULL,
ERZEUGT DATE NULL,
SOLLUEB CHAR NULL,
LIEFNR INTEGER NULL,
VZWECK1 VARCHAR NULL,
VZWECK2 VARCHAR NULL,
MWST NUMERIC(15,2) NULL,
UART SMALLINT NULL,
RLAKNR INTEGER NULL,
SPLITNR INTEGER NULL,
WDATUM DATE NULL,
BELEGLINK VARCHAR NULL DEFAULT DEFAULT NULL,
    PRIMARY KEY (ZTNR),
    FOREIGN KEY (GKONTO) REFERENCES BANKEN(NR),
    FOREIGN KEY (HAUS) REFERENCES KONTEN(ONR),
    FOREIGN KEY (HAUS) REFERENCES KONTEN(KNR),
    FOREIGN KEY (KONTO) REFERENCES KONTEN(ONR),
    FOREIGN KEY (KONTO) REFERENCES KONTEN(KNR)
);

-- ========== PROZEDUREN ==========

-- Prozedur: ABRECHNUNGS_SALDENLISTE
CREATE OR ALTER PROCEDURE ABRECHNUNGS_SALDENLISTE
BEGIN
  /* Procedure text */
END


-- Prozedur: ABRECHNUNG_VZ
CREATE OR ALTER PROCEDURE ABRECHNUNG_VZ
BEGIN
 IF (IKNR<200000) THEN
  BEGIN /* Bewohner */
   EXECUTE PROCEDURE ABRECHNUNG_VZ_ZPOS (:IONR, :IKNR, :DTVON, :DTBIS, :BISTVZ, 11, 0, :BDATUM) RETURNING_VALUES :BKVZ, :BKVZ_NETTO;
   EXECUTE PROCEDURE ABRECHNUNG_VZ_ZPOS (:IONR, :IKNR, :DTVON, :DTBIS, :BISTVZ, 12, 0, :BDATUM) RETURNING_VALUES :HKVZ, :HKVZ_NETTO;
   EXECUTE PROCEDURE ABRECHNUNG_VZ_ZPOS (:IONR, :IKNR, :DTVON, :DTBIS, :BISTVZ, 13, 0, :BDATUM) RETURNING_VALUES :OPGN, :OPGN_NETTO;
  END
 ELSE
  BEGIN
   /* UWE: Es gibt keine G/N in der WEG */
   EXECUTE PROCEDURE ABRECHNUNG_VZ_ZPOS (:IONR, :IKNR, :DTVON, :DTBIS, :BISTVZ, 15, 0, :BDATUM) RETURNING_VALUES :HAUSGVZ, :HAUSGVZ_NETTO;
/*   EXECUTE PROCEDURE ABRECHNUNG_VZ_ZPOS (:IONR, :IKNR, :DTVON, :DTBIS, :BISTVZ, 15, 1, :BDATUM) RETURNING_VALUES :HAUSGVZ_NZ, :HAUSGVZ_NETTO_NZ; */
   EXECUTE PROCEDURE ABRECHNUNG_VZ_ZPOS (:IONR, :IKNR, :DTVON, :DTBIS, :BISTVZ, 110, 0, :BDATUM) RETURNING_VALUES :RL1, :RL1_NETTO; /* RÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼cklagen */
/*   EXECUTE PROCEDURE ABRECHNUNG_VZ_ZPOS (:IONR, :IKNR, :DTVON, :DTBIS, :BISTVZ, 110, 1, :BDATUM) RETURNING_VALUES :RL1_NZ, :RL1_NZ_NETTO;  RÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼cklagen NZ */
   EXECUTE PROCEDURE ABRECHNUNG_VZ_ZPOS (:IONR, :IKNR, :DTVON, :DTBIS, :BISTVZ, 120, 0, :BDATUM) RETURNING_VALUES :RL2, :RL2_NETTO; /* RÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼cklagen */
/*   EXECUTE PROCEDURE ABRECHNUNG_VZ_ZPOS (:IONR, :IKNR, :DTVON, :DTBIS, :BISTVZ, 120, 1, :BDATUM) RETURNING_VALUES :RL2_NZ, :RL2_NZ_NETTO;  RÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼cklagen NZ */
   EXECUTE PROCEDURE ABRECHNUNG_VZ_ZPOS (:IONR, :IKNR, :DTVON, :DTBIS, :BISTVZ, 130, 0, :BDATUM) RETURNING_VALUES :RL3, :RL3_NETTO; /* RÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼cklagen */
/*   EXECUTE PROCEDURE ABRECHNUNG_VZ_ZPOS (:IONR, :IKNR, :DTVON, :DTBIS, :BISTVZ, 130, 1, :BDATUM) RETURNING_VALUES :RL3_NZ, :RL3_NZ_NETTO;  RÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼cklagen NZ */
   EXECUTE PROCEDURE ABRECHNUNG_VZ_ZPOS (:IONR, :IKNR, :DTVON, :DTBIS, :BISTVZ, 140, 0, :BDATUM) RETURNING_VALUES :RL4, :RL4_NETTO; /* RÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼cklagen */
/*   EXECUTE PROCEDURE ABRECHNUNG_VZ_ZPOS (:IONR, :IKNR, :DTVON, :DTBIS, :BISTVZ, 140, 1, :BDATUM) RETURNING_VALUES :RL4_NZ, :RL4_NZ_NETTO;  RÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼cklagen NZ */
   EXECUTE PROCEDURE ABRECHNUNG_VZ_ZPOS (:IONR, :IKNR, :DTVON, :DTBIS, :BISTVZ, 150, 0, :BDATUM) RETURNING_VALUES :RL5, :RL5_NETTO; /* RÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼cklagen */
/*   EXECUTE PROCEDURE ABRECHNUNG_VZ_ZPOS (:IONR, :IKNR, :DTVON, :DTBIS, :BISTVZ, 150, 1, :BDATUM) RETURNING_VALUES :RL5_NZ, :RL5_NZ_NETTO;  RÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼cklagen NZ */
   EXECUTE PROCEDURE ABRECHNUNG_VZ_ZPOS (:IONR, :IKNR, :DTVON, :DTBIS, :BISTVZ, 160, 0, :BDATUM) RETURNING_VALUES :RL6, :RL6_NETTO; /* RÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼cklagen */
/*   EXECUTE PROCEDURE ABRECHNUNG_VZ_ZPOS (:IONR, :IKNR, :DTVON, :DTBIS, :BISTVZ, 160, 1, :BDATUM) RETURNING_VALUES :RL6_NZ, :RL6_NZ_NETTO;  RÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼cklagen NZ */
   EXECUTE PROCEDURE ABRECHNUNG_VZ_ZPOS (:IONR, :IKNR, :DTVON, :DTBIS, :BISTVZ, 170, 0, :BDATUM) RETURNING_VALUES :RL7, :RL7_NETTO; /* RÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼cklagen */
/*   EXECUTE PROCEDURE ABRECHNUNG_VZ_ZPOS (:IONR, :IKNR, :DTVON, :DTBIS, :BISTVZ, 170, 1, :BDATUM) RETURNING_VALUES :RL7_NZ, :RL7_NZ_NETTO;  RÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼cklagen NZ */
   EXECUTE PROCEDURE ABRECHNUNG_VZ_ZPOS (:IONR, :IKNR, :DTVON, :DTBIS, :BISTVZ, 17, 0, :BDATUM) RETURNING_VALUES :SONDERUML, :SONDERUML_NETTO; /* Sonderumlage */
  END
 SUSPEND;
END


-- Prozedur: ABRECHNUNG_VZ_ZPOS
CREATE OR ALTER PROCEDURE ABRECHNUNG_VZ_ZPOS
DECLARE VARIABLE KKLASSE INTEGER;
DECLARE VARIABLE SUMSOLL NUMERIC(15, 2);
DECLARE VARIABLE SUMHABEN NUMERIC(15, 2);
DECLARE VARIABLE SUMSOLL_NETTO NUMERIC(15, 2);
DECLARE VARIABLE SUMHABEN_NETTO NUMERIC(15, 2);
DECLARE VARIABLE DTVONBDATUM DATE;
DECLARE VARIABLE DTBISBDATUM DATE;
DECLARE VARIABLE DTVONWDATUM DATE;
DECLARE VARIABLE DTBISWDATUM DATE;
BEGIN
 /* W_Datum abfragen */
 if (BDATUM = 'J') then
  begin
   DTVONBDATUM = DTVON;
   DTBISBDATUM = DTBIS;
   DTVONWDATUM = '01.01.1900';
   DTBISWDATUM = '01.01.1900';
  end
 else
  begin
   DTVONBDATUM = '01.01.1900';
   DTBISBDATUM = '01.01.1900';
   DTVONWDATUM = DTVON;
   DTBISWDATUM = DTBIS;
  end

 IF (BISTVZ='J') THEN
  BEGIN
   /*            */
   /* KEIN SPLIT */
   /*            */
   /* SOLL */
   SELECT SUM(BETRAG), SUM((BETRAG*100) / (100+MWSTOP)) from buchung
   WHERE ONRSOLL=:IONR and KSOLL=:IKNR
   AND ARTOP=:ZPOS
   AND ((Datum >= :DTVONBDATUM and Datum <= :DTBISBDATUM) or (WDatum >= :DTVONWDATUM and WDatum <= :DTBISWDATUM))
/*   AND GN=:GN  Uwe es gibt kein G/N mehr */
   INTO :SUMSOLL, SUMSOLL_NETTO;
   /* HABEN */
   SELECT SUM(BETRAG), SUM((BETRAG*100) / (100+MWSTOP)) from buchung
   WHERE ONRHABEN=:IONR and KHABEN=:IKNR
   AND ARTOP=:ZPOS
/*   AND GN=:GN  Uwe es gibt kein G/N mehr */
   AND ((Datum >= :DTVONBDATUM and Datum <= :DTBISBDATUM) or (WDatum >= :DTVONWDATUM and WDatum <= :DTBISWDATUM))
   INTO :SUMHABEN, SUMHABEN_NETTO;
   IF (SUMSOLL IS NULL) THEN
    SUMSOLL=0;
   IF (SUMHABEN IS NULL) THEN
    SUMHABEN=0;
   IF (SUMSOLL_NETTO IS NULL) THEN
    SUMSOLL_NETTO=0;
   IF (SUMHABEN_NETTO IS NULL) THEN
    SUMHABEN_NETTO=0;
   SUM_VZ=SUMHABEN-SUMSOLL;
   SUM_VZ_NETTO=SUMHABEN_NETTO-SUMSOLL_NETTO;
   /*            */
   /*   SPLIT    */
   /*            */
   /* SOLL */
   select Sum(buchzahl.Betrag), SUM((buchzahl.BETRAG*100) / (100+buchzahl.MWSTOP)) from buchung, buchzahl
   where  ONRSOLL=:IONR and KSOLL=:IKNR
   AND ((Datum >= :DTVONBDATUM and Datum <= :DTBISBDATUM) or (WDatum >= :DTVONWDATUM and WDatum <= :DTBISWDATUM))
   /*AND GN=:GN  Uwe es gibt kein G/N mehr */
   and buchung.artop=0
   and buchung.bnr=buchzahl.bnr
   and buchzahl.artop=:ZPOS
   INTO :SUMSOLL, SUMSOLL_NETTO;
   /* Haben */
   select Sum(buchzahl.Betrag), SUM((buchzahl.BETRAG*100) / (100+buchzahl.MWSTOP)) from buchung, buchzahl
   where  ONRHABEN=:IONR and KHABEN=:IKNR
   AND ((Datum >= :DTVONBDATUM and Datum <= :DTBISBDATUM) or (WDatum >= :DTVONWDATUM and WDatum <= :DTBISWDATUM))
   /*AND GN=:GN  Uwe es gibt kein G/N mehr */
   and buchung.artop=0
   and buchung.bnr=buchzahl.bnr
   and buchzahl.artop=:ZPOS
   INTO :SUMHABEN, SUMHABEN_NETTO;
   IF (SUMSOLL IS NULL) THEN
    SUMSOLL=0;
   IF (SUMHABEN IS NULL) THEN
    SUMHABEN=0;
   IF (SUMSOLL_NETTO IS NULL) THEN
    SUMSOLL_NETTO=0;
   IF (SUMHABEN_NETTO IS NULL) THEN
    SUMHABEN_NETTO=0;
   SUM_VZ=SUM_VZ+SUMHABEN-SUMSOLL;
   SUM_VZ_NETTO=SUM_VZ_NETTO+SUMHABEN_NETTO-SUMSOLL_NETTO;
  END
 ELSE
  BEGIN
   /* SOLL VZ */
   SELECT SUM(BETRAG), SUM((BETRAG*100) / (100+MWST)) from buchung
   WHERE (ONRSOLL=:IONR and KSOLL=:IKNR) AND (ONRHABEN=:IONR and ARTHABEN=:ZPOS)
   AND OPNR IS NOT NULL and OPBETRAG IS NOT NULL AND ((Datum >= :DTVONBDATUM and Datum <= :DTBISBDATUM) or (WDatum >= :DTVONWDATUM and WDatum <= :DTBISWDATUM))
   /*AND GN=:GN  Uwe es gibt kein G/N mehr */
   INTO :SUMHABEN, SUMHABEN_NETTO;
   /* HABEN */
   SELECT SUM(BETRAG), SUM((BETRAG*100) / (100+MWST)) from buchung
   WHERE (ONRHABEN=:IONR and KHABEN=:IKNR) AND (ONRSOLL=:IONR and ARTSOLL=:ZPOS)
   AND OPNR IS NOT NULL and OPBETRAG IS NOT NULL AND ((Datum >= :DTVONBDATUM and Datum <= :DTBISBDATUM) or (WDatum >= :DTVONWDATUM and WDatum <= :DTBISWDATUM))
   /*AND GN=:GN  Uwe es gibt kein G/N mehr */
   INTO :SUMSOLL, SUMSOLL_NETTO;
   IF (SUMSOLL IS NULL) THEN
    SUMSOLL=0;
   IF (SUMHABEN IS NULL) THEN
    SUMHABEN=0;
   IF (SUMSOLL_NETTO IS NULL) THEN
    SUMSOLL_NETTO=0;
   IF (SUMHABEN_NETTO IS NULL) THEN
    SUMHABEN_NETTO=0;
   SUM_VZ=SUMHABEN-SUMSOLL;
   SUM_VZ_NETTO=SUMHABEN_NETTO-SUMSOLL_NETTO;
  END    /* SOLL VZ */
 SUSPEND;
END


-- Prozedur: ABRECHNUNG_VZ_ZPOS_WOHNEINHEIT
CREATE OR ALTER PROCEDURE ABRECHNUNG_VZ_ZPOS_WOHNEINHEIT
DECLARE VARIABLE KKLASSE INTEGER;
DECLARE VARIABLE KVON INTEGER;
DECLARE VARIABLE KBIS INTEGER;
DECLARE VARIABLE SUMSOLL NUMERIC(15, 2);
DECLARE VARIABLE SUMHABEN NUMERIC(15, 2);
DECLARE VARIABLE SUMSOLL_NETTO NUMERIC(15, 2);
DECLARE VARIABLE SUMHABEN_NETTO NUMERIC(15, 2);
DECLARE VARIABLE DTVONBDATUM DATE;
DECLARE VARIABLE DTBISBDATUM DATE;
DECLARE VARIABLE DTVONWDATUM DATE;
DECLARE VARIABLE DTBISWDATUM DATE;
BEGIN


/* TEMP  Parameter setzen zum testen 
IONR=998;
IENR=3;
DTVON='1.1.1800';
DTBIS='31.12.2017';
BISTVZ = 'J';
ZPOS=110;
BDATUM='J';


  TEMP */


KVON = 200000 + (:IENR *100);
KBIS = :KVON + 99;

 /* W_Datum abfragen */
 if (BDATUM = 'J') then
  begin
   DTVONBDATUM = DTVON;
   DTBISBDATUM = DTBIS;
   DTVONWDATUM = '01.01.1900';
   DTBISWDATUM = '01.01.1900';
  end
 else
  begin
   DTVONBDATUM = '01.01.1900';
   DTBISBDATUM = '01.01.1900';
   DTVONWDATUM = DTVON;
   DTBISWDATUM = DTBIS;
  end

 IF (BISTVZ='J') THEN
  BEGIN
   /*            */
   /* KEIN SPLIT */
   /*            */
   /* SOLL */
   SELECT SUM(BETRAG), SUM((BETRAG*100) / (100+MWSTOP)) from buchung
   WHERE ONRSOLL=:IONR and (KSOLL>=:KVON and KSOLL <=:KBIS)
   AND ARTOP=:ZPOS
   AND ((Datum >= :DTVONBDATUM and Datum <= :DTBISBDATUM) or (WDatum >= :DTVONWDATUM and WDatum <= :DTBISWDATUM))
   INTO :SUMSOLL, SUMSOLL_NETTO;
   /* HABEN */
   SELECT SUM(BETRAG), SUM((BETRAG*100) / (100+MWSTOP)) from buchung
   WHERE ONRHABEN=:IONR and (KHABEN>=:KVON and KHABEN <=:KBIS)
   AND ARTOP=:ZPOS
   AND ((Datum >= :DTVONBDATUM and Datum <= :DTBISBDATUM) or (WDatum >= :DTVONWDATUM and WDatum <= :DTBISWDATUM))
   INTO :SUMHABEN, SUMHABEN_NETTO;
   IF (SUMSOLL IS NULL) THEN
    SUMSOLL=0;
   IF (SUMHABEN IS NULL) THEN
    SUMHABEN=0;
   IF (SUMSOLL_NETTO IS NULL) THEN
    SUMSOLL_NETTO=0;
   IF (SUMHABEN_NETTO IS NULL) THEN
    SUMHABEN_NETTO=0;
   SUM_VZ=SUMHABEN-SUMSOLL;
   SUM_VZ_NETTO=SUMHABEN_NETTO-SUMSOLL_NETTO;
   /*            */
   /*   SPLIT    */
   /*            */
   /* SOLL */
   select Sum(buchzahl.Betrag), SUM((buchzahl.BETRAG*100) / (100+buchzahl.MWSTOP)) from buchung, buchzahl
   where  ONRSOLL=:IONR and (KSOLL>=:KVON and KSOLL <=:KBIS)
   AND ((Datum >= :DTVONBDATUM and Datum <= :DTBISBDATUM) or (WDatum >= :DTVONWDATUM and WDatum <= :DTBISWDATUM))
   and buchung.artop=0
   and buchung.bnr=buchzahl.bnr
   and buchzahl.artop=:ZPOS
   INTO :SUMSOLL, SUMSOLL_NETTO;
   /* Haben */
   select Sum(buchzahl.Betrag), SUM((buchzahl.BETRAG*100) / (100+buchzahl.MWSTOP)) from buchung, buchzahl
   where  ONRHABEN=:IONR and (KHABEN>=:KVON and KHABEN <=:KBIS)
   AND ((Datum >= :DTVONBDATUM and Datum <= :DTBISBDATUM) or (WDatum >= :DTVONWDATUM and WDatum <= :DTBISWDATUM))
   and buchung.artop=0
   and buchung.bnr=buchzahl.bnr
   and buchzahl.artop=:ZPOS
   INTO :SUMHABEN, SUMHABEN_NETTO;
   IF (SUMSOLL IS NULL) THEN
    SUMSOLL=0;
   IF (SUMHABEN IS NULL) THEN
    SUMHABEN=0;
   IF (SUMSOLL_NETTO IS NULL) THEN
    SUMSOLL_NETTO=0;
   IF (SUMHABEN_NETTO IS NULL) THEN
    SUMHABEN_NETTO=0;
   SUM_VZ=SUM_VZ+SUMHABEN-SUMSOLL;
   SUM_VZ_NETTO=SUM_VZ_NETTO+SUMHABEN_NETTO-SUMSOLL_NETTO;
  END
 ELSE
  BEGIN
  
   /* SOLL VZ */
   SELECT SUM(BETRAG), SUM((BETRAG*100) / (100+MWST)) from buchung
   WHERE (ONRSOLL=:IONR and (KSOLL>=:KVON and KSOLL<=:KBIS)) AND (ONRHABEN=:IONR and ARTHABEN=:ZPOS)
   AND OPNR IS NOT NULL and OPBETRAG IS NOT NULL AND ((Datum >= :DTVONBDATUM and Datum <= :DTBISBDATUM) or (WDatum >= :DTVONWDATUM and WDatum <= :DTBISWDATUM))
   INTO :SUMHABEN, SUMHABEN_NETTO;
   /* HABEN */
   SELECT SUM(BETRAG), SUM((BETRAG*100) / (100+MWST)) from buchung
   WHERE (ONRHABEN=:IONR and (KHABEN>=:KVON and KHABEN<=:KBIS)) AND (ONRSOLL=:IONR and ARTSOLL=:ZPOS)
   AND OPNR IS NOT NULL and OPBETRAG IS NOT NULL AND ((Datum >= :DTVONBDATUM and Datum <= :DTBISBDATUM) or (WDatum >= :DTVONWDATUM and WDatum <= :DTBISWDATUM))
   INTO :SUMSOLL, SUMSOLL_NETTO;
   IF (SUMSOLL IS NULL) THEN
    SUMSOLL=0;
   IF (SUMHABEN IS NULL) THEN
    SUMHABEN=0;
   IF (SUMSOLL_NETTO IS NULL) THEN
    SUMSOLL_NETTO=0;
   IF (SUMHABEN_NETTO IS NULL) THEN
    SUMHABEN_NETTO=0;
   SUM_VZ=SUMHABEN-SUMSOLL;
   SUM_VZ_NETTO=SUMHABEN_NETTO-SUMSOLL_NETTO;
  END    /* SOLL VZ */
 SUSPEND;
END


-- Prozedur: ABR_VZ_BE
CREATE OR ALTER PROCEDURE ABR_VZ_BE
BEGIN
  /* Procedure text */
END


-- Prozedur: ABR_VZ_BE_ABGRENZUNG_DETAIL
CREATE OR ALTER PROCEDURE ABR_VZ_BE_ABGRENZUNG_DETAIL
BEGIN
  /* Procedure text */
END


-- Prozedur: ADRESSEN_DETAIL
CREATE OR ALTER PROCEDURE ADRESSEN_DETAIL
BEGIN
  /* Procedure text */
END


-- Prozedur: ADRESSEN_FUNKTION
CREATE OR ALTER PROCEDURE ADRESSEN_FUNKTION
BEGIN
  /* Procedure text */
END


-- Prozedur: ADRESSEN_NAMEN
CREATE OR ALTER PROCEDURE ADRESSEN_NAMEN
BEGIN
  /* Procedure text */
END


-- Prozedur: ALTERNPOSTANSCHRIFT
CREATE OR ALTER PROCEDURE ALTERNPOSTANSCHRIFT
BEGIN
  /* Procedure text */
END


-- Prozedur: ANONYM_ADDTEXT
CREATE OR ALTER PROCEDURE ANONYM_ADDTEXT
BEGIN
  /* Procedure text */
END


-- Prozedur: ANONYM_FRVER
CREATE OR ALTER PROCEDURE ANONYM_FRVER
BEGIN
  /* Procedure text */
END


-- Prozedur: ANONYM_PROCEDURE
CREATE OR ALTER PROCEDURE ANONYM_PROCEDURE
BEGIN
  /* Procedure text */
END


-- Prozedur: ANONYM_REPLACETEXT
CREATE OR ALTER PROCEDURE ANONYM_REPLACETEXT
BEGIN
  /* Procedure text */
END


-- Prozedur: BANKSALDO_ALT
CREATE OR ALTER PROCEDURE BANKSALDO_ALT
declare variable BetragEin NUMERIC (15, 2);
declare variable BetragAus NUMERIC (15, 2);
BEGIN
 /* SOLL */
 SELECT SUM(BETRAG) from buchung
 WHERE BANKNRSOLL=:GKONTO
 AND Datum<:DTBIS
 INTO :BetragEin;
 /* HABEN */
 SELECT SUM(BETRAG) from buchung
 WHERE BANKNRHABEN=:GKONTO
 AND Datum<:DTBIS
 INTO :BetragAus;
 if (BetragEin IS Null) then
  BetragEin=0;
 if (BetragAus IS Null) then
  BetragAus=0;
 SALDO=BetragEin-BetragAus;
 SUSPEND;
END


-- Prozedur: BEAUSEINZUG
CREATE OR ALTER PROCEDURE BEAUSEINZUG
DECLARE VARIABLE DTBEGINN DATE;
DECLARE VARIABLE DTENDE DATE;
DECLARE VARIABLE SBNAME VARCHAR(80);
DECLARE VARIABLE SBVNAME VARCHAR(80);
DECLARE VARIABLE SBTITEL VARCHAR(30);
DECLARE VARIABLE OVON INTEGER;
DECLARE VARIABLE OBIS INTEGER;
DECLARE VARIABLE SFIRMA VARCHAR(1);
DECLARE VARIABLE SFIRMANAME VARCHAR(80);
DECLARE VARIABLE SBRIEFAN VARCHAR(40);
BEGIN
 if (:IONR<>-1) then
  begin
   OVON = :IONR;
   OBIS = :IONR;
  end
 else
  begin
   OVON = 1;
   OBIS = 999;  
  end
 /* */   
 if (:BBEW='J') then
  begin
   for    
    select onr,knr,ba.bewnr, ba.bname,ba.bvname,vbeginn,vende,vende,ba.btitel,
    ba.BFIRMA, ba.BFIRMANAME, ba.BBRIEFAN  
    from bewohner b, bewadr ba 
    where b.bewnr=ba.bewnr and knr<200000 and (onr>=:OVON and onr<=:OBIS) 
    order by ONR,KNR
    into :ONR,:KNR,:BEWNR, sbname,sbvname,dtBeginn,dtEnde,:gekdatum,sbtitel,SFIRMA, SFIRMANAME, SBRIEFAN
   do
    begin
     BESTR = ''; EINDATUM = null; AUSDATUM = null;
     /* */
     if (dtBeginn is not null) then
      if ((dtBeginn >= :DTVON) and (dtBeginn <= :DTBIS)) then
       begin
        EINDATUM = dtBeginn;
        AUSDATUM = dtEnde;
       end
     if (dtEnde is not null) then
      if ((dtEnde >= :DTVON) and (dtEnde <= :DTBIS)) then
       begin
        EINDATUM = dtBeginn;
        AUSDATUM = dtEnde;
       end
     /* */  
     IF ((SFIRMA = 'N') OR (SFIRMA IS NULL)) THEN
      BEGIN
       if ((sbvname is not null) and (sbname is not null)) then
        BESTR=TRIM(sbvname) || ' ' || TRIM(sbname);
       else
        begin
         if (sbvname is not null) then
          BESTR=TRIM(sbvname);
         if (sbname is not null) then
          BESTR=TRIM(sbname);
        end
       BESTR = TRIM(BESTR);
       /* */
       if ((sbtitel is not null) and (sbtitel <> '')) then
        BESTR = TRIM(sbtitel) || ' ' || BESTR;
      END   
     ELSE
      BEGIN
       IF (SBRIEFAN = 'Sehr geehrte Damen und Herren') THEN
        BESTR = SFIRMANAME;
       ELSE 
        BEGIN
         IF (SFIRMANAME IS NULL) THEN
          SFIRMANAME = '';
         IF (sbNAME IS NULL) THEN
          sbNAME = '';
         IF (sbVNAME IS NULL) THEN
          sbVNAME = ''; 
          
         IF (SFIRMANAME <> '') THEN
          BESTR = SFIRMANAME || ';'; 
          
         IF (sbNAME = '') THEN
          BESTR = BESTR || ' ' || sbVNAME;
         ELSE
          BESTR = BESTR || ' ' || sbNAME || ', ' || sbVNAME;
        END 
      END 

     BESTR = TRIM(BESTR);   
     /* */ 
     if ((EINDATUM is not null) or (AUSDATUM is not null)) then
      begin
       if (IART=1) then
        begin
         if (dtBeginn is not null) then
          if ((dtBeginn >= :DTVON) and (dtBeginn <= :DTBIS)) then
           SUSPEND;
        end
       else
        begin
         if (IART=2) then
          begin
           if (dtEnde is not null) then
            if ((dtEnde >= :DTVON) and (dtEnde <= :DTBIS)) then
             SUSPEND;
          end
         else
          SUSPEND;
        end
      end
    end    
  end
 else
  begin
   for
    select onr,knr,eigadr.eignr,ename,evname,ezbeginn,ezende,ezende, etitel,
     EFIRMA, EFIRMANAME, EBRIEFAN 
      from eigentuemer,eigadr where knr>200000 and (onr>=:OVON and onr<=:OBIS) and eigentuemer.eignr=eigadr.eignr order by ONR,KNR
   into :ONR,:KNR,:BEWNR, sbname,sbvname,dtBeginn,dtEnde,:gekdatum,sbtitel,SFIRMA, SFIRMANAME, SBRIEFAN
   do
    begin
     BESTR = ''; EINDATUM = null; AUSDATUM = null;
     if (dtBeginn is not null) then
      if ((dtBeginn >= :DTVON) and (dtBeginn <= :DTBIS)) then
       begin
        EINDATUM=dtBeginn;
        AUSDATUM=dtEnde;
       end
     if (dtEnde is not null) then
      if ((dtEnde >= :DTVON) and (dtEnde <= :DTBIS)) then
       begin
        EINDATUM=dtBeginn;
        AUSDATUM=dtEnde;
       end
       
     /* */  
      IF ((SFIRMA = 'N') OR (SFIRMA IS NULL)) THEN
       BEGIN
         if ((sbvname is not null) and (sbname is not null)) then
          BESTR=TRIM(sbvname) || ' ' || TRIM(sbname);
         else
          begin
           if (sbvname is not null) then
            BESTR=TRIM(sbvname);
           if (sbname is not null) then
            BESTR=TRIM(sbname);
          end
         BESTR = TRIM(BESTR);
         /* */
         if ((sbtitel is not null) and (sbtitel <> '')) then
          BESTR = TRIM(sbtitel) || ' ' || BESTR;
       END   
     ELSE
      BEGIN
       IF (SBRIEFAN = 'Sehr geehrte Damen und Herren') THEN
        BESTR = SFIRMANAME;
       ELSE 
        BEGIN
         IF (SFIRMANAME IS NULL) THEN
          SFIRMANAME = '';
         IF (sbNAME IS NULL) THEN
          sbNAME = '';
         IF (sbVNAME IS NULL) THEN
          sbVNAME = ''; 
          
         IF (SFIRMANAME <> '') THEN
          BESTR = SFIRMANAME || ';'; 
          
         IF (sbNAME = '') THEN
          BESTR = BESTR || ' ' || sbVNAME;
         ELSE
          BESTR = BESTR || ' ' || sbNAME || ', ' || sbVNAME;
        END 
      END 
     BESTR = TRIM(BESTR);   
     /* */        
     if ((EINDATUM is not null) or (AUSDATUM is not null)) then
      begin
       if (IART=1) then
        begin
         if (dtBeginn is not null) then
          if ((dtBeginn >= :DTVON) and (dtBeginn <= :DTBIS)) then
           SUSPEND;
        end
       else
        begin
         if (IART=2) then
          begin
           if (dtEnde is not null) then
            if ((dtEnde >= :DTVON) and (dtEnde <= :DTBIS)) then
             SUSPEND;
          end
         else
          SUSPEND;
        end
      end
    end
  end
END


-- Prozedur: BERECHNE_MAHNLISTE
CREATE OR ALTER PROCEDURE BERECHNE_MAHNLISTE
DECLARE VARIABLE RSOLL NUMERIC(15,2);
 DECLARE VARIABLE IKNR integer;
 DECLARE VARIABLE IONR integer;
 DECLARE VARIABLE IHAUSTYP integer;
 DECLARE VARIABLE IKNRVON integer;
 DECLARE VARIABLE IKNRBIS integer;
BEGIN
 /* ERST MAL OPBETRAG berechnen */
 FOR
  select ONR, BSONST from objekte
  where (ONR>=:ONRVON and ONR<=:ONRBIS)
  into :IONR, :IHAUSTYP
 DO
  BEGIN
   IF (IHAUSTYP=0) THEN
    BEGIN
     IKNRVON=100000;
     IKNRBIS=199999;
    END
   ELSE
    IF (IHAUSTYP=1) THEN
     BEGIN
      IKNRVON=200000;
      IKNRBIS=300000;
     END
    ELSE
     IF (IHAUSTYP=2) THEN
      BEGIN
       IKNRVON=100000;
       IKNRBIS=300000;
      END
   /* KBRUTTO2 zurÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼cksetzen, KBRUTTO2 fÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼r alle neu berechnen */
   UPDATE KONTEN SET OPBETRAG=0 where ONR=:IONR and KNR>=100000;
   FOR
    select sum(OPBetrag), KSOLL from buchung
    where ONRSOLL=:IONR AND (KSOLL>=:IKNRVON AND KSOLL<=:IKNRBIS)
    and Datum<=:TODAY
    group by KSOLL
    into :RSOLL, :IKNR
   DO
    BEGIN
     IF (RSOLL IS NULL) THEN
      RSOLL=0;
     IF (RSOLL>0) THEN
       BEGIN
        UPDATE KONTEN SET OPBETRAG=:RSOLL where ONR=:IONR and KNR=:IKNR;
        UPDATE KONTEN SET KMAHNSTUFE=1 where ONR=:IONR and KNR=:IKNR AND (KMAHNSTUFE<1 or KMAHNSTUFE IS NULL);
       END
    END
  /* Mahnstufen zurÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼cksetzen wenn OPBETRAG = 0 */
  UPDATE KONTEN SET KMAHNSTUFE=0 where ONR=:IONR and (KNR>=:IKNRVON and KNR<=:IKNRBIS) and OPBETRAG<=0;
  /* Mahnsperre? */
  IF (IKNRVON=100000) THEN
   UPDATE KONTEN SET KMAHNSTUFE=0 where ONR=:IONR and KNR IN (select KNR from Bewohner where ONR=:IONR and BMAHNSPERRE='J');
  IF (IKNRBIS=300000) THEN
   UPDATE KONTEN SET KMAHNSTUFE=0 where ONR=:IONR and KNR IN (select KNR from Eigentuemer where ONR=:IONR and EMAHNSPERRE='J');
 END /* Alle HÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤user */
END


-- Prozedur: BILANZ_SCHW
CREATE OR ALTER PROCEDURE BILANZ_SCHW
DECLARE VARIABLE IKLASSE INTEGER;
DECLARE VARIABLE BANKNR INTEGER;
DECLARE VARIABLE KURZBEZ VARCHAR(15);
DECLARE VARIABLE SALDO NUMERIC (18, 2);
BEGIN
 IF (ONR_IN<>0) THEN
  BEGIN
   ONR=ONR_IN;
   FOR select knr,kbez,ea,bkart,bkbemerkung,kklasse
    from konten where (KKLASSE=20 or KKLASSE=22 or KKLASSE=27 or KKLASSE=24) and onr=:ONR_IN
    INTO :KNR,:BEZEICHNUNG,:EA,:ART,:BEMERKUNG,:IKLASSE
    DO
    BEGIN
     EXECUTE PROCEDURE KONTOSALDO_ALT(:ONR,:KNR,:DTSTICHTAG,'N','N') RETURNING_VALUES STAND;
     IF (STAND IS NULL) THEN
      STAND=0;
     if (IKLASSE<>27) then
      KLASSE='Aktiven';
     else
      KLASSE='Passiven';
     SUSPEND;
    END
  END
 ELSE
  BEGIN /* ALLE HÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾USER */
   /* Alle Banken */
   for select distinct banknr from objbanken into :banknr do
    begin
     STAND=0;
     for select ONR, KNR from objbanken where BANKNR=:BANKNR into :ONR, :KNR
      do
       begin
        select distinct onr, knr,kbez,ea,bkart,bkbemerkung,kklasse
        from konten where ONR=:ONR and KNR=:KNR
        INTO :ONR, :KNR,:BEZEICHNUNG,:EA,:ART,:BEMERKUNG,:IKLASSE;
        EXECUTE PROCEDURE KONTOSALDO_ALT(:ONR,:KNR,:DTSTICHTAG,'N','N') RETURNING_VALUES SALDO;
        IF (SALDO IS NULL) THEN
         SALDO=0;
        STAND=STAND+SALDO;
      END
     if (IKLASSE<>27) then
      KLASSE='Aktiven';
     else
      KLASSE='Passiven';
     select kurzbez from banken where nr=:banknr into :kurzbez;
     BEZEICHNUNG=BEZEICHNUNG || ' ' || kurzbez;
     SUSPEND;
    END
   /* restlichen nicht Bank */
   FOR select onr, knr,kbez,ea,bkart,bkbemerkung,kklasse
    from konten where (KKLASSE=22 or KKLASSE=27 or KKLASSE=24)
    INTO :ONR, :KNR,:BEZEICHNUNG,:EA,:ART,:BEMERKUNG,:IKLASSE
   DO
    BEGIN
     EXECUTE PROCEDURE KONTOSALDO_ALT(:ONR,:KNR,:DTSTICHTAG,'N','N') RETURNING_VALUES STAND;
     IF (STAND IS NULL) THEN
      STAND=0;
     if (IKLASSE<>27) then
      KLASSE='Aktiven';
     else
      KLASSE='Passiven';
     SUSPEND;
    END
  END
END


-- Prozedur: CHECK_SET_KONTOBEZ_BE_NAME
CREATE OR ALTER PROCEDURE CHECK_SET_KONTOBEZ_BE_NAME
DECLARE VARIABLE KBEZ_ALT VARCHAR(188);
DECLARE VARIABLE KBEZ_NEU VARCHAR(188);
DECLARE VARIABLE SEBEZ VARCHAR(25);
DECLARE VARIABLE SNAME VARCHAR(80);
DECLARE VARIABLE SVNAME VARCHAR(80);
DECLARE VARIABLE SBFIRMA VARCHAR(1);
DECLARE VARIABLE SBFIRMANAME VARCHAR(80);
DECLARE VARIABLE SBBRIEFAN VARCHAR(40);
DECLARE VARIABLE BEWSTATUS INTEGER;
BEGIN
 SELECT EBEZ from wohnung WHERE ONR=:IONR and ENR=:IENR INTO :SEBEZ;
 IF (SEBEZ IS NULL) THEN
  SEBEZ = '';
  
 select BEWSTATUS from BEWOHNER where ONR=:IONR and KNR=:IKNR INTO :BEWSTATUS;
 /* */ 
 IF (IBEWNR IS NOT NULL) THEN
  BEGIN
   SELECT BNAME, BVNAME, BFIRMA, BFIRMANAME, BBRIEFAN FROM bewadr WHERE BEWNR=:IBEWNR INTO :SNAME, :SVNAME, :SBFIRMA, :SBFIRMANAME, :SBBRIEFAN;
   IF ((SBFIRMA = 'N') OR (SBFIRMA IS NULL)) THEN
    BEGIN
     IF (SNAME IS NULL) THEN
      SNAME = '';
     IF (SVNAME IS NULL) THEN
      SVNAME = ''; 
     IF (SNAME = '') THEN
      KBEZ_NEU = SVNAME;
     ELSE
      KBEZ_NEU = SNAME || ', ' || SVNAME;
    END
   ELSE
    BEGIN
     IF (sBBRIEFAN = 'Sehr geehrte Damen und Herren') THEN
      KBEZ_NEU = SBFIRMANAME;
     ELSE 
      BEGIN
       IF (sBFIRMANAME IS NULL) THEN
        SBFIRMANAME = '';
       IF (SNAME IS NULL) THEN
        SNAME = '';
       IF (SVNAME IS NULL) THEN
        SVNAME = ''; 
        
       IF (SBFIRMANAME <> '') THEN
        KBEZ_NEU = SBFIRMANAME || ';'; 
        
       IF (SNAME = '') THEN
        KBEZ_NEU = KBEZ_NEU || ' ' || SVNAME;
       ELSE
        KBEZ_NEU = KBEZ_NEU || ' ' || SNAME || ', ' || SVNAME;
      END 
    END 
      
   
   IF (SEBEZ <> '') THEN
    IF (BEWSTATUS = 0) THEN
     BEGIN    
      IF (KBEZ_NEU = '') THEN
       KBEZ_NEU = SEBEZ;
      ELSE
       KBEZ_NEU = KBEZ_NEU || ' ' || SEBEZ;
     END
    ELSE
     KBEZ_NEU = 'Leerstand ' || SEBEZ;
     
  END
 ELSE
  KBEZ_NEU = 'Unbelegt';
  
 SELECT KBEZ from konten WHERE ONR=:IONR and KNR=:IKNR INTO :KBEZ_ALT;
 IF (KBEZ_ALT IS NULL) THEN
  KBEZ_ALT = ''; 
 IF (KBEZ_ALT <> KBEZ_NEU) THEN
  update konten set konten.kbez = :KBEZ_NEU where ONR=:IONR and KNR=:IKNR;
END


-- Prozedur: CHECK_SET_KONTOBEZ_EIG_NAME
CREATE OR ALTER PROCEDURE CHECK_SET_KONTOBEZ_EIG_NAME
DECLARE VARIABLE KBEZ_ALT VARCHAR(188);
DECLARE VARIABLE KBEZ_NEU VARCHAR(188);
DECLARE VARIABLE SEBEZ VARCHAR(25);
DECLARE VARIABLE SNAME VARCHAR(80);
DECLARE VARIABLE SVNAME VARCHAR(80);
DECLARE VARIABLE SEFIRMA VARCHAR(1);
DECLARE VARIABLE SEFIRMANAME VARCHAR(80);
DECLARE VARIABLE SEBRIEFAN VARCHAR(40);
BEGIN
 SELECT EBEZ from wohnung WHERE ONR=:IONR and ENR=:IENR INTO :SEBEZ;
 IF (SEBEZ IS NULL) THEN
  SEBEZ = '';
 /* */ 
 IF (IEIGNR IS NOT NULL) THEN
  BEGIN
   SELECT ENAME, EVNAME, EFIRMA, EFIRMANAME, EBRIEFAN  FROM eigadr WHERE EIGNR=:IEIGNR INTO :SNAME, :SVNAME, :SEFIRMA, :SEFIRMANAME, :SEBRIEFAN;
   IF ((SEFIRMA = 'N') OR (SEFIRMA IS NULL)) THEN
    BEGIN 
     IF (SNAME IS NULL) THEN
      SNAME = '';
     IF (SVNAME IS NULL) THEN
      SVNAME = ''; 
     IF (SNAME = '') THEN
      KBEZ_NEU = SVNAME;
     ELSE
      KBEZ_NEU = SNAME || ', ' || SVNAME;
    END
   ELSE
    BEGIN
     IF (SEBRIEFAN = 'Sehr geehrte Damen und Herren') THEN
      KBEZ_NEU = SEFIRMANAME;
     ELSE 
      BEGIN
       IF (SEFIRMANAME IS NULL) THEN
        SEFIRMANAME = '';
       IF (SNAME IS NULL) THEN
        SNAME = '';
       IF (SVNAME IS NULL) THEN
        SVNAME = ''; 
       IF (SEFIRMANAME <> '') THEN
        KBEZ_NEU = SEFIRMANAME || ';'; 
        
       IF (SNAME = '') THEN
        KBEZ_NEU = KBEZ_NEU || ' ' || SVNAME;
       ELSE
        KBEZ_NEU = KBEZ_NEU || ' ' || SNAME || ', ' || SVNAME;
      END 
    END  
     
   IF (SEBEZ <> '') THEN
      IF (KBEZ_NEU = '') THEN
       KBEZ_NEU = SEBEZ;
      ELSE
       KBEZ_NEU = KBEZ_NEU || ' ' || SEBEZ;  
     
     
  END
 ELSE
  KBEZ_NEU = 'Unbelegt';
  
 SELECT KBEZ from konten WHERE ONR=:IONR and KNR=:IKNR INTO :KBEZ_ALT;
 IF (KBEZ_ALT IS NULL) THEN
  KBEZ_ALT = ''; 
 IF (KBEZ_ALT <> KBEZ_NEU) THEN
  update konten set konten.kbez = :KBEZ_NEU where ONR=:IONR and KNR=:IKNR;
END


-- Prozedur: CRM_GET_UEBERBLICK
CREATE OR ALTER PROCEDURE CRM_GET_UEBERBLICK
DECLARE VARIABLE GES_ROT INTEGER;
DECLARE VARIABLE GES_GELB INTEGER;
DECLARE VARIABLE GES_GRUEN INTEGER;
DECLARE VARIABLE GES_VORGAENGE INTEGER;
BEGIN
  ISSUM=0;
  GES_ROT=0; GES_GELB=0; GES_GRUEN=0; GES_VORGAENGE=0;
  for select ID, SUM(ANZ_ROT), SUM(ANZ_GELB), SUM(ANZ_GRUEN), sum(ANZ_VORGAENGE)
    from CRM_GET_UEBERBLICK_DET(:TYP,:DTBIS_GRUEN,:DTBIS_GELB,:DTBIS_ROT) group by ID
    into ID, ANZ_ROT, ANZ_GELB, ANZ_GRUEN, ANZ_VORGAENGE
    do
     begin
      if (TYP='O') then
       BEGIN
        select OBEZ, OSTRASSE, OPLZORT from OBJEKTE where ONR=:ID into NAME1, NAME2, NAME3;
       END
      ELSE
      if (TYP='M') then
       BEGIN
        select NAME, VORNAME from MITARBEITER where ID=:ID into :NAME1, :NAME2;
       END
     ELSE
      if (TYP='F') then
       BEGIN
        select NAME, VORNAME, ZUSATZ from LIEFERAN where KNR=:ID into :NAME1, :NAME2, :NAME3;
       END
      GES_ROT=GES_ROT+ANZ_ROT;
      GES_GELB=GES_GELB+ANZ_GELB;
      GES_GRUEN=GES_GRUEN+ANZ_GRUEN;
      GES_VORGAENGE=GES_VORGAENGE+ANZ_VORGAENGE;
      if (ID IS NOT NULL) then
       begin
        if (ANZ_ROT=0) then
         ANZ_ROT=NULL;
        if (ANZ_GELB=0) then
         ANZ_GELB=NULL;
        if (ANZ_GRUEN=0) then
         ANZ_GRUEN=NULL;
        if (ANZ_VORGAENGE=0) then
         ANZ_VORGAENGE=NULL;
         if (ID=AKT_MITARBEITER AND TYP='M') then
          ISSUM=1;
         ELSE
          ISSUM=0;
        suspend;
       end
     end
  ISSUM=2;
  if (GES_ROT>0) then
   ANZ_ROT=GES_ROT;
  else
   ANZ_ROT=NULL;
  if (GES_GELB>0) then
   ANZ_GELB=GES_GELB;
  else
   ANZ_GELB=NULL;
  if (GES_GRUEN>0) then
   ANZ_GRUEN=GES_GRUEN;
  else
   ANZ_GRUEN=NULL;
  if (GES_VORGAENGE>0) then
   ANZ_VORGAENGE=GES_VORGAENGE;
  else
   ANZ_VORGAENGE=NULL;
  NAME1='gesamt';
  NAME2='';
  NAME3='';
  ID=NULL;
  suspend;
END


-- Prozedur: CRM_GET_UEBERBLICK_DET
CREATE OR ALTER PROCEDURE CRM_GET_UEBERBLICK_DET
declare variable IANZ INTEGER;
declare variable DT_FIRST DATE;
BEGIN
  if (TYP='O') then
   begin
    /* Aufgaben ROT */
    ANZ_ROT=0; ANZ_GELB=0; ANZ_GRUEN=0; ANZ_VORGAENGE=0;
    for select ONR, count(*) from aufgabe where STATUS<4 and BEGINNT_AM < :DTBIS_ROT and ISVORLAGE=0 group by ONR into :ID, :ANZ_ROT do SUSPEND;
    /* Aufgaben GELB */
    ANZ_ROT=0; ANZ_GELB=0; ANZ_GRUEN=0;  ANZ_VORGAENGE=0;
    for select ONR, count(*) from aufgabe where STATUS<4 and (BEGINNT_AM >= :DTBIS_ROT and BEGINNT_AM < :DTBIS_GELB) and ISVORLAGE=0 group by ONR into :ID, :ANZ_GELB DO SUSPEND;
    /* Aufgaben GRUEN */
    ANZ_ROT=0;  ANZ_GELB=0;  ANZ_GRUEN=0;  ANZ_VORGAENGE=0;
    for select ONR, count(*) from aufgabe where STATUS<4 and (BEGINNT_AM >= :DTBIS_GELB and BEGINNT_AM < :DTBIS_GRUEN) and ISVORLAGE=0 group by ONR into :ID, :ANZ_GRUEN DO SUSPEND;
    /* TERMINE ROT */
    ANZ_ROT=0;  ANZ_GELB=0;  ANZ_GRUEN=0;  ANZ_VORGAENGE=0;
    for select ONR, count(*) from termine_crm where STATUS<4 and BEGINNT_AM < :DTBIS_ROT and ISVORLAGE=0 group by ONR into :ID, :ANZ_ROT do SUSPEND;
    /* TERMINE GELB */
    ANZ_ROT=0; ANZ_GELB=0; ANZ_GRUEN=0;  ANZ_VORGAENGE=0;
    for select ONR, count(*) from termine_crm where STATUS<4 and (BEGINNT_AM >= :DTBIS_ROT and BEGINNT_AM < :DTBIS_GELB) and ISVORLAGE=0 group by ONR into :ID, :ANZ_GELB DO SUSPEND;
    /* TERMINE GRUEN */
    ANZ_ROT=0;  ANZ_GELB=0; ANZ_GRUEN=0; ANZ_VORGAENGE=0;
    for select ONR, count(*) from termine_crm where STATUS<4 and (BEGINNT_AM >= :DTBIS_GELB and BEGINNT_AM < :DTBIS_GRUEN) and ISVORLAGE=0 group by ONR into :ID, :ANZ_GRUEN DO SUSPEND;
    /* ANRUFE ROT */
    ANZ_ROT=0;  ANZ_GELB=0;  ANZ_GRUEN=0;  ANZ_VORGAENGE=0;
    for select ONR, count(*) from anruf where STATUS<4 and DATUM < :DTBIS_ROT and ISVORLAGE=0 group by ONR into :ID, :ANZ_ROT do SUSPEND;
    /* ANRUFE GELB */
    ANZ_ROT=0; ANZ_GELB=0; ANZ_GRUEN=0;  ANZ_VORGAENGE=0;
    for select ONR, count(*) from anruf where STATUS<4 and (DATUM >= :DTBIS_ROT and DATUM < :DTBIS_GELB) and ISVORLAGE=0 group by ONR into :ID, :ANZ_GELB DO SUSPEND;
    /* ANRUFE GRUEN */
    ANZ_ROT=0;  ANZ_GELB=0; ANZ_GRUEN=0; ANZ_VORGAENGE=0;
    for select ONR, count(*) from anruf where STATUS<4 and (DATUM >= :DTBIS_GELB and DATUM < :DTBIS_GRUEN) and ISVORLAGE=0 group by ONR into :ID, :ANZ_GRUEN DO SUSPEND;
    /* VorgÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤nge */
    ANZ_ROT=0; ANZ_GELB=0; ANZ_GRUEN=0; ANZ_VORGAENGE=0;
    for select ONR, count(*) from vorgang where STATUS<4 and ID<>-1 and ISVORLAGE=0 group by ONR into :ID, :ANZ_VORGAENGE do suspend;
   END
  ELSE
   if (TYP='M' or TYP='F') then  /* MITARBEITER, FIRMEN */
    BEGIN
     DT_FIRST=CAST('1980-01-01' AS Date);
     /* Aufgaben ROT */
     ANZ_ROT=0; ANZ_GELB=0; ANZ_GRUEN=0; ANZ_VORGAENGE=0;
     for select ID, sum(ANZ) from crm_get_ueberblick_det2(1,:TYP,:DT_FIRST,:DTBIS_ROT) group by ID into :ID, :ANZ_ROT do suspend;
     /* Aufgaben Gelb */
     ANZ_ROT=0; ANZ_GELB=0; ANZ_GRUEN=0; ANZ_VORGAENGE=0;
     for select ID, sum(ANZ) from crm_get_ueberblick_det2(1,:TYP,:DTBIS_ROT,:DTBIS_GELB) group by ID into :ID, :ANZ_GELB do suspend;
     /* Aufgaben Gruen */
     ANZ_ROT=0; ANZ_GELB=0; ANZ_GRUEN=0; ANZ_VORGAENGE=0;
     for select ID, sum(ANZ) from crm_get_ueberblick_det2(1,:TYP,:DTBIS_GELB,:DTBIS_GRUEN) group by ID into :ID, :ANZ_GRUEN do suspend;
     /* Termine ROT */
     ANZ_ROT=0; ANZ_GELB=0; ANZ_GRUEN=0; ANZ_VORGAENGE=0;
     for select ID, sum(ANZ) from crm_get_ueberblick_det2(2,:TYP,:DT_FIRST,:DTBIS_ROT) group by ID into :ID, :ANZ_ROT do suspend;
     /* Termine Gelb */
     ANZ_ROT=0; ANZ_GELB=0; ANZ_GRUEN=0; ANZ_VORGAENGE=0;
     for select ID, sum(ANZ) from crm_get_ueberblick_det2(2,:TYP,:DTBIS_ROT,:DTBIS_GELB) group by ID into :ID, :ANZ_GELB do suspend;
     /* Termine Gruen */
     ANZ_ROT=0; ANZ_GELB=0; ANZ_GRUEN=0; ANZ_VORGAENGE=0;
     for select ID, sum(ANZ) from crm_get_ueberblick_det2(2,:TYP,:DTBIS_GELB,:DTBIS_GRUEN) group by ID into :ID, :ANZ_GRUEN do suspend;
     /* ANRUF ROT */
     ANZ_ROT=0; ANZ_GELB=0; ANZ_GRUEN=0; ANZ_VORGAENGE=0;
     for select ID, sum(ANZ) from crm_get_ueberblick_det2(3,:TYP,:DT_FIRST,:DTBIS_ROT) group by ID into :ID, :ANZ_ROT do suspend;
     /* ANRUF Gelb */
     ANZ_ROT=0; ANZ_GELB=0; ANZ_GRUEN=0; ANZ_VORGAENGE=0;
     for select ID, sum(ANZ) from crm_get_ueberblick_det2(3,:TYP,:DTBIS_ROT,:DTBIS_GELB) group by ID into :ID, :ANZ_GELB do suspend;
     /* ANRUF Gruen */
     ANZ_ROT=0; ANZ_GELB=0; ANZ_GRUEN=0; ANZ_VORGAENGE=0;
     for select ID, sum(ANZ) from crm_get_ueberblick_det2(3,:TYP,:DTBIS_GELB,:DTBIS_GRUEN) group by ID into :ID, :ANZ_GRUEN do suspend;
     /* Vorgaenge Rot*/
     ANZ_ROT=0; ANZ_GELB=0; ANZ_GRUEN=0; ANZ_VORGAENGE=0;
     for select ID, sum(ANZ) from crm_get_ueberblick_det2(4,:TYP,:DT_FIRST,:DTBIS_ROT) group by ID into :ID, :ANZ_VORGAENGE do suspend;
     /* Vorgaenge Gelb */
     ANZ_ROT=0; ANZ_GELB=0; ANZ_GRUEN=0; ANZ_VORGAENGE=0;
     for select ID, sum(ANZ) from crm_get_ueberblick_det2(4,:TYP,:DTBIS_ROT,:DTBIS_GELB) group by ID into :ID, :ANZ_VORGAENGE do suspend;
     /* Vorgaenge Gruen */
     ANZ_ROT=0; ANZ_GELB=0; ANZ_GRUEN=0; ANZ_VORGAENGE=0;
     for select ID, sum(ANZ) from crm_get_ueberblick_det2(4,:TYP,:DTBIS_GELB,:DTBIS_GRUEN) group by ID into :ID, :ANZ_VORGAENGE do suspend;
    END /* MITARBEITER */
END


-- Prozedur: CRM_GET_UEBERBLICK_DET2
CREATE OR ALTER PROCEDURE CRM_GET_UEBERBLICK_DET2
BEGIN
 if (WER='F') then
  begin
   if (TABLE_TYP=1) then
    begin
     for select count(*), idf1 from aufgabe where IDF1 IS NOT NULL and STATUS<4 and (BEGINNT_AM >= :DT_VON and BEGINNT_AM <= :DT_BIS) and ISVORLAGE=0 group by idf1 into :ANZ, :ID do suspend;
     for select count(*), idf2 from aufgabe where IDF2 IS NOT NULL and STATUS<4 and (BEGINNT_AM >= :DT_VON and BEGINNT_AM <= :DT_BIS) and ISVORLAGE=0 group by idf2 into :ANZ, :ID do suspend;
     for select count(*), idf3 from aufgabe where IDF3 IS NOT NULL and STATUS<4 and (BEGINNT_AM >= :DT_VON and BEGINNT_AM <= :DT_BIS) and ISVORLAGE=0 group by idf3 into :ANZ, :ID do suspend;
     for select count(*), idf4 from aufgabe where IDF4 IS NOT NULL and STATUS<4 and (BEGINNT_AM >= :DT_VON and BEGINNT_AM <= :DT_BIS) and ISVORLAGE=0 group by idf4 into :ANZ, :ID do suspend;
     for select count(*), idf5 from aufgabe where IDF5 IS NOT NULL and STATUS<4 and (BEGINNT_AM >= :DT_VON and BEGINNT_AM <= :DT_BIS) and ISVORLAGE=0 group by idf5 into :ANZ, :ID do suspend;
    end
   else
   if (TABLE_TYP=2) then
    begin
     for select count(*), KKNR from termine_crm where KKNR IS NOT NULL and STATUS<4 and (BEGINNT_AM >= :DT_VON and BEGINNT_AM <= :DT_BIS) and ISVORLAGE=0 group by KKNR into :ANZ, :ID do suspend;
    end
   else
   if (TABLE_TYP=3) then
    begin
     for select count(*), KKNR from anruf where KKNR IS NOT NULL and STATUS<4 and (DATUM >= :DT_VON and DATUM <= :DT_BIS) and ISVORLAGE=0 group by KKNR into :ANZ, :ID do suspend;
    end
   else
    if (TABLE_TYP=4) then
     begin
      for select count(*), idf1 from vorgang where IDF1 IS NOT NULL and STATUS<4 and ID<>-1 and (STARTDATUM >= :DT_VON and STARTDATUM <= :DT_BIS) and ISVORLAGE=0 group by idf1 into :ANZ, :ID do suspend;
      for select count(*), idf2 from vorgang where IDF2 IS NOT NULL and STATUS<4 and ID<>-1 and (STARTDATUM >= :DT_VON and STARTDATUM <= :DT_BIS) and ISVORLAGE=0 group by idf2 into :ANZ, :ID do suspend;
      for select count(*), idf3 from vorgang where IDF3 IS NOT NULL and STATUS<4 and ID<>-1 and (STARTDATUM >= :DT_VON and STARTDATUM <= :DT_BIS) and ISVORLAGE=0 group by idf3 into :ANZ, :ID do suspend;
      for select count(*), idf4 from vorgang where IDF4 IS NOT NULL and STATUS<4 and ID<>-1 and (STARTDATUM >= :DT_VON and STARTDATUM <= :DT_BIS) and ISVORLAGE=0 group by idf4 into :ANZ, :ID do suspend;
      for select count(*), idf5 from vorgang where IDF5 IS NOT NULL and STATUS<4 and ID<>-1 and (STARTDATUM >= :DT_VON and STARTDATUM <= :DT_BIS) and ISVORLAGE=0 group by idf5 into :ANZ, :ID do suspend;
     end
   end
  else
 if (WER='M') then /*MITARBEITER*/
  begin
   if (TABLE_TYP=1) then
    begin
     for select count(*), idm1 from aufgabe where IDM1 IS NOT NULL and STATUS<4 and (BEGINNT_AM >= :DT_VON and BEGINNT_AM <= :DT_BIS) and ISVORLAGE=0 group by idm1 into :ANZ, :ID do suspend;
     for select count(*), idm2 from aufgabe where IDM2 IS NOT NULL and STATUS<4 and (BEGINNT_AM >= :DT_VON and BEGINNT_AM <= :DT_BIS) and ISVORLAGE=0 group by idm2 into :ANZ, :ID do suspend;
     for select count(*), idm3 from aufgabe where IDM3 IS NOT NULL and STATUS<4 and (BEGINNT_AM >= :DT_VON and BEGINNT_AM <= :DT_BIS) and ISVORLAGE=0 group by idm3 into :ANZ, :ID do suspend;
     for select count(*), idm4 from aufgabe where IDM4 IS NOT NULL and STATUS<4 and (BEGINNT_AM >= :DT_VON and BEGINNT_AM <= :DT_BIS) and ISVORLAGE=0 group by idm4 into :ANZ, :ID do suspend;
     for select count(*), idm5 from aufgabe where IDM5 IS NOT NULL and STATUS<4 and (BEGINNT_AM >= :DT_VON and BEGINNT_AM <= :DT_BIS) and ISVORLAGE=0 group by idm5 into :ANZ, :ID do suspend;
     for select count(*), idm6 from aufgabe where IDM6 IS NOT NULL and STATUS<4 and (BEGINNT_AM >= :DT_VON and BEGINNT_AM <= :DT_BIS) and ISVORLAGE=0 group by idm6 into :ANZ, :ID do suspend;
     for select count(*), idm7 from aufgabe where IDM7 IS NOT NULL and STATUS<4 and (BEGINNT_AM >= :DT_VON and BEGINNT_AM <= :DT_BIS) and ISVORLAGE=0 group by idm7 into :ANZ, :ID do suspend;
     for select count(*), idm8 from aufgabe where IDM8 IS NOT NULL and STATUS<4 and (BEGINNT_AM >= :DT_VON and BEGINNT_AM <= :DT_BIS) and ISVORLAGE=0 group by idm8 into :ANZ, :ID do suspend;
     for select count(*), idm9 from aufgabe where IDM9 IS NOT NULL and STATUS<4 and (BEGINNT_AM >= :DT_VON and BEGINNT_AM <= :DT_BIS) and ISVORLAGE=0 group by idm9 into :ANZ, :ID do suspend;
     for select count(*), idm10 from aufgabe where IDM10 IS NOT NULL and STATUS<4 and (BEGINNT_AM >= :DT_VON and BEGINNT_AM <= :DT_BIS) and ISVORLAGE=0 group by idm10 into :ANZ, :ID do suspend;
     for select count(*), idm11 from aufgabe where IDM11 IS NOT NULL and STATUS<4 and (BEGINNT_AM >= :DT_VON and BEGINNT_AM <= :DT_BIS) and ISVORLAGE=0 group by idm11 into :ANZ, :ID do suspend;
     for select count(*), idm12 from aufgabe where IDM12 IS NOT NULL and STATUS<4 and (BEGINNT_AM >= :DT_VON and BEGINNT_AM <= :DT_BIS) and ISVORLAGE=0 group by idm12 into :ANZ, :ID do suspend;
    end
   else
   if (TABLE_TYP=2) then
    begin
     for select count(*), idm1 from termine_crm where idm1 IS NOT NULL and STATUS<4 and (BEGINNT_AM >= :DT_VON and BEGINNT_AM <= :DT_BIS) and ISVORLAGE=0 group by idm1 into :ANZ, :ID do suspend;
     for select count(*), idm2 from termine_crm where idm2 IS NOT NULL and STATUS<4 and (BEGINNT_AM >= :DT_VON and BEGINNT_AM <= :DT_BIS) and ISVORLAGE=0 group by idm2 into :ANZ, :ID do suspend;
     for select count(*), idm3 from termine_crm where idm3 IS NOT NULL and STATUS<4 and (BEGINNT_AM >= :DT_VON and BEGINNT_AM <= :DT_BIS) and ISVORLAGE=0 group by idm3 into :ANZ, :ID do suspend;
     for select count(*), idm4 from termine_crm where idm4 IS NOT NULL and STATUS<4 and (BEGINNT_AM >= :DT_VON and BEGINNT_AM <= :DT_BIS) and ISVORLAGE=0 group by idm4 into :ANZ, :ID do suspend;
     for select count(*), idm5 from termine_crm where idm5 IS NOT NULL and STATUS<4 and (BEGINNT_AM >= :DT_VON and BEGINNT_AM <= :DT_BIS) and ISVORLAGE=0 group by idm5 into :ANZ, :ID do suspend;
     for select count(*), idm6 from termine_crm where idm6 IS NOT NULL and STATUS<4 and (BEGINNT_AM >= :DT_VON and BEGINNT_AM <= :DT_BIS) and ISVORLAGE=0 group by idm6 into :ANZ, :ID do suspend;
     for select count(*), idm7 from termine_crm where idm7 IS NOT NULL and STATUS<4 and (BEGINNT_AM >= :DT_VON and BEGINNT_AM <= :DT_BIS) and ISVORLAGE=0 group by idm7 into :ANZ, :ID do suspend;
     for select count(*), idm8 from termine_crm where idm8 IS NOT NULL and STATUS<4 and (BEGINNT_AM >= :DT_VON and BEGINNT_AM <= :DT_BIS) and ISVORLAGE=0 group by idm8 into :ANZ, :ID do suspend;
     for select count(*), idm9 from termine_crm where idm9 IS NOT NULL and STATUS<4 and (BEGINNT_AM >= :DT_VON and BEGINNT_AM <= :DT_BIS) and ISVORLAGE=0 group by idm9 into :ANZ, :ID do suspend;
     for select count(*), idm10 from termine_crm where idm10 IS NOT NULL and STATUS<4 and (BEGINNT_AM >= :DT_VON and BEGINNT_AM <= :DT_BIS) and ISVORLAGE=0 group by idm10 into :ANZ, :ID do suspend;
     for select count(*), idm11 from termine_crm where idm11 IS NOT NULL and STATUS<4 and (BEGINNT_AM >= :DT_VON and BEGINNT_AM <= :DT_BIS) and ISVORLAGE=0 group by idm11 into :ANZ, :ID do suspend;
     for select count(*), idm12 from termine_crm where idm12 IS NOT NULL and STATUS<4 and (BEGINNT_AM >= :DT_VON and BEGINNT_AM <= :DT_BIS) and ISVORLAGE=0 group by idm12 into :ANZ, :ID do suspend;
    end
   else
   if (TABLE_TYP=3) then
    begin
     for select count(*), idm1 from anruf where idm1 IS NOT NULL and STATUS<4 and (DATUM >= :DT_VON and DATUM <= :DT_BIS) and ISVORLAGE=0 group by idm1 into :ANZ, :ID do suspend;
     for select count(*), idm2 from anruf where idm2 IS NOT NULL and STATUS<4 and (DATUM >= :DT_VON and DATUM <= :DT_BIS) and ISVORLAGE=0 group by idm2 into :ANZ, :ID do suspend;
     for select count(*), idm3 from anruf where idm3 IS NOT NULL and STATUS<4 and (DATUM >= :DT_VON and DATUM <= :DT_BIS) and ISVORLAGE=0 group by idm3 into :ANZ, :ID do suspend;
     for select count(*), idm4 from anruf where idm4 IS NOT NULL and STATUS<4 and (DATUM >= :DT_VON and DATUM <= :DT_BIS) and ISVORLAGE=0 group by idm4 into :ANZ, :ID do suspend;
     for select count(*), idm5 from anruf where idm5 IS NOT NULL and STATUS<4 and (DATUM >= :DT_VON and DATUM <= :DT_BIS) and ISVORLAGE=0 group by idm5 into :ANZ, :ID do suspend;
     for select count(*), idm6 from anruf where idm6 IS NOT NULL and STATUS<4 and (DATUM >= :DT_VON and DATUM <= :DT_BIS) and ISVORLAGE=0 group by idm6 into :ANZ, :ID do suspend;
     for select count(*), idm7 from anruf where idm7 IS NOT NULL and STATUS<4 and (DATUM >= :DT_VON and DATUM <= :DT_BIS) and ISVORLAGE=0 group by idm7 into :ANZ, :ID do suspend;
     for select count(*), idm8 from anruf where idm8 IS NOT NULL and STATUS<4 and (DATUM >= :DT_VON and DATUM <= :DT_BIS) and ISVORLAGE=0 group by idm8 into :ANZ, :ID do suspend;
     for select count(*), idm9 from anruf where idm9 IS NOT NULL and STATUS<4 and (DATUM >= :DT_VON and DATUM <= :DT_BIS) and ISVORLAGE=0 group by idm9 into :ANZ, :ID do suspend;
     for select count(*), idm10 from anruf where idm10 IS NOT NULL and STATUS<4 and (DATUM >= :DT_VON and DATUM <= :DT_BIS) and ISVORLAGE=0 group by idm10 into :ANZ, :ID do suspend;
     for select count(*), idm11 from anruf where idm11 IS NOT NULL and STATUS<4 and (DATUM >= :DT_VON and DATUM <= :DT_BIS) and ISVORLAGE=0 group by idm11 into :ANZ, :ID do suspend;
     for select count(*), idm12 from anruf where idm12 IS NOT NULL and STATUS<4 and (DATUM >= :DT_VON and DATUM <= :DT_BIS) and ISVORLAGE=0 group by idm12 into :ANZ, :ID do suspend;
    end
   else
    if (TABLE_TYP=4) then
     begin
      for select count(*), idm1 from vorgang where IDM1 IS NOT NULL and STATUS<4 and ID<>-1 and (STARTDATUM >= :DT_VON and STARTDATUM <= :DT_BIS) and ISVORLAGE=0 group by idm1 into :ANZ, :ID do suspend;
      for select count(*), idm2 from vorgang where IDM2 IS NOT NULL and STATUS<4 and ID<>-1 and (STARTDATUM >= :DT_VON and STARTDATUM <= :DT_BIS) and ISVORLAGE=0 group by idm2 into :ANZ, :ID do suspend;
      for select count(*), idm3 from vorgang where IDM3 IS NOT NULL and STATUS<4 and ID<>-1 and (STARTDATUM >= :DT_VON and STARTDATUM <= :DT_BIS) and ISVORLAGE=0 group by idm3 into :ANZ, :ID do suspend;
      for select count(*), idm4 from vorgang where IDM4 IS NOT NULL and STATUS<4 and ID<>-1 and (STARTDATUM >= :DT_VON and STARTDATUM <= :DT_BIS) and ISVORLAGE=0 group by idm4 into :ANZ, :ID do suspend;
      for select count(*), idm5 from vorgang where IDM5 IS NOT NULL and STATUS<4 and ID<>-1 and (STARTDATUM >= :DT_VON and STARTDATUM <= :DT_BIS) and ISVORLAGE=0 group by idm5 into :ANZ, :ID do suspend;
      for select count(*), idm6 from vorgang where IDM6 IS NOT NULL and STATUS<4 and ID<>-1 and (STARTDATUM >= :DT_VON and STARTDATUM <= :DT_BIS) and ISVORLAGE=0 group by idm6 into :ANZ, :ID do suspend;
      for select count(*), idm7 from vorgang where IDM7 IS NOT NULL and STATUS<4 and ID<>-1 and (STARTDATUM >= :DT_VON and STARTDATUM <= :DT_BIS) and ISVORLAGE=0 group by idm7 into :ANZ, :ID do suspend;
      for select count(*), idm8 from vorgang where IDM8 IS NOT NULL and STATUS<4 and ID<>-1 and (STARTDATUM >= :DT_VON and STARTDATUM <= :DT_BIS) and ISVORLAGE=0 group by idm8 into :ANZ, :ID do suspend;
      for select count(*), idm9 from vorgang where IDM9 IS NOT NULL and STATUS<4 and ID<>-1 and (STARTDATUM >= :DT_VON and STARTDATUM <= :DT_BIS) and ISVORLAGE=0 group by idm9 into :ANZ, :ID do suspend;
      for select count(*), idm10 from vorgang where IDM10 IS NOT NULL and STATUS<4 and ID<>-1 and (STARTDATUM >= :DT_VON and STARTDATUM <= :DT_BIS) and ISVORLAGE=0 group by idm10 into :ANZ, :ID do suspend;
      for select count(*), idm11 from vorgang where IDM11 IS NOT NULL and STATUS<4 and ID<>-1 and (STARTDATUM >= :DT_VON and STARTDATUM <= :DT_BIS) and ISVORLAGE=0 group by idm11 into :ANZ, :ID do suspend;
      for select count(*), idm12 from vorgang where IDM12 IS NOT NULL and STATUS<4 and ID<>-1 and (STARTDATUM >= :DT_VON and STARTDATUM <= :DT_BIS) and ISVORLAGE=0 group by idm12 into :ANZ, :ID do suspend;
     end
   end
END


-- Prozedur: EIGVZ_ZPOS_GES
CREATE OR ALTER PROCEDURE EIGVZ_ZPOS_GES
DECLARE VARIABLE KKLASSE INTEGER;
DECLARE VARIABLE SUMSOLL NUMERIC(15, 2);
DECLARE VARIABLE SUMHABEN NUMERIC(15, 2);
DECLARE VARIABLE SUMSOLL_NETTO NUMERIC(15, 2);
DECLARE VARIABLE SUMHABEN_NETTO NUMERIC(15, 2);
DECLARE VARIABLE DTVONBDATUM DATE;
DECLARE VARIABLE DTBISBDATUM DATE;
DECLARE VARIABLE DTVONWDATUM DATE;
DECLARE VARIABLE DTBISWDATUM DATE;
BEGIN


/* TEMP 
  IONR = 7;
  DTVON = '1.1.2019';
  DTBIS = '31.12.2019';
  BISTVZ = 'N';
  ZPOS = 110;
  WDATUM = 'N';
  TEMP */

 /* W_Datum abfragen */
 if (WDATUM = 'N') then
  begin
   DTVONBDATUM = DTVON;
   DTBISBDATUM = DTBIS;
   DTVONWDATUM = '01.01.1900';
   DTBISWDATUM = '01.01.1900';
  end
 else
  begin
   DTVONBDATUM = '01.01.1900';
   DTBISBDATUM = '01.01.1900';
   DTVONWDATUM = DTVON;
   DTBISWDATUM = DTBIS;
  end

 IF (BISTVZ='J') THEN
  BEGIN
   /*            */
   /* KEIN SPLIT */
   /*            */
   /* SOLL */
   SELECT SUM(BETRAG), SUM((BETRAG*100) / (100+MWSTOP)) from buchung
   WHERE ONRSOLL=:IONR
   AND ARTOP=:ZPOS
   AND ((Datum >= :DTVONBDATUM and Datum <= :DTBISBDATUM) or (WDatum >= :DTVONWDATUM and WDatum <= :DTBISWDATUM))
   INTO :SUMSOLL, SUMSOLL_NETTO;
   /* HABEN */
   SELECT SUM(BETRAG), SUM((BETRAG*100) / (100+MWSTOP)) from buchung
   WHERE ONRHABEN=:IONR
   AND ARTOP=:ZPOS
   AND ((Datum >= :DTVONBDATUM and Datum <= :DTBISBDATUM) or (WDatum >= :DTVONWDATUM and WDatum <= :DTBISWDATUM))
   INTO :SUMHABEN, SUMHABEN_NETTO;
   IF (SUMSOLL IS NULL) THEN
    SUMSOLL=0;
   IF (SUMHABEN IS NULL) THEN
    SUMHABEN=0;
   IF (SUMSOLL_NETTO IS NULL) THEN
    SUMSOLL_NETTO=0;
   IF (SUMHABEN_NETTO IS NULL) THEN
    SUMHABEN_NETTO=0;
   SUM_VZ=SUMHABEN-SUMSOLL;
   SUM_VZ_NETTO=SUMHABEN_NETTO-SUMSOLL_NETTO;
   /*            */
   /*   SPLIT    */
   /*            */
   /* SOLL */
   select Sum(buchzahl.Betrag), SUM((buchzahl.BETRAG*100) / (100+buchzahl.MWSTOP)) from buchung, buchzahl
   where  ONRSOLL=:IONR AND KSOLL>199999
   AND ((Datum >= :DTVONBDATUM and Datum <= :DTBISBDATUM) or (WDatum >= :DTVONWDATUM and WDatum <= :DTBISWDATUM))
   and buchung.artop=0
   and buchung.bnr=buchzahl.bnr
   and buchzahl.artop=:ZPOS
   INTO :SUMSOLL, SUMSOLL_NETTO;
   /* Haben */
   select Sum(buchzahl.Betrag), SUM((buchzahl.BETRAG*100) / (100+buchzahl.MWSTOP)) from buchung, buchzahl
   where  ONRHABEN=:IONR AND KHABEN>199999
   AND ((Datum >= :DTVONBDATUM and Datum <= :DTBISBDATUM) or (WDatum >= :DTVONWDATUM and WDatum <= :DTBISWDATUM))
   and buchung.artop=0
   and buchung.bnr=buchzahl.bnr
   and buchzahl.artop=:ZPOS
   INTO :SUMHABEN, SUMHABEN_NETTO;
   IF (SUMSOLL IS NULL) THEN
    SUMSOLL=0;
   IF (SUMHABEN IS NULL) THEN
    SUMHABEN=0;
   IF (SUMSOLL_NETTO IS NULL) THEN
    SUMSOLL_NETTO=0;
   IF (SUMHABEN_NETTO IS NULL) THEN
    SUMHABEN_NETTO=0;
   SUM_VZ=SUM_VZ+SUMHABEN-SUMSOLL;
   SUM_VZ_NETTO=SUM_VZ_NETTO+SUMHABEN_NETTO-SUMSOLL_NETTO;
  END
 ELSE
  BEGIN
   /* SOLL VZ */
   SELECT SUM(BETRAG), SUM((BETRAG*100) / (100+MWST)) from buchung
   WHERE (ONRSOLL=:IONR) AND (ONRHABEN=:IONR and ARTHABEN=:ZPOS)
   AND OPNR IS NOT NULL and OPBETRAG IS NOT NULL AND ((Datum >= :DTVONBDATUM and Datum <= :DTBISBDATUM) or (WDatum >= :DTVONWDATUM and WDatum <= :DTBISWDATUM))
   INTO :SUMHABEN, SUMHABEN_NETTO;
   /* HABEN */
   SELECT SUM(BETRAG), SUM((BETRAG*100) / (100+MWST)) from buchung
   WHERE (ONRHABEN=:IONR) AND (ONRSOLL=:IONR and ARTSOLL=:ZPOS)
   AND OPNR IS NOT NULL and OPBETRAG IS NOT NULL AND ((Datum >= :DTVONBDATUM and Datum <= :DTBISBDATUM) or (WDatum >= :DTVONWDATUM and WDatum <= :DTBISWDATUM))
   INTO :SUMSOLL, SUMSOLL_NETTO;
   IF (SUMSOLL IS NULL) THEN
    SUMSOLL=0;
   IF (SUMHABEN IS NULL) THEN
    SUMHABEN=0;
   IF (SUMSOLL_NETTO IS NULL) THEN
    SUMSOLL_NETTO=0;
   IF (SUMHABEN_NETTO IS NULL) THEN
    SUMHABEN_NETTO=0;
   SUM_VZ=SUMHABEN-SUMSOLL;
   SUM_VZ_NETTO=SUMHABEN_NETTO-SUMSOLL_NETTO;
  END    /* SOLL VZ */
 SUSPEND;
END


-- Prozedur: EINNAHMEN
CREATE OR ALTER PROCEDURE EINNAHMEN
DECLARE VARIABLE BANKNRSOLL INTEGER;
DECLARE VARIABLE BANKNRHABEN INTEGER;
DECLARE VARIABLE ARTSOLL INTEGER;
DECLARE VARIABLE ARTHABEN INTEGER;
DECLARE VARIABLE SPLITNR INTEGER;
DECLARE VARIABLE IBANKNRAKT INTEGER;
DECLARE VARIABLE BANKSTR VARCHAR(15);
DECLARE VARIABLE USTSATZ NUMERIC(15, 2);
DECLARE VARIABLE ART1 INTEGER;
DECLARE VARIABLE ART2 INTEGER;
DECLARE VARIABLE ART3 INTEGER;
DECLARE VARIABLE ART4 INTEGER;
DECLARE VARIABLE ARTSOLL1 INTEGER;
DECLARE VARIABLE KHABENNEU INTEGER;
BEGIN
 IBANKNRAKT=-1;
 BANKSTR='';
 IF (BBEW='J') THEN
  BEGIN
   ART1=10;
   ART2=13;
   ART3=10;
   ART4=13;
   ARTSOLL1=60;
  END
 ELSE
  BEGIN
   ART1=15;
   ART2=18;
   ART3=110;
   ART4=580;
   ARTSOLL1=62;
  END
 /* */
 IF (SOLLBU='J') then
  begin
   FOR SELECT BNR, DATUM, WDATUM, KSOLL, KHABEN, BELEGNR, TEXT, MWST, BETRAG, BANKNRSOLL, BANKNRHABEN, OPBETRAG, SPLITNR, KSTRHABEN, KSTRSOLL, ARTSOLL, ARTHABEN, GN from buchung
   WHERE (ONRSOLL=:IONR OR ONRHABEN=:IONR)
   AND ((ARTSOLL>=:ART1 AND ARTSOLL<=:ART2) OR (ARTHABEN>=:ART1 AND ARTHABEN<=:ART2) OR (ARTSOLL>=:ART3 AND ARTSOLL<=:ART4) OR (ARTHABEN>=:ART3 AND ARTHABEN<=:ART4))
   AND (Datum>=:DTVON and Datum<=:DTBIS)
   and BETRAG<>0
   INTO :BNR, :DATUM, :WDATUM, :KSOLL, :KHABEN, :BELEGNR, :TEXT, :MWST, :BETRAG, :BANKNRSOLL, :BANKNRHABEN, :OPBETRAG, :SPLITNR, :KSTRHABEN, :KSTRSOLL, :ARTSOLL, :ARTHABEN, :GN
   DO
    BEGIN
     ONR=:IONR;
     IF (OPBETRAG IS NOT NULL) THEN
      BEGIN
       IF (OPBETRAG = 0) THEN
        BEMERKUNG='BEZ';
       ELSE
        BEMERKUNG='OP';
      END
     ELSE
      BEMERKUNG='';
     IF (BANKNRSOLL IS NOT NULL) THEN
      BEGIN
       IF (IBANKNRAKT=BANKNRSOLL) THEN
        KSTRSOLL=KSTRSOLL || ' ' || BANKSTR;
       ELSE
        BEGIN
         SELECT KURZBEZ from Banken where NR=:BANKNRSOLL into :BANKSTR;
         KSTRSOLL=KSTRSOLL || ' ' || BANKSTR;
         IBANKNRAKT=BANKNRSOLL;
        END
      END
     ELSE
      SELECT KNRSTR || ' ' || KBEZ, INAKTIV from konten where ONR=:IONR AND KNR=:KSOLL
       into :KSTRSOLL, :INAKTIV;
     IF (BANKNRHABEN IS NOT NULL) THEN
      BEGIN
       IF (IBANKNRAKT=BANKNRHABEN) THEN
         KSTRHABEN=KSTRHABEN || ' ' || BANKSTR;
          ELSE
           BEGIN
            SELECT KURZBEZ from Banken where NR=:BANKNRHABEN into :BANKSTR;
            KSTRHABEN=KSTRHABEN || ' ' || BANKSTR;
            IBANKNRAKT=BANKNRHABEN;
           END
      END
     ELSE
      SELECT KNRSTR || ' ' || KBEZ from konten where ONR=:IONR AND KNR=:KHABEN
      into :KSTRHABEN;
     /*Steuer*/
     IF ((MWST<>0) AND (not (ARTHABEN>=110 AND ARTHABEN<=580))) THEN
      BEGIN
       USTSATZ=100+MWST;
       /* Steuer im Haben?*/
       IF ((ARTHABEN>=10 AND ARTHABEN<=19) OR (ARTHABEN>=110 AND ARTHABEN<=580)) THEN
        BEGIN
         BETRAGH=(BETRAG*100) / USTSATZ;
         USTBETRAG=BETRAG-BETRAGH;
         BETRAGS=BETRAG;
        END
       ELSE
        BEGIN
         BETRAGS=(BETRAG*100) / USTSATZ;
         USTBETRAG=BETRAG-BETRAGS;
         BETRAGH=BETRAG;
         BETRAG=-BETRAG;
        END
      END
     ELSE
      BEGIN /* keine Steuer */
       BETRAGS=BETRAG;
       BETRAGH=BETRAG;
       USTBETRAG=NULL;
       MWST=NULL;
       IF ((ARTSOLL>=10 AND ARTSOLL<=19) OR (ARTSOLL>=110 AND ARTSOLL<=580)) THEN
        BETRAG=-BETRAG;
      END
     suspend;
    END
  END /* SOLLBU */
 ELSE
/***************************************/
  BEGIN /* IST Buchhaltung */
   FOR SELECT BNR, DATUM, WDATUM, KSOLL, KNROP, BELEGNR, TEXT, MWSTOP, BETRAG, BANKNRSOLL, BANKNRHABEN, OPBETRAG, SPLITNR, KSTRHABEN, KSTRSOLL, ARTSOLL, ARTHABEN, GN, KHABEN from buchung
   WHERE (ONRSOLL=:IONR OR ONRHABEN=:IONR)
   AND ((ARTOP>=:ART1 AND ARTOP<=:ART2) OR (ARTOP>=:ART3 AND ARTOP<=:ART4))
   AND (Datum>=:DTVON and Datum<=:DTBIS)
   and BETRAG<>0
   INTO :BNR, :DATUM, :WDATUM, :KSOLL, :KHABEN, :BELEGNR, :TEXT, :MWST, :BETRAG, :BANKNRSOLL, :BANKNRHABEN, :OPBETRAG, :SPLITNR, :KSTRHABEN, :KSTRSOLL, :ARTSOLL, :ARTHABEN, :GN, :KHABENNEU 
   DO
    BEGIN
     ONR=:IONR;
     BEMERKUNG='';
     IF (BANKNRSOLL IS NOT NULL) THEN
      BEGIN
           IF (IBANKNRAKT=BANKNRSOLL) THEN
            KSTRSOLL=KSTRSOLL || ' ' || BANKSTR;
           ELSE
            BEGIN
             SELECT KURZBEZ from Banken where NR=:BANKNRSOLL into :BANKSTR;
             KSTRSOLL=KSTRSOLL || ' ' || BANKSTR;
             IBANKNRAKT=BANKNRSOLL;
            END
      END
     ELSE
      SELECT KNRSTR || ' ' || KBEZ from konten where ONR=:IONR AND KNR=:KSOLL
       into :KSTRSOLL;
      SELECT KNRSTR || ' ' || KBEZ  from konten where ONR=:IONR AND KNR=:KHABEN
      into :KSTRHABEN ;
      SELECT INAKTIV  from konten where ONR=:IONR AND KNR=:KHABENNEU
      into  :INAKTIV ;
     /* Umwandlung? UWE VZ UMDREHEN*/
     IF (ARTSOLL=60 OR ARTSOLL=62) THEN
      begin
       BETRAG=-BETRAG;
      end
     IF (ARTSOLL=1) THEN  /* KOSTENKONTO direkt auf DEB nicht erlaubt */
      BETRAG=0;


     /*Steuer*/
     IF ((MWST<>0) AND (not (ARTHABEN>=110 AND ARTHABEN<=580))) THEN
      BEGIN
       USTSATZ=100+MWST;
       /* Steuer im Haben?*/
       BETRAGH=(BETRAG*100) / USTSATZ;
       USTBETRAG=BETRAG-BETRAGH;
       BETRAGS=BETRAG;
      END
     ELSE
      BEGIN /* keine Steuer */
       BETRAGS=BETRAG;
       BETRAGH=BETRAG;
       USTBETRAG=NULL;
       MWST=NULL;
      END
     suspend;
    END

   FOR SELECT BNR, DATUM, WDATUM, KSOLL, KNROP, BELEGNR, TEXT, MWSTOP, BETRAG, BANKNRSOLL, BANKNRHABEN, OPBETRAG, SPLITNR, KSTRHABEN, KSTRSOLL, ARTSOLL, ARTHABEN, GN, KHABEN from buchung
   WHERE (ONRSOLL=:IONR OR ONRHABEN=:IONR)
   AND ARTOP=0
   AND (Datum>=:DTVON and Datum<=:DTBIS)
   AND buchung.artsoll=:ARTSOLL1
   and BETRAG<>0
   INTO :BNR, :DATUM, :WDATUM, :KSOLL, :KHABEN, :BELEGNR, :TEXT, :MWST, :BETRAG, :BANKNRSOLL, :BANKNRHABEN, :OPBETRAG, :SPLITNR, :KSTRHABEN, :KSTRSOLL, :ARTSOLL, :ARTHABEN, :GN, :KHABENNEU
   DO
    BEGIN
     ONR=:IONR;
     BEMERKUNG='';
     IF (BANKNRSOLL IS NOT NULL) THEN
      BEGIN
           IF (IBANKNRAKT=BANKNRSOLL) THEN
            KSTRSOLL=KSTRSOLL || ' ' || BANKSTR;
           ELSE
            BEGIN
             SELECT KURZBEZ from Banken where NR=:BANKNRSOLL into :BANKSTR;
             KSTRSOLL=KSTRSOLL || ' ' || BANKSTR;
             IBANKNRAKT=BANKNRSOLL;
            END
      END
     ELSE
      SELECT KNRSTR || ' ' || KBEZ from konten where ONR=:IONR AND KNR=:KSOLL
       into :KSTRSOLL;
        for select KNR, Betrag, ARTOP, MWSTOP from buchzahl where BNR=:BNR
     into KHABEN, Betrag, ARTHABEN, MWST
     do
      begin
       BETRAG=-BETRAG;
       /*Steuer*/
       IF ((MWST<>0) AND (not (ARTHABEN>=110 AND ARTHABEN<=580))) THEN
        BEGIN
         USTSATZ=100+MWST;
         /* Steuer im Haben?*/
         BETRAGH=(BETRAG*100) / USTSATZ;
         USTBETRAG=BETRAG-BETRAGH;
         BETRAGS=BETRAG;
        END
       ELSE
        BEGIN /* keine Steuer */
         BETRAGS=BETRAG;
         BETRAGH=BETRAG;
         USTBETRAG=NULL;
         MWST=NULL;
        END
       SELECT KNRSTR || ' ' || KBEZ  from konten where ONR=:IONR AND KNR=:KHABEN
       into :KSTRHABEN ;
       
        SELECT INAKTIV  from konten where ONR=:IONR AND KNR=:KHABENNEU
       into  :INAKTIV ;
       IF (BETRAG<>0) then
        suspend;
      end
    end /* SPLIT */

  /* SPLIT */
   FOR SELECT BNR, DATUM, WDATUM, KSOLL, KNROP, BELEGNR, TEXT, MWSTOP, BETRAG, BANKNRSOLL, BANKNRHABEN, OPBETRAG, SPLITNR, KSTRHABEN, KSTRSOLL, ARTSOLL, ARTHABEN, GN, KHABEN from buchung
   WHERE (ONRSOLL=:IONR OR ONRHABEN=:IONR)
   AND ARTOP=0
   AND (Datum>=:DTVON and Datum<=:DTBIS)
   AND ((ARTSOLL=:ARTSOLL1) OR (ARTHABEN=:ARTSOLL1))
   AND (BANKNRSOLL IS NOT NULL)
   and BETRAG<>0
   INTO :BNR, :DATUM, :WDATUM, :KSOLL, :KHABEN, :BELEGNR, :TEXT, :MWST, :BETRAG, :BANKNRSOLL, :BANKNRHABEN, :OPBETRAG, :SPLITNR, :KSTRHABEN, :KSTRSOLL, :ARTSOLL, :ARTHABEN, :GN, :KHABENNEU
   DO
    BEGIN
     ONR=:IONR;
     BEMERKUNG='';
     IF (BANKNRSOLL IS NOT NULL) THEN
      BEGIN
           IF (IBANKNRAKT=BANKNRSOLL) THEN
            KSTRSOLL=KSTRSOLL || ' ' || BANKSTR;
           ELSE
            BEGIN
             SELECT KURZBEZ from Banken where NR=:BANKNRSOLL into :BANKSTR;
             KSTRSOLL=KSTRSOLL || ' ' || BANKSTR;
             IBANKNRAKT=BANKNRSOLL;
            END
      END
     ELSE
      SELECT KNRSTR || ' ' || KBEZ from konten where ONR=:IONR AND KNR=:KSOLL
       into :KSTRSOLL;
     for select KNR, Betrag, ARTOP, MWSTOP from buchzahl where BNR=:BNR
     into KHABEN, Betrag, ARTHABEN, MWST
     do
      begin
       /*Steuer*/
       IF ((MWST<>0) AND (not (ARTHABEN>=110 AND ARTHABEN<=580))) THEN
        BEGIN
         USTSATZ=100+MWST;
         /* Steuer im Haben?*/
         BETRAGH=(BETRAG*100) / USTSATZ;
         USTBETRAG=BETRAG-BETRAGH;
         BETRAGS=BETRAG;
        END
       ELSE
        BEGIN /* keine Steuer */
         BETRAGS=BETRAG;
         BETRAGH=BETRAG;
         USTBETRAG=NULL;
         MWST=NULL;
        END
       SELECT KNRSTR || ' ' || KBEZ from konten where ONR=:IONR AND KNR=:KHABEN
       into :KSTRHABEN;
       
       SELECT INAKTIV  from konten where ONR=:IONR AND KNR=:KHABENNEU
       into  :INAKTIV ;
       IF (BETRAG<>0) then
        suspend;
      end
    end /* SPLIT */
  END /* IST Buchhaltung */
END


-- Prozedur: EINNAHMEN_OBJ
CREATE OR ALTER PROCEDURE EINNAHMEN_OBJ
DECLARE VARIABLE BETRAG NUMERIC (15, 2);
 DECLARE VARIABLE KNR INTEGER;
 DECLARE VARIABLE BSONST INTEGER;
 DECLARE VARIABLE Z1S NUMERIC (18, 2);
 DECLARE VARIABLE Z2S NUMERIC (18, 2);
 DECLARE VARIABLE Z3S NUMERIC (18, 2);
 DECLARE VARIABLE Z4S NUMERIC (18, 2);
 DECLARE VARIABLE Z5S NUMERIC (18, 2);
 DECLARE VARIABLE Z6S NUMERIC (18, 2);
 DECLARE VARIABLE Z7S NUMERIC (18, 2);
 DECLARE VARIABLE Z8S NUMERIC (18, 2);
 DECLARE VARIABLE GNS NUMERIC (18, 2);
 DECLARE VARIABLE Z1SG NUMERIC (18, 2);
 DECLARE VARIABLE Z2SG NUMERIC (18, 2);
 DECLARE VARIABLE Z3SG NUMERIC (18, 2);
 DECLARE VARIABLE Z4SG NUMERIC (18, 2);
 DECLARE VARIABLE Z5SG NUMERIC (18, 2);
 DECLARE VARIABLE Z6SG NUMERIC (18, 2);
 DECLARE VARIABLE Z7SG NUMERIC (18, 2);
 DECLARE VARIABLE Z8SG NUMERIC (18, 2);
 DECLARE VARIABLE GNSG NUMERIC (18, 2);
 DECLARE VARIABLE Z1SP NUMERIC (18, 2);
 DECLARE VARIABLE Z2SP NUMERIC (18, 2);
 DECLARE VARIABLE Z3SP NUMERIC (18, 2);
 DECLARE VARIABLE Z4SP NUMERIC (18, 2);
 DECLARE VARIABLE Z5SP NUMERIC (18, 2);
 DECLARE VARIABLE Z6SP NUMERIC (18, 2);
 DECLARE VARIABLE Z7SP NUMERIC (18, 2);
 DECLARE VARIABLE Z8SP NUMERIC (18, 2);
 DECLARE VARIABLE GNSP NUMERIC (18, 2);
 DECLARE VARIABLE Z1H NUMERIC (18, 2);
 DECLARE VARIABLE Z2H NUMERIC (18, 2);
 DECLARE VARIABLE Z3H NUMERIC (18, 2);
 DECLARE VARIABLE Z4H NUMERIC (18, 2);
 DECLARE VARIABLE Z5H NUMERIC (18, 2);
 DECLARE VARIABLE Z6H NUMERIC (18, 2);
 DECLARE VARIABLE Z7H NUMERIC (18, 2);
 DECLARE VARIABLE Z8H NUMERIC (18, 2);
 DECLARE VARIABLE GNH NUMERIC (18, 2);
 DECLARE VARIABLE Z1HG NUMERIC (18, 2);
 DECLARE VARIABLE Z2HG NUMERIC (18, 2);
 DECLARE VARIABLE Z3HG NUMERIC (18, 2);
 DECLARE VARIABLE Z4HG NUMERIC (18, 2);
 DECLARE VARIABLE Z5HG NUMERIC (18, 2);
 DECLARE VARIABLE Z6HG NUMERIC (18, 2);
 DECLARE VARIABLE Z7HG NUMERIC (18, 2);
 DECLARE VARIABLE Z8HG NUMERIC (18, 2);
 DECLARE VARIABLE GNHG NUMERIC (18, 2);
 DECLARE VARIABLE Z1HP NUMERIC (18, 2);
 DECLARE VARIABLE Z2HP NUMERIC (18, 2);
 DECLARE VARIABLE Z3HP NUMERIC (18, 2);
 DECLARE VARIABLE Z4HP NUMERIC (18, 2);
 DECLARE VARIABLE Z5HP NUMERIC (18, 2);
 DECLARE VARIABLE Z6HP NUMERIC (18, 2);
 DECLARE VARIABLE Z7HP NUMERIC (18, 2);
 DECLARE VARIABLE Z8HP NUMERIC (18, 2);
 DECLARE VARIABLE GNHP NUMERIC (18, 2);
 DECLARE VARIABLE Z1SOLL NUMERIC (18, 2);
 DECLARE VARIABLE Z2SOLL NUMERIC (18, 2);
 DECLARE VARIABLE Z3SOLL NUMERIC (18, 2);
 DECLARE VARIABLE Z4SOLL NUMERIC (18, 2);
 DECLARE VARIABLE Z5SOLL NUMERIC (18, 2);
 DECLARE VARIABLE Z6SOLL NUMERIC (18, 2);
 DECLARE VARIABLE Z7SOLL NUMERIC (18, 2);
 DECLARE VARIABLE Z8SOLL NUMERIC (18, 2);
 DECLARE VARIABLE GNSOLL NUMERIC (18, 2);
 DECLARE VARIABLE Z1BEZ NUMERIC (18, 2);
 DECLARE VARIABLE Z2BEZ NUMERIC (18, 2);
 DECLARE VARIABLE Z3BEZ NUMERIC (18, 2);
 DECLARE VARIABLE Z4BEZ NUMERIC (18, 2);
 DECLARE VARIABLE Z5BEZ NUMERIC (18, 2);
 DECLARE VARIABLE Z6BEZ NUMERIC (18, 2);
 DECLARE VARIABLE Z7BEZ NUMERIC (18, 2);
 DECLARE VARIABLE Z8BEZ NUMERIC (18, 2);
 DECLARE VARIABLE GNBEZ NUMERIC (18, 2);


BEGIN
 Z1S=0; Z2S=0;  Z3S=0; Z4S=0; Z5S=0; Z6S=0; Z7S=0; Z8S=0; GNS=0;
 Z1SG=0; Z2SG=0;  Z3SG=0; Z4SG=0; Z5SG=0; Z6SG=0; Z7SG=0; Z8SG=0; GNSG=0;
 Z1SP=0; Z2SP=0;  Z3SP=0; Z4SP=0; Z5SP=0; Z6SP=0; Z7SP=0; Z8SP=0; GNSP=0;
 Z1H=0; Z2H=0;  Z3H=0; Z4H=0; Z5H=0; Z6H=0; Z7H=0; Z8H=0; GNH=0;
 Z1HG=0; Z2HG=0;  Z3HG=0; Z4HG=0; Z5HG=0; Z6HG=0; Z7HG=0; Z8HG=0; GNHG=0;
 Z1HP=0; Z2HP=0;  Z3HP=0; Z4HP=0; Z5HP=0; Z6HP=0; Z7HP=0; Z8HP=0; GNHP=0;
 FOR SELECT ONR, BSONST from objekte where ONR>=:ONR_VON and ONR<=:ONR_BIS order by ONR into :ONR, :BSONST do
  BEGIN
   IF (BSONST=0 or BSONST=2) THEN
   BEGIN
   /* SOLL ALLE */
   LFDNR=1;
   Z1=0;
   Z2=0;
   Z3=0;
   Z4=0;
   Z5=0;
   Z6=0;
   Z7=0;
   Z8=0;
   GN=0;
   FOR SELECT SUM(BETRAG), KHABEN from buchung
   WHERE (ONRSOLL=:ONR OR ONRHABEN=:ONR)
   AND (ARTSOLL=60 AND (ARTHABEN>=10 AND ARTHABEN <=13))
   AND (Datum>=:DTVON and Datum<=:DTBIS)
   and BETRAG<>0
   GROUP BY KHABEN
   INTO :BETRAG, :KNR
   DO
    BEGIN
     IF (BETRAG IS NULL) THEN
      BETRAG=0;
     IF (BETRAG <> 0) THEN
      BEGIN
       IF (KNR=60000) then
        Z1=:BETRAG;
       ELSE
        IF (KNR=60010) then
         Z2=:BETRAG;
       ELSE
        IF (KNR=60020) then
         Z3=:BETRAG;
       ELSE
        IF (KNR=60030) then
         Z4=:BETRAG;
       ELSE
        IF (KNR=60040) then
         Z5=:BETRAG;
       ELSE
        IF (KNR=60050) then
         Z6=:BETRAG;
       ELSE
        IF (KNR=60060) then
         Z7=:BETRAG;
       ELSE
        IF (KNR=60070) then
         Z8=:BETRAG;
       ELSE
        IF (KNR=60090) then
         GN=:BETRAG;
      END
    END
   Z1S=Z1S+Z1;Z2S=Z2S+Z2;Z3S=Z3S+Z3;Z4S=Z4S+Z4;Z5S=Z5S+Z5;Z6S=Z6S+Z6;Z7S=Z7S+Z7;Z8S=Z8S+Z8;GNS=GNS+GN;
   Z1SOLL=Z1;Z2SOLL=Z2;Z3SOLL=Z3;Z4SOLL=Z4;Z5SOLL=Z5;Z6SOLL=Z6;Z7SOLL=Z7;Z8SOLL=Z8;GNSOLL=GN;
   suspend;
   /* SOLL GEWERBLICH */
   LFDNR=2;
   Z1=0;
   Z2=0;
   Z3=0;
   Z4=0;
   Z5=0;
   Z6=0;
   Z7=0;
   Z8=0;
   GN=0;
   FOR SELECT SUM(BETRAG), KHABEN from buchung
   WHERE (ONRSOLL=:ONR OR ONRHABEN=:ONR)
   AND (ARTSOLL=60 AND (ARTHABEN>=10 AND ARTHABEN <=13))
   AND (Datum>=:DTVON and Datum<=:DTBIS)
   and BETRAG<>0
   and MWST<>0
   GROUP BY KHABEN
   INTO :BETRAG, :KNR
   DO
    BEGIN
     IF (BETRAG IS NULL) THEN
      BETRAG=0;
     IF (BETRAG <> 0) THEN
      BEGIN
       IF (KNR=60000) then
        Z1=:BETRAG;
       ELSE
        IF (KNR=60010) then
         Z2=:BETRAG;
       ELSE
        IF (KNR=60020) then
         Z3=:BETRAG;
       ELSE
        IF (KNR=60030) then
         Z4=:BETRAG;
       ELSE
        IF (KNR=60040) then
         Z5=:BETRAG;
       ELSE
        IF (KNR=60050) then
         Z6=:BETRAG;
       ELSE
        IF (KNR=60060) then
         Z7=:BETRAG;
       ELSE
        IF (KNR=60070) then
         Z8=:BETRAG;
       ELSE
        IF (KNR=60090) then
         GN=:BETRAG;
      END
    END
   Z1SG=Z1SG+Z1;Z2SG=Z2SG+Z2;Z3SG=Z3SG+Z3;Z4SG=Z4SG+Z4;Z5SG=Z5SG+Z5;Z6SG=Z6SG+Z6;Z7SG=Z7SG+Z7;Z8SG=Z8SG+Z8;GNSG=GNSG+GN;
   suspend;
   /* SOLL NICHT GEWERBLICH */
   LFDNR=3;
   Z1=0;
   Z2=0;
   Z3=0;
   Z4=0;
   Z5=0;
   Z6=0;
   Z7=0;
   Z8=0;
   GN=0;
   FOR SELECT SUM(BETRAG), KHABEN from buchung
   WHERE (ONRSOLL=:ONR OR ONRHABEN=:ONR)
   AND (ARTSOLL=60 AND (ARTHABEN>=10 AND ARTHABEN <=13))
   AND (Datum>=:DTVON and Datum<=:DTBIS)
   and BETRAG<>0
   and (MWST=0 OR MWST IS NULL)
   GROUP BY KHABEN
   INTO :BETRAG, :KNR
   DO
    BEGIN
     IF (BETRAG IS NULL) THEN
      BETRAG=0;
     IF (BETRAG <> 0) THEN
      BEGIN
       IF (KNR=60000) then
        Z1=:BETRAG;
       ELSE
        IF (KNR=60010) then
         Z2=:BETRAG;
       ELSE
        IF (KNR=60020) then
         Z3=:BETRAG;
       ELSE
        IF (KNR=60030) then
         Z4=:BETRAG;
       ELSE
        IF (KNR=60040) then
         Z5=:BETRAG;
       ELSE
        IF (KNR=60050) then
         Z6=:BETRAG;
       ELSE
        IF (KNR=60060) then
         Z7=:BETRAG;
       ELSE
        IF (KNR=60070) then
         Z8=:BETRAG;
       ELSE
        IF (KNR=60090) then
         GN=:BETRAG;
      END
    END
   Z1SP=Z1SP+Z1;Z2SP=Z2SP+Z2;Z3SP=Z3SP+Z3;Z4SP=Z4SP+Z4;Z5SP=Z5SP+Z5;Z6SP=Z6SP+Z6;Z7SP=Z7SP+Z7;Z8SP=Z8SP+Z8;GNSP=GNSP+GN;
   suspend;
   /* BEZAHLT ALLE */
   LFDNR=4;
   Z1=0;
   Z2=0;
   Z3=0;
   Z4=0;
   Z5=0;
   Z6=0;
   Z7=0;
   Z8=0;
   GN=0;
   /* KEIN SPLIT */
   FOR SELECT SUM(BETRAG), KNROP from Buchung
   WHERE (ONRSOLL=:ONR OR ONRHABEN=:ONR)
   AND (ARTOP>=10 AND ARTOP<=13)
   AND (Datum>=:DTVON and Datum<=:DTBIS)
   AND (BANKNRSOLL IS NOT NULL)
   and BETRAG<>0
   GROUP BY KNROP
   INTO :BETRAG, :KNR
   DO
    BEGIN
     IF (BETRAG IS NULL) THEN
      BETRAG=0;
     IF (BETRAG <> 0) THEN
      BEGIN
       IF (KNR=60000) then
        Z1=:BETRAG;
       ELSE
        IF (KNR=60010) then
         Z2=:BETRAG;
       ELSE
        IF (KNR=60020) then
         Z3=:BETRAG;
       ELSE
        IF (KNR=60030) then
         Z4=:BETRAG;
       ELSE
        IF (KNR=60040) then
         Z5=:BETRAG;
       ELSE
        IF (KNR=60050) then
         Z6=:BETRAG;
       ELSE
        IF (KNR=60060) then
         Z7=:BETRAG;
       ELSE
        IF (KNR=60070) then
         Z8=:BETRAG;
       ELSE
        IF (KNR=60090) then
         GN=:BETRAG;
      END
    END /* FOR */
   /* SPLIT */
   for select sum(buchzahl.betrag), buchzahl.knr from buchzahl, buchung
   WHERE (ONRSOLL=:ONR OR ONRHABEN=:ONR)
   AND buchung.ARTOP=0
   AND (Datum>=:DTVON and Datum<=:DTBIS)
   AND (BANKNRSOLL IS NOT NULL)
   and buchung.bnr=buchzahl.bnr
   group by buchzahl.knr
   INTO :BETRAG, :KNR
   DO
    BEGIN
     IF (BETRAG IS NULL) THEN
      BETRAG=0;
     IF (BETRAG <> 0) THEN
      BEGIN
       IF (KNR=60000) then
        Z1=Z1+:BETRAG;
       ELSE
        IF (KNR=60010) then
         Z2=Z2+:BETRAG;
       ELSE
        IF (KNR=60020) then
         Z3=Z3+:BETRAG;
       ELSE
        IF (KNR=60030) then
         Z4=Z4+:BETRAG;
       ELSE
        IF (KNR=60040) then
         Z5=Z5+:BETRAG;
       ELSE
        IF (KNR=60050) then
         Z6=Z6+:BETRAG;
       ELSE
        IF (KNR=60060) then
         Z7=Z7+:BETRAG;
       ELSE
        IF (KNR=60070) then
         Z8=Z8+:BETRAG;
       ELSE
        IF (KNR=60090) then
         GN=GN+:BETRAG;
      END
    END
   Z1H=Z1H+Z1;Z2H=Z2H+Z2;Z3H=Z3H+Z3;Z4H=Z4H+Z4;Z5H=Z5H+Z5;Z6H=Z6H+Z6;Z7H=Z7H+Z7;Z8H=Z8H+Z8;GNH=GNH+GN;
   Z1BEZ=Z1;Z2BEZ=Z2;Z3BEZ=Z3;Z4BEZ=Z4;Z5BEZ=Z5;Z6BEZ=Z6;Z7BEZ=Z7;Z8BEZ=Z8;GNBEZ=GN;
   suspend;
   /* BEZAHLT GEWERBLICH */
   LFDNR=5;
   Z1=0;
   Z2=0;
   Z3=0;
   Z4=0;
   Z5=0;
   Z6=0;
   Z7=0;
   Z8=0;
   GN=0;
   /* KEIN SPLIT */
   FOR SELECT SUM(BETRAG), KNROP from Buchung
   WHERE (ONRSOLL=:ONR OR ONRHABEN=:ONR)
   AND (ARTOP>=10 AND ARTOP<=13)
   AND (MWSTOP<>0)
   AND (Datum>=:DTVON and Datum<=:DTBIS)
   AND (BANKNRSOLL IS NOT NULL)
   and BETRAG<>0
   GROUP BY KNROP
   INTO :BETRAG, :KNR
   DO
    BEGIN
     IF (BETRAG IS NULL) THEN
      BETRAG=0;
     IF (BETRAG <> 0) THEN
      BEGIN
       IF (KNR=60000) then
        Z1=:BETRAG;
       ELSE
        IF (KNR=60010) then
         Z2=:BETRAG;
       ELSE
        IF (KNR=60020) then
         Z3=:BETRAG;
       ELSE
        IF (KNR=60030) then
         Z4=:BETRAG;
       ELSE
        IF (KNR=60040) then
         Z5=:BETRAG;
       ELSE
        IF (KNR=60050) then
         Z6=:BETRAG;
       ELSE
        IF (KNR=60060) then
         Z7=:BETRAG;
       ELSE
        IF (KNR=60070) then
         Z8=:BETRAG;
       ELSE
        IF (KNR=60090) then
         GN=:BETRAG;
      END
    END /* FOR */
   /* SPLIT */
   for select sum(buchzahl.betrag), buchzahl.knr from buchzahl, buchung
   WHERE (ONRSOLL=:ONR OR ONRHABEN=:ONR)
   AND buchung.ARTOP=0
   AND buchzahl.mwstop<>0
   AND (Datum>=:DTVON and Datum<=:DTBIS)
   AND (BANKNRSOLL IS NOT NULL)
   and buchung.bnr=buchzahl.bnr
   group by buchzahl.knr
   INTO :BETRAG, :KNR
   DO
    BEGIN
     IF (BETRAG IS NULL) THEN
      BETRAG=0;
     IF (BETRAG <> 0) THEN
      BEGIN
       IF (KNR=60000) then
        Z1=Z1+:BETRAG;
       ELSE
        IF (KNR=60010) then
         Z2=Z2+:BETRAG;
       ELSE
        IF (KNR=60020) then
         Z3=Z3+:BETRAG;
       ELSE
        IF (KNR=60030) then
         Z4=Z4+:BETRAG;
       ELSE
        IF (KNR=60040) then
         Z5=Z5+:BETRAG;
       ELSE
        IF (KNR=60050) then
         Z6=Z6+:BETRAG;
       ELSE
        IF (KNR=60060) then
         Z7=Z7+:BETRAG;
       ELSE
        IF (KNR=60070) then
         Z8=Z8+:BETRAG;
       ELSE
        IF (KNR=60090) then
         GN=GN+:BETRAG;
      END
    END
   Z1HG=Z1HG+Z1;Z2HG=Z2HG+Z2;Z3HG=Z3HG+Z3;Z4HG=Z4HG+Z4;Z5HG=Z5HG+Z5;Z6HG=Z6HG+Z6;Z7HG=Z7HG+Z7;Z8HG=Z8HG+Z8;GNHG=GNHG+GN;

   suspend;
   /* BEZAHLT NICHT GEWERBLICH */
   LFDNR=6;
   Z1=0;
   Z2=0;
   Z3=0;
   Z4=0;
   Z5=0;
   Z6=0;
   Z7=0;
   Z8=0;
   GN=0;
   /* KEIN SPLIT */
   FOR SELECT SUM(BETRAG), KNROP from Buchung
   WHERE (ONRSOLL=:ONR OR ONRHABEN=:ONR)
   AND (ARTOP>=10 AND ARTOP<=13)
   AND (MWSTOP=0)
   AND (Datum>=:DTVON and Datum<=:DTBIS)
   AND (BANKNRSOLL IS NOT NULL)
   and BETRAG<>0
   GROUP BY KNROP
   INTO :BETRAG, :KNR
   DO
    BEGIN
     IF (BETRAG IS NULL) THEN
      BETRAG=0;
     IF (BETRAG <> 0) THEN
      BEGIN
       IF (KNR=60000) then
        Z1=:BETRAG;
       ELSE
        IF (KNR=60010) then
         Z2=:BETRAG;
       ELSE
        IF (KNR=60020) then
         Z3=:BETRAG;
       ELSE
        IF (KNR=60030) then
         Z4=:BETRAG;
       ELSE
        IF (KNR=60040) then
         Z5=:BETRAG;
       ELSE
        IF (KNR=60050) then
         Z6=:BETRAG;
       ELSE
        IF (KNR=60060) then
         Z7=:BETRAG;
       ELSE
        IF (KNR=60070) then
         Z8=:BETRAG;
       ELSE
        IF (KNR=60090) then
         GN=:BETRAG;
      END
    END /* FOR */
   /* SPLIT */
   for select sum(buchzahl.betrag), buchzahl.knr from buchzahl, buchung
   WHERE (ONRSOLL=:ONR OR ONRHABEN=:ONR)
   AND buchung.ARTOP=0
   AND buchzahl.mwstop=0
   AND (Datum>=:DTVON and Datum<=:DTBIS)
   AND (BANKNRSOLL IS NOT NULL)
   and buchung.bnr=buchzahl.bnr
   group by buchzahl.knr
   INTO :BETRAG, :KNR
   DO
    BEGIN
     IF (BETRAG IS NULL) THEN
      BETRAG=0;
     IF (BETRAG <> 0) THEN
      BEGIN
       IF (KNR=60000) then
        Z1=Z1+:BETRAG;
       ELSE
        IF (KNR=60010) then
         Z2=Z2+:BETRAG;
       ELSE
        IF (KNR=60020) then
         Z3=Z3+:BETRAG;
       ELSE
        IF (KNR=60030) then
         Z4=Z4+:BETRAG;
       ELSE
        IF (KNR=60040) then
         Z5=Z5+:BETRAG;
       ELSE
        IF (KNR=60050) then
         Z6=Z6+:BETRAG;
       ELSE
        IF (KNR=60060) then
         Z7=Z7+:BETRAG;
       ELSE
        IF (KNR=60070) then
         Z8=Z8+:BETRAG;
       ELSE
        IF (KNR=60090) then
         GN=GN+:BETRAG;
      END
    END
   Z1HP=Z1HP+Z1;Z2HP=Z2HP+Z2;Z3HP=Z3HP+Z3;Z4HP=Z4HP+Z4;Z5HP=Z5HP+Z5;Z6HP=Z6HP+Z6;Z7HP=Z7HP+Z7;Z8HP=Z8HP+Z8;GNHP=GNHP+GN;
   suspend;
   /* OP */
   LFDNR=7;
   Z1=Z1SOLL-Z1BEZ;
   Z2=Z2SOLL-Z2BEZ;
   Z3=Z3SOLL-Z3BEZ;
   Z4=Z4SOLL-Z4BEZ;
   Z5=Z5SOLL-Z5BEZ;
   Z6=Z6SOLL-Z6BEZ;
   Z7=Z7SOLL-Z7BEZ;
   Z8=Z8SOLL-Z8BEZ;
   GN=GNSOLL-GNBEZ;
   suspend;
   END /* BSONST */
  END /* FOR ONR */
 /* DUMMY FUER SUMMEN */
 ONR=1000;
 LFDNR=1;
 Z1=Z1S;Z2=Z2S;Z3=Z3S;Z4=Z4S;Z5=Z5S;Z6=Z6S;Z7=Z7S;Z8=Z8S;GN=GNS;
 SUSPEND;
 Z1=Z1SG;Z2=Z2SG;Z3=Z3SG;Z4=Z4SG;Z5=Z5SG;Z6=Z6SG;Z7=Z7SG;Z8=Z8SG;GN=GNSG;
 LFDNR=2;
 SUSPEND;
 Z1=Z1SP;Z2=Z2SP;Z3=Z3SP;Z4=Z4SP;Z5=Z5SP;Z6=Z6SP;Z7=Z7SP;Z8=Z8SP;GN=GNSP;
 LFDNR=3;
 SUSPEND;
 Z1=Z1H;Z2=Z2H;Z3=Z3H;Z4=Z4H;Z5=Z5H;Z6=Z6H;Z7=Z7H;Z8=Z8H;GN=GNH;
 LFDNR=4;
 SUSPEND;
 Z1=Z1HG;Z2=Z2HG;Z3=Z3HG;Z4=Z4HG;Z5=Z5HG;Z6=Z6HG;Z7=Z7HG;Z8=Z8HG;GN=GNHG;
 LFDNR=5;
 SUSPEND;
 LFDNR=6;
 Z1=Z1HP;Z2=Z2HP;Z3=Z3HP;Z4=Z4HP;Z5=Z5HP;Z6=Z6HP;Z7=Z7HP;Z8=Z8HP;GN=GNHP;
 SUSPEND;
 LFDNR=7;
 Z1=Z1S-Z1H;
 Z2=Z2S-Z2H;
 Z3=Z3S-Z3H;
 Z4=Z4S-Z4H;
 Z5=Z5S-Z5H;
 Z6=Z6S-Z6H;
 Z7=Z7S-Z7H;
 Z8=Z8S-Z8H;
 GN=GNS-GNH;
 SUSPEND;
END


-- Prozedur: EINZKAUS
CREATE OR ALTER PROCEDURE EINZKAUS
DECLARE VARIABLE VZART INTEGER;
DECLARE VARIABLE LBNR INTEGER;
DECLARE VARIABLE OPBETRAG NUMERIC(18, 2);
DECLARE VARIABLE WDATUM DATE;
BEGIN
 for select SUM(MIETE),SUM(BK),SUM(HK),SUM(GN), BNR from EINZKAUS_DETAIL(:ONR,:KNR,:DTVON,:DTBIS,:BWDATUM,:KEINESOLLSTELLUNGEN)
 GROUP BY BNR 
 into :MIETE, :BK, :HK, :GN, :BNR 
 do
  begin
   SALDO = MIETE + BK + HK + GN;
   select a.DATUM, a.WDATUM, a.TEXT, (b.MWST / 100), a.BELEGNR, a.GN, a.OPBETRAG, a.LBNR from buchung a, buchung b where a.BNR=:BNR and a.opnr=b.bnr  
   INTO :DATUM, :WDATUM, :TEXT, :UST, :BELEGNR, :ISGN, :OPBETRAG, :LBNR;
   if (BWDATUM = 'J') then
    BEGIN
     DATUM2 = DATUM;
     DATUM = WDATUM;
    END 
   ELSE
    DATUM2 = WDATUM; 
   IF (OPBETRAG IS NOT NULL) THEN
    BEGIN
     if (OPBETRAG = 0) then
      begin
       BEMERKUNG='SO';
       ISOP = 1;
      end
     else
      begin
       BEMERKUNG='OP';
       ISOP = 2;
      end
    END
   ELSE
    BEGIN
     ISOP =0; 
     if (LBNR IS NOT NULL) then
      BEMERKUNG='LEV';
     ELSE
      BEMERKUNG='';     
    END 
   /**/
   IF (UST=0 OR UST IS NULL) THEN  /* NETTOMIETE */
    USTBETRAG = MIETE;
   ELSE
    USTBETRAG = (MIETE - (MIETE / (1 + UST))); 
   
   IF (GN IS NULL) THEN
    GN=0;  
   SUSPEND;
  end
END


-- Prozedur: EINZKAUS_DETAIL
CREATE OR ALTER PROCEDURE EINZKAUS_DETAIL
DECLARE VARIABLE BETRAG NUMERIC(15, 2);
DECLARE VARIABLE DTBDATUMVON DATE;
DECLARE VARIABLE DTBDATUMBIS DATE;
DECLARE VARIABLE DTWDATUMVON DATE;
DECLARE VARIABLE DTWDATUMBIS DATE;
DECLARE VARIABLE VZART INTEGER;
DECLARE VARIABLE IKSOLL INTEGER;
BEGIN
 /* TEMP 
 ONR = 998;
 KNR = 200100;
 DTVON = '1.10.2016';
 DTBIS = '31.12.2016';
 BWDATUM = 'N';  
 KEINESOLLSTELLUNGEN = 'N'; */
 
 /* Datum Variablen belegen */
 if (BWDATUM = 'N') then
  begin
   DTBDATUMVON = DTVON;
   DTBDATUMBIS = DTBIS;
   DTWDATUMVON = '01.01.1900';
   DTWDATUMBIS = '01.01.1900';
  end
 else
  begin
   DTWDATUMVON = DTVON;
   DTWDATUMBIS = DTBIS;
   DTBDATUMVON = '01.01.1900';
   DTBDATUMBIS = '01.01.1900';
  end
 /* 
 /* Berechnung 
 */
 IF (KEINESOLLSTELLUNGEN = 'N') THEN
  BEGIN
   /* Sollstellungen KHABEN = VZART  BNR = OPNR */
   for
    select OPNR, BETRAG, ARTHABEN from buchung
    where ((onrsoll=:onr) or (onrhaben=:onr)) and ((ksoll=:knr) or (khaben=:knr)) and ((DATUM>=:DTBDATUMVON and DATUM<=:DTBDATUMBIS) or (WDATUM>=:DTWDATUMVON and WDATUM<=:DTWDATUMBIS)) 
    and Betrag<>0 and opbetrag is not null
   into :BNR, :BETRAG, :VZART
   DO
    begin
     BETRAG = -BETRAG;
     MIETE = 0; BK = 0; HK = 0; GN = 0; 
     IF (VZART=10 OR VZART=15) THEN
      MIETE = MIETE + BETRAG;
     ELSE
      IF (VZART=11 OR VZART>=110) THEN
       BK = BK + BETRAG;
      ELSE
       IF (VZART=12 OR VZART=17) THEN
        HK = HK + BETRAG;
       ELSE
        IF (VZART=13 OR VZART=18) THEN
         GN = GN + BETRAG;
     SUSPEND;
    end
  END  
 /* ZAHLUNGEN SPLIT */    
 for
  select buchung.BNR, buchung.ksoll, buchzahl.BETRAG, buchzahl.artop from buchung,buchzahl
  where (buchzahl.bnr=buchung.bnr) and ((onrsoll=:ONR) or (onrhaben=:ONR)) and ((ksoll=:KNR) or (khaben=:KNR)) and ((DATUM>=:DTBDATUMVON and DATUM<=:DTBDATUMBIS) or (WDATUM>=:DTWDATUMVON and WDATUM<=:DTWDATUMBIS)) and buchzahl.Betrag<>0
 into :BNR, :IKSOLL, :BETRAG, :VZART
 DO
  begin
   MIETE = 0; BK = 0; HK = 0; GN = 0; 
   if (IKSOLL = KNR) then
    BETRAG = -BETRAG;
   IF (VZART=10 OR VZART=15) THEN
    MIETE = MIETE + BETRAG;
   ELSE
    IF (VZART=11 OR VZART>=110) THEN
     BK = BK + BETRAG;
    ELSE
     IF (VZART=12 OR VZART=17) THEN
      HK = HK + BETRAG;
     ELSE
      IF (VZART=13 OR VZART=18) THEN
       GN = GN + BETRAG;
   SUSPEND;
  end    
 /* ZAHLUNGEN KEIN SPLIT */    
 for select BNR, KSOLL, BETRAG, artop from buchung
  where ((onrsoll=:onr) or (onrhaben=:onr)) and ((ksoll=:knr) or (khaben=:knr)) and ((DATUM>=:DTBDATUMVON and DATUM<=:DTBDATUMBIS) or (WDATUM>=:DTWDATUMVON and WDATUM<=:DTWDATUMBIS)) and Betrag<>0 and opbetrag is null and splitnr is null and artop is not null and artop<>0 
 into :BNR, :IKSOLL, :BETRAG, :VZART
 DO
  begin
   MIETE = 0; BK = 0; HK = 0; GN = 0; 
   if (IKSOLL = KNR) then
    BETRAG = -BETRAG;
   IF (VZART=10 OR VZART=15) THEN
    MIETE = MIETE + BETRAG;
   ELSE
    IF (VZART=11 OR VZART>=110) THEN
     BK = BK + BETRAG;
    ELSE
     IF (VZART=12 OR VZART=17) THEN
      HK = HK + BETRAG;
     ELSE
      IF (VZART=13 OR VZART=18) THEN
       GN = GN + BETRAG;
   SUSPEND;
  end    
END


-- Prozedur: EINZKAUS_VORTRAG
CREATE OR ALTER PROCEDURE EINZKAUS_VORTRAG
DECLARE VARIABLE GN_1 SMALLINT;
DECLARE VARIABLE GN_2 SMALLINT;
DECLARE VARIABLE INR SMALLINT;
DECLARE VARIABLE IPOS SMALLINT;
DECLARE VARIABLE BETRAG NUMERIC(18, 2);
BEGIN
 IF (BMITVORTRAG='N') THEN
  BEGIN
   MIETE=0;
   BK=0;
   HK=0;
   GN=0;
   HAUSGELD=0;
   SUSPEND;
  END
 ELSE
  BEGIN
   if (KNR<200000) then
    BEGIN
     EXECUTE PROCEDURE einzkaus_vortrag_pos (:ONR, :KNR, :DTVON, :BWDATUM, :BMITVORTRAG, 0, 0, 10) RETURNING_VALUES :MIETE;
     EXECUTE PROCEDURE einzkaus_vortrag_pos (:ONR, :KNR, :DTVON, :BWDATUM, :BMITVORTRAG, 0, 0, 11) RETURNING_VALUES :BK;
     EXECUTE PROCEDURE einzkaus_vortrag_pos (:ONR, :KNR, :DTVON, :BWDATUM, :BMITVORTRAG, 0, 0, 12) RETURNING_VALUES :HK;
     EXECUTE PROCEDURE einzkaus_vortrag_pos (:ONR, :KNR, :DTVON, :BWDATUM, :BMITVORTRAG, 0, 0, 13) RETURNING_VALUES :GN;
     SALDO=MIETE+BK+HK+GN;
    END
   ELSE
    BEGIN
     if (GN_STATUS=0) then /* MIT GN */
      BEGIN
       GN_1=0;
       GN_2=1;
      END
     ELSE
      if (GN_STATUS=1) then /* OHNE GN */
       BEGIN
        GN_1=0;
        GN_2=0;
       END
     ELSE
      if (GN_STATUS=2) then /* NUR GN */
       BEGIN
        GN_1=1;
        GN_2=1;
       END
     EXECUTE PROCEDURE einzkaus_vortrag_pos (:ONR, :KNR, :DTVON, :BWDATUM, :BMITVORTRAG, :GN_1, :GN_2, 15) RETURNING_VALUES :BK; /* Hausgeld */
     HK=0;
     INR=1;
     WHILE (INR <= 48) do
      begin
       IPOS=(100 + (10 * INR));
       IF (INR<>8 and INR<>9) THEN /* reserviert */
        BEGIN
         EXECUTE PROCEDURE einzkaus_vortrag_pos (:ONR, :KNR, :DTVON, :BWDATUM, :BMITVORTRAG, :GN_1, :GN_2, :IPOS) RETURNING_VALUES :BETRAG; /* RL */
         if (BETRAG IS NOT NULL) then
          HK=HK+BETRAG;
         END 
       INR=INR+1; 
      end
     EXECUTE PROCEDURE einzkaus_vortrag_pos (:ONR, :KNR, :DTVON, :BWDATUM, :BMITVORTRAG, :GN_1, :GN_2, 17) RETURNING_VALUES :GN; /* Sonderumlage */
     SALDO=BK+HK+GN;
    END
   SUSPEND;
  END 
END


-- Prozedur: EINZKAUS_VORTRAG_POS
CREATE OR ALTER PROCEDURE EINZKAUS_VORTRAG_POS
DECLARE VARIABLE BETRAG_SOLL NUMERIC(18, 2);
DECLARE VARIABLE BETRAG_BEZ NUMERIC(18, 2);
DECLARE VARIABLE SUM_TEMP NUMERIC(18, 2);
BEGIN
 IF (BMITVORTRAG='N') THEN
  BEGIN
   BETRAG=0;
   SUSPEND;
  END
 ELSE
  BEGIN
   /* Summe Soll DATUM = WDATUM*/
   IF (BWDATUM='N') THEN
    BEGIN
     select SUM(BETRAG) from buchung
      where ONRSOLL=:ONR and KSOLL=:KNR and Datum<:DTVON and ARTHABEN=:POS and OPNR IS NOT NULL AND OPBETRAG IS NOT NULL and (GN=:GN_1 or GN=:GN_2)
     into :BETRAG_SOLL;
     IF (BETRAG_SOLL IS NULL) THEN
      BETRAG_SOLL=0;
    END
   ELSE
    BEGIN
     select SUM(BETRAG) from buchung
      where ONRSOLL=:ONR and KSOLL=:KNR and WDatum<:DTVON and ARTHABEN=:POS and OPNR IS NOT NULL AND OPBETRAG IS NOT NULL and (GN=:GN_1 or GN=:GN_2)
     into :BETRAG_SOLL;
     IF (BETRAG_SOLL IS NULL) THEN
      BETRAG_SOLL=0;
    END
   /*  */
   BETRAG_BEZ=0;
   IF (BWDATUM='N') THEN
    BEGIN
     FOR SELECT SUM(BETRAG) from buchung
     where ONRHABEN=:ONR and KHABEN=:KNR and ARTOP=:POS and Datum<:DTVON  and (GN=:GN_1 or GN=:GN_2)
     union all
     SELECT SUM(BETRAG) from buchzahl
     where ARTOP=:POS and BNR IN (select bnr from buchung where onrhaben=:ONR and khaben=:KNR and ARTOP=0 and Datum<:DTVON and (GN=:GN_1 or GN=:GN_2))
     INTO :SUM_TEMP
     DO
      BEGIN
       IF (SUM_TEMP IS NOT NULL) THEN
        BETRAG_BEZ=BETRAG_BEZ+SUM_TEMP;
      END
     /* ZAHLUNG SOLL - */
     FOR SELECT SUM(BETRAG) from buchung
     where ONRSOLL=:ONR and KSOLL=:KNR and ARTOP=:POS and Datum<:DTVON  and (GN=:GN_1 or GN=:GN_2)
     union all
     SELECT SUM(BETRAG) from buchzahl
     where ARTOP=:POS and BNR IN (select bnr from buchung where onrsoll=:ONR and ksoll=:KNR and ARTOP=0 and Datum<:DTVON and (GN=:GN_1 or GN=:GN_2))
     INTO :SUM_TEMP
     DO
      BEGIN
       IF (SUM_TEMP IS NOT NULL) THEN
        BETRAG_BEZ=BETRAG_BEZ-SUM_TEMP;
      END
   END
  ELSE
   BEGIN  /* WDatum */
    /* SUMME BEZAHLT */
    FOR SELECT SUM(BETRAG) from buchung
    where ONRHABEN=:ONR and KHABEN=:KNR and ARTOP=:POS and WDatum<:DTVON  and (GN=:GN_1 or GN=:GN_2)
     union all
     SELECT SUM(BETRAG) from buchzahl
     where ARTOP=:POS and BNR IN (select bnr from buchung where onrhaben=:ONR and khaben=:KNR and ARTOP=0 and WDatum<:DTVON  and (GN=:GN_1 or GN=:GN_2))
     INTO :SUM_TEMP
     DO
      BEGIN
       IF (SUM_TEMP IS NOT NULL) THEN
        BETRAG_BEZ=BETRAG_BEZ+SUM_TEMP;
      END
     /* ZAHLUNG SOLL - */
     FOR SELECT SUM(BETRAG) from buchung
     where ONRSOLL=:ONR and KSOLL=:KNR and ARTOP=:POS and WDatum<:DTVON and (GN=:GN_1 or GN=:GN_2)
     union all
     SELECT SUM(BETRAG) from buchzahl
     where ARTOP=:POS and BNR IN (select bnr from buchung where onrsoll=:ONR and ksoll=:KNR and ARTOP=0 and WDatum<:DTVON and (GN=:GN_1 or GN=:GN_2))
     INTO :SUM_TEMP
     DO
      BEGIN
       IF (SUM_TEMP IS NOT NULL) THEN
        BETRAG_BEZ=BETRAG_BEZ-SUM_TEMP;
      END
    END /* W-Datum */
   /* ERGEBNIS */
   BETRAG=:BETRAG_BEZ-:BETRAG_SOLL;
   SUSPEND;
  END  /*Vortrag */
END


-- Prozedur: ENTWICKLUNG_GELDKONTEN
CREATE OR ALTER PROCEDURE ENTWICKLUNG_GELDKONTEN
DECLARE VARIABLE GIRO_ALT NUMERIC(15, 2);
DECLARE VARIABLE GIRO_NEU NUMERIC(15, 2);
DECLARE VARIABLE BETRAG_SOLL NUMERIC(15, 2);
DECLARE VARIABLE BETRAG_HABEN NUMERIC(15, 2);
DECLARE VARIABLE BETRAG_NETTO NUMERIC(15, 2);
DECLARE VARIABLE TEMPNR INTEGER;
DECLARE VARIABLE KNR INTEGER;
DECLARE VARIABLE KKLASSE INTEGER;
DECLARE VARIABLE KBEZ VARCHAR(188);
DECLARE VARIABLE BANKART INTEGER;
DECLARE VARIABLE BANKKURZBEZ VARCHAR(40);
DECLARE VARIABLE POS1NAME VARCHAR(30);
DECLARE VARIABLE POS2NAME VARCHAR(30);
DECLARE VARIABLE POS3NAME VARCHAR(30);
DECLARE VARIABLE POS4NAME VARCHAR(30);
DECLARE VARIABLE POS5NAME VARCHAR(30);
DECLARE VARIABLE POS6NAME VARCHAR(30);
DECLARE VARIABLE POS7NAME VARCHAR(30);
DECLARE VARIABLE POS8NAME VARCHAR(30);
DECLARE VARIABLE POS9NAME VARCHAR(30);
DECLARE VARIABLE POS10NAME VARCHAR(30);
DECLARE VARIABLE RLPOS INTEGER;
DECLARE VARIABLE POSNR INTEGER;
DECLARE VARIABLE BETRAGEIN NUMERIC(15, 2);
DECLARE VARIABLE BETRAGAUS NUMERIC(15, 2);
DECLARE VARIABLE ANZEIN INTEGER;
DECLARE VARIABLE ANZAUS INTEGER;
DECLARE VARIABLE GIROANZALT INTEGER;
DECLARE VARIABLE GIROANZNEU INTEGER;
DECLARE VARIABLE RLTEXT VARCHAR(30);
/* NEUE PROCEDURE */
DECLARE VARIABLE IANZ INTEGER;
DECLARE VARIABLE RTMP NUMERIC(15, 2);
DECLARE VARIABLE RSALDO NUMERIC(15, 2);
DECLARE VARIABLE ITMP INTEGER;
DECLARE VARIABLE IGIROLAUFNR INTEGER;
DECLARE VARIABLE ITMP2 INTEGER;
DECLARE VARIABLE INR INTEGER;
DECLARE VARIABLE IKLASSE INTEGER;
BEGIN
 NR = 1;
 FOR SELECT BANKNR FROM OBJBANKEN WHERE ONR = :ONR
 INTO :GKONTO
 DO
  BEGIN
   IANZ = 0;
   RSALDO = 0;
   ILAUFNR = 1;
   /* BEZ Bank/Kasse */
   select KURZBEZ, ART from banken where NR=:GKONTO INTO :BANKKURZBEZ, :BANKART;
   IF (BANKART=0) THEN
    BANKKURZBEZ='Girokonto "' || BANKKURZBEZ || '"';
   ELSE
    BANKKURZBEZ='Kasse "' || BANKKURZBEZ || '"';
   /* Saldo alt */
   select saldo from BANKSALDO_ALT (:GKONTO,:DTVON) INTO GIRO_ALT;
   IGIROLAUFNR = ILAUFNR;
   /*  */
   /* 98000 - Konto */
   RTMP = 0;
   ILAUFNR = 1;
   for select DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN, -BETRAG from buchung where
    ksoll=98000 and banknrhaben=:GKONTO
    and (Datum>=:DTVON and Datum<=:DTBIS)
    union
    select DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN, BETRAG from buchung where
    khaben=98000 and banknrsoll=:GKONTO
    and (Datum>=:DTVON and Datum<=:DTBIS)
   into :DATUM, :BELEGNR, :BTEXT, :KONTOS, :KONTOH, :EBETRAG
   do
    begin
     IANZ = IANZ + 1;
     RTMP = RTMP + EBETRAG;
     /* Eintrag */
     TEXT = '';
     BETRAG = NULL;
     RLKONTO = NULL;
     BILANZ = NULL;
     ISMASTER = '2';
     SUSPEND;
    end
   /* Master-Eintrag */
   DATUM = NULL;
   BELEGNR = NULL;
   BTEXT = NULL;
   KONTOS = NULL;
   KONTOH = NULL;
   EBETRAG = NULL;
   ISMASTER = '1';
   BETRAG = RTMP;
   RLKONTO = NULL;
   BILANZ = NULL;
   if (RTMP > 0) THEN
    TEXT = 'zzgl. Anfangsbestand (EB-Wert)';
   else
    if (RTMP < 0) THEN
     TEXT = 'abzgl. Anfangsbestand (EB-Wert)';
   RSALDO = RSALDO + BETRAG;
   if (BETRAG <> 0) then
    SUSPEND;
   ILAUFNR = ILAUFNR + 1;
   /*  */
   /* 99990 - Durchlaufkonto */
   RTMP = 0;
   for select DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN, -BETRAG from buchung where
    ksoll=99990 and banknrhaben=:GKONTO
    and (Datum>=:DTVON and Datum<=:DTBIS)
    union
    select DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN, BETRAG from buchung where
    khaben=99990 and banknrsoll=:GKONTO
    and (Datum>=:DTVON and Datum<=:DTBIS)
   into :DATUM, :BELEGNR, :BTEXT, :KONTOS, :KONTOH, :EBETRAG
   do
    begin
     IANZ = IANZ + 1;
     RTMP = RTMP + EBETRAG;
     /* Eintrag */
     TEXT = '';
     BETRAG = NULL;
     RLKONTO = NULL;
     BILANZ = NULL;
     ISMASTER = '2';
     SUSPEND;
    end
   /* Master-Eintrag */
   DATUM = NULL;
   BELEGNR = NULL;
   BTEXT = NULL;
   KONTOS = NULL;
   KONTOH = NULL;
   EBETRAG = NULL;
   ISMASTER = '1';
   BETRAG = RTMP;
   RLKONTO = NULL;
   BILANZ = NULL;
   if (RTMP > 0) THEN
    TEXT = 'zzgl. Durchlaufkonto';
   else
    if (RTMP < 0) THEN
     TEXT = 'abzgl. Durchlaufkonto';
   RSALDO = RSALDO + BETRAG;
   if (BETRAG <> 0) then
    SUSPEND;
   ILAUFNR = ILAUFNR + 1;
   /*  */
   /* Hausgeld im WDATUM KLASSE 15 */
   FOR SELECT BETRAG, TEXT, DATUM, BELEGNR, BTEXT, KONTOS, KONTOH, EBETRAG, ISMASTER, NR from ENTW_SALDO_WDATUM(:GKONTO, :DTVON, :DTBIS, 15, ' ','HausgeldvorschÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼sse')
   into :BETRAG, :TEXT, :DATUM, :BELEGNR, :BTEXT, :KONTOS, :KONTOH, :EBETRAG, :ISMASTER, :ITMP
   DO
    BEGIN
     if (BETRAG > 0) then
      TEXT = 'zzgl. ' || TEXT;
     else
      TEXT = 'abgl. ' || TEXT;
     ITMP2 = ILAUFNR;
     ILAUFNR = ILAUFNR + ITMP;
     IANZ = IANZ + 1;
     RLKONTO = NULL;
     BILANZ = NULL;
     if (ISMASTER = '1') then
      begin
       RSALDO = RSALDO + BETRAG;
       ITMP2 = ILAUFNR;
      end
     SUSPEND;
     ILAUFNR = ITMP2;
    END
   ILAUFNR = ILAUFNR + 1;
   /* RL1 bis RL48 */   
   INR=1;
   WHILE (INR <= 48) do
    begin
     IKLASSE=(100 + (10 * INR));
     for select bez from vorausz where onr=:onr and kklasse=:IKLASSE into RLTEXT do
      begin
       FOR SELECT BETRAG, TEXT, DATUM, BELEGNR, BTEXT, KONTOS, KONTOH, EBETRAG, ISMASTER, NR from ENTW_SALDO_WDATUM(:GKONTO, :DTVON, :DTBIS, :IKLASSE, ' ', :RLTEXT)
       into :BETRAG, :TEXT, :DATUM, :BELEGNR, :BTEXT, :KONTOS, :KONTOH, :EBETRAG, :ISMASTER, :ITMP
       DO
        BEGIN
         if (BETRAG > 0) then
          TEXT = 'zzgl. ' || TEXT;
         else
          TEXT = 'abgl. ' || TEXT;
         ITMP2 = ILAUFNR;
         ILAUFNR = ILAUFNR + ITMP;
         IANZ = IANZ + 1;
         RLKONTO = NULL;
         BILANZ = NULL;
         if (ISMASTER = '1') then
          begin
           RSALDO = RSALDO + BETRAG;
           ITMP2 = ILAUFNR;
          end
         SUSPEND;
         ILAUFNR = ITMP2;
        END
       ILAUFNR = ILAUFNR+1; 
      end
     INR=INR+1;
    end
   /* Sonderumlage */
   FOR SELECT BETRAG, TEXT, DATUM, BELEGNR, BTEXT, KONTOS, KONTOH, EBETRAG, ISMASTER, NR from ENTW_SALDO_WDATUM(:GKONTO, :DTVON, :DTBIS, 17, ' ',' Sonderumlage')
   into :BETRAG, :TEXT, :DATUM, :BELEGNR, :BTEXT, :KONTOS, :KONTOH, :EBETRAG, :ISMASTER, :ITMP
   DO
    BEGIN
     if (BETRAG > 0) then
      TEXT = 'zzgl. ' || TEXT;
     else
      TEXT = 'abgl. ' || TEXT;
     ITMP2 = ILAUFNR;
     ILAUFNR = ILAUFNR + ITMP;
     IANZ = IANZ + 1;
     RLKONTO = NULL;
     BILANZ = NULL;
     if (ISMASTER = '1') then
      begin
       RSALDO = RSALDO + BETRAG;
       ITMP2 = ILAUFNR;
      end
     SUSPEND;
     ILAUFNR = ITMP2;
    END
   ILAUFNR = ILAUFNR + 1;
   /* Sonstige Einnahmen im WDATUM KLASSE 19 */
   FOR SELECT BETRAG, TEXT, DATUM, BELEGNR, BTEXT, KONTOS, KONTOH, EBETRAG, ISMASTER, NR from ENTW_SALDO_WDATUM(:GKONTO, :DTVON, :DTBIS, 19, ' ','sonstige Einnahmen')
   into :BETRAG, :TEXT, :DATUM, :BELEGNR, :BTEXT, :KONTOS, :KONTOH, :EBETRAG, :ISMASTER, :ITMP
   DO
    BEGIN
     if (BETRAG > 0) then
      TEXT = 'zzgl. ' || TEXT;
     else
      TEXT = 'abgl. ' || TEXT;
     ITMP2 = ILAUFNR;
     ILAUFNR = ILAUFNR + ITMP;
     IANZ = IANZ + 1;
     RLKONTO = NULL;
     BILANZ = NULL;
     if (ISMASTER = '1') then
      begin
       RSALDO = RSALDO + BETRAG;
       ITMP2 = ILAUFNR;
      end
     SUSPEND;
     ILAUFNR = ITMP2;
    END
   ILAUFNR = ILAUFNR + 1;
   /* MIETE im WDatum */
   FOR SELECT BETRAG, TEXT, DATUM, BELEGNR, BTEXT, KONTOS, KONTOH, EBETRAG, ISMASTER, NR from ENTW_SALDO_WDATUM(:GKONTO, :DTVON, :DTBIS, 10, ' ','Einnahmen Mieten')
   into :BETRAG, :TEXT, :DATUM, :BELEGNR, :BTEXT, :KONTOS, :KONTOH, :EBETRAG, :ISMASTER, :ITMP
   DO
    BEGIN
     if (BETRAG > 0) then
      TEXT = 'zzgl. ' || TEXT;
     else
      TEXT = 'abgl. ' || TEXT;
     ITMP2 = ILAUFNR;
     ILAUFNR = ILAUFNR + ITMP;
     IANZ = IANZ + 1;
     RLKONTO = NULL;
     BILANZ = NULL;
     if (ISMASTER = '1') then
      begin
       RSALDO = RSALDO + BETRAG;
       ITMP2 = ILAUFNR;
      end
     SUSPEND;
     ILAUFNR = ITMP2;
    END
   ILAUFNR = ILAUFNR + 1;
   /* BK im WDatum */
   FOR SELECT BETRAG, TEXT, DATUM, BELEGNR, BTEXT, KONTOS, KONTOH, EBETRAG, ISMASTER, NR from ENTW_SALDO_WDATUM(:GKONTO, :DTVON, :DTBIS, 11, ' ','Einnahmen Betriebskosten-VZ')
   into :BETRAG, :TEXT, :DATUM, :BELEGNR, :BTEXT, :KONTOS, :KONTOH, :EBETRAG, :ISMASTER, :ITMP
   DO
    BEGIN
     if (BETRAG > 0) then
      TEXT = 'zzgl. ' || TEXT;
     else
      TEXT = 'abgl. ' || TEXT;    
     ITMP2 = ILAUFNR;
     ILAUFNR = ILAUFNR + ITMP;
     IANZ = IANZ + 1;
     RLKONTO = NULL;
     BILANZ = NULL;
     if (ISMASTER = '1') then
      begin
       RSALDO = RSALDO + BETRAG;
       ITMP2 = ILAUFNR;
      end
     SUSPEND;
     ILAUFNR = ITMP2;
    END
   ILAUFNR = ILAUFNR + 1;
   /* HK im WDatum */
   FOR SELECT BETRAG, TEXT, DATUM, BELEGNR, BTEXT, KONTOS, KONTOH, EBETRAG, ISMASTER, NR from ENTW_SALDO_WDATUM(:GKONTO, :DTVON, :DTBIS, 12, ' ','Einnahmen Heizkosten-VZ')
   into :BETRAG, :TEXT, :DATUM, :BELEGNR, :BTEXT, :KONTOS, :KONTOH, :EBETRAG, :ISMASTER, :ITMP
   DO
    BEGIN
     if (BETRAG > 0) then
      TEXT = 'zzgl. ' || TEXT;
     else
      TEXT = 'abgl. ' || TEXT;    
     ITMP2 = ILAUFNR;
     ILAUFNR = ILAUFNR + ITMP;
     IANZ = IANZ + 1;
     RLKONTO = NULL;
     BILANZ = NULL;
     if (ISMASTER = '1') then
      begin
       RSALDO = RSALDO + BETRAG;
       ITMP2 = ILAUFNR;
      end
     SUSPEND;
     ILAUFNR = ITMP2;
    END
   ILAUFNR = ILAUFNR + 1;
   /* Nachzahlungen EIG */
   FOR SELECT BETRAG, TEXT, DATUM, BELEGNR, BTEXT, KONTOS, KONTOH, EBETRAG, ISMASTER, NR from ENTW_SALDO_WDATUM(:GKONTO, :DTVON, :DTBIS, 18,'N','zzgl. Ausgleich NachschÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼sse (Nachzahlungen, EigentÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼mer)')
   into :BETRAG, :TEXT, :DATUM, :BELEGNR, :BTEXT, :KONTOS, :KONTOH, :EBETRAG, :ISMASTER, :ITMP
   DO
    BEGIN
     ITMP2 = ILAUFNR;
     ILAUFNR = ILAUFNR + ITMP;
     IANZ = IANZ + 1;
     RLKONTO = NULL;
     BILANZ = NULL;
     if (ISMASTER = '1') then
      begin
       RSALDO = RSALDO + BETRAG;
       ITMP2 = ILAUFNR;
      end
     SUSPEND;
     ILAUFNR = ITMP2;
    END
   ILAUFNR = ILAUFNR + 1;
   /* Nachzahlungen BEW */
   FOR SELECT BETRAG, TEXT, DATUM, BELEGNR, BTEXT, KONTOS, KONTOH, EBETRAG, ISMASTER, NR from ENTW_SALDO_WDATUM(:GKONTO, :DTVON, :DTBIS, 13,'N','zzgl. Ausgleich Nachzahlungen (Bewohner)')
   into :BETRAG, :TEXT, :DATUM, :BELEGNR, :BTEXT, :KONTOS, :KONTOH, :EBETRAG, :ISMASTER, :ITMP
   DO
    BEGIN
     ITMP2 = ILAUFNR;
     ILAUFNR = ILAUFNR + ITMP;
     IANZ = IANZ + 1;
     RLKONTO = NULL;
     BILANZ = NULL;
     if (ISMASTER = '1') then
      begin
       RSALDO = RSALDO + BETRAG;
       ITMP2 = ILAUFNR;
      end
     SUSPEND;
     ILAUFNR = ITMP2;
    END
   ILAUFNR = ILAUFNR + 1;
   /* Guthaben EIG */
   FOR SELECT BETRAG, TEXT, DATUM, BELEGNR, BTEXT, KONTOS, KONTOH, EBETRAG, ISMASTER, NR from ENTW_SALDO_WDATUM(:GKONTO, :DTVON, :DTBIS, 18,'G','abzgl. Ausgleich Anpassung beschl. VorschÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼sse (Guthaben, EigentÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼mer)')
   into :BETRAG, :TEXT, :DATUM, :BELEGNR, :BTEXT, :KONTOS, :KONTOH, :EBETRAG, :ISMASTER, :ITMP
   DO
    BEGIN
     ITMP2 = ILAUFNR;
     ILAUFNR = ILAUFNR + ITMP;
     IANZ = IANZ + 1;
     RLKONTO = NULL;
     BILANZ = NULL;
     if (ISMASTER = '1') then
      begin
       RSALDO = RSALDO + BETRAG;
       ITMP2 = ILAUFNR;
      end
     SUSPEND;
     ILAUFNR = ITMP2;
    END
   ILAUFNR = ILAUFNR + 1;
   /* Guthaben BEW */
   FOR SELECT BETRAG, TEXT, DATUM, BELEGNR, BTEXT, KONTOS, KONTOH, EBETRAG, ISMASTER, NR from ENTW_SALDO_WDATUM(:GKONTO, :DTVON, :DTBIS, 13,'G','abzgl. Ausgleich Guthaben (Bewohner)')
   into :BETRAG, :TEXT, :DATUM, :BELEGNR, :BTEXT, :KONTOS, :KONTOH, :EBETRAG, :ISMASTER, :ITMP
   DO
    BEGIN
     ITMP2 = ILAUFNR;
     ILAUFNR = ILAUFNR + ITMP;
     IANZ = IANZ + 1;
     RLKONTO = NULL;
     BILANZ = NULL;
     if (ISMASTER = '1') then
      begin
       RSALDO = RSALDO + BETRAG;
       ITMP2 = ILAUFNR;
      end
     SUSPEND;
     ILAUFNR = ITMP2;
    END
   ILAUFNR = ILAUFNR + 1;
   /***************************/
   /**** Umbuchung von RLA auf Bank RLA ***/
   /**************************/
   RTMP = 0;
   for select DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN, BETRAG from buchung where
    arthaben=22 and banknrsoll=:GKONTO and (Datum>=:DTVON and Datum<=:DTBIS)
   into :DATUM, :BELEGNR, :BTEXT, :KONTOS, :KONTOH, :EBETRAG
   do
    begin
     IANZ = IANZ + 1;
     RTMP = RTMP + EBETRAG;
     /* Eintrag */
     TEXT = '';
     BETRAG = NULL;
     RLKONTO = NULL;
     BILANZ = NULL;
     ISMASTER = '2';
     SUSPEND;
    end
   /* Master-Eintrag */
   DATUM = NULL;
   BELEGNR = NULL;
   BTEXT = NULL;
   KONTOS = NULL;
   KONTOH = NULL;
   EBETRAG = NULL;
   ISMASTER = '1';
   BETRAG = RTMP;
   RLKONTO = NULL;
   BILANZ = NULL;
   TEXT = 'zzgl. ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã¢â‚¬Å“bertrag von Festgeldkonten (ErhaltungsrÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼cklagen) auf Girokonto';
   RSALDO = RSALDO + BETRAG;
   if (BETRAG <> 0) then
    SUSPEND;
   ILAUFNR = ILAUFNR + 1;
   /**********************/
   /****AUSGABEN  1,71 ***/
   /**********************/
   FOR SELECT BETRAG, TEXT, DATUM, BELEGNR, BTEXT, KONTOS, KONTOH, EBETRAG, ISMASTER, NR from ENTW_SALDO_WDATUM(:GKONTO, :DTVON, :DTBIS, 0, 'K','')
   into :BETRAG, :TEXT, :DATUM, :BELEGNR, :BTEXT, :KONTOS, :KONTOH, :EBETRAG, :ISMASTER, :ITMP
   DO
    BEGIN
     ITMP2 = ILAUFNR;
     ILAUFNR = ILAUFNR + ITMP;
     IANZ = IANZ + 1;
     RLKONTO = NULL;
     BILANZ = NULL;
     if (ISMASTER = '1') then
      begin
       /*ITMP2 = ITMP2 + 1;*/
       ITMP2 = ILAUFNR;
       BETRAG = -BETRAG;
       RSALDO = RSALDO + BETRAG;
      end
     else
      EBETRAG = -EBETRAG;
     SUSPEND;
     ILAUFNR = ITMP2;
    END
   ILAUFNR = ILAUFNR + 1;
   /***************************/
   /**** Umbuchung auf RLA ***/
   /**************************/
   RTMP = 0;
   for select DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN, BETRAG from buchung where
    artsoll=22 and banknrhaben=:GKONTO and (Datum>=:DTVON and Datum<=:DTBIS)
   into :DATUM, :BELEGNR, :BTEXT, :KONTOS, :KONTOH, :EBETRAG
   do
    begin
     IANZ = IANZ + 1;
     EBETRAG = -EBETRAG;
     RTMP = RTMP + EBETRAG;
     /* Eintrag */
     TEXT = '';
     BETRAG = NULL;
     RLKONTO = NULL;
     BILANZ = NULL;
     ISMASTER = '2';
     SUSPEND;
    end
   /* Master-Eintrag */
   DATUM = NULL;
   BELEGNR = NULL;
   BTEXT = NULL;
   KONTOS = NULL;
   KONTOH = NULL;
   EBETRAG = NULL;
   ISMASTER = '1';
   BETRAG = RTMP;
   RLKONTO = NULL;
   BILANZ = NULL;
   TEXT = 'abzgl. ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã¢â‚¬Å“bertrag an Festgeldkonten (ErhaltungsrÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼cklagen)';
   RSALDO = RSALDO + BETRAG;
   if (BETRAG <> 0) then
    SUSPEND;
   ILAUFNR = ILAUFNR + 1;
   /***********************************/
   /**** Buchungen auf sonstige A/P ***/
   /***********************************/
   for select knr, kklasse, kbez from konten
    where onr=:onr and (kklasse=22 or kklasse=24 or kklasse=27 or kklasse=20) and rlpos is null and (banknr<>:GKONTO or banknr is null)
   into :KNR, :KKLasse, :KBEZ
   do
    begin
     :KBEZ = SUBSTRING(:KBEZ FROM 1 FOR 88);
     /* sonstiges A/P im Soll, Bank im Haben = abgang */
     RTMP = 0;
     for select DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN, BETRAG from buchung where
      KSOLL=:KNR and banknrhaben=:GKONTO and (Datum>=:DTVON and Datum<=:DTBIS)
     into :DATUM, :BELEGNR, :BTEXT, :KONTOS, :KONTOH, :EBETRAG
     do
      begin
       IANZ = IANZ + 1;
       RTMP = RTMP + EBETRAG;
       /* Eintrag */
       TEXT = '';
       BETRAG = NULL;
       RLKONTO = NULL;
       BILANZ = NULL;
       ISMASTER = '2';
       SUSPEND;
      end
     /* Master-Eintrag */
     DATUM = NULL;
     BELEGNR = NULL;
     BTEXT = NULL;
     KONTOS = NULL;
     KONTOH = NULL;
     EBETRAG = NULL;
     ISMASTER = '1';
     RLKONTO = NULL;
     BILANZ = NULL;
     BETRAG = RTMP;
     IF (BETRAG >= 0) THEN
      begin
       TEXT = 'abzgl. Abgang ' || :KBEZ;
       BETRAG = -BETRAG;
      end
     else
      begin
       TEXT = 'zzgl. Zugang ' || :KBEZ;
      end
     RSALDO = RSALDO + BETRAG;
     if (BETRAG <> 0) then
      SUSPEND;
     ILAUFNR = ILAUFNR + 1;
     /* Bank im Soll, sonstiges A/P im Haben = zugang */
     RTMP = 0;
     for select DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN, BETRAG from buchung where
      KHABEN=:KNR and banknrsoll=:GKONTO and (Datum>=:DTVON and Datum<=:DTBIS)
     into :DATUM, :BELEGNR, :BTEXT, :KONTOS, :KONTOH, :EBETRAG
     do
      begin
       IANZ = IANZ + 1;
       RTMP = RTMP + EBETRAG;
       /* Eintrag */
       TEXT = '';
       BETRAG = NULL;
       RLKONTO = NULL;
       BILANZ = NULL;
       ISMASTER = '2';
       SUSPEND;
      end
     /* Master-Eintrag */
     DATUM = NULL;
     BELEGNR = NULL;
     BTEXT = NULL;
     KONTOS = NULL;
     KONTOH = NULL;
     EBETRAG = NULL;
     ISMASTER = '1';
     RLKONTO = NULL;
     BILANZ = NULL;
     BETRAG = RTMP;
     IF (BETRAG >= 0) THEN
      begin
       TEXT = 'zzgl. Zugang ' || :KBEZ;
      end
     else
      BEGIN
       TEXT = 'abzgl. Abgang ' || :KBEZ;
       BETRAG = -BETRAG;
      END
     RSALDO = RSALDO + BETRAG;
     if (BETRAG <> 0) then
      SUSPEND;
     ILAUFNR = ILAUFNR + 1;
    end  /* buchungen auf sonstige A/P */
   /* Endsaldo */
   if ((IANZ > 0) or (GIRO_ALT <> 0)) then
    begin
     select saldo from BANKSALDO_ALT (:GKONTO,:DTBIS_PLUSEINS) INTO GIRO_NEU;
     TEXT='Saldo ' || BANKKURZBEZ || ' per ' || DTBISTEXT;
     SALDO = GIRO_NEU;
     BILANZ = 'EB';
     ISMASTER = '3';
     SUSPEND;
     TEXT = 'Saldo ' || BANKKURZBEZ || ' per ' || DTVONTEXT;
     SALDO = GIRO_ALT;
     BILANZ = 'AB';
     ISMASTER = '0';
     ILAUFNR = IGIROLAUFNR;
     SUSPEND;
     SALDO = 0;
    end
   BILANZ=NULL;
   NR=NR+1;
  END /* was auf der Bank gebucht */
 /*************/
 /* RLA       */
 /*************/
 for select knr, kklasse, kbez from konten
  where onr=:onr and kklasse=22
 into :KNR, :KKLasse, :KBEZ
 do
  begin
   :KBEZ = SUBSTRING(:KBEZ FROM 1 FOR 88);
   RSALDO = 0;
   GKONTO = -1;   
   select NR from rueckbkt where ONR=:ONR and KNR=:KNR into RLKONTO;
   /* Angfangsstand */
   EXECUTE PROCEDURE KONTOSALDO_ALT (:ONR, :KNR, :DTVON, 'J','N') RETURNING_VALUES :GIRO_ALT;
   EXECUTE PROCEDURE KONTOSALDO_ALT (:ONR, :KNR, :DTBIS_PLUSEINS, 'J','N') RETURNING_VALUES :GIRO_NEU;
   IF (GIRO_ALT<>0 or GIRO_NEU<>0) THEN
    BEGIN
     /* Anfangssaldo */
     TEXT = 'Saldo ' || KBEZ || ' per ' || DTVONTEXT;
     BETRAG = null;
     SALDO = GIRO_ALT;
     BILANZ = 'AB';
     ISMASTER = '0';
     SUSPEND;
     BILANZ = NULL;
     SALDO = null;
     RSALDO = RSALDO + GIRO_ALT;
     /* SOLL = ZUF */
     RTMP = 0;
     for select DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN, BETRAG from buchung where
      ONRSOLL=:ONR and ksoll=:KNR AND ARTOP IS NULL and (Datum>=:DTVON and Datum<=:DTBIS)
     into :DATUM, :BELEGNR, :BTEXT, :KONTOS, :KONTOH, :EBETRAG
     do
      begin
       IANZ = IANZ + 1;
       RTMP = RTMP + EBETRAG;
       /* Eintrag */
       TEXT = '';
       BETRAG = NULL;
       RLKONTO = NULL;
       BILANZ = NULL;
       ISMASTER = '2';
       SUSPEND;
      end
     /* Master-Eintrag */
     DATUM = NULL;
     BELEGNR = NULL;
     BTEXT = NULL;
     KONTOS = NULL;
     KONTOH = NULL;
     EBETRAG = NULL;
     ISMASTER = '1';
     BETRAG = RTMP;
     RLKONTO = NULL;
     BILANZ = NULL;
     IF (BETRAG >= 0) THEN
      TEXT = 'zzgl. ZufÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼hrung ErhaltungsrÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼cklagen';
     else
      TEXT = 'abzgl. Entnahme ErhaltungsrÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼cklagen';
     RSALDO = RSALDO + BETRAG;
     if (BETRAG <> 0) then
      SUSPEND;
     ILAUFNR = ILAUFNR + 1;
     /* HABEN = Entnahme */
     RTMP = 0;
     for select DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN, BETRAG from buchung where
      onrhaben=:ONR and khaben=:KNR and ARTOP IS NULL and (Datum>=:DTVON and Datum<=:DTBIS)
     into :DATUM, :BELEGNR, :BTEXT, :KONTOS, :KONTOH, :EBETRAG
     do
      begin
       IANZ = IANZ + 1;
       RTMP = RTMP + EBETRAG;
       /* Eintrag */
       TEXT = '';
       BETRAG = NULL;
       RLKONTO = NULL;
       BILANZ = NULL;
       ISMASTER = '2';
       SUSPEND;
      end
     /* Master-Eintrag */
     DATUM = NULL;
     BELEGNR = NULL;
     BTEXT = NULL;
     KONTOS = NULL;
     KONTOH = NULL;
     EBETRAG = NULL;
     ISMASTER = '1';
     BETRAG = RTMP;
     RLKONTO = NULL;
     BILANZ = NULL;
     IF (BETRAG >= 0) THEN
      BEGIN
       TEXT = 'abzgl. Entnahme ErhaltungsrÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼cklagen';
      END
     else
      begin
       TEXT = 'zzgl. Entnahme ErhaltungsrÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼cklagen';
      end
     BETRAG=-BETRAG;
     RSALDO = RSALDO + BETRAG;
     if (BETRAG <> 0) then
      SUSPEND;
     ILAUFNR = ILAUFNR + 1;
     /* ZINSEN POS bis POS 6 Extra ausweisen */
     select POS1NAME,POS2NAME,POS3NAME,POS4NAME,POS5NAME,POS6NAME,POS7NAME,POS8NAME,POS9NAME,POS10NAME from rueckpos, RUECKBKT
     where (RUECKBKT.onr=:ONR and RUECKBKT.knr=:KNR) and rueckpos.nr=rueckbkt.rueckpos
     into :POS1NAME,:POS2NAME,:POS3NAME,:POS4NAME,:POS5NAME,:POS6NAME,:POS7NAME,:POS8NAME,:POS9NAME,:POS10NAME;
     /* Zinsen etc. */
     DATUM = NULL;
     BELEGNR = NULL;
     BTEXT = NULL;
     KONTOS = NULL;
     KONTOH = NULL;
     EBETRAG = NULL;
     ISMASTER = '1';
     BETRAG = RTMP;
     RLKONTO = NULL;
     BILANZ = NULL;
     for select sum(betrag), artop from buchzahl where BNR IN (
     select BNR from buchung where ONRSOLL=:ONR and ksoll=:KNR and artop=0 and (Datum>=:DTVON and Datum<=:DTBIS))
     group by artop order by artop
     into :BETRAG, :POSNR do
      BEGIN
       IF (BETRAG>=0) THEN
        TEXT='zzgl. ';
       ELSE
        TEXT='abzgl. ';
       IF (POSNR=1) THEN
        TEXT=TEXT || POS1NAME;
       ELSE
        IF (POSNR=2) THEN
         TEXT=TEXT || POS2NAME;
        ELSE
         IF (POSNR=3) THEN
          TEXT=TEXT || POS3NAME;
         ELSE
          IF (POSNR=4) THEN
           TEXT=TEXT || POS4NAME;
          ELSE
           IF (POSNR=5) THEN
            TEXT=TEXT || POS5NAME;
           ELSE
            IF (POSNR=6) THEN
             TEXT=TEXT || POS6NAME;
            ELSE
             IF (POSNR=7) THEN
              TEXT=TEXT || POS7NAME;
             ELSE
              IF (POSNR=8) THEN
               TEXT=TEXT || POS8NAME;
              ELSE
               IF (POSNR=9) THEN
                TEXT=TEXT || POS9NAME; 
               ELSE
                IF (POSNR=10) THEN
                 TEXT=TEXT || POS10NAME;   
       RSALDO = RSALDO + BETRAG;
       IF (BETRAG<>0) THEN
        SUSPEND;
      END
     /* Endstand */
     TEXT = 'Saldo ' || KBEZ || ' per ' || DTBISTEXT;
     SALDO = RSALDO;
     BETRAG = NULL;
     BILANZ = 'EB';
     ISMASTER = '3';
     SUSPEND;
     BILANZ = NULL;
     SALDO = NULL;
     NR = NR + 1;
    end /* Anf Ende <> 0 */
  end /* RLA */
END


-- Prozedur: ENTW_SALDO_WDATUM
CREATE OR ALTER PROCEDURE ENTW_SALDO_WDATUM
DECLARE VARIABLE BETRAG1 NUMERIC(15, 2);
DECLARE VARIABLE BETRAG2 NUMERIC(15, 2);
DECLARE VARIABLE BETRAGT NUMERIC(15, 2);
BEGIN
 IF (TEMPTEXT IS NULL) THEN
  TEMPTEXT = '';
 NR = 0;
 IF (ART = 'N' or ART = 'G' or ART = ' ') THEN
  BEGIN
   /* G/N */
   IF (KLASSE = 13 or KLASSE = 18) THEN
    BEGIN
     /* ZAHLUNG AKTUELLES JAHR */
     IF (ART = 'N' OR ART = ' ') THEN   /* N=NZ, ' ' =BEIDE */
      BEGIN
       IF (KLASSE = 18) THEN
        BEGIN
         BETRAG1 = 0;
         FOR
          SELECT DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN, BETRAG from buchung
          where BANKNRSOLL=:BANKNR and (ARTOP=15 or (ARTOP>=110 and ARTOP<=580)) and (WDatum>=:DTVON and WDatum<=:DTBIS)
          and (Datum>=:DTVON and Datum<=:DTBIS) and Betrag>=0 and GN=1
          union all
          SELECT DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN, SUM(buchzahl.BETRAG) from buchung,buchzahl
          where banknrsoll=:BANKNR and buchung.ARTOP=0 and (WDatum>=:DTVON and WDatum<=:DTBIS) and (Datum>=:DTVON and Datum<=:DTBIS) and buchung.Betrag>=0 and GN=1
          and (buchzahl.ARTOP=15 or (buchzahl.ARTOP>=110 and buchzahl.ARTOP<=580)) and buchzahl.bnr=buchung.bnr
          group by DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN
         INTO DATUM, BELEGNR, BTEXT, KONTOS, KONTOH, EBETRAG
         DO
          BEGIN
           IF (EBETRAG IS NOT NULL and EBETRAG<>0) THEN
            BEGIN
             BETRAG = null;
             TEXT = '';
             ISMASTER = '2';
             BETRAG1 = BETRAG1 + EBETRAG;
             SUSPEND;
            END
          END
        END
       ELSE
        BEGIN
         BETRAG1=0;
         FOR
          SELECT DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN, BETRAG from buchung
          where BANKNRSOLL=:BANKNR and ARTOP=:KLASSE and (WDatum>=:DTVON and WDatum<=:DTBIS)
          and (Datum>=:DTVON and Datum<=:DTBIS) and Betrag>=0 and GN=0
          union all
          SELECT DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN, SUM(buchzahl.BETRAG) from buchung,buchzahl
          where banknrsoll=:BANKNR and buchung.ARTOP=0 and (WDatum>=:DTVON and WDatum<=:DTBIS) and (Datum>=:DTVON and Datum<=:DTBIS) and buchung.Betrag>=0 and GN=0
          and buchzahl.ARTOP=:KLASSE and buchzahl.bnr=buchung.bnr
          group by DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN
         INTO DATUM, BELEGNR, BTEXT, KONTOS, KONTOH, EBETRAG
         DO
          BEGIN
           IF (EBETRAG IS NOT NULL and EBETRAG<>0) THEN
            BEGIN
             BETRAG = null;
             TEXT = '';
             ISMASTER = '2';
             BETRAG1 = BETRAG1 + EBETRAG;
             SUSPEND;
            END
          END
        END
       if (BETRAG1 IS NULL) THEN
        BETRAG1 = 0;
      END
     ELSE
      BETRAG1=0;
     /* Gutschrift */
     IF (ART='G' OR ART=' ') THEN
      BEGIN
       IF (KLASSE=18) THEN
        BEGIN
         BETRAG2 = 0;
         FOR
          SELECT DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN, -BETRAG from buchung
          where BANKNRSOLL=:BANKNR and (ARTOP=15 or (ARTOP>=110 and ARTOP<=580)) and (WDatum>=:DTVON and WDatum<=:DTBIS)
          and (Datum>=:DTVON and Datum<=:DTBIS) and Betrag<0 and GN=1
          union all
          SELECT DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN, -SUM(buchzahl.BETRAG) from buchung,buchzahl
          where banknrsoll=:BANKNR and buchung.ARTOP=0 and (WDatum>=:DTVON and WDatum<=:DTBIS) and (Datum>=:DTVON and Datum<=:DTBIS) and buchung.Betrag<0 and GN=1
          and (buchzahl.ARTOP=15 or (buchzahl.ARTOP>=110 and buchzahl.ARTOP<=580)) and buchzahl.bnr=buchung.bnr
          group by DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN
         INTO DATUM, BELEGNR, BTEXT, KONTOS, KONTOH, EBETRAG
         DO
          BEGIN
           IF (EBETRAG IS NOT NULL and EBETRAG<>0) THEN
            BEGIN
             BETRAG = null;
             TEXT = '';
             ISMASTER = '2';
             BETRAG2 = BETRAG2 + EBETRAG;
             SUSPEND;
            END
          END
        END
       ELSE
        BEGIN
         BETRAG2 = 0;
         FOR
          SELECT DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN, -BETRAG from buchung
          where BANKNRSOLL=:BANKNR and ARTOP=:KLASSE and (WDatum>=:DTVON and WDatum<=:DTBIS)
          and (Datum>=:DTVON and Datum<=:DTBIS) and Betrag<0 and GN=0
          union all
          SELECT DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN, -SUM(buchzahl.BETRAG) from buchung,buchzahl
          where banknrsoll=:BANKNR and buchung.ARTOP=0 and (WDatum>=:DTVON and WDatum<=:DTBIS) and (Datum>=:DTVON and Datum<=:DTBIS) and buchung.Betrag<0 and GN=0
          and buchzahl.ARTOP=:KLASSE and buchzahl.bnr=buchung.bnr
          group by DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN
         INTO DATUM, BELEGNR, BTEXT, KONTOS, KONTOH, EBETRAG
         DO
          BEGIN
           IF (EBETRAG IS NOT NULL and EBETRAG<>0) THEN
            BEGIN
             BETRAG = null;
             TEXT = '';
             ISMASTER = '2';
             BETRAG2 = BETRAG2 + EBETRAG;
             SUSPEND;
            END
          END
        END
       if (BETRAG2 IS NULL) THEN
        BETRAG2=0;
       END
      ELSE
       BETRAG2=0;
     BETRAG = BETRAG1 - BETRAG2;
     TEXT = :TEMPTEXT;
     DATUM = null;
     BELEGNR = null;
     BTEXT = null;
     KONTOS = null;
     KONTOH = null;
     EBETRAG = null;
     ISMASTER = '1';
     IF (BETRAG<>0) THEN
      SUSPEND;
     NR = NR + 1;
     /* ENDE AKTUELLES JAHR */
     /* ZAHLUNG VORHERIGES JAHR */
     IF (ART = 'N' OR ART = ' ') THEN   /* N=NZ, ' ' =BEIDE */
      BEGIN
       IF (KLASSE = 18) THEN
        BEGIN
         BETRAG1 = 0;
         FOR
          SELECT DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN, BETRAG from buchung
          where BANKNRSOLL=:BANKNR and (ARTOP=15 or (ARTOP>=110 and ARTOP<=580)) and WDatum<:DTVON
          and (Datum>=:DTVON and Datum<=:DTBIS) and Betrag>=0 and GN=1
          union all
          SELECT DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN, SUM(buchzahl.BETRAG) from buchung,buchzahl
          where banknrsoll=:BANKNR and buchung.ARTOP=0 and WDatum<:DTVON and (Datum>=:DTVON and Datum<=:DTBIS) and buchung.Betrag>=0 and GN=1
          and (buchzahl.ARTOP=15 or (buchzahl.ARTOP>=110 and buchzahl.ARTOP<=580)) and buchzahl.bnr=buchung.bnr
          group by DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN
         INTO DATUM, BELEGNR, BTEXT, KONTOS, KONTOH, EBETRAG
         DO
          BEGIN
           IF (EBETRAG IS NOT NULL and EBETRAG<>0) THEN
            BEGIN
             BETRAG = null;
             TEXT = '';
             ISMASTER = '2';
             BETRAG1 = BETRAG1 + EBETRAG;
             SUSPEND;
            END
          END
        END
       ELSE
        BEGIN
         BETRAG1=0;
         FOR
          SELECT DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN, BETRAG from buchung
          where BANKNRSOLL=:BANKNR and ARTOP=:KLASSE and WDatum<:DTVON
          and (Datum>=:DTVON and Datum<=:DTBIS) and Betrag>=0 and GN=0
          union all
          SELECT DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN, SUM(buchzahl.BETRAG) from buchung,buchzahl
          where banknrsoll=:BANKNR and buchung.ARTOP=0 and WDatum<:DTVON and (Datum>=:DTVON and Datum<=:DTBIS) and buchung.Betrag>=0 and GN=0
          and buchzahl.ARTOP=:KLASSE and buchzahl.bnr=buchung.bnr
          group by DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN
         INTO DATUM, BELEGNR, BTEXT, KONTOS, KONTOH, EBETRAG
         DO
          BEGIN
           IF (EBETRAG IS NOT NULL and EBETRAG<>0) THEN
            BEGIN
             BETRAG = null;
             TEXT = '';
             ISMASTER = '2';
             BETRAG1 = BETRAG1 + EBETRAG;
             SUSPEND;
            END
          END
        END
       if (BETRAG1 IS NULL) THEN
        BETRAG1 = 0;
      END
     ELSE
      BETRAG1=0;
     /* Gutschrift */
     IF (ART='G' OR ART=' ') THEN
      BEGIN
       IF (KLASSE=18) THEN
        BEGIN
         BETRAG2 = 0;
         FOR
          SELECT DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN, -BETRAG from buchung
          where BANKNRSOLL=:BANKNR and (ARTOP=15 or (ARTOP>=110 and ARTOP<=580)) and WDatum<:DTVON
          and (Datum>=:DTVON and Datum<=:DTBIS) and Betrag<0 and GN=1
          union all
          SELECT DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN, -SUM(buchzahl.BETRAG) from buchung,buchzahl
          where banknrsoll=:BANKNR and buchung.ARTOP=0 and WDatum<:DTVON and (Datum>=:DTVON and Datum<=:DTBIS) and buchung.Betrag<0 and GN=1
          and (buchzahl.ARTOP=15 or (buchzahl.ARTOP>=110 and buchzahl.ARTOP<=580)) and buchzahl.bnr=buchung.bnr
          group by DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN
         INTO DATUM, BELEGNR, BTEXT, KONTOS, KONTOH, EBETRAG
         DO
          BEGIN
           IF (EBETRAG IS NOT NULL and EBETRAG<>0) THEN
            BEGIN
             BETRAG = null;
             TEXT = '';
             ISMASTER = '2';
             BETRAG2 = BETRAG2 + EBETRAG;
             SUSPEND;
            END
          END
        END
       ELSE
        BEGIN
         BETRAG2 = 0;
         FOR
          SELECT DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN, -BETRAG from buchung
          where BANKNRSOLL=:BANKNR and ARTOP=:KLASSE and WDatum<:DTVON
          and (Datum>=:DTVON and Datum<=:DTBIS) and Betrag<0 and GN=0
          union all
          SELECT DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN, -SUM(buchzahl.BETRAG) from buchung,buchzahl
          where banknrsoll=:BANKNR and buchung.ARTOP=0 and WDatum<:DTVON and (Datum>=:DTVON and Datum<=:DTBIS) and buchung.Betrag<0 and GN=0
          and buchzahl.ARTOP=:KLASSE and buchzahl.bnr=buchung.bnr
          group by DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN
         INTO DATUM, BELEGNR, BTEXT, KONTOS, KONTOH, EBETRAG
         DO
          BEGIN
           IF (EBETRAG IS NOT NULL and EBETRAG<>0) THEN
            BEGIN
             BETRAG = null;
             TEXT = '';
             ISMASTER = '2';
             BETRAG2 = BETRAG2 + EBETRAG;
             SUSPEND;
            END
          END
        END
       if (BETRAG2 IS NULL) THEN
        BETRAG2=0;
       END
      ELSE
       BETRAG2=0;
     BETRAG = BETRAG1 - BETRAG2;
     TEXT = :TEMPTEXT || ' fÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼r Vorjahr im Abrechnungszeitraum erhalten';
     DATUM = null;
     BELEGNR = null;
     BTEXT = null;
     KONTOS = null;
     KONTOH = null;
     EBETRAG = null;
     ISMASTER = '1';
     IF (BETRAG<>0) THEN
      SUSPEND;
     NR = NR + 1;
     /* ENDE VORHERIGES JAHR */
     /* ZAHLUNG FOLGE JAHR */
     IF (ART = 'N' OR ART = ' ') THEN   /* N=NZ, ' ' =BEIDE */
      BEGIN
       IF (KLASSE = 18) THEN
        BEGIN
         BETRAG1 = 0;
         FOR
          SELECT DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN, BETRAG from buchung
          where BANKNRSOLL=:BANKNR and (ARTOP=15 or (ARTOP>=110 and ARTOP<=580)) and WDatum>:DTBIS
          and (Datum>=:DTVON and Datum<=:DTBIS) and Betrag>=0 and GN=1
          union all
          SELECT DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN, SUM(buchzahl.BETRAG) from buchung,buchzahl
          where banknrsoll=:BANKNR and buchung.ARTOP=0 and WDatum>:DTBIS and (Datum>=:DTVON and Datum<=:DTBIS) and buchung.Betrag>=0 and GN=1
          and (buchzahl.ARTOP=15 or (buchzahl.ARTOP>=110 and buchzahl.ARTOP<=580)) and buchzahl.bnr=buchung.bnr
          group by DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN
         INTO DATUM, BELEGNR, BTEXT, KONTOS, KONTOH, EBETRAG
         DO
          BEGIN
           IF (EBETRAG IS NOT NULL and EBETRAG<>0) THEN
            BEGIN
             BETRAG = null;
             TEXT = '';
             ISMASTER = '2';
             BETRAG1 = BETRAG1 + EBETRAG;
             SUSPEND;
            END
          END
        END
       ELSE
        BEGIN
         BETRAG1=0;
         FOR
          SELECT DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN, BETRAG from buchung
          where BANKNRSOLL=:BANKNR and ARTOP=:KLASSE and WDatum>:DTBIS
          and (Datum>=:DTVON and Datum<=:DTBIS) and Betrag>=0 and GN=0
          union all
          SELECT DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN, SUM(buchzahl.BETRAG) from buchung,buchzahl
          where banknrsoll=:BANKNR and buchung.ARTOP=0 and WDatum>:DTBIS and (Datum>=:DTVON and Datum<=:DTBIS) and buchung.Betrag>=0 and GN=0
          and buchzahl.ARTOP=:KLASSE and buchzahl.bnr=buchung.bnr
          group by DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN
         INTO DATUM, BELEGNR, BTEXT, KONTOS, KONTOH, EBETRAG
         DO
          BEGIN
           IF (EBETRAG IS NOT NULL and EBETRAG<>0) THEN
            BEGIN
             BETRAG = null;
             TEXT = '';
             ISMASTER = '2';
             BETRAG1 = BETRAG1 + EBETRAG;
             SUSPEND;
            END
          END
        END
       if (BETRAG1 IS NULL) THEN
        BETRAG1 = 0;
      END
     ELSE
      BETRAG1=0;
     /* Gutschrift */
     IF (ART='G' OR ART=' ') THEN
      BEGIN
       IF (KLASSE=18) THEN
        BEGIN
         BETRAG2 = 0;
         FOR
          SELECT DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN, -BETRAG from buchung
          where BANKNRSOLL=:BANKNR and (ARTOP=15 or (ARTOP>=110 and ARTOP<=580)) and WDatum>:DTBIS
          and (Datum>=:DTVON and Datum<=:DTBIS) and Betrag<0 and GN=1
          union all
          SELECT DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN, -SUM(buchzahl.BETRAG) from buchung,buchzahl
          where banknrsoll=:BANKNR and buchung.ARTOP=0 and WDatum>:DTBIS and (Datum>=:DTVON and Datum<=:DTBIS) and buchung.Betrag<0 and GN=1
          and (buchzahl.ARTOP=15 or (buchzahl.ARTOP>=110 and buchzahl.ARTOP<=580)) and buchzahl.bnr=buchung.bnr
          group by DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN
         INTO DATUM, BELEGNR, BTEXT, KONTOS, KONTOH, EBETRAG
         DO
          BEGIN
           IF (EBETRAG IS NOT NULL and EBETRAG<>0) THEN
            BEGIN
             BETRAG = null;
             TEXT = '';
             ISMASTER = '2';
             BETRAG2 = BETRAG2 + EBETRAG;
             SUSPEND;
            END
          END
        END
       ELSE
        BEGIN
         BETRAG2 = 0;
         FOR
          SELECT DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN, -BETRAG from buchung
          where BANKNRSOLL=:BANKNR and ARTOP=:KLASSE and WDatum>:DTBIS
          and (Datum>=:DTVON and Datum<=:DTBIS) and Betrag<0 and GN=0
          union all
          SELECT DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN, -SUM(buchzahl.BETRAG) from buchung,buchzahl
          where banknrsoll=:BANKNR and buchung.ARTOP=0 and WDatum>:DTBIS and (Datum>=:DTVON and Datum<=:DTBIS) and buchung.Betrag<0 and GN=0
          and buchzahl.ARTOP=:KLASSE and buchzahl.bnr=buchung.bnr
          group by DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN
         INTO DATUM, BELEGNR, BTEXT, KONTOS, KONTOH, EBETRAG
         DO
          BEGIN
           IF (EBETRAG IS NOT NULL and EBETRAG<>0) THEN
            BEGIN
             BETRAG = null;
             TEXT = '';
             ISMASTER = '2';
             BETRAG2 = BETRAG2 + EBETRAG;
             SUSPEND;
            END
          END
        END
       if (BETRAG2 IS NULL) THEN
        BETRAG2=0;
       END
      ELSE
       BETRAG2=0;
     BETRAG = BETRAG1 - BETRAG2;
     TEXT = :TEMPTEXT || ' fÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼r Folgejahr im Abrechnungszeitraum erhalten';
     DATUM = null;
     BELEGNR = null;
     BTEXT = null;
     KONTOS = null;
     KONTOH = null;
     EBETRAG = null;
     ISMASTER = '1';
     IF (BETRAG<>0) THEN
      SUSPEND;
     /* ENDE FOLGE JAHR */
     NR = NR + 1;
    END
   ELSE
    IF (KLASSE=19) THEN  /* Sonstige Einnahmen nur im Zeitraum Datum*/
     BEGIN
      BETRAG1 = 0;
      for select DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN, BETRAG from buchung where
       banknrsoll=:BANKNR and arthaben=64 and (Datum>=:DTVON and Datum<=:DTBIS)
      into DATUM, BELEGNR, BTEXT, KONTOS, KONTOH, EBETRAG
      do
       begin
        IF (EBETRAG IS NOT NULL and EBETRAG<>0) THEN
         BEGIN
          BETRAG = null;
          TEXT = '';
          ISMASTER = '2';
          BETRAG1 = BETRAG1 + EBETRAG;
          SUSPEND;
         END
       end
      /*  */
      BETRAG2 = 0;
      for select DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN, BETRAG from buchung where
       banknrhaben=:BANKNR and artsoll=64 and (Datum>=:DTVON and Datum<=:DTBIS)
      into DATUM, BELEGNR, BTEXT, KONTOS, KONTOH, EBETRAG
      do
       begin
        IF (EBETRAG IS NOT NULL and EBETRAG<>0) THEN
         BEGIN
          BETRAG = null;
          TEXT = '';
          ISMASTER = '2';
          BETRAG2 = BETRAG2 + EBETRAG;
          SUSPEND;
         END
       end
      BETRAGT = BETRAG1 - BETRAG2;
      /* DIREKT auf Einnahmekonto Klasse 19 gebucht */
      BETRAG1 = 0;
      for select DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN, BETRAG from buchung where
       banknrsoll=:BANKNR and arthaben=:KLASSE and (Datum>=:DTVON and Datum<=:DTBIS)
      into DATUM, BELEGNR, BTEXT, KONTOS, KONTOH, EBETRAG
      do
       begin
        IF (EBETRAG IS NOT NULL and EBETRAG<>0) THEN
         BEGIN
          BETRAG = null;
          TEXT = '';
          ISMASTER = '2';
          BETRAG1 = BETRAG1 + EBETRAG;
          SUSPEND;
         END
       end
      BETRAGT = BETRAGT + BETRAG1;
      /*  */
      BETRAG2 = 0;
      for select DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN, BETRAG from buchung where
       banknrhaben=:BANKNR and artsoll=:KLASSE and (Datum>=:DTVON and Datum<=:DTBIS)
      into DATUM, BELEGNR, BTEXT, KONTOS, KONTOH, EBETRAG
      do
       begin
        IF (EBETRAG IS NOT NULL and EBETRAG<>0) THEN
         BEGIN
          BETRAG = null;
          TEXT = '';
          ISMASTER = '2';
          BETRAG2 = BETRAG2 + EBETRAG;
          SUSPEND;
         END
       end
      BETRAGT = BETRAGT - BETRAG2;
      /*Zahlungen, sonstige Einnahmekonten*/
      BETRAG2 = 0;
      for select DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN, BETRAG from buchung where
       banknrsoll=:BANKNR and artop=19 and (Datum>=:DTVON and Datum<=:DTBIS)
      into DATUM, BELEGNR, BTEXT, KONTOS, KONTOH, EBETRAG
      do
       begin
        IF (EBETRAG IS NOT NULL and EBETRAG<>0) THEN
         BEGIN
          BETRAG = null;
          TEXT = '';
          ISMASTER = '2';
          BETRAG2 = BETRAG2 + EBETRAG;
          SUSPEND;
         END
       end
      BETRAGT = BETRAGT + BETRAG2;
      /*Zahlung ENDE*/
      BETRAG = BETRAGT;
      TEXT = :TEMPTEXT;
      DATUM = null;
      BELEGNR = null;
      BTEXT = null;
      KONTOS = null;
      KONTOH = null;
      EBETRAG = null;
      ISMASTER = '1';
      IF (BETRAG<>0) THEN
       SUSPEND;
      NR = NR + 1;
     END                /* Sonstige Einnahmen */
    ELSE
     /* SPLIT */
     BEGIN
      /* ZAHLUNG */
      /* AKTUELLES JAHR */
      BETRAG1=0;
      BETRAG2=0;
      BETRAG=0;
      FOR
       SELECT DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN, BETRAG from buchung
       where BANKNRSOLL=:BANKNR and ARTOP=:KLASSE and (WDatum>=:DTVON and WDatum<=:DTBIS)
       and (Datum>=:DTVON and Datum<=:DTBIS) and GN=0
       union all
       SELECT DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN, SUM(buchzahl.BETRAG) from buchung,buchzahl
       where banknrsoll=:BANKNR and buchung.ARTOP=0 and (WDatum>=:DTVON and WDatum<=:DTBIS) and (Datum>=:DTVON and Datum<=:DTBIS) and GN=0
       and buchzahl.ARTOP=:KLASSE and buchzahl.bnr=buchung.bnr
       group by DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN
      INTO DATUM, BELEGNR, BTEXT, KONTOS, KONTOH, EBETRAG
      DO
       BEGIN
        IF (EBETRAG IS NOT NULL and EBETRAG<>0) THEN
         BEGIN
          BETRAG = null;
          TEXT = '';
          ISMASTER = '2';
          BETRAG1 = BETRAG1 + EBETRAG;
          SUSPEND;
         END
       END
      /*  */
      IF (BETRAG1 <> 0) THEN
       BEGIN
        BETRAG = BETRAG1;
        TEXT = :TEMPTEXT;
        DATUM = null;
        BELEGNR = null;
        BTEXT = null;
        KONTOS = null;
        KONTOH = null;
        EBETRAG = null;
        ISMASTER = '1';
        SUSPEND;
        NR = NR + 1;
       END
      /* ENDE AKTUELLES JAHR */
      /* VORHERIGES JAHR */
      BETRAG1=0;
      BETRAG2=0;
      BETRAG=0;
      FOR
       SELECT DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN, BETRAG from buchung
       where BANKNRSOLL=:BANKNR and ARTOP=:KLASSE and WDatum<:DTVON
       and (Datum>=:DTVON and Datum<=:DTBIS) and GN=0
       union all
       SELECT DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN, SUM(buchzahl.BETRAG) from buchung,buchzahl
       where banknrsoll=:BANKNR and buchung.ARTOP=0 and WDatum<:DTVON and (Datum>=:DTVON and Datum<=:DTBIS) and GN=0
       and buchzahl.ARTOP=:KLASSE and buchzahl.bnr=buchung.bnr
       group by DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN
      INTO DATUM, BELEGNR, BTEXT, KONTOS, KONTOH, EBETRAG
      DO
       BEGIN
        IF (EBETRAG IS NOT NULL and EBETRAG<>0) THEN
         BEGIN
          BETRAG = null;
          TEXT = '';
          ISMASTER = '2';
          BETRAG1 = BETRAG1 + EBETRAG;
          SUSPEND;
         END
       END
      /*  */
      IF (BETRAG1 <> 0) THEN
       BEGIN
        BETRAG = BETRAG1;
        TEXT = :TEMPTEXT || ' fÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼r Vorjahr im Abrechnungszeitraum erhalten';
        DATUM = null;
        BELEGNR = null;
        BTEXT = null;
        KONTOS = null;
        KONTOH = null;
        EBETRAG = null;
        ISMASTER = '1';
        SUSPEND;
        NR = NR + 1;
       END
      /* ENDE VORHERIGES JAHR */
      /* FOLGE JAHR */
      BETRAG1=0;
      BETRAG2=0;
      BETRAG=0;
      FOR
       SELECT DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN, BETRAG from buchung
       where BANKNRSOLL=:BANKNR and ARTOP=:KLASSE and WDatum>:DTBIS
       and (Datum>=:DTVON and Datum<=:DTBIS) and GN=0
       union all
       SELECT DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN, SUM(buchzahl.BETRAG) from buchung,buchzahl
       where banknrsoll=:BANKNR and buchung.ARTOP=0 and WDatum>:DTBIS and (Datum>=:DTVON and Datum<=:DTBIS) and GN=0
       and buchzahl.ARTOP=:KLASSE and buchzahl.bnr=buchung.bnr
       group by DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN
      INTO DATUM, BELEGNR, BTEXT, KONTOS, KONTOH, EBETRAG
      DO
       BEGIN
        IF (EBETRAG IS NOT NULL and EBETRAG<>0) THEN
         BEGIN
          BETRAG = null;
          TEXT = '';
          ISMASTER = '2';
          BETRAG1 = BETRAG1 + EBETRAG;
          SUSPEND;
         END
       END
      /*  */
      IF (BETRAG1 <> 0) THEN
       BEGIN
        BETRAG = BETRAG1;
        TEXT = :TEMPTEXT || ' fÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼r Folgejahr im Abrechnungszeitraum erhalten';
        DATUM = null;
        BELEGNR = null;
        BTEXT = null;
        KONTOS = null;
        KONTOH = null;
        EBETRAG = null;
        ISMASTER = '1';
        SUSPEND;
        NR = NR + 1;
       END
      /* ENDE FOLGE JAHR */
     END
  END /* SPLIT */
 ELSE
  IF (ART='K') THEN
   BEGIN /* ART = K Kosten */
    /* Noch die Kosten fÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼r dieses Jahr */
    BETRAG1 = 0;
    FOR
     SELECT DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN, BETRAG from buchung
     where banknrsoll=:BANKNR and arthaben=71 and (WDatum>=:DTVON and WDatum<=:DTBIS) and (Datum>=:DTVON and Datum<=:DTBIS)
    INTO DATUM, BELEGNR, BTEXT, KONTOS, KONTOH, EBETRAG
    DO
     BEGIN
      IF (EBETRAG IS NOT NULL and EBETRAG<>0) THEN
       BEGIN
        BETRAG = null;
        TEXT = '';
        ISMASTER = '2';
        BETRAG1 = BETRAG1 + EBETRAG;
        SUSPEND;
       END
     END
    /*  */
    BETRAG2 = 0;
    FOR
     SELECT DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN, BETRAG from buchung
     where banknrhaben=:BANKNR and artsoll=71 and (WDatum>=:DTVON and WDatum<=:DTBIS) and (Datum>=:DTVON and Datum<=:DTBIS)
    INTO DATUM, BELEGNR, BTEXT, KONTOS, KONTOH, EBETRAG
    DO
     BEGIN
      IF (EBETRAG IS NOT NULL and EBETRAG<>0) THEN
       BEGIN
        BETRAG = null;
        TEXT = '';
        ISMASTER = '2';
        BETRAG2 = BETRAG2 + EBETRAG;
        SUSPEND;
       END
     END
    BETRAGT = BETRAG2 - BETRAG1;
    /* DIREKT gebucht */
    BETRAG1 = 0;
    FOR
     SELECT DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN, BETRAG from buchung
     where banknrsoll=:BANKNR and arthaben=1 and (WDatum>=:DTVON and WDatum<=:DTBIS) and (Datum>=:DTVON and Datum<=:DTBIS)
    INTO DATUM, BELEGNR, BTEXT, KONTOS, KONTOH, EBETRAG
    DO
     BEGIN
      IF (EBETRAG IS NOT NULL and EBETRAG<>0) THEN
       BEGIN
        BETRAG = null;
        TEXT = '';
        ISMASTER = '2';
        BETRAG1 = BETRAG1 + EBETRAG;
        SUSPEND;
       END
     END
    BETRAGT = BETRAGT - BETRAG1;
    /*  */
    BETRAG2 = 0;
    FOR
     SELECT DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN, BETRAG from buchung
     where banknrhaben=:BANKNR and artsoll=1 and (WDatum>=:DTVON and WDatum<=:DTBIS) and (Datum>=:DTVON and Datum<=:DTBIS)
    INTO DATUM, BELEGNR, BTEXT, KONTOS, KONTOH, EBETRAG
    DO
     BEGIN
      IF (EBETRAG IS NOT NULL and EBETRAG<>0) THEN
       BEGIN
        BETRAG = null;
        TEXT = '';
        ISMASTER = '2';
        BETRAG2 = BETRAG2 + EBETRAG;
        SUSPEND;
       END
     END
    BETRAGT = BETRAGT + BETRAG2;
    /*  */
    BETRAG = BETRAGT;
    IF (BETRAG>=0) THEN
     TEXT='abzgl. Bewirtschaftungskosten im Abrechnungszeitraum';
    ELSE
     TEXT='zzgl. Bewirtschaftungskosten im Abrechnungszeitraum';
    DATUM = null;
    BELEGNR = null;
    BTEXT = null;
    KONTOS = null;
    KONTOH = null;
    EBETRAG = null;
    ISMASTER = '1';
    IF (BETRAG <>0) THEN
     SUSPEND;
    NR = NR + 1;
    /* Noch die Kosten fÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼r dieses Jahr */
    /* Noch die Kosten fÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼r nÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤chstes Jahr in diesem Jahr */
    BETRAG1 = 0;
    FOR
     SELECT DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN, BETRAG from buchung
     where banknrsoll=:BANKNR and arthaben=71 and WDatum>:DTBIS and (Datum>=:DTVON and Datum<=:DTBIS)
    INTO DATUM, BELEGNR, BTEXT, KONTOS, KONTOH, EBETRAG
    DO
     BEGIN
      IF (EBETRAG IS NOT NULL and EBETRAG<>0) THEN
       BEGIN
        BETRAG = null;
        TEXT = '';
        ISMASTER = '2';
        BETRAG1 = BETRAG1 + EBETRAG;
        SUSPEND;
       END
     END
    /*  */
    BETRAG2 = 0;
    FOR
     SELECT DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN, BETRAG from buchung
     where banknrhaben=:BANKNR and artsoll=71 and WDatum>:DTBIS and (Datum>=:DTVON and Datum<=:DTBIS)
    INTO DATUM, BELEGNR, BTEXT, KONTOS, KONTOH, EBETRAG
    DO
     BEGIN
      IF (EBETRAG IS NOT NULL and EBETRAG<>0) THEN
       BEGIN
        BETRAG = null;
        TEXT = '';
        ISMASTER = '2';
        BETRAG2 = BETRAG2 + EBETRAG;
        SUSPEND;
       END
     END
    BETRAGT = BETRAG2 - BETRAG1;
    /* DIREKT gebucht */
    BETRAG1 = 0;
    FOR
     SELECT DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN, BETRAG from buchung
     where banknrsoll=:BANKNR and arthaben=1 and WDatum>:DTBIS and (Datum>=:DTVON and Datum<=:DTBIS)
    INTO DATUM, BELEGNR, BTEXT, KONTOS, KONTOH, EBETRAG
    DO
     BEGIN
      IF (EBETRAG IS NOT NULL and EBETRAG<>0) THEN
       BEGIN
        BETRAG = null;
        TEXT = '';
        ISMASTER = '2';
        BETRAG1 = BETRAG1 + EBETRAG;
        SUSPEND;
       END
     END
    BETRAGT = BETRAGT - BETRAG1;
    /*  */
    BETRAG2 = 0;
    FOR
     SELECT DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN, BETRAG from buchung
     where banknrhaben=:BANKNR and artsoll=1 and WDatum>:DTBIS and (Datum>=:DTVON and Datum<=:DTBIS)
    INTO DATUM, BELEGNR, BTEXT, KONTOS, KONTOH, EBETRAG
    DO
     BEGIN
      IF (EBETRAG IS NOT NULL and EBETRAG<>0) THEN
       BEGIN
        BETRAG = null;
        TEXT = '';
        ISMASTER = '2';
        BETRAG2 = BETRAG2 + EBETRAG;
        SUSPEND;
       END
     END
    BETRAGT = BETRAGT + BETRAG2;
    /*  */
    BETRAG = BETRAGT;
    IF (BETRAG>=0) THEN
     TEXT='abzgl. Bewirtschaftungskosten fÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼r Folgejahr im Abrechnungszeitraum gebucht';
    ELSE
     TEXT='zzgl. Bewirtschaftungskosten fÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼r Folgejahr im Abrechnungszeitraum gebucht';
    DATUM = null;
    BELEGNR = null;
    BTEXT = null;
    KONTOS = null;
    KONTOH = null;
    EBETRAG = null;
    ISMASTER = '1';
    IF (BETRAG <>0) THEN
     SUSPEND;
    NR = NR + 1;
    /* Noch die Kosten fÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼r nÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤chstes Jahr in diesem Jahr */
    /* Noch die Kosten fÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼r voriges Jahr in diesem Jahr */
    BETRAG1 = 0;
    FOR
     SELECT DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN, BETRAG from buchung
     where banknrsoll=:BANKNR and arthaben=71 and WDatum<:DTVON and (Datum>=:DTVON and Datum<=:DTBIS)
    INTO DATUM, BELEGNR, BTEXT, KONTOS, KONTOH, EBETRAG
    DO
     BEGIN
      IF (EBETRAG IS NOT NULL and EBETRAG<>0) THEN
       BEGIN
        BETRAG = null;
        TEXT = '';
        ISMASTER = '2';
        BETRAG1 = BETRAG1 + EBETRAG;
        SUSPEND;
       END
     END
    /*  */
    BETRAG2 = 0;
    FOR
     SELECT DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN, BETRAG from buchung
     where banknrhaben=:BANKNR and artsoll=71 and WDatum<:DTVON and (Datum>=:DTVON and Datum<=:DTBIS)
    INTO DATUM, BELEGNR, BTEXT, KONTOS, KONTOH, EBETRAG
    DO
     BEGIN
      IF (EBETRAG IS NOT NULL and EBETRAG<>0) THEN
       BEGIN
        BETRAG = null;
        TEXT = '';
        ISMASTER = '2';
        BETRAG2 = BETRAG2 + EBETRAG;
        SUSPEND;
       END
     END
    BETRAGT = BETRAG2 - BETRAG1;
    /* DIREKT gebucht */
    BETRAG1 = 0;
    FOR
     SELECT DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN, BETRAG from buchung
     where banknrsoll=:BANKNR and arthaben=1 and WDatum<:DTVON and (Datum>=:DTVON and Datum<=:DTBIS)
    INTO DATUM, BELEGNR, BTEXT, KONTOS, KONTOH, EBETRAG
    DO
     BEGIN
      IF (EBETRAG IS NOT NULL and EBETRAG<>0) THEN
       BEGIN
        BETRAG = null;
        TEXT = '';
        ISMASTER = '2';
        BETRAG1 = BETRAG1 + EBETRAG;
        SUSPEND;
       END
     END
    BETRAGT = BETRAGT - BETRAG1;
    /*  */
    BETRAG2 = 0;
    FOR
     SELECT DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN, BETRAG from buchung
     where banknrhaben=:BANKNR and artsoll=1 and WDatum<:DTVON and (Datum>=:DTVON and Datum<=:DTBIS)
    INTO DATUM, BELEGNR, BTEXT, KONTOS, KONTOH, EBETRAG
    DO
     BEGIN
      IF (EBETRAG IS NOT NULL and EBETRAG<>0) THEN
       BEGIN
        BETRAG = null;
        TEXT = '';
        ISMASTER = '2';
        BETRAG2 = BETRAG2 + EBETRAG;
        SUSPEND;
       END
     END
    BETRAGT = BETRAGT + BETRAG2;
    /*  */
    BETRAG = BETRAGT;
    IF (BETRAG>=0) THEN
     TEXT='abzgl. Bewirtschaftungskosten fÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼r Vorjahr im Abrechnungszeitraum gebucht';
    ELSE
     TEXT='zzgl. Bewirtschaftungskosten fÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼r Vorjahr im Abrechnungszeitraum gebucht';
    DATUM = null;
    BELEGNR = null;
    BTEXT = null;
    KONTOS = null;
    KONTOH = null;
    EBETRAG = null;
    ISMASTER = '1';
    IF (BETRAG <>0) THEN
     SUSPEND;
    NR = NR + 1;
    /* Noch die Kosten fÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼r voriges Jahr in diesem Jahr */
   END /* Kosten */
  ELSE
   IF (ART='B') THEN
    BEGIN /* ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã¢â‚¬Å“bertrag sonstige A/P */
     BETRAG1 = 0;
     FOR
      SELECT DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN, BETRAG from buchung
      where artsoll=:KLASSE and banknrhaben=:BANKNR and (Datum>=:DTVON and Datum<=:DTBIS)
     INTO DATUM, BELEGNR, BTEXT, KONTOS, KONTOH, EBETRAG
     DO
      BEGIN
       IF (EBETRAG IS NOT NULL and EBETRAG<>0) THEN
        BEGIN
         BETRAG = null;
         TEXT = '';
         ISMASTER = '2';
         BETRAG1 = BETRAG1 + EBETRAG;
         SUSPEND;
        END
      END
     /*  */
     IF (BETRAG1 <> 0) THEN
      begin
       BETRAG = -BETRAG1;
       TEXT = :TEMPTEXT;
       DATUM = null;
       BELEGNR = null;
       BTEXT = null;
       KONTOS = null;
       KONTOH = null;
       EBETRAG = null;
       ISMASTER = '1';
       SUSPEND;
       NR = NR + 1;
      end
     /*  */
     BETRAG1 = 0;
     FOR
      SELECT DATUM, BELEGNR, TEXT, KSTRSOLL, KSTRHABEN, BETRAG from buchung
      where arthaben=:KLASSE and banknrsoll=:BANKNR and (Datum>=:DTVON and Datum<=:DTBIS)
     INTO DATUM, BELEGNR, BTEXT, KONTOS, KONTOH, EBETRAG
     DO
      BEGIN
       IF (EBETRAG IS NOT NULL and EBETRAG<>0) THEN
        BEGIN
         BETRAG = null;
         TEXT = '';
         ISMASTER = '2';
         BETRAG1 = BETRAG1 + EBETRAG;
         SUSPEND;
        END
      END
     /*  */
     IF (BETRAG1 <> 0) THEN
      begin
       BETRAG = BETRAG1;
       TEXT = :TEMPTEXT;
       DATUM = null;
       BELEGNR = null;
       BTEXT = null;
       KONTOS = null;
       KONTOH = null;
       EBETRAG = null;
       ISMASTER = '1';
       SUSPEND;
       NR = NR + 1;
      end
    END /* ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã¢â‚¬Å“bertrag sonstige A/P */
END


-- Prozedur: GET_ANZ_LASTSCHRIFTEN
CREATE OR ALTER PROCEDURE GET_ANZ_LASTSCHRIFTEN
DECLARE VARIABLE IANZ integer;
BEGIN
 IANZ=0;
 IF (IS_DTA='N') THEN
  BEGIN
   IF (A_BLZ<>'') THEN     /* PRO BLZ */
   FOR SELECT
    COUNT(BNR) from buchung
    WHERE (ARTSOLL=60 or ARTSOLL=62) and OPBETRAG>0.001 and LBNR IS NULL and SPLITNR IS NULL
     and LASTBANK IN (SELECT BANKEN.NR FROM BANKEN  WHERE ((BANKEN.BLZ=:A_BLZ) or (BANKEN.BIC=:A_BLZ)) AND BANKEN.ART=0)
   UNION
    SELECT COUNT(buchung.BNR) from buchung, splitbuch
    WHERE (ARTSOLL=60 or ARTSOLL=62) and splitbuch.OPBETRAG>0.001 and LBNR IS NULL
    and LASTBANK IN (SELECT BANKEN.NR FROM BANKEN  WHERE BANKEN.BLZ=:A_BLZ AND BANKEN.ART=0)
    and SPLITNR IS  NOT NULL
    AND buchung.bnr=splitbuch.bnr
    INTO :ANZ
   DO
    IANZ=IANZ+ANZ;
   ELSE
   /* PRO KONTO */
   /*           */
     FOR SELECT
      COUNT(BNR) from buchung
      WHERE (ARTSOLL=60 or ARTSOLL=62) and OPBETRAG>0.001 and LBNR IS NULL and LASTBANK=:A_KONTO and SPLITNR IS NULL
      UNION
      SELECT COUNT(buchung.BNR) from buchung, splitbuch
      WHERE (ARTSOLL=60 or ARTSOLL=62) and splitbuch.OPBETRAG>0.001 and LBNR IS NULL and LASTBANK=:A_KONTO and SPLITNR IS  NOT NULL
      AND buchung.bnr=splitbuch.bnr
      INTO :ANZ
      DO
       IANZ=IANZ+ANZ;
   ANZ=IANZ;
   SUSPEND;
  END
 ELSE
  BEGIN
   IF (A_BLZ<>'') THEN     /* PRO BLZ */
    BEGIN
     select COUNT(BNR) from buchung
     WHERE (ARTSOLL=60 or ARTSOLL=62) and OPBETRAG>0.001 and LBNR IS NULL and (LASTERZEUGT=0 or LASTERZEUGT IS NULL)
     and LASTBANK IN (SELECT BANKEN.NR FROM BANKEN  WHERE ((BANKEN.BLZ=:A_BLZ) or (BANKEN.BIC=:A_BLZ)) AND BANKEN.ART=0)
     into :ANZ;
    END
   ELSE
    BEGIN
     FOR SELECT /* PRO KONTO */
      COUNT(BNR) from buchung
      WHERE (ARTSOLL=60 or ARTSOLL=62) and OPBETRAG>0.001 and LBNR IS NULL and LASTBANK=:A_KONTO and SPLITNR IS NULL and (LASTERZEUGT=0 or LASTERZEUGT IS NULL)
      UNION
      SELECT COUNT(buchung.BNR) from buchung, splitbuch
      WHERE (ARTSOLL=60 or ARTSOLL=62) and splitbuch.OPBETRAG>0.001 and LBNR IS NULL and LASTBANK=:A_KONTO and SPLITNR IS  NOT NULL and (LASTERZEUGT=0 or LASTERZEUGT IS NULL)
      AND buchung.bnr=splitbuch.bnr
      INTO :ANZ
      DO
       IANZ=IANZ+ANZ;
      ANZ=IANZ;
    END
   SUSPEND;
  END
END


-- Prozedur: GET_BETREUT
CREATE OR ALTER PROCEDURE GET_BETREUT
DECLARE VARIABLE vONR INTEGER;
DECLARE VARIABLE vKNR INTEGER;
DECLARE VARIABLE vGES INTEGER;
DECLARE VARIABLE vTOD INTEGER;
DECLARE VARIABLE vHAU INTEGER;
DECLARE VARIABLE vFA1 INTEGER;
DECLARE VARIABLE vFA2 INTEGER;
DECLARE VARIABLE vA1 INTEGER;
DECLARE VARIABLE vA2 INTEGER;
DECLARE VARIABLE vA3 INTEGER;
DECLARE VARIABLE vTyp INTEGER;
DECLARE VARIABLE vEIG INTEGER;
BEGIN
  /* Procedure body */
  SELECT ONR,KNR,PFLEGESTUFE,PFLEGEORGA,VERSICHERUNG1,VNUMMER1,VTEL1,VFAX1,VSTRASSE1,
         VORT1,VBEARBEITER1,VERSICHERUNG2,VNUMMER2,VTEL2,VFAX2 ,VSTRASSE2 ,VORT2 ,
         VBEARBEITER2 ,VORKEHRUNGEN ,KRANKHEIT ,DAUERMED ,BEDARFMED ,HILFSMITTEL ,
         PFLEGELEISTUNGEN ,PVER , VV ,BVER ,FACHA1ID,FACHA2ID ,HAUSAID , TODID ,
         GESCHAEFTID ,SONSTLEISTUNGEN ,ANG1ID ,ANG2ID ,ANG3ID ,GEBURTSTAG ,GEBURTSORT ,
         GEBURTSNAME ,KONFESSION, FAMILIENSTAND,INTERESSEN,PROBLEME,ESSEN FROM betreut WHERE ONR =:iONR AND KNR=:iKNR
  INTO vONR, vKNR, :PFLEGESTUFE,:PFLEGEORGA,:VERSICHERUNG1,:VNUMMER1,:VTEL1,:VFAX1,:VSTRASSE1,
         :VORT1,:VBEARBEITER1,:VERSICHERUNG2,:VNUMMER2,:VTEL2,:VFAX2 ,:VSTRASSE2 ,:VORT2 ,
         :VBEARBEITER2 ,:VORKEHRUNGEN ,:KRANKHEIT ,:DAUERMED ,:BEDARFMED ,:HILFSMITTEL ,
         :PFLEGELEISTUNGEN ,:PVER , :VV ,:BVER ,vFA1,vFA2 ,vHAU , vTOD ,
         vGES ,:SONSTLEISTUNGEN ,vA1 ,vA2 ,vA3 ,:GEBURTSTAG ,:GEBURTSORT ,
         :GEBURTSNAME ,:KONFESSION, :FAMILIENSTAND,:INTERESSEN,:PROBLEME,:ESSEN;

  SELECT BSONST FROM objekte WHERE ONR = :vONR
  INTO vTyp;

  IF (vTyp = 1) THEN
   BEGIN
    SELECT EIGNR FROM eigentuemer WHERE ONR = :vONR AND KNR = :vKNR
    INTO vEIG;
    SELECT ENAME,EVNAME FROM eigadr WHERE EIGNR = :vEIG
    INTO :NAME, :VNAME;
    ENR = (vKNR - 200000)/100;
   END
  ELSE
   BEGIN
--    SELECT BNAME,BVNAME FROM bewohner WHERE ONR = :vONR AND KNR = :vKNR
    SELECT ba.BNAME,ba.BVNAME 
    FROM bewohner b, bewadr ba 
    WHERE b.bewnr=ba.bewnr and ONR = :vONR AND KNR = :vKNR
    INTO :NAME, :VNAME;
    ENR = (vKNR - 100000)/100;
   END
  ONR = vONR;

  SELECT NAME, VORNAME, TEL1, TEL2, MOBIL FROM lieferan WHERE KNR =: vTOD
  INTO :TNAME,:TVNAME,:TTEL1,:TTEL2,:TMOBIL;

  SELECT NAME, VORNAME, TEL1, TEL2, MOBIL FROM lieferan WHERE KNR =: vGES
  INTO :GNAME,:GVNAME,:GTEL1,:GTEL2,:GMOBIL;

  SELECT NAME, VORNAME, TEL1, TEL2, MOBIL FROM lieferan WHERE KNR =: vHAU
  INTO :HNAME,:HVNAME,:HTEL1,:HTEL2,:HMOBIL;

  SELECT NAME, VORNAME, TEL1, TEL2, MOBIL FROM lieferan WHERE KNR =: vFA1
  INTO :F1NAME,:F1VNAME,:F1TEL1,:F1TEL2,:F1MOBIL;

  SELECT NAME, VORNAME, TEL1, TEL2, MOBIL FROM lieferan WHERE KNR =: vFA2
  INTO :F2NAME,:F2VNAME,:F2TEL1,:F2TEL2,:F2MOBIL;

  SELECT NAME, VORNAME, TEL1, TEL2, MOBIL FROM lieferan WHERE KNR =: vA1
  INTO :F2NAME,:F2VNAME,:F2TEL1,:F2TEL2,:F2MOBIL;

  SELECT NAME, VORNAME, TEL1, TEL2, MOBIL FROM lieferan WHERE KNR =: vA2
  INTO :F2NAME,:F2VNAME,:F2TEL1,:F2TEL2,:F2MOBIL;

  SELECT NAME, VORNAME, TEL1, TEL2, MOBIL FROM lieferan WHERE KNR =: vA3
  INTO :F2NAME,:F2VNAME,:F2TEL1,:F2TEL2,:F2MOBIL;

  SUSPEND;
END


-- Prozedur: GET_BEW_EIG_PRO_HAUS
CREATE OR ALTER PROCEDURE GET_BEW_EIG_PRO_HAUS
DECLARE VARIABLE IHAUSTYP INTEGER;
BEGIN
  /* Procedure body */
  SELECT BSONST FROM objekte
   WHERE ONR=:IONR INTO :IHAUSTYP;
  /* BEWOHNER */
  IF (IBEW=0 AND IHAUSTYP<>1) THEN
   BEGIN
   FOR SELECT KNR, ba.BNAME || ' ' || ba.BVNAME AS NAME, ba.BKONTO, ba.BBLZ, ba.BBANK, ba.BKONTOINH 
    FROM bewohner b, bewadr ba 
    WHERE (b.bewnr=ba.bewnr) and (ONR=:IONR) 
    ORDER BY KNR
    INTO KNR, NAME, KONTO, BLZ, BANK, KONTOINHABER
    DO
     BEGIN
      EXECUTE PROCEDURE GET_KNRSTR(KNR) RETURNING_VALUES KNRSTR;
      IF (KONTOINHABER='') tHEN
       KONTOINHABER=NAME;
      SUSPEND;
     END
   END
  ELSE
  /* EIGENTUEMER */
  IF (IBEW=1 AND IHAUSTYP<>0) THEN
   BEGIN
    FOR SELECT KNR, EIGADR.ENAME || ' ' || EIGADR.EVNAME AS NAME,
     EIGADR.EKONTO, EIGADR.EBLZ, EIGADR.EBANK, EIGADR.EKONTOINH
    FROM eigentuemer, eigadr
    WHERE ONR=:IONR
    AND EIGENTUEMER.EIGNR = EIGADR.EIGNR
    ORDER BY KNR
    INTO KNR, NAME, KONTO, BLZ, BANK, KONTOINHABER
    DO
     BEGIN
      EXECUTE PROCEDURE GET_KNRSTR(KNR) RETURNING_VALUES KNRSTR;
      IF (KONTOINHABER='') tHEN
       KONTOINHABER=NAME;
      SUSPEND;
     END
   END
END


-- Prozedur: GET_GEBURTSTAGSLIST
CREATE OR ALTER PROCEDURE GET_GEBURTSTAGSLIST
DECLARE VARIABLE vONR INTEGER;
DECLARE VARIABLE vKNR INTEGER;
DECLARE VARIABLE vGEB DATE;
DECLARE VARIABLE vKON CHAR(40);
DECLARE VARIABLE vTyp INTEGER;
DECLARE VARIABLE vEIG INTEGER;
BEGIN
  /* Procedure body */

  FOR SELECT ONR, KNR, GEBURTSTAG, KONFESSION FROM betreut ORDER BY ONR
  INTO vONR, vKNR, vGEB, :cKONFESSION
  DO
   BEGIN
    SELECT BSONST FROM objekte WHERE ONR = :vONR
    INTO vTyp;

    IF (vTyp = 1) THEN
     BEGIN
      SELECT EIGNR FROM eigentuemer WHERE ONR = :vONR AND KNR = :vKNR
      INTO vEIG;
      SELECT ENAME,EVNAME FROM eigadr WHERE EIGNR = :vEIG
      INTO :cNAME, :cVNAME;
      ENR = (vKNR - 200000)/100;
     END
    ELSE
     BEGIN
      --SELECT BNAME,BVNAME FROM bewohner WHERE ONR = :vONR AND KNR = :vKNR
      SELECT ba.BNAME, ba.BVNAME 
      FROM bewohner b, bewadr ba WHERE b.bewnr=ba.bewnr and ONR = :vONR AND KNR = :vKNR
      INTO :cNAME, :cVNAME;
      ENR = (vKNR - 100000)/100;
     END
   ONR = vONR;
   DGEBURTSTAG = vGEB;
   SUSPEND;
   END
 END


-- Prozedur: GET_HAUSLIST
CREATE OR ALTER PROCEDURE GET_HAUSLIST
BEGIN
 IF (IGKONTO=-1) THEN
  BEGIN
   IF (IVERWNR=-1) THEN
    BEGIN
     FOR
      SELECT ONR, OBEZ, OSTRASSE, OPLZORT, ARCHIVIERT FROM OBJEKTE WHERE ONR>0 ORDER BY ONR
     INTO ONR, OBEZ, OSTRASSE, OPLZORT, ARCHIVIERT
     DO
      BEGIN
       SUSPEND;
      END
    END
   ELSE
    BEGIN
     FOR
      SELECT ONR, OBEZ, OSTRASSE, OPLZORT, ARCHIVIERT FROM OBJEKTE WHERE ONR>0 AND VERWNR=:IVERWNR ORDER BY ONR
     INTO ONR, OBEZ, OSTRASSE, OPLZORT, ARCHIVIERT
     DO
      BEGIN
       SUSPEND;
      END
    END
  END
 ELSE
  BEGIN  /* HÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤user fÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼r ein bestimmtes Bankkonto */
   FOR
    SELECT ONR, OBEZ, OSTRASSE, OPLZORT, ARCHIVIERT FROM OBJEKTE WHERE ONR IN(select ONR from objbanken where BANKNR=:IGKONTO) ORDER BY ONR
   INTO ONR, OBEZ, OSTRASSE, OPLZORT, ARCHIVIERT
   DO
    BEGIN
     SUSPEND;
    END
  END
END


-- Prozedur: GET_HAUSLIST_TYP
CREATE OR ALTER PROCEDURE GET_HAUSLIST_TYP
DECLARE VARIABLE SARCHIV1 CHAR(1);
DECLARE VARIABLE SARCHIV2 CHAR(1);
BEGIN
 SARCHIV1 = 'J';
 SARCHIV2 = 'N';
 IF (IANZEIGEARCHIV = 1) THEN /* nicht archivierte */
  BEGIN
   SARCHIV1 = 'N';
   SARCHIV2 = 'N';
  END
 ELSE
  BEGIN
   IF (IANZEIGEARCHIV = 2) THEN /* nur archivierte */
    BEGIN
     SARCHIV1 = 'J';
     SARCHIV2 = 'J';
    END
  END   
 /* Abfrage */   
 IF (IVERWNR=-1) THEN
  BEGIN
   FOR
    SELECT ONR, OBEZ, OSTRASSE, OPLZORT FROM objekte where BSONST<>:INOTHAUSTYP and ONR>0 and ((ARCHIVIERT=:SARCHIV1) or (ARCHIVIERT=:SARCHIV2)) ORDER BY ONR
   INTO ONR, OBEZ, OSTRASSE, OPLZORT
   DO
    BEGIN
     SUSPEND;
    END
  END
 ELSE
  BEGIN
   FOR
    SELECT ONR, OBEZ, OSTRASSE, OPLZORT FROM objekte where BSONST<>:INOTHAUSTYP and ONR>0 and VERWNR=:IVERWNR and ((ARCHIVIERT=:SARCHIV1) or (ARCHIVIERT=:SARCHIV2)) ORDER BY ONR
   INTO ONR, OBEZ, OSTRASSE, OPLZORT
   DO
    BEGIN
     SUSPEND;
    END
  END
END


-- Prozedur: GET_INTERNEHEIZ_GES
CREATE OR ALTER PROCEDURE GET_INTERNEHEIZ_GES
DECLARE VARIABLE IKNR INTEGER;
 DECLARE VARIABLE ICOUNTSOLL INTEGER;
 DECLARE VARIABLE ICOUNTHABEN INTEGER;
BEGIN
  /* Procedure body */
  MITTANK=BMITTANK;
  FOR select KNR, KBEZ, BHEIZ, IHEIZK from konten
  where ONR=:IONR
  and (IHeizK > 0 or BHEIZ = 'J') order by BHEIZ,IHEIZK
  INTO IKNR, KBEZ, BHEIZ, IHEIZK DO
   BEGIN
    ICOUNTSOLL=0;
    ICOUNTHABEN=0;
    IF (BHEIZ='J') THEN
     SHEIZK='Brennstoffkosten';
    ELSE
     IF (IHEIZK=1) THEN
      SHEIZK='Heiznebenkosten';
     ELSE
      IF (IHEIZK=2) THEN
       SHEIZK='Zusatzkosten Heizung';
      ELSE
       IF (IHEIZK=3) THEN
        SHEIZK='Zusatzkosten Warmwasser';
       ELSE
        IF (IHEIZK=4) THEN
         SHEIZK='Kalt- und Abwasser';
        ELSE
         IF (IHEIZK=5) THEN
          SHEIZK='NutzerwechselgebÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼hr'; 
    /* SOLL */
    FOR SELECT Text, Datum, BrennstMenge, Betrag from buchung
    where ONRSOLL=:IONR and KSOLL=:IKNR and WDATUM>=:DTVON and WDatum<=:DTBIS
    order by WDatum
    into TEXT, DATUM, BRENNSTMENGE, BETRAG
     DO
      BEGIN
       IF (BHEIZ='J') THEN
        ICOUNTSOLL=ICOUNTSOLL+1;
       SUSPEND;
      END
    /* HABEN */
    FOR SELECT Text, Datum, BrennstMenge, Betrag from buchung
    where ONRHABEN=:IONR and KHABEN=:IKNR and WDATUM>=:DTVON and WDatum<=:DTBIS
    order by WDatum    
    into TEXT, DATUM, BRENNSTMENGE, BETRAG
     DO
      BEGIN
       IF (BHEIZ='J') THEN
        ICOUNTHABEN=ICOUNTHABEN+1;
       BETRAG=-BETRAG;
       SUSPEND;
      END
    IF (BHEIZ='J') THEN
     BEGIN
      IF ((ICOUNTSOLL=0) and (ICOUNTHABEN=0)) then
       BEGIN
        TEXT=NULL;
        DATUM=NULL;
        BRENNSTMENGE=NULL;
        BETRAG=NULL;
        SUSPEND;
       END
     END
   END 
END


-- Prozedur: GET_KNRSTR
CREATE OR ALTER PROCEDURE GET_KNRSTR
DECLARE VARIABLE ENR INTEGER;
 DECLARE VARIABLE IANZWECHSEL INTEGER;
BEGIN
  /* Macht aus KNR 100100 KNRSTR 'B.001.00', Sachkonten 4000 in '04000' */
  IF (KNR<100000) THEN
   BEGIN
    IF (KNR<10) THEN
     KNRSTR = '0000' || CAST(KNR AS VARCHAR(1));
    ELSE
     IF (KNR<100) THEN
      KNRSTR = '000' || CAST(KNR AS VARCHAR(2));
     ELSE
      IF (KNR<1000) THEN
       KNRSTR = '00' || CAST(KNR AS VARCHAR(3));
      ELSE
       IF (KNR<10000) THEN
        KNRSTR = '0' || CAST(KNR AS VARCHAR(4));
       ELSE
        KNRSTR = CAST(KNR AS VARCHAR(5));
   END
  ELSE
   BEGIN
    IF (KNR<200000) THEN
     BEGIN
      ENR=(KNR-100000) / 100;
      IANZWECHSEL = KNR - 100000 - (ENR * 100);
      KNRSTR = 'B.';
     END
    ELSE
     BEGIN
      ENR=(KNR-200000) / 100;
      IANZWECHSEL = KNR - 200000 - (ENR * 100);
      KNRSTR = 'E.';
     END
    IF (ENR<10) THEN
     KNRSTR = KNRSTR || '00';
    ELSE
     IF (ENR<100) THEN
      KNRSTR = KNRSTR || '0';
    KNRSTR = KNRSTR || CAST(ENR AS VARCHAR(3));
    KNRSTR = KNRSTR || '.';
    IF (IANZWECHSEL < 10) THEN
     KNRSTR = KNRSTR || '0';
    KNRSTR = KNRSTR || CAST(IANZWECHSEL AS VARCHAR(2));
   END
  SUSPEND;
END


-- Prozedur: GET_LASTSCHRIFTEN
CREATE OR ALTER PROCEDURE GET_LASTSCHRIFTEN
DECLARE VARIABLE IANZ INTEGER;
DECLARE VARIABLE BANKID INTEGER;
DECLARE VARIABLE ISZNR INTEGER;
DECLARE VARIABLE ENR INTEGER;
DECLARE VARIABLE IEIGNR INTEGER;
DECLARE VARIABLE NAME VARCHAR(80);
DECLARE VARIABLE MWSTAUSW CHAR(1);
DECLARE VARIABLE LASTJA CHAR(1);
DECLARE VARIABLE BETRAG1 NUMERIC(15, 12);
DECLARE VARIABLE BUDATUM DATE;
DECLARE VARIABLE SEVSEPA_CI VARCHAR(35);
DECLARE VARIABLE SEPA_CI2 VARCHAR(35);
DECLARE VARIABLE IOBJART SMALLINT;
BEGIN
/*
 L_DATUM='21.10.2019';
 A_BLZ = '';
 A_KONTO = '8';
 IS_DTA = 'J';  */

 IF (A_BLZ<>'') THEN     /* PRO BLZ */
  FOR
   SELECT Datum, ONRSOLL, KSOLL, KSTRSOLL, TEXT, BNR, LASTBANK, LBNR, OPBetrag, Betrag, SPLITNR, LastErzeugt, sepa_ci, sepa_ci2, bsonst from buchung, objekte
   WHERE onrsoll=onr and (ARTSOLL=60 or ARTSOLL=62) and OPBETRAG>0.001 and LBNR IS NULL and SPLITNR IS NULL and LASTBANK IN (SELECT BANKEN.NR FROM BANKEN 
   WHERE ((BANKEN.BLZ=:A_BLZ) or (BANKEN.BIC=:A_BLZ)) AND BANKEN.ART=0)
   UNION
   SELECT Datum, ONRSOLL, KSOLL, KSTRSOLL, TEXT, splitbuch.BNR, LASTBANK, LBNR, splitbuch.OPBetrag, splitbuch.Betrag, SPLITNR, LastErzeugt, sepa_ci, sepa_ci2, bsonst
   from buchung, splitbuch, objekte WHERE onrsoll=onr and (ARTSOLL=60 or ARTSOLL=62) and splitbuch.OPBETRAG>0.001 and LBNR IS NULL and LASTBANK IN 
   (SELECT BANKEN.NR FROM BANKEN  WHERE ((BANKEN.BLZ=:A_BLZ) or (BANKEN.BIC=:A_BLZ)) AND BANKEN.ART=0) and SPLITNR IS  NOT NULL AND buchung.bnr=splitbuch.bnr
   order by 7, 1, 3
  INTO :BUDATUM, :ONR, KHABEN, :KSTRHABEN, :VZWECK1, :BNR, :BANKNR, :LBNR, :BETRAG, :BETRAG1, :SPLITNR, :LASTERZEUGT, :SEPA_CI, :SEPA_CI2, :IOBJART
  DO
   BEGIN
    DATUM=:BUDATUM; B2B = 5;
    AGEBER  = ''; AGEBERBANK  = ''; AGEBERKONTO  = ''; AGEBERBLZ  = ''; EMPF  = ''; EMPFBANK  = ''; EMPFKONTO  = '';
    EMPFBLZ  = ''; AGEBERSTR  = ''; AGEBERPLZORT  = ''; EMPFSTR  = ''; EMPFPLZORT  = ''; AGEBERBIC  = ''; AGEBERIBAN  = ''; EMPFBIC  = ''; EMPFIBAN  = '';
    SEPA_MAN_NR  = '';
    IF (LASTERZEUGT IS NULL) THEN
     LASTERZEUGT=0;
    IF (KHABEN < 200000) THEN
     BEGIN   /* Bewohner */
      SELECT ba.BBANK, ba.BBLZ, ba.BKONTO, ba.BKONTOINH, ba.BNAME, BMWSTAUSW, BMWSTSATZ, BLASTJA, ba.BSTR, ba.BPLZORT, ba.BBIC, ba.BIBAN, SEPA_MAN_DAT,
      SEPA_MAN_NR,SEPA_LS_TEXTSCHL from bewohner b, bewadr ba WHERE b.bewnr=ba.bewnr and ONR=:ONR AND KNR=:KHABEN
      INTO :EmpfBank, :EmpfBLZ, :EmpfKonto, :Empf, :NAME, :MWSTAUSW, MWSTSATZ, :LASTJA, :EmpfStr, :EmpfPLZOrt,:EMPFBIC,:EMPFIBAN,:SEPA_MAN_DAT,:SEPA_MAN_NR,:B2B;
      /* */
      IF (EMPF='') THEN
       EMPF=SUBSTRING(:NAME from 1 for 50);
      IF (MWSTAUSW='N') THEN
       MWSTSATZ=-1;
      /* SEV */ 
      SEVSEPA_CI='';
      select sepa_ci from severtrag where onr=:onr and sevknr=(:KHABEN+200000) into :SEVSEPA_CI;
      IF (SEVSEPA_CI IS NULL) THEN
       SEVSEPA_CI='';
      IF (SEVSEPA_CI<>'') THEN
       SEPA_CI=SEVSEPA_CI; 
     END     /* Bewohner */
    ELSE
     BEGIN  /* EigentÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼mer */
      IF (IOBJART=2) THEN
       BEGIN
        IF ((SEPA_CI2 <> '') and (SEPA_CI2 IS NOT NULL)) THEN
         SEPA_CI = SEPA_CI2;
       END
      /*  */
      SELECT EIGNR, EMWSTAUSW, EMWSTSATZ, ELASTJA, SEPA_MAN_DAT, SEPA_MAN_NR,SEPA_LS_TEXTSCHL, BANKID from eigentuemer WHERE ONR=:ONR AND KNR=:KHABEN
      INTO :IEIGNR, :MWSTAUSW, MWSTSATZ, :LASTJA, :SEPA_MAN_DAT, :SEPA_MAN_NR, :B2B, :BANKID;
      /* */
      IF (MWSTAUSW='N') THEN
       MWSTSATZ=-1;
      IF ((LASTJA='J') AND ((IEIGNR IS NOT NULL) AND (BANKID IS NOT NULL))) THEN
       BEGIN
        SELECT eb.BANK, eb.BLZ, eb.KONTO, eb.KONTOINH, eb.BIC, eb.IBAN, ea.ENAME, ea.ESTR, ea.EPLZORT from eigbanken eb, eigadr ea WHERE eb.ID=:BANKID and ea.EIGNR=:IEIGNR
        INTO :EmpfBank, :EmpfBLZ, :EmpfKonto, :Empf, :EMPFBIC, :EMPFIBAN, :NAME, :EmpfStr, :EmpfPLZOrt;
        IF (EMPF='') THEN
         EMPF=SUBSTRING(:NAME from 1 for 50);
       END
     END    /* EigentÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼mer */
    IF (LASTJA='J') THEN
     BEGIN
      SELECT Bezeichnung, BLZ, Inhaber, Konto, Str, PLZOrt, bic, iban from banken WHERE NR=:BANKNR
      INTO :AGEBERBANK, :AGEBERBLZ, :AGEBER, :AGEBERKONTO, :AGEBERSTR, :AGEBERPLZORT, :AGEBERBIC, :AGEBERIBAN;
      /*           */
      IF ((IS_DTA='N') OR (IS_DTA='J' and :LASTERZEUGT<>1)) THEN
       begin
        SUSPEND;
       end  
     END
   END
 ELSE
  BEGIN
   /* PRO KONTO */
   /*           */
   FOR
    with cteA
    as
    (
    SELECT b.ONRSOLL, b.KSOLL, b.KSTRSOLL, b.TEXT, b.BNR, b.LASTBANK,
    CASE WHEN b.LBNR IS NULL 
    then NULL
    else b.LBNR
    end as LBNR,
    b.OPBetrag, b.Betrag, b.Datum,
    CASE WHEN b.SPLITNR IS NULL 
    then NULL
    else b.SPLITNR
    end as SPLITNR,
    b.LastErzeugt, o.sepa_ci, o.sepa_ci2, o.bsonst
    FROM buchung b, objekte o
    WHERE b.onrsoll = o.onr 
    AND (b.ARTSOLL = 60 OR b.ARTSOLL = 62)
    AND b.OPBETRAG > 0.001
    AND (b.LASTBANK = :A_KONTO OR :A_KONTO = -1)
    ),

    cteB
    as
    (
    SELECT b.ONRSOLL, b.KSOLL, b.KSTRSOLL, b.TEXT, s.BNR, b.LASTBANK,
    CASE WHEN b.LBNR IS NULL 
    then NULL
    else b.LBNR
    end as LBNR,
    s.OPBetrag, s.Betrag, b.Datum,
    CASE WHEN b.SPLITNR IS NULL 
    then NULL
    else b.SPLITNR
    end as SPLITNR,
    b.LastErzeugt, o.sepa_ci, o.sepa_ci2, o.bsonst
    FROM buchung b, splitbuch s, objekte o
    WHERE b.onrsoll = o.onr
    AND (b.ARTSOLL = 60 OR b.ARTSOLL = 62)
    AND s.OPBETRAG > 0.001
    AND (b.LASTBANK = :A_KONTO OR :A_KONTO = -1)
    AND b.bnr = s.bnr
    ),

    cteL
    AS
    (
    select a.ONRSOLL, a.KSOLL, a.KSTRSOLL, a.TEXT, a.BNR, a.LASTBANK, a.LBNR, a.OPBetrag, a.Betrag, a.Datum, a.SPLITNR, a.LastErzeugt, a.sepa_ci, a.sepa_ci2, a.bsonst 
    from cteA a 
    where a.SPLITNR IS NULL
    and a.LBNR IS NULL
    UNION
    select b.ONRSOLL, b.KSOLL, b.KSTRSOLL, b.TEXT, b.BNR, b.LASTBANK, b.LBNR, b.OPBetrag, b.Betrag, b.Datum, b.SPLITNR, b.LastErzeugt, b.sepa_ci, b.sepa_ci2, b.bsonst 
    from cteB b
    where b.SPLITNR IS NOT NULL
    and b.LBNR IS NULL
    )
    select q.ONRSOLL, q.KSOLL, q.KSTRSOLL, q.TEXT, q.BNR, q.LASTBANK, q.LBNR, q.OPBetrag, q.Betrag, q.Datum, q.SPLITNR, q.LastErzeugt, q.sepa_ci, q.sepa_ci2, q.bsonst 
    from cteL q
    order by 10, 1, 2
   INTO :ONR, :KHABEN, :KSTRHABEN, :VZWECK1, :BNR, :BANKNR, :LBNR, :BETRAG, :BETRAG1, :BUDATUM, :SPLITNR, :LASTERZEUGT, :SEPA_CI, :SEPA_CI2, :IOBJART
   DO
    BEGIN
     DATUM=:BUDATUM; B2B = 5;
     AGEBERBANK  = ''; AGEBERKONTO  = ''; AGEBERBLZ  = ''; EMPF  = ''; EMPFBANK  = ''; EMPFKONTO  = '';
     EMPFBLZ  = ''; AGEBERSTR  = ''; AGEBERPLZORT  = ''; EMPFSTR  = ''; EMPFPLZORT  = ''; AGEBERBIC  = ''; AGEBERIBAN  = ''; EMPFBIC  = ''; EMPFIBAN  = '';
     SEPA_MAN_NR  = '';    
     IF (LASTERZEUGT IS NULL) THEN
      LASTERZEUGT=0;
     IF (KHABEN < 200000) THEN
      BEGIN   /* Bewohner */
       SELECT ba.BBANK, ba.BBLZ, ba.BKONTO, ba.BKONTOINH, ba.BNAME, BMWSTAUSW, BMWSTSATZ, BLASTJA, ba.BSTR, ba.BPLZORT, ba.BBIC, ba.BIBAN, SEPA_MAN_DAT, 
       SEPA_MAN_NR,SEPA_LS_TEXTSCHL from bewohner b, bewadr ba WHERE b.bewnr=ba.bewnr and ONR=:ONR AND KNR=:KHABEN
       INTO :EmpfBank, :EmpfBLZ, :EmpfKonto, :Empf, :NAME, :MWSTAUSW, MWSTSATZ, :LASTJA, :EmpfStr, :EmpfPLZOrt, :EMPFBIC, :EMPFIBAN, :SEPA_MAN_DAT, :SEPA_MAN_NR, :B2B;
       /*  */
       IF (EMPF='') THEN
        EMPF=SUBSTRING(:NAME from 1 for 50);
       IF (MWSTAUSW='N') THEN
        MWSTSATZ=-1;
       /* SEV */ 
       SEVSEPA_CI='';
       select sepa_ci from severtrag where onr=:onr and sevknr=(:KHABEN+200000) into :SEVSEPA_CI;
       IF (SEVSEPA_CI IS NULL) THEN
        SEVSEPA_CI='';
       IF (SEVSEPA_CI<>'') THEN
        SEPA_CI=SEVSEPA_CI; 
      END     /* Bewohner */
     ELSE
      BEGIN  /* EigentÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼mer */
       IF (IOBJART=2) THEN
        BEGIN
         IF ((SEPA_CI2 <> '') and (SEPA_CI2 IS NOT NULL)) THEN
          SEPA_CI = SEPA_CI2;
        END
       /*  */
       SELECT EIGNR, EMWSTAUSW, EMWSTSATZ, ELASTJA, SEPA_MAN_DAT, SEPA_MAN_NR, SEPA_LS_TEXTSCHL, BANKID from eigentuemer WHERE ONR=:ONR AND KNR=:KHABEN
       INTO :IEIGNR, :MWSTAUSW, MWSTSATZ, :LASTJA, :SEPA_MAN_DAT, :SEPA_MAN_NR, :B2B, :BANKID;
       /* */
       IF (MWSTAUSW='N') THEN
        MWSTSATZ=-1;
       IF ((LASTJA='J') AND ((IEIGNR IS NOT NULL) AND (BANKID IS NOT NULL))) THEN
        BEGIN
         SELECT eb.BANK, eb.BLZ, eb.KONTO, eb.KONTOINH, eb.BIC, eb.IBAN, ea.ENAME, ea.ESTR, ea.EPLZORT from eigbanken eb, eigadr ea WHERE eb.ID=:BANKID and ea.EIGNR=:IEIGNR
         INTO :EmpfBank, :EmpfBLZ, :EmpfKonto, :Empf, :EMPFBIC, :EMPFIBAN, :NAME, :EmpfStr, :EmpfPLZOrt;
         IF (EMPF='') THEN
          EMPF=SUBSTRING(:NAME from 1 for 50);
        END
      END    /* EigentÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼mer */
     IF (LASTJA='J') THEN
      BEGIN
       SELECT Bezeichnung, BLZ, Inhaber, Konto, Str, PLZOrt, bic, iban from banken WHERE NR=:BANKNR
       INTO :AGEBERBANK, :AGEBERBLZ, :AGEBER, :AGEBERKONTO, :AGEBERSTR, :AGEBERPLZORT, :AGEBERBIC, :AGEBERIBAN;
       /*           */
       IF ((IS_DTA='N') OR (IS_DTA='J' and :LASTERZEUGT<>1)) THEN
        begin
         SUSPEND;
        end   
      END
    END
  END /* PRO KONTO */
END


-- Prozedur: GET_LAST_BUCHUNG
CREATE OR ALTER PROCEDURE GET_LAST_BUCHUNG
DECLARE VARIABLE KSOLL INTEGER;
DECLARE VARIABLE KHABEN INTEGER;
DECLARE VARIABLE BANKNRSOLL INTEGER;
DECLARE VARIABLE BANKNRHABEN INTEGER;
DECLARE VARIABLE BSTRSOLL VARCHAR(15);
DECLARE VARIABLE BSTRHABEN VARCHAR(15);
DECLARE VARIABLE SPLITNR INTEGER;
DECLARE VARIABLE ONRSOLL INTEGER;
DECLARE VARIABLE ONRHABEN INTEGER;
BEGIN
 IF (LETZT20 = 0) THEN
  BEGIN /* LETZTEN 20 BUCHUNGEN */
   IF (B1<>-1) THEN
    BEGIN
     FOR
     SELECT BNR,DATUM,WDATUM,ONR,BELEGNR,KSOLLSTR,TEXT,BETRAG,MWST,KHABENSTR,BEMERKUNG,OPBETRAG, LBNR
     from get_last_buchung_bnr(:B1, :ANZEIGE)
     INTO :BNR,:DATUM,:WDATUM,:ONR,:BELEGNR,:KSOLLSTR,:TEXT,:BETRAG,:MWST,:KHABENSTR,:BEMERKUNG,:OPBETRAG,:LBNR
     DO
     SUSPEND;
    END
   IF (B2<>-1) THEN
    BEGIN
     FOR
     SELECT BNR,DATUM,WDATUM,ONR,BELEGNR,KSOLLSTR,TEXT,BETRAG,MWST,KHABENSTR,BEMERKUNG,OPBETRAG, LBNR
     from get_last_buchung_bnr(:B2, :ANZEIGE)
     INTO :BNR,:DATUM,:WDATUM,:ONR,:BELEGNR,:KSOLLSTR,:TEXT,:BETRAG,:MWST,:KHABENSTR,:BEMERKUNG,:OPBETRAG,:LBNR
     DO
     SUSPEND;
    END
   IF (B3<>-1) THEN
    BEGIN
     FOR
     SELECT BNR,DATUM,WDATUM,ONR,BELEGNR,KSOLLSTR,TEXT,BETRAG,MWST,KHABENSTR,BEMERKUNG,OPBETRAG, LBNR
     from get_last_buchung_bnr(:B3, :ANZEIGE)
     INTO :BNR,:DATUM,:WDATUM,:ONR,:BELEGNR,:KSOLLSTR,:TEXT,:BETRAG,:MWST,:KHABENSTR,:BEMERKUNG,:OPBETRAG,:LBNR
     DO
     SUSPEND;
    END
   IF (B4<>-1) THEN
    BEGIN
     FOR
     SELECT BNR,DATUM,WDATUM,ONR,BELEGNR,KSOLLSTR,TEXT,BETRAG,MWST,KHABENSTR,BEMERKUNG,OPBETRAG, LBNR
     from get_last_buchung_bnr(:B4, :ANZEIGE)
     INTO :BNR,:DATUM,:WDATUM,:ONR,:BELEGNR,:KSOLLSTR,:TEXT,:BETRAG,:MWST,:KHABENSTR,:BEMERKUNG,:OPBETRAG,:LBNR
     DO
     SUSPEND;
    END
   IF (B5<>-1) THEN
    BEGIN
     FOR
     SELECT BNR,DATUM,WDATUM,ONR,BELEGNR,KSOLLSTR,TEXT,BETRAG,MWST,KHABENSTR,BEMERKUNG,OPBETRAG, LBNR
     from get_last_buchung_bnr(:B5, :ANZEIGE)
     INTO :BNR,:DATUM,:WDATUM,:ONR,:BELEGNR,:KSOLLSTR,:TEXT,:BETRAG,:MWST,:KHABENSTR,:BEMERKUNG,:OPBETRAG,:LBNR
     DO
     SUSPEND;
    END
   IF (B6<>-1) THEN
    BEGIN
     FOR
     SELECT BNR,DATUM,WDATUM,ONR,BELEGNR,KSOLLSTR,TEXT,BETRAG,MWST,KHABENSTR,BEMERKUNG,OPBETRAG, LBNR
     from get_last_buchung_bnr(:B6, :ANZEIGE)
     INTO :BNR,:DATUM,:WDATUM,:ONR,:BELEGNR,:KSOLLSTR,:TEXT,:BETRAG,:MWST,:KHABENSTR,:BEMERKUNG,:OPBETRAG,:LBNR
     DO
     SUSPEND;
    END
   IF (B7<>-1) THEN
    BEGIN
     FOR
     SELECT BNR,DATUM,WDATUM,ONR,BELEGNR,KSOLLSTR,TEXT,BETRAG,MWST,KHABENSTR,BEMERKUNG,OPBETRAG, LBNR
     from get_last_buchung_bnr(:B7, :ANZEIGE)
     INTO :BNR,:DATUM,:WDATUM,:ONR,:BELEGNR,:KSOLLSTR,:TEXT,:BETRAG,:MWST,:KHABENSTR,:BEMERKUNG,:OPBETRAG,:LBNR
     DO
     SUSPEND;
    END
   IF (B8<>-1) THEN
    BEGIN
     FOR
     SELECT BNR,DATUM,WDATUM,ONR,BELEGNR,KSOLLSTR,TEXT,BETRAG,MWST,KHABENSTR,BEMERKUNG,OPBETRAG, LBNR
     from get_last_buchung_bnr(:B8, :ANZEIGE)
     INTO :BNR,:DATUM,:WDATUM,:ONR,:BELEGNR,:KSOLLSTR,:TEXT,:BETRAG,:MWST,:KHABENSTR,:BEMERKUNG,:OPBETRAG,:LBNR
     DO
     SUSPEND;
    END
   IF (B9<>-1) THEN
    BEGIN
     FOR
     SELECT BNR,DATUM,WDATUM,ONR,BELEGNR,KSOLLSTR,TEXT,BETRAG,MWST,KHABENSTR,BEMERKUNG,OPBETRAG, LBNR
     from get_last_buchung_bnr(:B9, :ANZEIGE)
     INTO :BNR,:DATUM,:WDATUM,:ONR,:BELEGNR,:KSOLLSTR,:TEXT,:BETRAG,:MWST,:KHABENSTR,:BEMERKUNG,:OPBETRAG,:LBNR
     DO
     SUSPEND;
    END
   IF (B10<>-1) THEN
    BEGIN
     FOR
     SELECT BNR,DATUM,WDATUM,ONR,BELEGNR,KSOLLSTR,TEXT,BETRAG,MWST,KHABENSTR,BEMERKUNG,OPBETRAG, LBNR
     from get_last_buchung_bnr(:B10, :ANZEIGE)
     INTO :BNR,:DATUM,:WDATUM,:ONR,:BELEGNR,:KSOLLSTR,:TEXT,:BETRAG,:MWST,:KHABENSTR,:BEMERKUNG,:OPBETRAG,:LBNR
     DO
     SUSPEND;
    END
   IF (B11<>-1) THEN
    BEGIN
     FOR
     SELECT BNR,DATUM,WDATUM,ONR,BELEGNR,KSOLLSTR,TEXT,BETRAG,MWST,KHABENSTR,BEMERKUNG,OPBETRAG, LBNR
     from get_last_buchung_bnr(:B11, :ANZEIGE)
     INTO :BNR,:DATUM,:WDATUM,:ONR,:BELEGNR,:KSOLLSTR,:TEXT,:BETRAG,:MWST,:KHABENSTR,:BEMERKUNG,:OPBETRAG,:LBNR
     DO
     SUSPEND;
    END
   IF (B12<>-1) THEN
    BEGIN
     FOR
     SELECT BNR,DATUM,WDATUM,ONR,BELEGNR,KSOLLSTR,TEXT,BETRAG,MWST,KHABENSTR,BEMERKUNG,OPBETRAG, LBNR
     from get_last_buchung_bnr(:B12, :ANZEIGE)
     INTO :BNR,:DATUM,:WDATUM,:ONR,:BELEGNR,:KSOLLSTR,:TEXT,:BETRAG,:MWST,:KHABENSTR,:BEMERKUNG,:OPBETRAG,:LBNR
     DO
     SUSPEND;
    END
   IF (B13<>-1) THEN
    BEGIN
     FOR
     SELECT BNR,DATUM,WDATUM,ONR,BELEGNR,KSOLLSTR,TEXT,BETRAG,MWST,KHABENSTR,BEMERKUNG,OPBETRAG, LBNR
     from get_last_buchung_bnr(:B13, :ANZEIGE)
     INTO :BNR,:DATUM,:WDATUM,:ONR,:BELEGNR,:KSOLLSTR,:TEXT,:BETRAG,:MWST,:KHABENSTR,:BEMERKUNG,:OPBETRAG,:LBNR
     DO
     SUSPEND;
    END
   IF (B14<>-1) THEN
    BEGIN
     FOR
     SELECT BNR,DATUM,WDATUM,ONR,BELEGNR,KSOLLSTR,TEXT,BETRAG,MWST,KHABENSTR,BEMERKUNG,OPBETRAG, LBNR
     from get_last_buchung_bnr(:B14, :ANZEIGE)
     INTO :BNR,:DATUM,:WDATUM,:ONR,:BELEGNR,:KSOLLSTR,:TEXT,:BETRAG,:MWST,:KHABENSTR,:BEMERKUNG,:OPBETRAG,:LBNR
     DO
     SUSPEND;
    END
   IF (B15<>-1) THEN
    BEGIN
     FOR
     SELECT BNR,DATUM,WDATUM,ONR,BELEGNR,KSOLLSTR,TEXT,BETRAG,MWST,KHABENSTR,BEMERKUNG,OPBETRAG, LBNR
     from get_last_buchung_bnr(:B15, :ANZEIGE)
     INTO :BNR,:DATUM,:WDATUM,:ONR,:BELEGNR,:KSOLLSTR,:TEXT,:BETRAG,:MWST,:KHABENSTR,:BEMERKUNG,:OPBETRAG,:LBNR
     DO
     SUSPEND;
    END
   IF (B16<>-1) THEN
    BEGIN
     FOR
     SELECT BNR,DATUM,WDATUM,ONR,BELEGNR,KSOLLSTR,TEXT,BETRAG,MWST,KHABENSTR,BEMERKUNG,OPBETRAG, LBNR
     from get_last_buchung_bnr(:B16, :ANZEIGE)
     INTO :BNR,:DATUM,:WDATUM,:ONR,:BELEGNR,:KSOLLSTR,:TEXT,:BETRAG,:MWST,:KHABENSTR,:BEMERKUNG,:OPBETRAG,:LBNR
     DO
     SUSPEND;
    END
   IF (B17<>-1) THEN
    BEGIN
     FOR
     SELECT BNR,DATUM,WDATUM,ONR,BELEGNR,KSOLLSTR,TEXT,BETRAG,MWST,KHABENSTR,BEMERKUNG,OPBETRAG, LBNR
     from get_last_buchung_bnr(:B17, :ANZEIGE)
     INTO :BNR,:DATUM,:WDATUM,:ONR,:BELEGNR,:KSOLLSTR,:TEXT,:BETRAG,:MWST,:KHABENSTR,:BEMERKUNG,:OPBETRAG,:LBNR
     DO
     SUSPEND;
    END
   IF (B18<>-1) THEN
    BEGIN
     FOR
     SELECT BNR,DATUM,WDATUM,ONR,BELEGNR,KSOLLSTR,TEXT,BETRAG,MWST,KHABENSTR,BEMERKUNG,OPBETRAG, LBNR
     from get_last_buchung_bnr(:B18, :ANZEIGE)
     INTO :BNR,:DATUM,:WDATUM,:ONR,:BELEGNR,:KSOLLSTR,:TEXT,:BETRAG,:MWST,:KHABENSTR,:BEMERKUNG,:OPBETRAG,:LBNR
     DO
     SUSPEND;
    END
   IF (B19<>-1) THEN
    BEGIN
     FOR
     SELECT BNR,DATUM,WDATUM,ONR,BELEGNR,KSOLLSTR,TEXT,BETRAG,MWST,KHABENSTR,BEMERKUNG,OPBETRAG, LBNR
     from get_last_buchung_bnr(:B19, :ANZEIGE)
     INTO :BNR,:DATUM,:WDATUM,:ONR,:BELEGNR,:KSOLLSTR,:TEXT,:BETRAG,:MWST,:KHABENSTR,:BEMERKUNG,:OPBETRAG,:LBNR
     DO
     SUSPEND;
    END
   IF (B20<>-1) THEN
    BEGIN
     FOR
     SELECT BNR,DATUM,WDATUM,ONR,BELEGNR,KSOLLSTR,TEXT,BETRAG,MWST,KHABENSTR,BEMERKUNG,OPBETRAG, LBNR
     from get_last_buchung_bnr(:B20, :ANZEIGE)
     INTO :BNR,:DATUM,:WDATUM,:ONR,:BELEGNR,:KSOLLSTR,:TEXT,:BETRAG,:MWST,:KHABENSTR,:BEMERKUNG,:OPBETRAG,:LBNR
     DO
     SUSPEND;
    END
  END /* LETZTEN 20 BUCHUNGEN */
ELSE
 BEGIN /* ZEITRAUM */
 IF (ANZEIGE='2') THEN      /* Anzeige doppelte BuchfÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼hrung alle = split*/
  BEGIN
   if (:AKTHAUS <> -1) then  /* nur ein Haus */
   BEGIN
    FOR SELECT
    BNR,DATUM,WDATUM,ONRSOLL, ONRHABEN, BELEGNR, KSOLL, TEXT, BETRAG, OPBETRAG, MWST, KHABEN, BANKNRSOLL, BANKNRHABEN,
    BSTRSOLL, BSTRHABEN, SPLITNR, LBNR
    FROM BUCHUNG
    WHERE DATUM>=:ABDATUM AND (ONRSOLL=:AKTHAUS or ONRHABEN=:AKTHAUS) and BETRAG<>0
    ORDER BY 1 descending
    INTO
     :BNR, :DATUM, :WDATUM, :ONRSOLL, :ONRHABEN, :BELEGNR, :KSOLL,:TEXT, :BETRAG, :OPBETRAG, :MWST, :KHABEN, :BANKNRSOLL, :BANKNRHABEN,
     :BSTRSOLL, :BSTRHABEN, :SPLITNR, :LBNR
    DO
     BEGIN
      SELECT SUBSTRING(KNRSTR || ' ' || KBEZ FROM 1 FOR 120) from konten where ONR=:ONRSOLL AND KNR=:KSOLL
      into :KSOLLSTR;
      SELECT SUBSTRING(KNRSTR || ' ' || KBEZ FROM 1 FOR 120) from konten where ONR=:ONRHABEN AND KNR=:KHABEN
      into :KHABENSTR;
      IF (:BANKNRSOLL IS NOT NULL) THEN
       KSOLLSTR = KSOLLSTR || ' ' || BSTRSOLL;
      IF (:BANKNRHABEN IS NOT NULL) THEN
       KHABENSTR = KHABENSTR || ' ' || BSTRHABEN;
      IF (ONRSOLL = 0) THEN
       ONR=ONRHABEN;
      ELSE
       ONR=ONRSOLL;
      IF (ONR=0) THEN
       ONR=NULL;
      IF (:OPBETRAG IS NOT NULL) THEN
       BEGIN
        IF (:OPBETRAG=0) THEN
         BEGIN
          IF (:SPLITNR IS NULL) THEN
           BEMERKUNG='SO';
          ELSE
           BEMERKUNG='SO..';         
         END
        ELSE
         BEGIN
          IF (:SPLITNR IS NULL) THEN
           BEMERKUNG='OP';
          ELSE
           BEMERKUNG='OP..';
         END  
       END
      ELSE
       BEGIN
        IF (:SPLITNR IS NOT NULL) THEN
         BEMERKUNG='..';
        ELSE
         BEMERKUNG=NULL;
       END
      SUSPEND;
     END
   END
   ELSE
    BEGIN  /* Alle HÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤user */
    FOR SELECT
    BNR,DATUM,WDATUM,ONRSOLL, ONRHABEN, BELEGNR, KSOLL, TEXT, BETRAG, OPBETRAG, MWST, KHABEN, BANKNRSOLL, BANKNRHABEN,
    BSTRSOLL, BSTRHABEN, SPLITNR, LBNR
    FROM BUCHUNG
    WHERE DATUM>=:ABDATUM and BETRAG<>0
    INTO
     :BNR, :DATUM, :WDATUM, :ONRSOLL, :ONRHABEN, :BELEGNR, :KSOLL,:TEXT, :BETRAG, :OPBETRAG, :MWST, :KHABEN, :BANKNRSOLL, :BANKNRHABEN,
     :BSTRSOLL, :BSTRHABEN, :SPLITNR, :LBNR
    DO
     BEGIN
      SELECT SUBSTRING(KNRSTR || ' ' || KBEZ FROM 1 FOR 120) from konten where ONR=:ONRSOLL AND KNR=:KSOLL
      into :KSOLLSTR;
      SELECT SUBSTRING(KNRSTR || ' ' || KBEZ FROM 1 FOR 120) from konten where ONR=:ONRHABEN AND KNR=:KHABEN
      into :KHABENSTR;
      IF (:BANKNRSOLL IS NOT NULL) THEN
       KSOLLSTR = KSOLLSTR || ' ' || BSTRSOLL;
      IF (:BANKNRHABEN IS NOT NULL) THEN
       KHABENSTR = KHABENSTR || ' ' || BSTRHABEN;
      IF (ONRSOLL = 0) THEN
       ONR=ONRHABEN;
      ELSE
       ONR=ONRSOLL;
      IF (ONR=0) THEN
       ONR=NULL;
      IF (:OPBETRAG IS NOT NULL) THEN
       BEGIN
        IF (:OPBETRAG=0) THEN
         BEGIN
          IF (:SPLITNR IS NULL) THEN
           BEMERKUNG='SO';
          ELSE
           BEMERKUNG='SO..';         
         END
        ELSE
         BEGIN
          IF (:SPLITNR IS NULL) THEN
           BEMERKUNG='OP';
          ELSE
           BEMERKUNG='OP..';
         END  
       END
      ELSE
       BEGIN
        IF (:SPLITNR IS NOT NULL) THEN
         BEMERKUNG='..';
        ELSE
         BEMERKUNG=NULL;
       END
      SUSPEND;
     END
    END
  END
 ELSE
 IF (ANZEIGE=1) THEN       /* DOPPELTE BUCHFÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã¢â‚¬Å“HRUNG SPLIT ZUSAMMENGEFASST */
  BEGIN
   if (:AKTHAUS <> -1) then  /* nur ein Haus */
   BEGIN
    FOR SELECT
    BNR,DATUM,WDATUM,ONRSOLL, ONRHABEN, BELEGNR, KSOLL, TEXT, BETRAG, OPBETRAG, MWST, KHABEN, BANKNRSOLL, BANKNRHABEN,
    BSTRSOLL, BSTRHABEN, SPLITNR, LBNR
    FROM BUCHUNG
    WHERE DATUM>=:ABDATUM AND (ONRSOLL=:AKTHAUS or ONRHABEN=:AKTHAUS) AND SPLITNR IS NULL and BETRAG<>0
    UNION
    SELECT
    buchung.BNR,DATUM,WDATUM,ONRSOLL, ONRHABEN, BELEGNR, KSOLL, TEXT, splitbuch.BETRAG, splitbuch.OPBETRAG, MWST, KHABEN, BANKNRSOLL, BANKNRHABEN,
    BSTRSOLL, BSTRHABEN, SPLITNR, LBNR
    FROM BUCHUNG, SPLITBUCH
    WHERE DATUM>=:ABDATUM AND (ONRSOLL=:AKTHAUS or ONRHABEN=:AKTHAUS) AND SPLITNR IS NOT NULL and splitbuch.BETRAG<>0
    AND BUCHUNG.BNR = SPLITBUCH.BNR
    INTO
     :BNR, :DATUM, :WDATUM, :ONRSOLL, :ONRHABEN, :BELEGNR, :KSOLL,:TEXT, :BETRAG, :OPBETRAG, :MWST, :KHABEN, :BANKNRSOLL, :BANKNRHABEN, :BSTRSOLL, :BSTRHABEN,
     :SPLITNR, :LBNR
    DO
     BEGIN
      SELECT SUBSTRING(KNRSTR || ' ' || KBEZ FROM 1 FOR 120) from konten where ONR=:ONRSOLL AND KNR=:KSOLL
      into :KSOLLSTR;
      SELECT SUBSTRING(KNRSTR || ' ' || KBEZ FROM 1 FOR 120) from konten where ONR=:ONRHABEN AND KNR=:KHABEN
      into :KHABENSTR;
      IF (:BANKNRSOLL IS NOT NULL) THEN
       KSOLLSTR = KSOLLSTR || ' ' || BSTRSOLL;
      IF (:BANKNRHABEN IS NOT NULL) THEN
       KHABENSTR = KHABENSTR || ' ' || BSTRHABEN;
      IF (ONRSOLL = 0) THEN
       ONR=ONRHABEN;
      ELSE
       ONR=ONRSOLL;
      IF (ONR=0) THEN
       ONR=NULL;
      IF (:OPBETRAG IS NOT NULL) THEN
       BEGIN
        IF (:OPBETRAG=0) THEN
         BEGIN
          IF (:SPLITNR IS NULL) THEN
           BEMERKUNG='SO';
          ELSE
           BEMERKUNG='SO..';         
         END
        ELSE
         BEGIN
          IF (:SPLITNR IS NULL) THEN
           BEMERKUNG='OP';
          ELSE
           BEMERKUNG='OP..';
         END  
       END
      ELSE
       BEGIN
        IF (:SPLITNR IS NOT NULL) THEN
         BEMERKUNG='..';
        ELSE
         BEMERKUNG=NULL;
       END
      SUSPEND;
     END
   END
   ELSE
    BEGIN  /* alle HÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤user */
    FOR SELECT
    BNR,DATUM,WDATUM,ONRSOLL, ONRHABEN, BELEGNR, KSOLL, TEXT, BETRAG, OPBETRAG, MWST, KHABEN, BANKNRSOLL, BANKNRHABEN,
    BSTRSOLL, BSTRHABEN, SPLITNR, LBNR
    FROM BUCHUNG
    WHERE DATUM>=:ABDATUM AND SPLITNR IS NULL and BETRAG<>0
    UNION
    SELECT
    buchung.BNR,DATUM,WDATUM,ONRSOLL, ONRHABEN, BELEGNR, KSOLL, TEXT, splitbuch.BETRAG, splitbuch.OPBETRAG, MWST, KHABEN, BANKNRSOLL, BANKNRHABEN,
    BSTRSOLL, BSTRHABEN, SPLITNR, LBNR
    FROM BUCHUNG, SPLITBUCH
    WHERE DATUM>=:ABDATUM AND SPLITNR IS NOT NULL and splitbuch.BETRAG<>0
    AND BUCHUNG.BNR = SPLITBUCH.BNR
    INTO
     :BNR, :DATUM, :WDATUM, :ONRSOLL, :ONRHABEN, :BELEGNR, :KSOLL,:TEXT, :BETRAG, :OPBETRAG, :MWST, :KHABEN, :BANKNRSOLL, :BANKNRHABEN, :BSTRSOLL, :BSTRHABEN,
     :SPLITNR, :LBNR
    DO
     BEGIN
      SELECT SUBSTRING(KNRSTR || ' ' || KBEZ FROM 1 FOR 120) from konten where ONR=:ONRSOLL AND KNR=:KSOLL
      into :KSOLLSTR;
      SELECT SUBSTRING(KNRSTR || ' ' || KBEZ FROM 1 FOR 120) from konten where ONR=:ONRHABEN AND KNR=:KHABEN
      into :KHABENSTR;
      IF (:BANKNRSOLL IS NOT NULL) THEN
       KSOLLSTR = KSOLLSTR || ' ' || BSTRSOLL;
      IF (:BANKNRHABEN IS NOT NULL) THEN
       KHABENSTR = KHABENSTR || ' ' || BSTRHABEN;
      IF (ONRSOLL = 0) THEN
       ONR=ONRHABEN;
      ELSE
       ONR=ONRSOLL;
      IF (ONR=0) THEN
       ONR=NULL;
      IF (:OPBETRAG IS NOT NULL) THEN
       BEGIN
        IF (:OPBETRAG=0) THEN
         BEGIN
          IF (:SPLITNR IS NULL) THEN
           BEMERKUNG='SO';
          ELSE
           BEMERKUNG='SO..';         
         END
        ELSE
         BEGIN
          IF (:SPLITNR IS NULL) THEN
           BEMERKUNG='OP';
          ELSE
           BEMERKUNG='OP..';
         END  
       END
      ELSE
       BEGIN
        IF (:SPLITNR IS NOT NULL) THEN
         BEMERKUNG='..';
        ELSE
         BEMERKUNG=NULL;
       END
      SUSPEND;
     END
    END    /* alle HÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤user */
  END   /* DOPPELTE BUCHFÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã¢â‚¬Å“HRUNG SPLIT ZUSAMMENGEFASST */
 ELSE
 IF (ANZEIGE=0) THEN       /* EINFACHE BUCHFÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã¢â‚¬Å“HRUNG nur Bankbuchungen ANZEIGEN */
  BEGIN
   if (:AKTHAUS <> -1) then
   BEGIN
    FOR SELECT
    BNR,DATUM,WDATUM,ONRSOLL, ONRHABEN, BELEGNR, KSOLL, TEXT, BETRAG, MWST, KHABEN, BANKNRSOLL, BANKNRHABEN, BSTRSOLL, BSTRHABEN,
    SPLITNR, LBNR
    FROM BUCHUNG
    WHERE DATUM>=:ABDATUM AND (ONRSOLL=:AKTHAUS OR ONRHABEN=:AKTHAUS) AND (ARTSOLL=20 OR ARTHABEN=20) AND SPLITNR IS NULL AND LBNR IS NULL and Betrag<>0
    UNION
    SELECT buchung.BNR,DATUM,WDATUM,ONRSOLL, ONRHABEN, BELEGNR, KSOLL, TEXT, splitbuch.BETRAG, MWST, KHABEN, BANKNRSOLL, BANKNRHABEN, BSTRSOLL, BSTRHABEN,
    SPLITNR, LBNR
    FROM BUCHUNG, SPLITBUCH
    WHERE DATUM>=:ABDATUM AND (ONRSOLL=:AKTHAUS OR ONRHABEN=:AKTHAUS) AND (ARTSOLL=20 OR ARTHABEN=20) AND SPLITNR IS NOT NULL AND LBNR IS NULL and splitbuch.Betrag<>0
    and BUCHUNG.BNR=SPLITBUCH.BNR
    INTO
     :BNR, :DATUM, :WDATUM, :ONRSOLL, :ONRHABEN, :BELEGNR, :KSOLL,:TEXT, :BETRAG, :MWST, :KHABEN, :BANKNRSOLL, :BANKNRHABEN, :BSTRSOLL, :BSTRHABEN,
     :SPLITNR, :LBNR
    DO
     BEGIN
      IF (BANKNRSOLL IS NOT NULL AND BANKNRHABEN IS NOT NULL) THEN
       BEGIN
        KSOLLSTR=:BSTRSOLL;
        KHABENSTR=:BSTRHABEN;
       END
      ELSE
       IF (BANKNRSOLL IS NOT NULL) THEN
        BEGIN
         KHABENSTR=:BSTRSOLL;
         SELECT SUBSTRING(KNRSTR || ' ' || KBEZ FROM 1 FOR 120) from konten where ONR=:ONRHABEN AND KNR=:KHABEN
         into :KSOLLSTR;
         ONR=:ONRHABEN;
        END
      ELSE
       IF (BANKNRHABEN IS NOT NULL) THEN
        BEGIN
         KHABENSTR=:BSTRHABEN;
         SELECT SUBSTRING(KNRSTR || ' ' || KBEZ FROM 1 FOR 120) from konten where ONR=:ONRSOLL AND KNR=:KSOLL
         into :KSOLLSTR;
         ONR=:ONRSOLL;
        END
      IF (ONR = 0) THEN
       ONR=NULL;
      IF (:OPBETRAG IS NOT NULL) THEN
       BEGIN
        IF (:OPBETRAG=0) THEN
         BEGIN
          IF (:SPLITNR IS NULL) THEN
           BEMERKUNG='SO';
          ELSE
           BEMERKUNG='SO..';         
         END
        ELSE
         BEGIN
          IF (:SPLITNR IS NULL) THEN
           BEMERKUNG='OP';
          ELSE
           BEMERKUNG='OP..';
         END  
       END
      ELSE
       BEGIN
        IF (:SPLITNR IS NOT NULL) THEN
         BEMERKUNG='..';
        ELSE
         BEMERKUNG=NULL;
       END
      SUSPEND;
     END
    /* Jetzt noch die Sammler */
    FOR SELECT
    LBNR, DATUM, ONR, BELEGNR, TEXT, BETRAG, BANKNR, LBNR
    FROM SLEVBUCH
    WHERE DATUM>=:ABDATUM AND OPBETRAG IS NULL
    INTO
     :BNR, :DATUM, :ONR, :BELEGNR, :TEXT, :BETRAG, :BANKNRHABEN, :LBNR
    DO
     BEGIN
      /* LEV von diesem Haus? */
      SELECT ONR from objbanken where ONR=:AKTHAUS and BANKNR=:BANKNRHABEN
      into :ONR;
      if (ONR=AKTHAUS) THEN
       BEGIN
        SELECT KURZBEZ from banken where NR=:BANKNRHABEN
        into :KHABENSTR;
        KSOLLSTR=NULL;
        BEMERKUNG='SLE';
        ONR=:AKTHAUS;
        WDATUM=DATUM;
        SUSPEND;
       END
     END
   END
  ELSE
   BEGIN  /* alle HÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤user */
   FOR SELECT
    BNR,DATUM,WDATUM,ONRSOLL, ONRHABEN, BELEGNR, KSOLL, TEXT, BETRAG, MWST, KHABEN, BANKNRSOLL, BANKNRHABEN, BSTRSOLL, BSTRHABEN,
    SPLITNR, LBNR
    FROM BUCHUNG
    WHERE DATUM>=:ABDATUM AND (ARTSOLL=20 OR ARTHABEN=20) AND SPLITNR IS NULL AND LBNR IS NULL
    UNION
    SELECT buchung.BNR,DATUM,WDATUM,ONRSOLL, ONRHABEN, BELEGNR, KSOLL, TEXT, splitbuch.BETRAG, MWST, KHABEN, BANKNRSOLL, BANKNRHABEN, BSTRSOLL, BSTRHABEN,
    SPLITNR, LBNR
    FROM BUCHUNG, SPLITBUCH
    WHERE DATUM>=:ABDATUM AND (ARTSOLL=20 OR ARTHABEN=20) AND SPLITNR IS NOT NULL AND LBNR IS NULL
    and BUCHUNG.BNR=SPLITBUCH.BNR
    INTO
     :BNR, :DATUM, :WDATUM, :ONRSOLL, :ONRHABEN, :BELEGNR, :KSOLL,:TEXT, :BETRAG, :MWST, :KHABEN, :BANKNRSOLL, :BANKNRHABEN, :BSTRSOLL, :BSTRHABEN,
     :SPLITNR, :LBNR
    DO
     BEGIN
      IF (BANKNRSOLL IS NOT NULL AND BANKNRHABEN IS NOT NULL) THEN
       BEGIN
        KSOLLSTR=:BSTRSOLL;
        KHABENSTR=:BSTRHABEN;
       END
      ELSE
       IF (BANKNRSOLL IS NOT NULL) THEN
        BEGIN
         KHABENSTR=:BSTRSOLL;
         SELECT SUBSTRING(KNRSTR || ' ' || KBEZ FROM 1 FOR 120) from konten where ONR=:ONRHABEN AND KNR=:KHABEN
         into :KSOLLSTR;
         ONR=:ONRHABEN;
        END
      ELSE
       IF (BANKNRHABEN IS NOT NULL) THEN
        BEGIN
         KHABENSTR=:BSTRHABEN;
         SELECT SUBSTRING(KNRSTR || ' ' || KBEZ FROM 1 FOR 120) from konten where ONR=:ONRSOLL AND KNR=:KSOLL
         into :KSOLLSTR;
         ONR=:ONRSOLL;
        END
      IF (ONR = 0) THEN
       ONR=NULL;
      IF (:OPBETRAG IS NOT NULL) THEN
       BEGIN
        IF (:OPBETRAG=0) THEN
         BEGIN
          IF (:SPLITNR IS NULL) THEN
           BEMERKUNG='SO';
          ELSE
           BEMERKUNG='SO..';         
         END
        ELSE
         BEGIN
          IF (:SPLITNR IS NULL) THEN
           BEMERKUNG='OP';
          ELSE
           BEMERKUNG='OP..';
         END  
       END
      ELSE
       BEGIN
        IF (:SPLITNR IS NOT NULL) THEN
         BEMERKUNG='..';
        ELSE
         BEMERKUNG=NULL;
       END
      SUSPEND;
     END
    /* Jetzt noch die Sammler */
    FOR SELECT
    LBNR, DATUM, ONR, BELEGNR, TEXT, BETRAG, BANKNR, LBNR
    FROM SLEVBUCH
    WHERE DATUM>=:ABDATUM AND OPBETRAG IS NULL
    INTO
     :BNR, :DATUM, :ONR, :BELEGNR, :TEXT, :BETRAG, :BANKNRHABEN, :LBNR
    DO
     BEGIN
      SELECT KURZBEZ from banken where NR=:BANKNRHABEN
      into :KHABENSTR;
      for SELECT ONR from objbanken where BANKNR=:BANKNRHABEN
      into :ONR do
      KSOLLSTR=NULL;
      BEMERKUNG='SLE';
      WDATUM=DATUM;
      SUSPEND;
     END
   END   /* alle HÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤user */
  END  /* EINFACHE BUCHFÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã¢â‚¬Å“HRUNG */
 END /* ZEITRAUM */
END


-- Prozedur: GET_LAST_BUCHUNG_BNR
CREATE OR ALTER PROCEDURE GET_LAST_BUCHUNG_BNR
DECLARE VARIABLE KSOLL INTEGER;
DECLARE VARIABLE KHABEN INTEGER;
DECLARE VARIABLE BANKNRSOLL INTEGER;
DECLARE VARIABLE BANKNRHABEN INTEGER;
DECLARE VARIABLE BSTRSOLL VARCHAR(15);
DECLARE VARIABLE BSTRHABEN VARCHAR(15);
DECLARE VARIABLE SPLITNR INTEGER;
DECLARE VARIABLE ONRSOLL INTEGER;
DECLARE VARIABLE ONRHABEN INTEGER;
DECLARE VARIABLE STR_LEN INTEGER;
BEGIN
 SELECT
  BNR,DATUM,WDATUM,ONRSOLL, ONRHABEN, BELEGNR, KSOLL, TEXT, BETRAG, OPBETRAG, MWST, KHABEN, BANKNRSOLL, BANKNRHABEN, BSTRSOLL, BSTRHABEN, SPLITNR, LBNR FROM BUCHUNG WHERE BNR=:BNR_IN
 INTO
  :BNR, :DATUM, :WDATUM, :ONRSOLL, :ONRHABEN, :BELEGNR, :KSOLL,:TEXT, :BETRAG, :OPBETRAG, :MWST, :KHABEN, :BANKNRSOLL, :BANKNRHABEN, :BSTRSOLL, :BSTRHABEN, :SPLITNR, :LBNR;
 IF (BNR IS NOT NULL) THEN
  BEGIN
   IF (LBNR IS NULL) THEN
    BEGIN
     IF (ANZEIGE='2') THEN      /* Anzeige doppelte BuchfÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼hrung alle = split*/
      BEGIN
       /*IF (SPLITNR IS NULL) THEN*/
        BEGIN
         SELECT SUBSTRING(KNRSTR || ' ' || KBEZ FROM 1 FOR 120) from konten where ONR=:ONRSOLL AND KNR=:KSOLL into :KSOLLSTR;
         SELECT SUBSTRING(KNRSTR || ' ' || KBEZ FROM 1 FOR 120) from konten where ONR=:ONRHABEN AND KNR=:KHABEN into :KHABENSTR;
         IF (:BANKNRSOLL IS NOT NULL) THEN
          KSOLLSTR = KSOLLSTR || ' ' || BSTRSOLL;
         IF (:BANKNRHABEN IS NOT NULL) THEN
          KHABENSTR = KHABENSTR || ' ' || BSTRHABEN;
         IF (ONRSOLL = 0) THEN
          ONR=ONRHABEN;
         ELSE
          ONR=ONRSOLL;
         IF (ONR=0) THEN
          ONR = NULL;
         IF (:OPBETRAG IS NOT NULL) THEN
          BEGIN
           IF (:SPLITNR IS NULL) THEN
            BEMERKUNG='OP';
           else
            BEMERKUNG='OP..';
          END
         ELSE
          BEMERKUNG=NULL;
         SUSPEND;
        end
      END
     ELSE
      IF (ANZEIGE=1) THEN       /* DOPPELTE BUCHFÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã¢â‚¬Å“HRUNG SPLIT ZUSAMMENGEFASST */
       BEGIN
        IF (SPLITNR IS NOT NULL) THEN
         SELECT splitbuch.BETRAG, splitbuch.OPBETRAG from splitbuch  where bnr=:bnr into :BETRAG, :OPBETRAG;
        SELECT SUBSTRING(KNRSTR || ' ' || KBEZ FROM 1 FOR 120) from konten where ONR=:ONRSOLL AND KNR=:KSOLL into :KSOLLSTR;
        SELECT SUBSTRING(KNRSTR || ' ' || KBEZ FROM 1 FOR 120) from konten where ONR=:ONRHABEN AND KNR=:KHABEN into :KHABENSTR;
        IF (:BANKNRSOLL IS NOT NULL) THEN
         KSOLLSTR = KSOLLSTR || ' ' || BSTRSOLL;
        IF (:BANKNRHABEN IS NOT NULL) THEN
         KHABENSTR = KHABENSTR || ' ' || BSTRHABEN;
        IF (ONRSOLL = 0) THEN
         ONR=ONRHABEN;
        ELSE
         ONR=ONRSOLL;
        IF (ONR=0) THEN
         ONR=NULL;
        IF (:OPBETRAG IS NOT NULL) THEN
         BEGIN
          IF (:SPLITNR IS NULL) THEN
           BEMERKUNG='OP';
          else
           BEMERKUNG='OP..';
         END
        ELSE
         BEGIN
          IF (:SPLITNR IS NOT NULL) THEN
           BEMERKUNG='..';
          ELSE
           BEMERKUNG=NULL;
         END
        /**/
        IF (SPLITNR IS NOT NULL) THEN
         BEGIN
          IF (SPLITNR=BNR) THEN
           BEGIN
            STR_LEN = CHAR_LENGTH(TEXT);
            IF (STR_LEN > 62) THEN
             TEXT = SUBSTRING (TEXT FROM 1 FOR 62);
            TEXT = TEXT || ' (Split)';
            SUSPEND;
           END 
         END
        ELSE
         SUSPEND;
       END   /* DOPPELTE BUCHFÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã¢â‚¬Å“HRUNG SPLIT ZUSAMMENGEFASST */
      ELSE
       IF (ANZEIGE=0) THEN       /* EINFACHE BUCHFÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã¢â‚¬Å“HRUNG nur Bankbuchungen ANZEIGEN */
        BEGIN
         IF (BANKNRSOLL IS NOT NULL OR BANKNRHABEN IS NOT NULL) THEN
          BEGIN
           IF (BANKNRSOLL IS NOT NULL AND BANKNRHABEN IS NOT NULL) THEN
            BEGIN
             KSOLLSTR=:BSTRSOLL;
             KHABENSTR=:BSTRHABEN;
            END
           ELSE
            IF (BANKNRSOLL IS NOT NULL) THEN
             BEGIN
              KHABENSTR=:BSTRSOLL;
              SELECT SUBSTRING(KNRSTR || ' ' || KBEZ FROM 1 FOR 120) from konten where ONR=:ONRHABEN AND KNR=:KHABEN into :KSOLLSTR;
              ONR=:ONRHABEN;
             END
            ELSE
             IF (BANKNRHABEN IS NOT NULL) THEN
              BEGIN
               KHABENSTR=:BSTRHABEN;
               SELECT SUBSTRING(KNRSTR || ' ' || KBEZ FROM 1 FOR 120) from konten where ONR=:ONRSOLL AND KNR=:KSOLL into :KSOLLSTR;
               ONR=:ONRSOLL;
              END
           IF (ONR = 0) THEN
            ONR=NULL;
           IF (:OPBETRAG IS NOT NULL) THEN
            BEGIN
             IF (:SPLITNR IS NULL) THEN
              BEMERKUNG='OP';
             else
              BEMERKUNG='OP..';
            END
           ELSE
            BEGIN
             IF (:SPLITNR IS NOT NULL) THEN
              BEMERKUNG='..';
             ELSE
              BEMERKUNG=NULL;
            END
           SUSPEND;
          END /* BANKBUCHUNG */
        END
    END
   ELSE
    BEGIN
     /* Sammler */
     SELECT DATUM, BELEGNR, TEXT, BETRAG, BANKNR FROM SLEVBUCH WHERE LBNR=:LBNR INTO :DATUM, BELEGNR, :TEXT, :BETRAG, :BANKNRHABEN;
     BNR=LBNR;
     SELECT KURZBEZ from banken where NR=:BANKNRHABEN into :BSTRSOLL;
     IF (ANZEIGE=0) THEN
      BEGIN
       KHABENSTR = BSTRSOLL;
       KSOLLSTR='(Sammler)';
      END
     ELSE
      BEGIN
       KSOLLSTR = BSTRSOLL;
       KHABENSTR='(Sammler)';
      END
     ONR=ONRHABEN;
     BEMERKUNG='SLE';
     WDATUM=DATUM;
     SUSPEND;
    END  /* SAMMLER */
  END /* BNR not NULL */
END


-- Prozedur: GET_MAHNLISTE
CREATE OR ALTER PROCEDURE GET_MAHNLISTE
--Erstellt
--Author
--Geandert 28.04.2023 
--Author RM
--IF (BMAHNALT='J') entfernt
DECLARE VARIABLE MSVON INTEGER;
DECLARE VARIABLE MSBIS INTEGER;
DECLARE VARIABLE KONTONAME VARCHAR(188);
DECLARE VARIABLE ILEV INTEGER;
DECLARE VARIABLE RBETRAG NUMERIC(18, 2);
DECLARE VARIABLE ITMP INTEGER;
DECLARE VARIABLE ITMP2 INTEGER;
DECLARE VARIABLE IVERWVON INTEGER;
DECLARE VARIABLE IVERWBIS INTEGER;
BEGIN
 IF (ZEIG_MAHNSTUFE=0) THEN  /* 1..5 */
  BEGIN
   MSVON=1;
   MSBIS=5;   
  END
 ELSE
  BEGIN
   MSVON=ZEIG_MAHNSTUFE;
   MSBIS=ZEIG_MAHNSTUFE;
  END
 IF (IAKTVERW=-1) THEN
  BEGIN
   IVERWVON=0;
   IVERWBIS=999;
  END
 ELSE
  BEGIN
   IVERWVON=IAKTVERW;
   IVERWBIS=IAKTVERW;
  END
 IF (BLEV='Z') then/* zuletzt gemahnt */
  BEGIN
   For
    select onrsoll, ksoll, kstrsoll, text, mahnstufe, opbetrag, datum, zzdatum, opnr, 'N', -1, 'N',ZULETZT_GEMAHNT from buchung
    where (MAHNSTUFE>=:MSVON and MAHNSTUFE<=:MSBIS) and (ONRSOLL>=:ONRVON and onrsoll<=:ONRBIS and 
    (ONRSOLL in (select onr from objekte,verwalter where objekte.verwnr=verwalter.nr and onr<>0 
    and verwalter.nr>=:IVERWVON and verwalter.nr<=:IVERWBIS))) and ZULETZT_GEMAHNT IS NOT NULL
   into ONR, KNR, KNRSTR, TEXT, STUFE, BETRAG, DATUM, ZZDATUM, OPNR, SPERRE, ILEV, GEWERBLICH,ZULETZT_GEMAHNT
   DO
    SUSPEND;
   END
 ELSE
  BEGIN
    /* KEIN SPLIT */
    BEGIN
     ITMP=-1;
     ITMP2=-1;
     --(BMAHNALT='J')
     FOR
      select onrsoll, ksoll, kstrsoll, text, mahnstufe, opbetrag, datum, zzdatum, opnr, emahnsperre,lbnr, emwstausw,ZULETZT_GEMAHNT from buchung, eigentuemer
      where (MAHNSTUFE>=:MSVON and MAHNSTUFE<=:MSBIS) and splitnr is null and (ONRSOLL>=:ONRVON and onrsoll<=:ONRBIS and (ONRSOLL in (select onr from objekte,verwalter where objekte.verwnr=verwalter.nr and onr<>0 and verwalter.nr>=:IVERWVON and verwalter.nr<=:IVERWBIS and MAHNALT = 'J'))) and OPBETRAG<>0 and zzdatum<=:ABDATUM
      and eigentuemer.onr=buchung.onrsoll and eigentuemer.knr=buchung.ksoll
      and emahnsperre = 'N'
      union
      select onrsoll, ksoll, kstrsoll, text, mahnstufe, opbetrag, datum, zzdatum, opnr, bmahnsperre,lbnr, bmwstausw,ZULETZT_GEMAHNT from buchung, bewohner
      where (MAHNSTUFE>=:MSVON and MAHNSTUFE<=:MSBIS) and splitnr is null and (ONRSOLL>=:ONRVON and onrsoll<=:ONRBIS and (ONRSOLL in (select onr from objekte,verwalter where objekte.verwnr=verwalter.nr and onr<>0 and verwalter.nr>=:IVERWVON and verwalter.nr<=:IVERWBIS and MAHNALT = 'J'))) and OPBETRAG<>0 and zzdatum<=:ABDATUM
      and bewohner.onr=buchung.onrsoll and bewohner.knr=buchung.ksoll
      and bmahnsperre = 'N'
      order by 1, 2
      into ONR, KNR, KNRSTR, TEXT, STUFE, BETRAG, DATUM, ZZDATUM, OPNR, SPERRE, ILEV, GEWERBLICH,ZULETZT_GEMAHNT
      do
      begin
        IF ((ITMP<>KNR) OR (ITMP2<>ONR)) THEN
        BEGIN
         select saldo from KONTOSALDO_ALT(:ONR,:KNR,'01.01.9990','J','N') into RBETRAG;
         ITMP=KNR;
         ITMP2=ONR;
        END
        IF (RBETRAG<0) THEN
        BEGIN
         select KBEZ from konten where ONR=:ONR and KNR=:KNR into KONTONAME;
         KNRSTR=Left(KNRSTR || ' ' || KONTONAME, 100);
         if (BLEV='J') then
          SUSPEND;
         else
          begin
           if (ILEV is null) then
            SUSPEND;
          end
        END
      end
    END
    --(BMAHNALT='N')
    BEGIN
     for
      select onrsoll, ksoll, kstrsoll, text, mahnstufe, opbetrag, datum, zzdatum, opnr, emahnsperre,lbnr, emwstausw,ZULETZT_GEMAHNT from buchung, eigentuemer
      where (MAHNSTUFE>=:MSVON and MAHNSTUFE<=:MSBIS) and splitnr is null and (ONRSOLL>=:ONRVON and onrsoll<=:ONRBIS and (ONRSOLL in (select onr from objekte,verwalter where objekte.verwnr=verwalter.nr and onr<>0 and verwalter.nr>=:IVERWVON and verwalter.nr<=:IVERWBIS and MAHNALT = 'N'))) and OPBETRAG>0 and zzdatum<=:ABDATUM
      and eigentuemer.onr=buchung.onrsoll and eigentuemer.knr=buchung.ksoll
      and emahnsperre = 'N'
      union
      select onrsoll, ksoll, kstrsoll, text, mahnstufe, opbetrag, datum, zzdatum, opnr, bmahnsperre,lbnr, bmwstausw,ZULETZT_GEMAHNT from buchung, bewohner
      where (MAHNSTUFE>=:MSVON and MAHNSTUFE<=:MSBIS) and splitnr is null and (ONRSOLL>=:ONRVON and onrsoll<=:ONRBIS and (ONRSOLL in (select onr from objekte,verwalter where objekte.verwnr=verwalter.nr and onr<>0 and verwalter.nr>=:IVERWVON and verwalter.nr<=:IVERWBIS and MAHNALT = 'N'))) and OPBETRAG>0 and zzdatum<=:ABDATUM
      and bewohner.onr=buchung.onrsoll and bewohner.knr=buchung.ksoll
      and bmahnsperre = 'N'
      order by 1, 2
      into ONR, KNR, KNRSTR, TEXT, STUFE, BETRAG, DATUM, ZZDATUM, OPNR, SPERRE, ILEV, GEWERBLICH,ZULETZT_GEMAHNT
     do
      begin
       select KBEZ from konten where ONR=:ONR and KNR=:KNR into KONTONAME;
       KNRSTR=Left(KNRSTR || ' ' || KONTONAME, 100);
       IF (BETRAG>0) THEN
        BEGIN
         if (BLEV='J') then
          SUSPEND;
         else
          begin
           if (ILEV is null) then
            SUSPEND;
          end
        END
      end
    END
   /* SPLIT */
    BEGIN
     ITMP=-1;
     ITMP2=-1; 
     --(BMAHNALT='J')
     for
      select opnr,onrsoll, ksoll, kstrsoll, text, mahnstufe, datum, zzdatum,bmahnsperre,lbnr, bmwstausw,ZULETZT_GEMAHNT from buchung,bewohner
      where buchung.opbetrag<>0 and (ONRSOLL>=:ONRVON and onrsoll<=:ONRBIS and (ONRSOLL in (select onr from objekte,verwalter where objekte.verwnr=verwalter.nr and onr<>0 and verwalter.nr>=:IVERWVON and verwalter.nr<=:IVERWBIS and MAHNALT = 'J'))) and splitnr is not null
      and bewohner.onr=buchung.onrsoll and bewohner.knr=buchung.ksoll
      and (MAHNSTUFE>=:MSVON and MAHNSTUFE<=:MSBIS)
      and bmahnsperre = 'N'
      and zzdatum<=:ABDATUM
      group by opnr,onrsoll, ksoll, kstrsoll, text, mahnstufe, datum, zzdatum,bmahnsperre,lbnr,bmwstausw,ZULETZT_GEMAHNT
      union
      select opnr,onrsoll, ksoll, kstrsoll, text, mahnstufe, datum, zzdatum,emahnsperre,LBNR, emwstausw,ZULETZT_GEMAHNT from buchung,eigentuemer
      where buchung.opbetrag<>0 and (ONRSOLL>=:ONRVON and onrsoll<=:ONRBIS and (ONRSOLL in (select onr from objekte,verwalter where objekte.verwnr=verwalter.nr and onr<>0 and verwalter.nr>=:IVERWVON and verwalter.nr<=:IVERWBIS and MAHNALT = 'J'))) and splitnr is not null
      and eigentuemer.onr=buchung.onrsoll and eigentuemer.knr=buchung.ksoll
      and (MAHNSTUFE>=:MSVON and MAHNSTUFE<=:MSBIS)
      and emahnsperre = 'N'
      and zzdatum<=:ABDATUM
      group by opnr,onrsoll, ksoll, kstrsoll, text, mahnstufe, datum, zzdatum,emahnsperre,lbnr, emwstausw,ZULETZT_GEMAHNT
      order by 2, 3
      into :OPNR,ONR, KNR, KNRSTR, TEXT, STUFE, DATUM, ZZDATUM, :SPERRE,ILEV, gewerblich,ZULETZT_GEMAHNT do
     begin
      select opbetrag from splitbuch where bnr=:OPNR
      into BETRAG;
      IF ((ITMP<>KNR) OR (ITMP2<>ONR)) THEN
       BEGIN
        select saldo from KONTOSALDO_ALT(:ONR,:KNR,'01.01.9990','J','N') into RBETRAG;
        ITMP=KNR;
        ITMP2=ONR;
       END
      IF (RBETRAG<0) THEN
       BEGIN
        select KBEZ from konten where ONR=:ONR and KNR=:KNR into KONTONAME;
        KNRSTR=Left(KNRSTR || ' ' || KONTONAME, 100);
        if (BLEV='J') then
         SUSPEND;
        else
         begin
          if (ILEV is null) then
           SUSPEND;
         end
       END
     end
    END

    BEGIN
     --(BMAHNALT='N')
     for
      select opnr,onrsoll, ksoll, kstrsoll, text, mahnstufe, datum, zzdatum,bmahnsperre,lbnr, bmwstausw,ZULETZT_GEMAHNT from buchung,bewohner
      where buchung.opbetrag>0 and (ONRSOLL>=:ONRVON and onrsoll<=:ONRBIS and (ONRSOLL in (select onr from objekte,verwalter where objekte.verwnr=verwalter.nr and onr<>0 and verwalter.nr>=:IVERWVON and verwalter.nr<=:IVERWBIS and MAHNALT = 'N'))) and splitnr is not null
      and bewohner.onr=buchung.onrsoll and bewohner.knr=buchung.ksoll
      and (MAHNSTUFE>=:MSVON and MAHNSTUFE<=:MSBIS)
      and bmahnsperre = 'N'
      and zzdatum<=:ABDATUM
      group by opnr,onrsoll, ksoll, kstrsoll, text, mahnstufe, datum, zzdatum,bmahnsperre,lbnr, bmwstausw,ZULETZT_GEMAHNT
      union
      select opnr,onrsoll, ksoll, kstrsoll, text, mahnstufe, datum, zzdatum,emahnsperre,LBNR, emwstausw,ZULETZT_GEMAHNT from buchung,eigentuemer
      where buchung.opbetrag>0 and (ONRSOLL>=:ONRVON and onrsoll<=:ONRBIS and (ONRSOLL in (select onr from objekte,verwalter where objekte.verwnr=verwalter.nr and onr<>0 and verwalter.nr>=:IVERWVON and verwalter.nr<=:IVERWBIS and MAHNALT = 'N'))) and splitnr is not null
      and eigentuemer.onr=buchung.onrsoll and eigentuemer.knr=buchung.ksoll
      and (MAHNSTUFE>=:MSVON and MAHNSTUFE<=:MSBIS)
      and emahnsperre = 'N'
      and zzdatum<=:ABDATUM
      group by opnr,onrsoll, ksoll, kstrsoll, text, mahnstufe, datum, zzdatum,emahnsperre,lbnr, emwstausw,ZULETZT_GEMAHNT
      order by 2, 3
      into :OPNR,ONR, KNR, KNRSTR, TEXT, STUFE, DATUM, ZZDATUM, :SPERRE,ILEV, GEWERBLICH,ZULETZT_GEMAHNT do
     begin
      select opbetrag from splitbuch where bnr=:OPNR
      into BETRAG;
      select KBEZ from konten where ONR=:ONR and KNR=:KNR into KONTONAME;
      KNRSTR=Left(KNRSTR || ' ' || KONTONAME, 100);
      IF (BETRAG>0) THEN
       BEGIN
        if (BLEV='J') then
         SUSPEND;
        else
         begin
          if (ILEV is null) then
           SUSPEND;
         end
       END
     end
    END
  END
END


-- Prozedur: GET_RUECKL_BUCHUNGEN
CREATE OR ALTER PROCEDURE GET_RUECKL_BUCHUNGEN
BEGIN

/*TEMP 
IONR=998;
IKNR=840;
DVON = '1.1.2018';
DBIS = '31.12.2018';
ISWDATUM = 0;
KZUF = 30000;
RZUF = 10000;
*/


  /* WDATUM */
  IF (ISWDATUM=1) THEN
   BEGIN
    /* HABEN */
    FOR SELECT ONRHABEN, KHABEN, KSTRHABEN, WDATUM, TEXT, Betrag from buchung
    where ONRHABEN=:IONR and KHABEN=:IKNR and (WDATUM>=:DVON and WDATUM<=:DBIS) and KSOLL<>:KZUF
    order by WDATUM
    INTO ONR, KONTO, KONTOSTR, DATUM, TEXT, BETRAG
    DO
     BEGIN
      ZUF=1;
      SUSPEND;
     END
    /* SOLL */
    FOR SELECT ONRSOLL, KSOLL, KSTRSOLL, WDATUM, TEXT, Betrag from buchung
    where ONRSOLL=:IONR and KSOLL=:IKNR and (WDATUM>=:DVON and WDATUM<=:DBIS) and KHABEN<>:KZUF
    order by WDATUM
    INTO ONR, KONTO, KONTOSTR, DATUM, TEXT, BETRAG
    DO
     BEGIN
      ZUF=2;
      SUSPEND;
     END
   END
  ELSE
   BEGIN  /* DATUM */
    /* HABEN */
    FOR SELECT ONRHABEN, KHABEN, KSTRHABEN, DATUM, TEXT, Betrag from buchung
    where ONRHABEN=:IONR and KHABEN=:IKNR and (DATUM>=:DVON and DATUM<=:DBIS) and KSOLL<>:KZUF
    order by DATUM
    INTO ONR, KONTO, KONTOSTR, DATUM, TEXT, BETRAG
    DO
     BEGIN
      ZUF=1;
      SUSPEND;
     END
    /* SOLL */
    FOR SELECT ONRSOLL, KSOLL, KSTRSOLL, DATUM, TEXT, Betrag from buchung
    where ONRSOLL=:IONR and KSOLL=:IKNR and (DATUM>=:DVON and DATUM<=:DBIS) and KHABEN<>:KZUF
    order by WDATUM
    INTO ONR, KONTO, KONTOSTR, DATUM, TEXT, BETRAG
    DO
     BEGIN
      ZUF=2;
      SUSPEND;
     END
   END
  /* Bereits berechnete ZUF der Eigentuemer */ 
  ONR=:IONR;
  KONTO=:IKNR;
/*  KONTOSTR='RÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼cklagenkonto'; */
  DATUM=:DBIS;
  TEXT = 'IST-ZufÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼hrung (Zahlungen aller EigentÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼mer lt. Wirtschaftsplan)'; 
  BETRAG =:RZUF;
  ZUF=1;
  SUSPEND;
 END


-- Prozedur: GET_RUECKL_BUCHUNGEN_RLA
CREATE OR ALTER PROCEDURE GET_RUECKL_BUCHUNGEN_RLA
DECLARE VARIABLE ICOUNT Integer;
 DECLARE VARIABLE KSOLL Integer;
 DECLARE VARIABLE KHABEN Integer;
BEGIN
 IF (IS_WDATUM=0) THEN
  BEGIN
   FOR SELECT NR, KNR from rueckbkt where RUECKPOS=:IRUECKPOS
   INTO :NR, :KONTO do
    BEGIN
     ICOUNT=0;
     FOR select KSOLL, KHABEN, Datum, Text, Betrag
     FROM buchung
     WHERE ((ONRSOLL=:IONR and KSOLL=:KONTO) OR (ONRHABEN=:IONR and KHABEN=:KONTO))
     and (Datum>=:DTVON and Datum<=:DTBIS)
     order by Datum
     INTO KSOLL, KHABEN, Datum,Text,Betrag
     DO
      BEGIN
       IF (KHABEN=KONTO) THEN  /*Abgang*/
        BETRAG=-BETRAG;
       ICOUNT=ICOUNT+1;
       SUSPEND;
      END
     /* mindestens 1 Buchung sonst nicht gedruckt */
     IF (ICOUNT=0) THEN
      BEGIN
       DATUM=NULL;
       KONTO=NULL;
       TEXT='Keine Buchungen im Zeitraum';
       BETRAG=NULL;
       SUSPEND;
      END
    END
  END
 ELSE
  BEGIN
  FOR SELECT NR, KNR from rueckbkt where RUECKPOS=:IRUECKPOS
   INTO :NR, :KONTO do
    BEGIN
     ICOUNT=0;
     FOR select KSOLL, KHABEN, WDatum, Text, Betrag
     FROM buchung
     WHERE ((ONRSOLL=:IONR and KSOLL=:KONTO) OR (ONRHABEN=:IONR and KHABEN=:KONTO))
     and (WDatum>=:DTVON and WDatum<=:DTBIS)
     order by WDatum
     INTO KSOLL, KHABEN, Datum,Text,Betrag
     DO
      BEGIN
       IF (KHABEN=KONTO) THEN  /*Abgang*/
        BETRAG=-BETRAG;
       ICOUNT=ICOUNT+1;
       SUSPEND;
      END
     /* mindestens 1 Buchung sonst nicht gedruckt */
     IF (ICOUNT=0) THEN
      BEGIN
       DATUM=NULL;
       KONTO=NULL;
       TEXT='Keine Buchungen im Zeitraum';
       BETRAG=NULL;
       SUSPEND;
      END
    END
  END
END


-- Prozedur: GET_SOLLSTBEZ
CREATE OR ALTER PROCEDURE GET_SOLLSTBEZ
DECLARE VARIABLE WHGBEZ VARCHAR(25);
DECLARE VARIABLE SNAME VARCHAR(80);
DECLARE VARIABLE SVNAME VARCHAR(80);
DECLARE VARIABLE SOBEZ VARCHAR(100);
BEGIN
 IF (ISDEBITOR=1) THEN
  BEGIN
   SELECT OBEZ from objekte
   WHERE ONR=:ONR
   INTO :SOBEZ;
   IF (:KNR<200000) THEN
     BEGIN
        SELECT EBEZ from wohnung
        WHERE ONR=:ONR and BKNR=:KNR
        INTO :WHGBEZ;
        select ba.BNAME, ba.BVNAME, ba.BSTR || ', ' || ba.BPLZORT from bewohner b,bewadr ba
        where b.bewnr=ba.bewnr and ONR=:ONR and KNR=:KNR
        into :SNAME, :SVNAME, BEZ;
     END
    ELSE
     BEGIN /* EigentÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼mer */
      SELECT EBEZ from wohnung
      WHERE ONR=:ONR and EKNR=:KNR
      INTO :WHGBEZ;
      select ENAME, EVNAME, ESTR || ', ' || EPLZORT from eigadr, eigentuemer
      where EIGENTUEMER.ONR=:ONR and EIGENTUEMER.KNR=:KNR
      and EIGADR.EIGNR = EIGENTUEMER.EIGNR
      into :SNAME, :SVNAME, BEZ;
     END
    IF (:SVNAME IS NULL) then
     BEZ=:SNAME || ', ' || :BEZ;
    ELSE
     BEZ=:SNAME || ' ' || :SVNAME || ', ' || :BEZ;
     BEZ=:SOBEZ|| ' - ' || :WHGBEZ || ', ' || :BEZ;
   SUSPEND;
  END
 ELSE
  BEGIN
   SELECT NAME || ', ' || STRASSE || ' ' || PLZ || ' ' || ORT || TEL1 from lieferan
   where LIEFKNR=:KNR
   INTO
    BEZ;
   SUSPEND;
  END
END


-- Prozedur: HAUSABR_EA
CREATE OR ALTER PROCEDURE HAUSABR_EA
DECLARE VARIABLE IMWSTART INTEGER;
DECLARE VARIABLE KTOUNEINBRINGLICH INTEGER;
DECLARE VARIABLE IPROZ_UST NUMERIC(15, 4);
DECLARE VARIABLE IBNR INTEGER;
DECLARE VARIABLE IMWST NUMERIC(15, 2);
DECLARE VARIABLE RVORTRAG NUMERIC(15, 2);
DECLARE VARIABLE KBEW1 CHAR(1);
DECLARE VARIABLE KBEW2 CHAR(1);
DECLARE VARIABLE IS_KVERTEILUNG CHAR(1);
DECLARE VARIABLE IS_KBEW CHAR(1);
DECLARE VARIABLE IS_HAUSTYP INTEGER;
DECLARE VARIABLE TEMP_SUM NUMERIC(15, 2);
DECLARE VARIABLE TEMP_UST NUMERIC(15, 2);
DECLARE VARIABLE KKSTNR INTEGER;
DECLARE VARIABLE KONTONR VARCHAR(30);
DECLARE VARIABLE BHEIZ VARCHAR(1);
DECLARE VARIABLE IHEIZK INTEGER;
DECLARE VARIABLE IHEIZEXTERN INTEGER;
DECLARE VARIABLE LEVBANKNR INTEGER;
DECLARE VARIABLE IGN SMALLINT;
DECLARE VARIABLE DTVONBDATUM DATE;
DECLARE VARIABLE DTBISBDATUM DATE;
DECLARE VARIABLE DTVONWDATUM DATE;
DECLARE VARIABLE DTBISWDATUM DATE;
DECLARE VARIABLE ITMP INTEGER;
DECLARE VARIABLE RLPOS INTEGER;
DECLARE VARIABLE RUECKL1 NUMERIC(15, 2);
DECLARE VARIABLE RUECKL2 NUMERIC(15, 2);
DECLARE VARIABLE RUECKL3 NUMERIC(15, 2);
DECLARE VARIABLE RUECKL4 NUMERIC(15, 2);
DECLARE VARIABLE RUECKL5 NUMERIC(15, 2);
DECLARE VARIABLE RUECKL6 NUMERIC(15, 2);
DECLARE VARIABLE RUECKL7 NUMERIC(15, 2);
DECLARE VARIABLE RUECKLAB NUMERIC(15, 2);
DECLARE VARIABLE SKBEZ VARCHAR(188);
BEGIN
 RUECKL1=0;
 RUECKL2=0;
 RUECKL3=0;
 RUECKL4=0;
 RUECKL5=0;
 RUECKL6=0;
 RUECKL7=0;
 RUECKLAB=0;
 SKBEZ='';
 SALDOGES_EK=0;
 SALDOGES_AP=0;
 EA=1;
 UST_E=0;
 UST_A=0;
 UST_AANRECH=0;
 ABRVON=DTVON;
 ABRBIS=DTBIS;
 If (VON_ONR=BIS_ONR) THEN
  ISAMMEL=0;
 ELSE
  ISAMMEL=1;
 /* W_Datum abfragen  */
 if (IS_WDATUM = 'N') then
  begin
   DTVONBDATUM = DTVON;
   DTBISBDATUM = DTBIS;
   DTVONWDATUM = '01.01.1900';
   DTBISWDATUM = '01.01.1900';
  end
 else
  begin
   DTVONBDATUM = '01.01.1900';
   DTBISBDATUM = '01.01.1900';
   DTVONWDATUM = DTVON;
   DTBISWDATUM = DTBIS;
  end  
 FOR SELECT ONR, BSONST, HUWERT from OBJEKTE
 WHERE ONR>=:VON_ONR and ONR<=:BIS_ONR
 INTO :ONR, :IS_HAUSTYP, :IPROZ_UST
 DO
  BEGIN
   IF (IPROZ_UST IS null) THEN
    IPROZ_UST=0;
   IF (IPROZ_UST<>0) THEN
    IPROZ_UST=IPROZ_UST / 100;
   IF (IS_HAUSTYP = 0) THEN
    BEGIN
     KBEW1='J';
     KBEW2='J';
    END
   ELSE
    IF (IS_HAUSTYP = 1) THEN
     BEGIN
      KBEW1='N';
      KBEW2='N';
    END
   ELSe
    BEGIN /* Miet & WEG */
     IF (IS_ABR_HAUSTYP=0) THEN  /* Nur Miet bei Pro Haus */
      BEGIN
       KBEW1='J';
       KBEW2='J';
      END
     ELSE
      IF (IS_ABR_HAUSTYP=1) THEN  /* Nur WEG bei Pro Haus */
       BEGIN
        KBEW1='N';
        KBEW2='N';
       END
      ELSE
       BEGIN
        KBEW1='J';
        KBEW2='N';
       END
    END
   /* Alle E/K Konten*/
   FOR
    SELECT KNR, KNRSTR, KBEZ, IFREI1, KKLASSE, KVERTEILUNG, BHEIZ, IHEIZK, IHEIZEXT, KBEW, KKSTNR, RLPOS, 0 as GN, NICHT_IN_EAR from konten where ONR=:ONR AND (KKLASSE<20 or (KKLASSE>=110 and KKLASSE<=580)) and KKLASSE<>18 AND (KBEW=:KBEW1 OR KBEW=:KBEW2 OR KKSTNR=3) and KNR not in (50,51,52,53,54,60,61,62,63,64,0)
    union
    SELECT KNR, KNRSTR, KBEZ, IFREI1, KKLASSE, KVERTEILUNG, BHEIZ, IHEIZK, IHEIZEXT, KBEW, KKSTNR, RLPOS, 1 as GN, NICHT_IN_EAR from konten where ONR=:ONR AND (KKLASSE=15 or (KKLASSE>=110 and KKLASSE<=580)) AND (KBEW=:KBEW1 OR KBEW=:KBEW2 OR KKSTNR=3) and KNR not in (50,51,52,53,54,60,61,62,63,64,0)
    union
    SELECT KNR, KNRSTR, KBEZ, IFREI1, KKLASSE, KVERTEILUNG, BHEIZ, IHEIZK, IHEIZEXT, KBEW, KKSTNR, RLPOS, 0 as GN, NICHT_IN_EAR from konten where ONR=:ONR AND (KNR in (50,51,52,53,54,60,61,62,63,64)) and (:IS_ABR_HAUSTYP <> 1)
    order by 5
   INTO :KNR, :KNRSTR, :SKBEZ, :IMWSTART, :KLASSE, :IS_KVERTEILUNG, :BHEIZ, :IHEIZK, :IHEIZEXTERN, :IS_KBEW, :KKSTNR, :RLPOS, :IGN, NICHT_IN_EAR
   DO
    begin
     KBEZ = SUBSTRING(SKBEZ FROM 1 FOR 88);
     SAUS=0;
     SEIN=0;
     UST_A=0;
     UST_E=0;
     UST_AANRECH=0;
     IF (BHEIZ IS NULL) THEN
      BHEIZ='N';
     IF (IHEIZEXTERN IS NULL) THEN
      IHEIZEXTERN=-1;
     IF (IHEIZK IS NULL) THEN
      IHEIZK=-1;
     IF (IHEIZK>0 OR IHEIZEXTERN>0) THEN
      BHEIZ='J';
     IF (IGN=1) THEN
      BEGIN
       SKBEZ = 'Guthaben/Nachzahlung ' || KBEZ;
       KBEZ = SUBSTRING(SKBEZ FROM 1 FOR 88);
      END
     IF (IST_BUCHHALTUNG='J') THEN
      BEGIN
       IF (IS_WDATUM='N') THEN
        BEGIN
         /* E/K im Soll auf A/P direkt gebucht */
         select Sum(Betrag), Sum(Betrag - ((BETRAG*100) / (100+MWST))) from buchung   
         where (ONRSOLL=:ONR And KSOLL=:KNR)
         and ((ONRHABEN=:ONR OR ONRHABEN=0) And ((ARTHABEN>=20 And ArtHaben<=30) OR (ARTHABEN=1 OR ARTHABEN=19)))
         and (Datum>=:DTVON and Datum<=:DTBIS)
         and (GN=:IGN or GN=71)
         into :TEMP_SUM, TEMP_UST;
         if (TEMP_SUM IS NULL) then
          TEMP_SUM=0;
         if (TEMP_UST IS NULL) then
          TEMP_UST=0;
         IF ((KLASSE>=110) and (KLASSE<=580)) THEN
          TEMP_UST=0;   
         IF (KLASSE=1) THEN
          BEGIN
           SAUS=TEMP_SUM;
           UST_A=TEMP_UST;
          END
         ELSE
          BEGIN
           SEIN=-TEMP_SUM;
           UST_E=-TEMP_UST;
          END
         /* E/K im Haben direkt auf A/P gebucht*/
         select Sum(Betrag), Sum(Betrag - ((BETRAG*100) / (100+MWST))) from buchung
         where (ONRHABEN=:ONR And KHABEN=:KNR)
         and ((ONRSOLL=:ONR or ONRSOLL=0) And ((ARTSOLL>=20 And ArtSoll<=30) OR (ARTSOLL=1 OR ARTSOLL=19)))
         and (Datum>=:DTVON and Datum<=:DTBIS)
         and (GN=:IGN or GN=71)
         into :TEMP_SUM, TEMP_UST;
         if (TEMP_SUM IS NULL) then
          TEMP_SUM=0;
         if (TEMP_UST IS NULL) then
          TEMP_UST=0;
         IF ((KLASSE>=110) and (KLASSE<=580)) THEN
          TEMP_UST=0;
         IF (KLASSE=1) THEN
          begin
           SAUS=SAUS-TEMP_SUM;
           UST_A=UST_A-TEMP_UST;
          end
         ELSE
          begin
           SEIN=SEIN+TEMP_SUM;
           UST_E=TEMP_UST;
          end
         /*A/P im SOll, DEB/KRED im Haben, kein SpLIT*/
         select Sum(Betrag), Sum(Betrag - ((BETRAG*100) / (100+MWSTOP))) from buchung
         where KNROP=:KNR
         AND
         (ONRSOLL=:ONR And ArtSoll>=20 And ArtSoll<=27)
         and (Datum>=:DTVON and Datum<=:DTBIS)
         and (GN=:IGN or GN=71)
         into :TEMP_SUM, TEMP_UST;
         if (TEMP_SUM IS NULL) then
          TEMP_SUM=0;
         if (TEMP_UST IS NULL) then
          TEMP_UST=0;
         IF ((KLASSE>=110) and (KLASSE<=580)) THEN
          TEMP_UST=0; 
         IF (KLASSE=1) THEN
          BEGIN
           SAUS=SAUS - TEMP_SUM;
           UST_A=UST_A-TEMP_UST;
          END
         ELSE
          BEGIN
           SEIN=SEIN + TEMP_SUM;
           UST_E=UST_E+TEMP_UST;
          END
         /*A/P im Haben, DEB/KRED im Soll, kein SPLIT*/
         select Sum(Betrag),Sum(Betrag - ((BETRAG*100) / (100+MWSTOP))) from buchung
         where KNROP=:KNR
         and (GN=:IGN or GN=71)
         AND
         (ONRHABEN=:ONR And ArtHaben>=20 And ArtHaben<=27)
         and (Datum>=:DTVON and Datum<=:DTBIS)
         into :TEMP_SUM, TEMP_UST;
         if (TEMP_SUM IS NULL) then
          TEMP_SUM=0;
         if (TEMP_UST IS NULL) then
          TEMP_UST=0;
         IF ((KLASSE>=110) and (KLASSE<=580)) THEN
          TEMP_UST=0; 
         IF (KLASSE=1) THEN
          BEGIN
           SAUS=SAUS + TEMP_SUM;
           UST_A=UST_A+TEMP_UST;
          END
         ELSE
          BEGIN
           SEIN=SEIN - TEMP_SUM;
           UST_E=UST_E-TEMP_UST;
          END
         /* Umwandlungen G/N in geleistete BK*/
         IF (KLASSE>=10 AND KLASSE<=18) THEN
          BEGIN
           /* KEIN SPLIT */
           select Sum(Betrag),Sum(Betrag - ((BETRAG*100) / (100+MWSTOP))) from buchung
           where KNROP=:KNR
           AND (ONRSOLL=:ONR And ArtSoll>=60 And ArtSoll<=62)
           AND (ONRHABEN=:ONR And ArtHaben>=10  And ArtHaben<=18)
           and (Datum>=:DTVON and Datum<=:DTBIS)
           and (GN=:IGN or GN=71)
           into :TEMP_SUM, TEMP_UST;
           if (TEMP_SUM IS NULL) then
            TEMP_SUM=0;
           if (TEMP_UST IS NULL) then
            TEMP_UST=0;
           IF ((KLASSE>=110) and (KLASSE<=580)) THEN
            TEMP_UST=0; 
           SEIN=SEIN - TEMP_SUM;
           UST_E=UST_E-TEMP_UST;
           /* SPLIT */
           select sum(buchzahl.betrag), Sum(buchzahl.Betrag - ((buchzahl.BETRAG*100) / (100+buchzahl.MWSTOP))) from buchzahl, buchung
           where buchzahl.knr=:KNR
           and buchzahl.bnr=buchung.bnr
           and (buchung.datum>=:DTVON and buchung.datum<=:DTBIS)
           and (buchung.onrsoll=:ONR and buchung.artsoll>=60 and buchung.artsoll<=62)
           and (GN=:IGN or GN=71)
           into :TEMP_SUM, :TEMP_UST;
           if (TEMP_SUM IS NULL) then
            TEMP_SUM=0;
           if (TEMP_UST IS NULL) then
            TEMP_UST=0;
           IF ((KLASSE>=110) and (KLASSE<=580)) THEN
            TEMP_UST=0; 
           SEIN=SEIN - TEMP_SUM;
           UST_E=UST_E-TEMP_UST;
          END
         /* K SPLIT Bank immer im Haben bei Kosten*/
         IF (KLASSE=1) THEN
          BEGIN
           select sum(bz.betrag),Sum(bz.Betrag - ((bz.BETRAG*100) / (100+bz.MWSTOP))) from buchzahl bz, buchung b1, buchung b2
           where bz.knr=:KNR 
           and bz.bnr=b1.bnr
           and (b1.datum>=:DTVON and b1.datum<=:DTBIS)
           and (b1.arthaben>=20 and b1.arthaben<=27)
           and (b1.GN=:IGN or b1.GN=71)
           and bz.OPNR=b2.bnr and (b2.ONRSOLL=:onr or b2.onrhaben=:onr)
           into :TEMP_SUM, :TEMP_UST;
           if (TEMP_SUM IS NULL) then
            TEMP_SUM=0;
           if (TEMP_UST IS NULL) then
            TEMP_UST=0;
           IF ((KLASSE>=110) and (KLASSE<=580)) THEN
            TEMP_UST=0; 
           SAUS=SAUS + TEMP_SUM;
           UST_A=UST_A+TEMP_UST;
          END
         else
          BEGIN
           select sum(buchzahl.betrag), Sum(buchzahl.Betrag - ((buchzahl.BETRAG*100) / (100+buchzahl.MWSTOP))) from buchzahl, buchung
           where buchzahl.knr=:KNR
           and buchzahl.bnr=buchung.bnr
           and (buchung.datum>=:DTVON and buchung.datum<=:DTBIS)
           and (buchung.onrsoll=:ONR and buchung.artsoll>=20 and buchung.artsoll<=27)
           and (GN=:IGN or GN=71)
           into :TEMP_SUM, :TEMP_UST;
           if (TEMP_SUM IS NULL) then
            TEMP_SUM=0;
           if (TEMP_UST IS NULL) then
            TEMP_UST=0;
           IF ((KLASSE>=110) and (KLASSE<=580)) THEN
            TEMP_UST=0; 
           SEIN=SEIN + TEMP_SUM;
           UST_E=UST_E+TEMP_UST;
          END
         SALDO=SEIN-SAUS;
         SALDOGES_EK=SALDOGES_EK+SALDO;
        END
       ELSE
        BEGIN  /* W-DATUM */
         /* E/K im Soll auf A/P direkt gebucht */
         select Sum(Betrag), Sum(Betrag - ((BETRAG*100) / (100+MWST))) from buchung
         where (ONRSOLL=:ONR And KSOLL=:KNR)
         and ((ONRHABEN=:ONR OR ONRHABEN=0) And ((ARTHABEN>=20 And ArtHaben<=30) OR (ARTHABEN=1 OR ARTHABEN=19)))
         and (WDatum>=:DTVON and WDatum<=:DTBIS)
         and (GN=:IGN or GN=71)
         into :TEMP_SUM, TEMP_UST;
         if (TEMP_SUM IS NULL) then
          TEMP_SUM=0;
         if (TEMP_UST IS NULL) then
          TEMP_UST=0;
         IF ((KLASSE>=110) and (KLASSE<=580)) THEN
          TEMP_UST=0; 
         IF (KLASSE=1) THEN
          BEGIN
           SAUS=TEMP_SUM;
           UST_A=TEMP_UST;
          END
         ELSE
          BEGIN
           SEIN=-TEMP_SUM;
           UST_E=-TEMP_UST;
          END
         /* E/K im Haben direkt auf A/P gebucht*/
         select Sum(Betrag), Sum(Betrag - ((BETRAG*100) / (100+MWST))) from buchung
         where (ONRHABEN=:ONR And KHABEN=:KNR)
         and ((ONRSOLL=:ONR or ONRSOLL=0) And ((ARTSOLL>=20 And ArtSoll<=30) OR (ARTSOLL=1 OR ARTSOLL=19)))
         and (WDatum>=:DTVON and WDatum<=:DTBIS)
         and (GN=:IGN or GN=71)
         into :TEMP_SUM, TEMP_UST;
         if (TEMP_SUM IS NULL) then
          TEMP_SUM=0;
         if (TEMP_UST IS NULL) then
          TEMP_UST=0;
         IF ((KLASSE>=110) and (KLASSE<=580)) THEN
          TEMP_UST=0; 
         IF (KLASSE=1) THEN
          begin
           SAUS=SAUS-TEMP_SUM;
           UST_A=UST_A-TEMP_UST;
          end
         ELSE
          begin
           SEIN=SEIN+TEMP_SUM;
           UST_E=TEMP_UST;
          end
         /*A/P im SOll, DEB/KRED im Haben, kein SpLIT*/
         select Sum(Betrag), Sum(Betrag - ((BETRAG*100) / (100+MWSTOP))) from buchung
         where KNROP=:KNR
         AND
         (ONRSOLL=:ONR And ArtSoll>=20 And ArtSoll<=27)
         and (WDatum>=:DTVON and WDatum<=:DTBIS)
         and (GN=:IGN or GN=71)
         into :TEMP_SUM, TEMP_UST;
         if (TEMP_SUM IS NULL) then
          TEMP_SUM=0;
         if (TEMP_UST IS NULL) then
          TEMP_UST=0;
         IF ((KLASSE>=110) and (KLASSE<=580)) THEN
          TEMP_UST=0; 
         IF (KLASSE=1) THEN
          BEGIN
           SAUS=SAUS - TEMP_SUM;
           UST_A=UST_A-TEMP_UST;
          END
         ELSE
          BEGIN
           SEIN=SEIN + TEMP_SUM;
           UST_E=UST_E+TEMP_UST;
          END
         /*A/P im Haben, DEB/KRED im Soll, kein SPLIT*/
         select Sum(Betrag),Sum(Betrag - ((BETRAG*100) / (100+MWSTOP))) from buchung
         where KNROP=:KNR
         AND
         (ONRHABEN=:ONR And ArtHaben>=20 And ArtHaben<=27)
         and (WDatum>=:DTVON and WDatum<=:DTBIS)
         and (GN=:IGN or GN=71)
         into :TEMP_SUM, TEMP_UST;
         if (TEMP_SUM IS NULL) then
          TEMP_SUM=0;
         if (TEMP_UST IS NULL) then
          TEMP_UST=0;
         IF ((KLASSE>=110) and (KLASSE<=580)) THEN
          TEMP_UST=0; 
         IF (KLASSE=1) THEN
          BEGIN
           SAUS=SAUS + TEMP_SUM;
           UST_A=UST_A+TEMP_UST;
          END
         ELSE
          BEGIN
           SEIN=SEIN - TEMP_SUM;
           UST_E=UST_E-TEMP_UST;
          END
         /* Umwandlungen GN in geleistete BK*/
         IF (KLASSE>=10 AND KLASSE<=18) THEN
          BEGIN
           select Sum(Betrag),Sum(Betrag - ((BETRAG*100) / (100+MWSTOP))) from buchung
           where KNROP=:KNR
           AND (ONRSOLL=:ONR And ArtSoll>=60 And ArtSoll<=62)
           AND (ONRHABEN=:ONR And ArtHaben>=10  And ArtHaben<=18)
           and (WDatum>=:DTVON and WDatum<=:DTBIS)
           and (GN=:IGN or GN=71)
           into :TEMP_SUM, TEMP_UST;
           if (TEMP_SUM IS NULL) then
            TEMP_SUM=0;
           if (TEMP_UST IS NULL) then
            TEMP_UST=0;
           IF ((KLASSE>=110) and (KLASSE<=580)) THEN
            TEMP_UST=0; 
           SEIN=SEIN - TEMP_SUM;
           UST_E=UST_E-TEMP_UST;
           /* SPLIT */
           select sum(buchzahl.betrag), Sum(buchzahl.Betrag - ((buchzahl.BETRAG*100) / (100+buchzahl.MWSTOP))) from buchzahl, buchung
           where buchzahl.knr=:KNR
           and buchzahl.bnr=buchung.bnr
           and (buchung.wdatum>=:DTVON and buchung.wdatum<=:DTBIS)
           and (buchung.onrsoll=:ONR and buchung.artsoll>=60 and buchung.artsoll<=62)
           and (GN=:IGN or GN=71)
           into :TEMP_SUM, :TEMP_UST;
           if (TEMP_SUM IS NULL) then
            TEMP_SUM=0;
           if (TEMP_UST IS NULL) then
            TEMP_UST=0;
           IF ((KLASSE>=110) and (KLASSE<=580)) THEN
            TEMP_UST=0; 
           SEIN=SEIN - TEMP_SUM;
           UST_E=UST_E-TEMP_UST;
          END
         /* K SPLIT Bank immer im Haben bei Kosten*/
         IF (KLASSE=1) THEN
          BEGIN
           select sum(buchzahl.betrag),Sum(buchzahl.Betrag - ((buchzahl.BETRAG*100) / (100+buchzahl.MWSTOP))) from buchzahl, buchung
           where buchzahl.knr=:KNR
           and buchzahl.bnr=buchung.bnr
           and (buchung.wdatum>=:DTVON and buchung.wdatum<=:DTBIS)
           and (buchung.onrhaben=:ONR and buchung.arthaben>=20 and buchung.arthaben<=27)
           and (GN=:IGN or GN=71)
           into :TEMP_SUM, :TEMP_UST;
           if (TEMP_SUM IS NULL) then
            TEMP_SUM=0;
           if (TEMP_UST IS NULL) then
            TEMP_UST=0;
           IF ((KLASSE>=110) and (KLASSE<=580)) THEN
            TEMP_UST=0; 
           SAUS=SAUS + TEMP_SUM;
           UST_A=UST_A+TEMP_UST;
          END
         else
          BEGIN
           select sum(buchzahl.betrag), Sum(buchzahl.Betrag - ((buchzahl.BETRAG*100) / (100+buchzahl.MWSTOP))) from buchzahl, buchung
           where buchzahl.knr=:KNR
           and buchzahl.bnr=buchung.bnr
           and (buchung.wdatum>=:DTVON and buchung.wdatum<=:DTBIS)
           and (buchung.onrsoll=:ONR and buchung.artsoll>=20 and buchung.artsoll<=27)
           and (GN=:IGN or GN=71)
           into :TEMP_SUM, :TEMP_UST;
           if (TEMP_SUM IS NULL) then
            TEMP_SUM=0;
           if (TEMP_UST IS NULL) then
            TEMP_UST=0;
           IF ((KLASSE>=110) and (KLASSE<=580)) THEN
            TEMP_UST=0; 
           SEIN=SEIN + TEMP_SUM;
           UST_E=UST_E+TEMP_UST;
          END
         SALDO=SEIN-SAUS;
         SALDOGES_EK=SALDOGES_EK+SALDO;
        END /* W-Datum */
      END /* IST_BUCHHALTUNG */
     ELSE
      BEGIN  /* SOLL_BUCHHALTUNG */
       SEIN=0;
       SAUS=0;
       UST_E=0;
       UST_A=0;
       /* +K -E im Soll  */
       select Sum(Betrag), Sum(Betrag - ((BETRAG*100) / (100+MWST))) from buchung
       where (ONRSOLL=:ONR And KSOLL=:KNR)
       and ((Datum >= :DTVONBDATUM and Datum <= :DTBISBDATUM) or (WDatum >= :DTVONWDATUM and WDatum <= :DTBISWDATUM))
       and (GN=:IGN or GN=71)
       into :TEMP_SUM, :TEMP_UST;
       if (TEMP_SUM IS NULL) then
        TEMP_SUM=0;
       if (TEMP_UST IS NULL) then
        TEMP_UST=0;
       IF ((KLASSE>=110) and (KLASSE<=580)) THEN
        TEMP_UST=0; 
       IF (KLASSE=1) THEN
        begin
         SAUS=TEMP_SUM;
         UST_A=TEMP_UST;
        end
       ELSE
        begin
         SEIN=-TEMP_SUM;
         UST_E=-TEMP_UST;
        end
       /* - K im Haben +E im HAben */
       select Sum(Betrag), Sum(Betrag - ((BETRAG*100) / (100+MWST))) from buchung
       where (ONRHABEN=:ONR And KHABEN=:KNR)
       and ((Datum >= :DTVONBDATUM and Datum <= :DTBISBDATUM) or (WDatum >= :DTVONWDATUM and WDatum <= :DTBISWDATUM))
       and (GN=:IGN or GN=71)
       into :TEMP_SUM, :TEMP_UST;
       if (TEMP_SUM IS NULL) then
        TEMP_SUM=0;
       if (TEMP_UST IS NULL) then
        TEMP_UST=0;
       IF ((KLASSE>=110) and (KLASSE<=580)) THEN
        TEMP_UST=0; 
       IF (KLASSE=1) THEN
        BEGIN
         SAUS=SAUS-TEMP_SUM;
         UST_A=UST_A-TEMP_UST;
        END
       ELSE
        BEGIN
         SEIN=SEIN+TEMP_SUM;
         UST_E=UST_E+TEMP_UST;
        END
       SALDO=SEIN-SAUS;
       SALDOGES_EK=SALDOGES_EK+SALDO;
      END    /* SOLL_BUCHHALTUNG */
     AUS=0;
     KVERTEILUNG=0;
     IF ((KLASSE=1) OR (KLASSE=19)) THEN /* AUSGABEN */
      BEGIN
       IF (KLASSE=1) THEN
       AUS=1;
       IF (KKSTNR=3) THEN
        BEGIN
         IF (BHEIZ='N') THEN
          KVERTEILUNG=3; /* nicht umlagefaehig */
         ELSE          
          KVERTEILUNG=1; /* immer Bewohner */
        END
       ELSE
        BEGIN
         IF (IS_HAUSTYP=0) THEN
          KVERTEILUNG=1;  /* Bewohner*/
         ELSE
          IF (IS_HAUSTYP=1) THEN
           BEGIN
            IF (IS_KVERTEILUNG='J') THEN
             KVERTEILUNG=1;  /* Bewohner */
            ELSE
             KVERTEILUNG=2;  /* Eigentuemer */
           END
         ELSE
          BEGIN
           IF (IS_KBEW='J') THEN
            KVERTEILUNG=1;  /* Bewohner */
           ELSE
            KVERTEILUNG=2;  /* Eigentuemer */
          END
       END
      END
      
     IF (((IS_HAUSTYP = 2) AND (IS_ABR_HAUSTYP=1) AND (KLASSE >= 10) AND KLASSE <= 13) or 
         ((IS_HAUSTYP = 2) AND (IS_ABR_HAUSTYP=0) AND (KLASSE = 15 or KLASSE=18 or (KLASSE>=110 and KLASSE<=580)))) THEN
      SALDO = 0;     
      
     IF (SALDO<>0) THEN
      BEGIN
       IF (NOT (IS_GN='N' AND (KLASSE=13 OR KLASSE=18 OR IGN=1))) THEN
        begin
         IF (NOT (IS_MIETE_NO='J' AND KLASSE=10)) THEN
          BEGIN
           /* Anrechnbare UST */
           IF (KLASSE=1) THEN
            BEGIN
             IF (IMWSTART=2) THEN /* Laut Hausanteil */
              UST_AANRECH=UST_A * IPROZ_UST;
             ELSE
              IF (IMWSTART=0) THEN /* 0% */
               UST_AANRECH=0;
              ELSE
               UST_AANRECH=UST_A; /* 100% */
            END
           IF ((KLASSE<19 AND KLASSE<>1) or (KLASSE>=110 and KLASSE<=580)) THEN
            BEGIN
             IF (IST_BUCHHALTUNG='J') THEN
              begin
               KNRSTR='Debitoren';
              end
             ITMP = KLASSE;
             KLASSE=2; /* VZ */
            END
           IF (RLPOS IS NOT NULL) THEN
            AUS=3;
           /**/
           IF (IGN=1) THEN
            KNR=60190;
           SUSPEND;
           /* Beitragsverpflichtung als Ausgabe in die RÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼cklagen */
           IF (ITMP>=110 and ITMP<=580) THEN
            BEGIN
             AUS = 3;
             KLASSE = 1;
             SKBEZ='Beitragsverpflichtung ' || KBEZ;
             KBEZ = SUBSTRING(SKBEZ FROM 1 FOR 88);
             SAUS = SEIN;
             SEIN=0;
             SALDO = SEIN - SAUS;
             SUSPEND;
             if (ITMP=110) THEN
              RUECKL1 = RUECKL1 + SAUS;
             if (ITMP=120) THEN
              RUECKL2 = RUECKL2 + SAUS;
             if (ITMP=130) THEN
              RUECKL3 = RUECKL3 + SAUS;
             if (ITMP=140) THEN
              RUECKL4 = RUECKL4 + SAUS;
             if (ITMP=150) THEN
              RUECKL5 = RUECKL5 + SAUS;
             if (ITMP=160) THEN
              RUECKL6 = RUECKL6 + SAUS;
             if (ITMP=580) THEN
              RUECKL7 = RUECKL7 + SAUS;
             ITMP=0;
            END           
           if (KNRSTR='Debitoren') THEN
            begin
             IF (IS_WDATUM='N') THEN
              BEGIN
               /* VERRECHNUNGEN SPLIT */
               select  sum(buchzahl.betrag), Sum(buchzahl.Betrag - ((buchzahl.BETRAG*100) / (100+buchzahl.MWSTOP))) from buchzahl, buchung
                where buchzahl.KNR=:KNR
                and buchung.opbetrag is null
                and buchzahl.bnr=buchung.bnr
                and (buchung.datum>=:DTVON and buchung.datum<=:DTBIS)
                and (buchung.onrsoll=:ONR and buchung.artsoll>=60 and buchung.artsoll<=69)
               into :TEMP_SUM, :TEMP_UST;
               if (TEMP_SUM IS NULL) then
                TEMP_SUM=0;
               if (TEMP_UST IS NULL) then
                TEMP_UST=0;
               IF ((KLASSE>=110) and (KLASSE<=580)) THEN
                TEMP_UST=0; 
               SEIN=TEMP_SUM;
               UST_E=TEMP_UST;
               /* VERRECHNUNGEN KEIN SPLIT */
               select  sum(betrag), Sum(Betrag - ((BETRAG*100) / (100+MWSTOP))) from buchung
               where (khaben=:KNR)
               and opbetrag is null
               and (buchung.datum>=:DTVON and buchung.datum<=:DTBIS)
               and artop<>0
               and (onrsoll=:ONR and artsoll>=60 and artsoll<=69)
               into :TEMP_SUM, :TEMP_UST;
               if (TEMP_SUM IS NULL) then
                TEMP_SUM=0;
               if (TEMP_UST IS NULL) then
                TEMP_UST=0;
               IF ((KLASSE>=110) and (KLASSE<=580)) THEN
                TEMP_UST=0; 
               SEIN=SEIN+TEMP_SUM;
               UST_E=UST_E+TEMP_UST;
               SKBEZ=KBEZ || ' (Verrechnungen)';
               KBEZ = SUBSTRING(SKBEZ FROM 1 FOR 88);
               SALDO=SEIN;
               SALDOGES_EK=SALDOGES_EK+SALDO;
               if (SALDO<>0) then
                SUSPEND;
              END
             ELSE
              BEGIN
               /* VERRECHNUNGEN SPLIT */
               select  sum(buchzahl.betrag), Sum(buchzahl.Betrag - ((buchzahl.BETRAG*100) / (100+buchzahl.MWSTOP))) from buchzahl, buchung
                where buchzahl.KNR=:KNR
                and buchung.opbetrag is null
                and buchzahl.bnr=buchung.bnr
                and (buchung.wdatum>=:DTVON and buchung.wdatum<=:DTBIS)
                and (buchung.onrsoll=:ONR and buchung.artsoll>=60 and buchung.artsoll<=69)
               into :TEMP_SUM, :TEMP_UST;
               if (TEMP_SUM IS NULL) then
                TEMP_SUM=0;
               if (TEMP_UST IS NULL) then
                TEMP_UST=0;
               IF ((KLASSE>=110) and (KLASSE<=580)) THEN
                TEMP_UST=0; 
               SEIN=TEMP_SUM;
               UST_E=TEMP_UST;
               /* VERRECHNUNGEN KEIN SPLIT */
               select  sum(betrag), Sum(Betrag - ((BETRAG*100) / (100+MWSTOP))) from buchung
               where (khaben=:KNR)
               and opbetrag is null
               and (buchung.wdatum>=:DTVON and buchung.wdatum<=:DTBIS)
               and artop<>0
               and (onrsoll=:ONR and artsoll>=60 and artsoll<=69)
               into :TEMP_SUM, :TEMP_UST;
               if (TEMP_SUM IS NULL) then
                TEMP_SUM=0;
               if (TEMP_UST IS NULL) then
                TEMP_UST=0;
               IF ((KLASSE>=110) and (KLASSE<=580)) THEN
                TEMP_UST=0; 
               SEIN=SEIN+TEMP_SUM;
               UST_E=UST_E+TEMP_UST;
               SKBEZ=KBEZ || ' (Verrechnungen)';
               KBEZ = SUBSTRING(SKBEZ FROM 1 FOR 88);
               SALDO=SEIN;
               SALDOGES_EK=SALDOGES_EK+SALDO;
               if (SALDO<>0) then
                SUSPEND;
              END
            END
          END
        end
       else
        begin
         IF ((IS_GN='N') AND (KLASSE>=110 and KLASSE<=580)) THEN
          BEGIN
           SAUS = SEIN;
           SEIN=0;
           if (KLASSE=110) THEN
            RUECKL1 = RUECKL1 + SAUS;
           if (KLASSE=120) THEN
            RUECKL2 = RUECKL2 + SAUS;
           if (KLASSE=130) THEN
            RUECKL3 = RUECKL3 + SAUS;
           if (KLASSE=140) THEN
            RUECKL4 = RUECKL4 + SAUS;
           if (KLASSE=150) THEN
            RUECKL5 = RUECKL5 + SAUS;
           if (KLASSE=160) THEN
            RUECKL6 = RUECKL6 + SAUS;
           if (KLASSE=580) THEN
            RUECKL7 = RUECKL7 + SAUS;
           SAUS=0;
          END
        end  
      END
   END /* Alle E/K Konten */
  END /* ONR */ 
 /*   */
 /* BESTANDSKONTEN  */
 /*   */
 IF (IS_BANKEN='J') THEN
  BEGIN
   EA=2;
   KNRSTR='';
   UST_A=0;
   UST_AANRECH=0;
   UST_E=0;
   SALDO=0;
   KVERTEILUNG=1;
   KNR=NULL;
   KLASSE=20;
   AUS=0;
   ITMP=0;
   FOR 
    select distinct a.banknr, bew from objbanken a, banken b, konten c
    where (a.onr>=:VON_ONR and a.ONR<=:BIS_ONR) and a.banknr=b.nr
    and a.onr=c.onr and a.knr=c.knr
    order by bic, iban
   INTO
    :IBNR, :IMWSTART
   DO
    BEGIN
     select KURZBEZ, KURZBEZ || ', IBAN ' || IBAN from banken where NR=:IBNR
     INTO :KNRSTR, :SKBEZ;
     KBEZ = SUBSTRING(SKBEZ FROM 1 FOR 88);
     for select distinct onr from objbanken where banknr=:IBNR and (ONR>=:VON_ONR and ONR<=:BIS_ONR) into :ONR  do
      begin
       SALDO=SALDO;
      end
     EXECUTE PROCEDURE BANKSALDO_ALT(:IBNR, DTVON) RETURNING_VALUES :SAUS;
     EXECUTE PROCEDURE BANKSALDO_ALT(:IBNR, DTBISP1) RETURNING_VALUES :SEIN;
     IF (KBEZ IS NULL) THEN
      SELECt BEZEICHNUNG FROM BANKEN WHERE NR=:IBNR INTO :KBEZ;
     SALDO=SEIN-SAUS;
     SALDOGES_AP=SALDOGES_AP+SALDO;
     IF(SEIN<>0 OR SAUS<>0) THEN
      BEGIN
       IF (VON_ONR=BIS_ONR) THEN
        BEGIN
         select KNR from objbanken where banknr=:IBNR and ONR=:VON_ONR INTO :knr;
         IF (IS_ABR_HAUSTYP=0 and IS_HAUSTYP=2) then
          BEGIN /* Nur Mieter Banken */
           SELECT LEVBANKNR from objekte where ONR=:VON_ONR into LEVBANKNR;
           IF ((LEVBANKNR=IBNR) OR (IMWSTART = 1)) THEN
            SUSPEND;
          END
         ELSE
          IF (IS_ABR_HAUSTYP=1 and IS_HAUSTYP=2) then
           BEGIN /* Nur Eigentuemer Banken */
            SELECT LEVBANKNR2 from objekte where ONR=:VON_ONR into LEVBANKNR;
            IF ((LEVBANKNR=IBNR) OR (IMWSTART = 0)) THEN
             SUSPEND;
           END
          ELSE
           SUSPEND;
        END
       ELSE
        BEGIN
         IF (ITMP<>IBNR) THEN
          BEGIN 
           ITMP=IBNR;
           SUSPEND;
          END 
        END 
      END
    END
  /* 98000, 99990 */
  KVERTEILUNG=4;
  SELECT KNR, KNRSTR, KBEZ, KKLASSE from konten
  where ONR=0 AND KNR='98000'
  INTO :KNR, :KNRSTR, :SKBEZ, :KLASSE;
  KBEZ = SUBSTRING(SKBEZ FROM 1 FOR 88);
  FOR SELECT ONR from Objekte where (ONR>=:VON_ONR and ONR<=:BIS_ONR) order by onr into :ONR do
   begin
    SAUS=0;
    SEIN=0;
    SALDO=0;
    EXECUTE PROCEDURE KONTOSALDO_ALT (:ONR, '98000', :DTVON, 'J','N') RETURNING_VALUES :SAUS;
    EXECUTE PROCEDURE KONTOSALDO_ALT (:ONR, '98000', :DTBISP1, 'J','N') RETURNING_VALUES :SEIN;
    SALDO=SEIN-SAUS;
    SALDOGES_AP=SALDOGES_AP+SALDO;
    IF(SALDO<>0) THEN
     SUSPEND;
   end
  /* 99990 */
  SELECT KNR, KNRSTR, KBEZ, KKLASSE from konten
  where ONR=0 AND KNR='99990'
  INTO :KNR, :KNRSTR, :SKBEZ, :KLASSE;
  KBEZ = SUBSTRING(SKBEZ FROM 1 FOR 88);
  FOR SELECT ONR from Objekte where (ONR>=:VON_ONR and ONR<=:BIS_ONR) order by onr into :ONR do
   begin
    SAUS=0;
    SEIN=0;
    SALDO=0;
    EXECUTE PROCEDURE KONTOSALDO_ALT (:ONR, '99990', :DTVON, 'J','N') RETURNING_VALUES :SAUS;
    EXECUTE PROCEDURE KONTOSALDO_ALT (:ONR, '99990', :DTBISP1, 'J','N') RETURNING_VALUES :SEIN;
    SALDO=SEIN-SAUS;
    SALDOGES_AP=SALDOGES_AP+SALDO;
    IF(SALDO<>0) THEN
     SUSPEND;
   end
  /* RLA */
  KVERTEILUNG=2;
  FOR SELECT KNR, KNRSTR, KBEZ, KKLASSE, ONR from konten
   where (ONR>=:VON_ONR and ONR<=:BIS_ONR) AND KKLASSE=22
   INTO :KNR, :KNRSTR, :SKBEZ, :KLASSE, :ONR
   DO
    begin
     KBEZ = SUBSTRING(SKBEZ FROM 1 FOR 88);
     SAUS=0;
     SEIN=0;
     EXECUTE PROCEDURE KONTOSALDO_ALT (:ONR, :KNR, :DTVON, 'J','N') RETURNING_VALUES :SAUS;
     EXECUTE PROCEDURE KONTOSALDO_ALT (:ONR, :KNR, :DTBISP1, 'J','N') RETURNING_VALUES :SEIN;
     SALDO=SEIN-SAUS;
     SALDOGES_AP=SALDOGES_AP+SALDO;
     select iban from rueckbkt where ONR=:ONR and KNR=:KNR INTO :KONTONR;
     SKBEZ=KBEZ || ' ' || KONTONR || ' fuer Haus ' || ONR;
     KBEZ = SUBSTRING(SKBEZ FROM 1 FOR 88);
     IF(SEIN<>0 OR SAUS<>0) THEN
      SUSPEND;
    end
  /* RLP */
  KVERTEILUNG=3;
  AUS=1;
  FOR SELECT KNR, KNRSTR, KBEZ, KKLASSE, ONR, RLPOS from konten
   where (ONR>=:VON_ONR and ONR<=:BIS_ONR) AND (KKLASSE=27 AND RLPOS IS NOT NULL)
   INTO :KNR, :KNRSTR, :SKBEZ, :KLASSE, :ONR, :RLPOS
   DO
    begin
     KBEZ = SUBSTRING(SKBEZ FROM 1 FOR 88);
     SAUS=0;
     SEIN=0;
     EXECUTE PROCEDURE KONTOSALDO_ALT (:ONR, :KNR, :DTVON, 'J','N') RETURNING_VALUES :SAUS;
     EXECUTE PROCEDURE KONTOSALDO_ALT (:ONR, :KNR, :DTBISP1, 'J','N') RETURNING_VALUES :SEIN;
     SEIN=-SEIN;
     SAUS=-SAUS;
     select KONTO_VZ from rueckpos where NR=:RLPOS INTO ITMP;
     /* Beitragsverpflichtung in Saldo ALT aufnehmen */
     select sum(sum_vz) from VZ_BE_DETAIL (:ONR, '01.01.1950', (:DTVON - 1), 200000, 299999, 'N') where vzpos=(:ITMP-60000) into :RUECKLAB;
     if (RUECKLAB is null) then
      RUECKLAB = 0;
     RUECKLAB = -RUECKLAB;
     SAUS = SAUS + RUECKLAB;
     SEIN = SEIN + RUECKLAB; 
     /* Beitragsverpflichtung fÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼r diese Position */     
     IF (ITMP=60110) THEN
      SEIN=SEIN - RUECKL1;
     IF (ITMP=60120) THEN
      SEIN=SEIN - RUECKL2;
     IF (ITMP=60130) THEN
      SEIN=SEIN - RUECKL3;
     IF (ITMP=60140) THEN
      SEIN=SEIN - RUECKL4;
     IF (ITMP=60150) THEN
      SEIN=SEIN - RUECKL5;
     IF (ITMP=60160) THEN
      SEIN=SEIN - RUECKL6;
     IF (ITMP=60580) THEN
      SEIN=SEIN - RUECKL7;
     SALDO=SEIN-SAUS;
     SALDOGES_AP=SALDOGES_AP+SALDO;
     SKBEZ = KBEZ || ' inkl. Beitragsverpflichtungen EigentÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼mer';
     KBEZ = SUBSTRING(SKBEZ FROM 1 FOR 88);
     IF(SEIN<>0 OR SAUS<>0) THEN
      SUSPEND;
    end
  /* die anderen A/P */
  KVERTEILUNG=4;
  FOR SELECT KNR, KNRSTR, KBEZ, KKLASSE, ONR from konten
   where (ONR>=:VON_ONR and ONR<=:BIS_ONR) AND ((KKLASSE=27 AND RLPOS IS NULL) OR KKLASSE=24)
   INTO :KNR, :KNRSTR, :SKBEZ, :KLASSE, :ONR
   DO
    begin
     KBEZ = SUBSTRING(SKBEZ FROM 1 FOR 88);
     select KTOUneinbringlich from objekte where ONR=:ONR into :KTOUNEINBRINGLICH;
     if (KTOUNEINBRINGLICH is null) then
      KTOUNEINBRINGLICH = 0;
     if (:KNR <> KTOUNEINBRINGLICH) then
      begin
       SAUS=0;
       SEIN=0;
       EXECUTE PROCEDURE KONTOSALDO_ALT (:ONR, :KNR, :DTVON, 'J','N') RETURNING_VALUES :SAUS;
       EXECUTE PROCEDURE KONTOSALDO_ALT (:ONR, :KNR, :DTBISP1, 'J','N') RETURNING_VALUES :SEIN;
       IF (KLASSE=27) THEN
        BEGIN
         SEIN=-SEIN;
         SAUS=-SAUS;
         AUS=1;
        END
       ELSE
        AUS=0;
       SALDO=SEIN-SAUS;
       SALDOGES_AP=SALDOGES_AP+SALDO;
       IF(SEIN<>0 OR SAUS<>0) THEN
        SUSPEND;
     end
    end
  END  /* IS_BANKEN */
END


-- Prozedur: HAUSABR_EA_BUCH
CREATE OR ALTER PROCEDURE HAUSABR_EA_BUCH
DECLARE VARIABLE TEMP_SUM NUMERIC(15, 2);
DECLARE VARIABLE IGN INTEGER;
DECLARE VARIABLE STR_LEN INTEGER;
DECLARE VARIABLE VERR CHAR(1);
DECLARE VARIABLE STR_TEXT VARCHAR(15);
DECLARE VARIABLE MWST2 NUMERIC(15, 2);
DECLARE VARIABLE DTVONBDATUM DATE;
DECLARE VARIABLE DTBISBDATUM DATE;
DECLARE VARIABLE DTVONWDATUM DATE;
DECLARE VARIABLE DTBISWDATUM DATE;
BEGIN
 TEMP_SUM = 0;
 IGN=0;
 VERR = 'N';
 STR_LEN = CHAR_LENGTH(:KBEZ);
 IF (STR_LEN > 15) THEN
  BEGIN
   STR_TEXT = SUBSTRING (:KBEZ FROM (STR_LEN-13) FOR 14);
   IF (STR_TEXT = ' (Verrechnung)') THEN
    VERR = 'J';
  END
 /* W_Datum abfragen */
 if (WDATUM = 'N') then
  begin
   DTVONBDATUM = DTVON;
   DTBISBDATUM = DTBIS;
   DTVONWDATUM = '01.01.1900';
   DTBISWDATUM = '01.01.1900';
  end
 else
  begin
   DTVONBDATUM = '01.01.1900';
   DTBISBDATUM = '01.01.1900';
   DTVONWDATUM = DTVON;
   DTBISWDATUM = DTBIS;
  end  
 /* */
 IF (BSOLL = 'N') THEN
  BEGIN
   IF (KNR=60190) THEN
    IGN=1;
   if (VERR = 'N') then
    begin
     for  
      select BNR, KHABEN, DATUM, BELEGNR, TEXT, BETRAG, MWST, MWSTOP from buchung
      where (ONRSOLL=:ONR And KSOLL=:KNR) and ((ONRHABEN=:ONR OR ONRHABEN=0) And ((ARTHABEN>=20 And ArtHaben<=30) OR (ARTHABEN=1 OR ARTHABEN=19))) and ((Datum >= :DTVONBDATUM and Datum <= :DTBISBDATUM) or (WDatum >= :DTVONWDATUM and WDatum <= :DTBISWDATUM)) and (GN=:IGN or GN=71) and betrag<>0
     into :BNR, :IKNR, :DATUM, :BELEGNR, :TEXT, :BETRAG, :MWST, :MWST2  
     do
      begin
       IF (KLASSE=1) THEN
        BEGIN
         TEMP_SUM = TEMP_SUM + BETRAG;  
        END
       ELSE
        BEGIN
         TEMP_SUM = TEMP_SUM - BETRAG;
         IF (MWST2 is null) then
          MWST2 = 0;
         IF ((MWST2 > 0) AND (MWST = 0)) THEN
          MWST = MWST2;    
        END  
       SUSPEND;  
      end
     /* E/K im Haben direkt auf A/P gebucht*/
     for
      select BNR, KSOLL, DATUM, BELEGNR, TEXT, BETRAG, MWST, MWSTOP from buchung
      where (ONRHABEN=:ONR And KHABEN=:KNR) and ((ONRSOLL=:ONR or ONRSOLL=0) And ((ARTSOLL>=20 And ArtSoll<=30) OR (ARTSOLL=1 OR ARTSOLL=19))) and ((Datum >= :DTVONBDATUM and Datum <= :DTBISBDATUM) or (WDatum >= :DTVONWDATUM and WDatum <= :DTBISWDATUM)) and (GN=:IGN or GN=71) and betrag<>0
     into :BNR, :IKNR, :DATUM, :BELEGNR, :TEXT, :BETRAG, :MWST, :MWST2
     do
      begin
       IF (KLASSE=1) THEN
        BEGIN
         TEMP_SUM = TEMP_SUM - BETRAG;  
        END
       ELSE
        BEGIN
         TEMP_SUM = TEMP_SUM + BETRAG;
         IF (MWST2 is null) then
          MWST2 = 0;
         IF ((MWST2 > 0) AND (MWST = 0)) THEN
          MWST = MWST2;         
        END  
       SUSPEND;
      end
     /*A/P im SOll, DEB/KRED im Haben, kein SpLIT*/  
     for
      select BNR, KSOLL, DATUM, BELEGNR, TEXT, BETRAG, MWST, MWSTOP from buchung
      where KNROP=:KNR AND (ONRSOLL=:ONR And ArtSoll>=20 And ArtSoll<=27) and ((Datum >= :DTVONBDATUM and Datum <= :DTBISBDATUM) or (WDatum >= :DTVONWDATUM and WDatum <= :DTBISWDATUM)) and (GN=:IGN or GN=71) and betrag<>0
     into :BNR, :IKNR, :DATUM, :BELEGNR, :TEXT, :BETRAG, :MWST, :MWST2
     do
      begin
       IF (KLASSE=1) THEN
        BEGIN
         TEMP_SUM = TEMP_SUM - BETRAG;  
        END
       ELSE
        BEGIN
         TEMP_SUM = TEMP_SUM + BETRAG;
         IF (MWST2 is null) then
          MWST2 = 0;
         IF ((MWST2 > 0) AND (MWST = 0)) THEN
          MWST = MWST2;         
        END  
       SUSPEND;
      end
     /*A/P im Haben, DEB/KRED im Soll, kein SPLIT*/
     for
      select BNR, KHABEN, DATUM, BELEGNR, TEXT, BETRAG, MWST, MWSTOP from buchung 
      where KNROP=:KNR and (GN=:IGN or GN=71) AND (ONRHABEN=:ONR And ArtHaben>=20 And ArtHaben<=27) and ((Datum >= :DTVONBDATUM and Datum <= :DTBISBDATUM) or (WDatum >= :DTVONWDATUM and WDatum <= :DTBISWDATUM)) and betrag<>0
     into :BNR, :IKNR, :DATUM, :BELEGNR, :TEXT, :BETRAG, :MWST, :MWST2
     do
      begin
       IF (KLASSE=1) THEN
        BEGIN
         TEMP_SUM = TEMP_SUM + BETRAG;  
        END
       ELSE
        BEGIN
         TEMP_SUM = TEMP_SUM - BETRAG;  
         IF (MWST2 is null) then
          MWST2 = 0;
         IF ((MWST2 > 0) AND (MWST = 0)) THEN
          MWST = MWST2;       
        END  
       SUSPEND;
      end
     /* Umwandlungen G/N in geleistete BK*/
     IF (KLASSE>=10 AND KLASSE<=18) THEN
      BEGIN
       /* KEIN SPLIT */
       for
        select BNR, KHABEN, DATUM, BELEGNR, TEXT, BETRAG, MWST, MWSTOP from buchung
        where KNROP=:KNR AND (ONRSOLL=:ONR And ArtSoll>=60 And ArtSoll<=62) AND (ONRHABEN=:ONR And ArtHaben>=10  And ArtHaben<=18) and ((Datum >= :DTVONBDATUM and Datum <= :DTBISBDATUM) or (WDatum >= :DTVONWDATUM and WDatum <= :DTBISWDATUM)) and (GN=:IGN or GN=71) and betrag<>0
       into :BNR, :IKNR, :DATUM, :BELEGNR, :TEXT, :BETRAG, :MWST, :MWST2
       do
        begin
         TEMP_SUM = TEMP_SUM - BETRAG;
         IF (MWST2 is null) then
          MWST2 = 0;
         IF ((MWST2 > 0) AND (MWST = 0)) THEN
          MWST = MWST2;         
         SUSPEND;
        end
       /* SPLIT */
       for
        select buchung.BNR, KHABEN, DATUM, BELEGNR, TEXT, buchzahl.BETRAG,buchzahl. MWSTOP from buchzahl, buchung 
        where buchzahl.knr=:KNR and buchzahl.bnr=buchung.bnr and ((buchung.Datum >= :DTVONBDATUM and buchung.Datum <= :DTBISBDATUM) or (buchung.WDatum >= :DTVONWDATUM and buchung.WDatum <= :DTBISWDATUM)) and (buchung.onrsoll=:ONR and buchung.artsoll>=60 and buchung.artsoll<=62) and (GN=:IGN or GN=71) and buchzahl.betrag<>0
       into :BNR, :IKNR, :DATUM, :BELEGNR, :TEXT, :BETRAG, :MWST
       do
        begin
         TEMP_SUM = TEMP_SUM - BETRAG;  
         SUSPEND;
        end
      END  
     /* K SPLIT Bank immer im Haben bei Kosten*/
     IF (KLASSE=1) THEN
      BEGIN
       for
        select buchung.BNR, KHABEN, DATUM, BELEGNR, TEXT, buchzahl.BETRAG, buchzahl.MWSTOP from buchzahl, buchung
        where buchzahl.knr=:KNR and buchzahl.bnr=buchung.bnr and ((buchung.Datum >= :DTVONBDATUM and buchung.Datum <= :DTBISBDATUM) or (buchung.WDatum >= :DTVONWDATUM and buchung.WDatum <= :DTBISWDATUM)) and (buchung.onrhaben=:ONR and buchung.arthaben>=20 and buchung.arthaben<=27) and (GN=:IGN or GN=71) and buchzahl.betrag<>0
       into :BNR, :IKNR, :DATUM, :BELEGNR, :TEXT, :BETRAG, :MWST
       do
        begin
         TEMP_SUM = TEMP_SUM + BETRAG;  
         SUSPEND;
        end
      END
     else
      BEGIN
       for
        select buchung.BNR, KSOLL, DATUM, BELEGNR, TEXT, buchzahl.BETRAG, buchzahl.MWSTOP from buchzahl, buchung
        where buchzahl.knr=:KNR and buchzahl.bnr=buchung.bnr and ((buchung.Datum >= :DTVONBDATUM and buchung.Datum <= :DTBISBDATUM) or (buchung.WDatum >= :DTVONWDATUM and buchung.WDatum <= :DTBISWDATUM)) and (buchung.onrsoll=:ONR and buchung.artsoll>=20 and buchung.artsoll<=27) and (GN=:IGN or GN=71) and buchzahl.betrag<>0
       into :BNR, :IKNR, :DATUM, :BELEGNR, :TEXT, :BETRAG, :MWST
       do
        begin
         TEMP_SUM = TEMP_SUM + BETRAG;  
         SUSPEND;
        end
      END
    end
   else
    begin
     /* VERRECHNUNGEN SPLIT */
     for
      select buchung.BNR, KSOLL, DATUM, BELEGNR, TEXT, buchzahl.BETRAG, buchzahl.MWSTOP from buchzahl, buchung
      where buchzahl.KNR=:KNR and buchung.opbetrag is null and buchzahl.bnr=buchung.bnr and ((buchung.Datum >= :DTVONBDATUM and buchung.Datum <= :DTBISBDATUM) or (buchung.WDatum >= :DTVONWDATUM and buchung.WDatum <= :DTBISWDATUM)) and (buchung.onrsoll=:ONR and buchung.artsoll>=60 and buchung.artsoll<=69) and buchzahl.betrag<>0 
     into :BNR, :IKNR, :DATUM, :BELEGNR, :TEXT, :BETRAG, :MWST
     do
      begin
       TEMP_SUM = TEMP_SUM + BETRAG;  
       SUSPEND;
      end
     /* VERRECHNUNGEN KEIN SPLIT */
     for
      select BNR, KSOLL, DATUM, BELEGNR, TEXT, BETRAG, MWST from buchung
      where (khaben=:KNR) and opbetrag is null and ((buchung.Datum >= :DTVONBDATUM and buchung.Datum <= :DTBISBDATUM) or (buchung.WDatum >= :DTVONWDATUM and buchung.WDatum <= :DTBISWDATUM)) and artop<>0 and (onrsoll=:ONR and artsoll>=60 and artsoll<=69) and betrag<>0
     into :BNR, :IKNR, :DATUM, :BELEGNR, :TEXT, :BETRAG, :MWST
     do
      begin
       TEMP_SUM = TEMP_SUM + BETRAG;  
       SUSPEND;
      end
    end  
  end
 else
  begin
   for  
    select BNR, GKONTO, DATUM, BELEGNR, TEXT, BETRAG, MWST from KONTOAUSZUG(:ONR, :KNR, :DTVON, :DTBIS, 'J', :WDATUM) order by DATUM, GKONTO
    into :BNR, :IKNR, :DATUM, :BELEGNR, :TEXT, :BETRAG, :MWST
   do
    begin
     TEMP_SUM = TEMP_SUM + BETRAG;
     SUSPEND;  
    end  
  end  
 /* Summe */
 IF (TEMP_SUM<>0) THEN
  BEGIN
   BNR = 0;
   IKNR = 0;
   DATUM = '31.12.2999';
   BELEGNR = 0;
   TEXT = 'SALDO';
   BETRAG = TEMP_SUM;
   SUSPEND;
  END
END


-- Prozedur: HAUSABR_EA_NEW
CREATE OR ALTER PROCEDURE HAUSABR_EA_NEW
DECLARE VARIABLE IGN SMALLINT;
DECLARE VARIABLE SCHLART SMALLINT;
DECLARE VARIABLE SCHL SMALLINT;
DECLARE VARIABLE ART SMALLINT;
DECLARE VARIABLE KKSTNR SMALLINT;
DECLARE VARIABLE TEMP_SUM NUMERIC(18, 2);
DECLARE VARIABLE TEMP_SUM_N NUMERIC(18, 2);
DECLARE VARIABLE RLPOS INTEGER;
DECLARE VARIABLE BHEIZ CHAR(1);
DECLARE VARIABLE ITMP INTEGER;
DECLARE VARIABLE SALDO_FESTG_SUM NUMERIC(18, 2);
DECLARE VARIABLE SALDO_GIROK_SUM NUMERIC(18, 2);
DECLARE VARIABLE SALDO_SONST_SUM NUMERIC(18, 2);
DECLARE VARIABLE SALDO_WDATU_SUM NUMERIC(18, 2);
DECLARE VARIABLE SDATUM VARCHAR(10);
DECLARE VARIABLE IKTO1 SMALLINT;
DECLARE VARIABLE IKTO2 SMALLINT;
DECLARE VARIABLE STMP1 VARCHAR(50);
DECLARE VARIABLE STMP2 VARCHAR(50);
DECLARE VARIABLE SALDO_G_GIROK NUMERIC(18, 2);
DECLARE VARIABLE SALDO_N_GIROK NUMERIC(18, 2);
DECLARE VARIABLE SALDO_G_SONST NUMERIC(18, 2);
DECLARE VARIABLE SALDO_N_SONST NUMERIC(18, 2);
DECLARE VARIABLE IKTOUNEINBR INTEGER;
DECLARE VARIABLE SKBEZ VARCHAR(188);
DECLARE VARIABLE SBEZTMP VARCHAR(200);
DECLARE VARIABLE SBEZTMP2 VARCHAR(200);
BEGIN
 SKBEZ='';
 GRUPPEN_NR = 0;
 IF (MIT_BEW_KTO = 'J') THEN
  BEGIN
   IKTO1 = 0;
   IKTO2 = 1;
  END
 ELSE
  BEGIN
   IKTO1 = 0;
   IKTO2 = 0;
  END
 /* Anfangsbestand */
 /* Anfang - Saldo zum DTVON */
 SDATUM = CAST(DTVON AS VARCHAR(10));
 KBEZ = 'Anfangsbestand per ' || SUBSTRING(SDATUM FROM 9 FOR 2) || '.' || SUBSTRING(SDATUM FROM 6 FOR 2) || '.' || SUBSTRING(SDATUM FROM 1 FOR 4);
 KLASSE = 0; OBJ = ONR; KNR = 0; SALDO_WDATU = 0;
 SALDO_FESTG = 0; SALDO_GIROK = 0; SALDO_SONST = 0;
 select KTOUNEINBRINGLICH from objekte where onr=:onr into :IKTOUNEINBR;
 if (IKTOUNEINBR IS NULL) then
  IKTOUNEINBR = 0;
 /* reine Bankkonten*/
 FOR
  select objbanken.banknr from objbanken, banken, konten where objbanken.onr=:onr and objbanken.BANKNR=banken.nr and ART=0
   and objbanken.onr=konten.onr and objbanken.knr=konten.knr and (BEW=:IKTO1 or BEW=:IKTO2)
   group by OBJBANKEN.BANKNR
  INTO :ITMP
 DO
  BEGIN
   EXECUTE PROCEDURE BANKSALDO_ALT(ITMP, DTVON) RETURNING_VALUES :TEMP_SUM;
   if (TEMP_SUM IS NULL) then
    TEMP_SUM = 0;
   SALDO_GIROK = SALDO_GIROK + TEMP_SUM;
  END
 /* Kassen */
 FOR
  select objbanken.banknr from objbanken, banken, konten where objbanken.onr=:onr and objbanken.BANKNR=banken.nr and ART=1
   and objbanken.onr=konten.onr and objbanken.knr=konten.knr and (BEW=:IKTO1 or BEW=:IKTO2)
   group by OBJBANKEN.BANKNR
  INTO :ITMP
 DO
  BEGIN
   EXECUTE PROCEDURE BANKSALDO_ALT(ITMP, DTVON) RETURNING_VALUES :TEMP_SUM;
   if (TEMP_SUM IS NULL) then
    TEMP_SUM = 0;
   SALDO_SONST = SALDO_SONST + TEMP_SUM;
  END
 /* aktive Ruecklagenbestandskonten */
 FOR
  SELECT KNR from rueckbkt where ONR=:onr group by knr
 INTO :ITMP
 DO
  begin
   EXECUTE PROCEDURE KONTOSALDO_ALT (:ONR, :ITMP, :DTVON, 'J','N') RETURNING_VALUES :TEMP_SUM;
   if (TEMP_SUM IS NULL) then
    TEMP_SUM = 0;
   SALDO_FESTG = SALDO_FESTG + TEMP_SUM;
  end
 /* sonstige aktive Bestandskonten */
 FOR
  SELECT KNR from konten where onr=:onr and KKLASSE=24 and KNR>0 and knr<>:IKTOUNEINBR group by knr
 INTO :ITMP
 DO
  begin
   EXECUTE PROCEDURE KONTOSALDO_ALT (:ONR, :ITMP, :DTVON, 'J','N') RETURNING_VALUES :TEMP_SUM;
   if (TEMP_SUM IS NULL) then
    TEMP_SUM = 0;
   SALDO_SONST = SALDO_SONST + TEMP_SUM;
  end

 SALDO_FESTG_SUM = SALDO_FESTG;
 SALDO_GIROK_SUM = SALDO_GIROK;
 SALDO_SONST_SUM = SALDO_SONST;
 SALDO_WDATU_SUM = SALDO_WDATU;
 SUSPEND;
 /* Ende - Saldo zum DTVON */


 /* Anfang - Gebuchte Anfangsbestaende der Banken */
 KLASSE = 0; OBJ = ONR; KNR = 0; KBEZ = 'Anfangsbestand per ' || SDATUM; SALDO_WDATU = 0;
 SALDO_FESTG = 0; SALDO_GIROK = 0; SALDO_SONST = 0;
 /* reine Bankkonten*/
 FOR
  select objbanken.knr from objbanken, banken, konten where objbanken.onr=:onr and objbanken.BANKNR=banken.nr and ART=0
   and objbanken.onr=konten.onr and objbanken.knr=konten.knr and (BEW=:IKTO1 or BEW=:IKTO2)
   group by OBJBANKEN.KNR
  INTO :ITMP
 DO
  BEGIN
   select sum(betrag) from buchung where ksoll=:ITMP and khaben=98000 and onrsoll=:onr and (Datum >= :DTVON and Datum <= :DTBIS) into :TEMP_SUM;
   if (TEMP_SUM IS NULL) then
    TEMP_SUM = 0;
   SALDO_GIROK = SALDO_GIROK + TEMP_SUM;
  END
 /* Kassen */
 FOR
  select objbanken.knr from objbanken, banken, konten where objbanken.onr=:onr and objbanken.BANKNR=banken.nr and ART=1
   and objbanken.onr=konten.onr and objbanken.knr=konten.knr and (BEW=:IKTO1 or BEW=:IKTO2)
   group by OBJBANKEN.KNR
  INTO :ITMP
 DO
  BEGIN
   select sum(betrag) from buchung where ksoll=:ITMP and khaben=98000 and onrsoll=:onr and (Datum >= :DTVON and Datum <= :DTBIS) into :TEMP_SUM;
   if (TEMP_SUM IS NULL) then
    TEMP_SUM = 0;
   SALDO_SONST = SALDO_SONST + TEMP_SUM;
  END
 /* aktive Ruecklagenbestandskonten */
 FOR
  SELECT KNR from rueckbkt where ONR=:onr group by knr
 INTO :ITMP
 DO
  begin
   select sum(betrag) from buchung where ksoll=:ITMP and khaben=98000 and onrsoll=:onr and (Datum >= :DTVON and Datum <= :DTBIS) into :TEMP_SUM;
   if (TEMP_SUM IS NULL) then
    TEMP_SUM = 0;
   SALDO_FESTG = SALDO_FESTG + TEMP_SUM;
  end
 /* sonstige aktive Bestandskonten */
 FOR
  SELECT KNR from konten where onr=:onr and KKLASSE=24 and KNR>0 and knr<>:IKTOUNEINBR group by knr
 INTO :ITMP
 DO
  begin
   select sum(betrag) from buchung where ksoll=:ITMP and khaben=98000 and onrsoll=:onr and (Datum >= :DTVON and Datum <= :DTBIS) into :TEMP_SUM;
   if (TEMP_SUM IS NULL) then
    TEMP_SUM = 0;
   SALDO_SONST = SALDO_SONST + TEMP_SUM;
  end

 IF ((SALDO_GIROK <> 0) or (SALDO_SONST <> 0) or (SALDO_FESTG <> 0)) THEN
  begin
   SALDO_FESTG_SUM = SALDO_FESTG_SUM + SALDO_FESTG;
   SALDO_GIROK_SUM = SALDO_GIROK_SUM + SALDO_GIROK;
   SALDO_SONST_SUM = SALDO_SONST_SUM + SALDO_SONST;
   SALDO_WDATU_SUM = SALDO_WDATU_SUM + SALDO_WDATU;
   SUSPEND;
  end
 /* Ende - Gebuchte Anfangsbestaende der Banken */

 /* Anfang - Gebuchte Umsaetze anderer Objekte auf dem Konto */
 KLASSE = 0; OBJ = ONR; KNR = 0; KBEZ = 'UmsÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤tze anderer Objekte'; SALDO_WDATU = 0;
 SALDO_FESTG = 0; SALDO_GIROK = 0; SALDO_SONST = 0;
 /* reine Bankkonten*/
 FOR
  select objbanken.banknr from objbanken, banken, konten where objbanken.onr=:onr and objbanken.BANKNR=banken.nr and ART=0
   and objbanken.onr=konten.onr and objbanken.knr=konten.knr and (BEW=:IKTO1 or BEW=:IKTO2)
   group by OBJBANKEN.BANKNR
  INTO :ITMP
 DO
  BEGIN
   for
    select sum(betrag) from buchung where (onrsoll<>:onr and onrsoll<>0) and banknrsoll=:ITMP and (Datum >= :DTVON and Datum <= :DTBIS)
    union all
    select sum(-betrag) from buchung where (onrhaben<>:onr and onrhaben<>0) and banknrhaben=:ITMP and (Datum >= :DTVON and Datum <= :DTBIS)
    into :TEMP_SUM
   do
    begin
     if (TEMP_SUM IS NULL) then
      TEMP_SUM = 0;
     SALDO_GIROK = SALDO_GIROK + TEMP_SUM;
    end
  END
 /* Kassen */
 FOR
  select objbanken.banknr from objbanken, banken, konten where objbanken.onr=:onr and objbanken.BANKNR=banken.nr and ART=1
   and objbanken.onr=konten.onr and objbanken.knr=konten.knr and (BEW=:IKTO1 or BEW=:IKTO2)
   group by OBJBANKEN.BANKNR
  INTO :ITMP
 DO
  BEGIN
   for
    select sum(betrag) from buchung where (onrsoll<>:onr and onrsoll<>0) and banknrsoll=:ITMP and (Datum >= :DTVON and Datum <= :DTBIS)
    union all
    select sum(-betrag) from buchung where (onrhaben<>:onr and onrhaben<>0) and banknrhaben=:ITMP and (Datum >= :DTVON and Datum <= :DTBIS)
    into :TEMP_SUM
   do
    begin
     if (TEMP_SUM IS NULL) then
      TEMP_SUM = 0;
     SALDO_SONST = SALDO_SONST + TEMP_SUM;
    end
  END

 IF ((SALDO_GIROK <> 0) or (SALDO_SONST <> 0)) THEN
  begin
   SALDO_GIROK_SUM = SALDO_GIROK_SUM + SALDO_GIROK;
   SALDO_SONST_SUM = SALDO_SONST_SUM + SALDO_SONST;
   SUSPEND;
  end
 /* Ende - Gebuchte Umsaetze anderer Objekte auf dem Konto */


 /* Anfang - Alle Einnahmen-/Ausgabenkonten */
 FOR
  SELECT KNR, KBEZ, KKLASSE, BHEIZ, KKSTNR, RLPOS, 0 as GN, KUSCHLNR1, EA from konten
  where ONR=:ONR AND (KKLASSE<20 or (KKLASSE>=110 and KKLASSE<=170)) and KNR>0
  union
  SELECT KNR, KBEZ, KKLASSE, BHEIZ, KKSTNR, RLPOS, 1 as GN, KUSCHLNR1, EA from konten
  where ONR=:ONR AND (KKLASSE=15 or (KKLASSE>=110 and KKLASSE<=170)) and KNR>0
  order by 9 desc, 1
 INTO :KNR, :SKBEZ, :KLASSE, :BHEIZ, :KKSTNR, :RLPOS, :IGN, :SCHL, :EA
 DO
  begin  
   KBEZ = SUBSTRING(SKBEZ FROM 1 FOR 88);
   OBJ = :ONR; SALDO_FESTG = 0; SALDO_GIROK = 0; SALDO_SONST = 0; SALDO_WDATU = 0;
   IF (KBEZ = 'Hausgeld') THEN
    KBEZ = 'Hausgeldvorschuss';
   SBEZTMP = KBEZ;    
   /*  */
   if ((KLASSE = 1) or (KLASSE = 19)) then
    begin
     /* SOLL - Seite auswerten */
     for
      select betrag, art from buchung, konten, banken
      where (ONRSOLL=:onr or ONRHABEN=:onr) and (((KSOLL=:KNR) and ((ARTHABEN=20) or (ARTHABEN=1))) or ((KNROP=:KNR) and ((ARTHABEN=20) or (ARTHABEN=1))) or (GN=71 and KNROP=:KNR)) and (Datum >= :DTVON and Datum <= :DTBIS)
      and buchung.KHABEN=konten.knr and buchung.ONRHABEN=konten.onr and banken.nr=KONTEN.BANKNR and (BEW=:IKTO1 or BEW=:IKTO2)
      union all
      select buchzahl.betrag, art from buchung, buchzahl, konten, banken
      where (ONRSOLL=:onr or ONRHABEN=:onr) and (ARTSOLL=71) and (ARTHABEN=20) and (Datum >= :DTVON and Datum <= :DTBIS)
      and buchung.KHABEN=konten.knr and buchung.ONRHABEN=konten.onr and banken.nr=KONTEN.BANKNR and (BEW=:IKTO1 or BEW=:IKTO2) and buchung.BNR=BUCHZAHL.BNR and buchzahl.knr=:knr
      union all
      select betrag, 2 from buchung, konten
      where (ONRSOLL=:onr or ONRHABEN=:onr) and (KSOLL=:KNR) and (ARTHABEN=24) and (Datum >= :DTVON and Datum <= :DTBIS)
      and buchung.KHABEN=konten.knr and buchung.ONRHABEN=konten.onr
     into :TEMP_SUM, :ART
     do
     begin
      if (TEMP_SUM IS NULL) then
       TEMP_SUM = 0;
      if (TEMP_SUM <> 0) then
       begin
        TEMP_SUM=-TEMP_SUM; /* Bank im Haben, VZ umdrehen */
        IF (ART = 0) THEN
         SALDO_GIROK = SALDO_GIROK + TEMP_SUM;
        ELSE
         SALDO_SONST = SALDO_SONST + TEMP_SUM;
       END
     end

         /* Umbuchungen auswerten aktuelles AUSGABEKONTO im H*/
    select sum(betrag) from buchung
     where (ONRSOLL=:onr or ONRHABEN=:onr) and (ARTSOLL=1) and (ARTHABEN=1) and (KHABEN=:KNR) and (Datum >= :DTVON and Datum <= :DTBIS)
    into :TEMP_SUM;
    if (TEMP_SUM IS NULL) then
      TEMP_SUM = 0;
    if (TEMP_SUM<>0) THEN
     SALDO_GIROK = SALDO_GIROK + TEMP_SUM;

    /* Umbuchungen auswerten aktuelles AUSGABEKONTO im S*/
    select sum(betrag) from buchung
     where (ONRSOLL=:onr or ONRHABEN=:onr) and (ARTSOLL=1) and (ARTHABEN=1) and (KSOLL=:KNR) and (Datum >= :DTVON and Datum <= :DTBIS)
    into :TEMP_SUM;
    if (TEMP_SUM IS NULL) then
      TEMP_SUM = 0;
    if (TEMP_SUM<>0) THEN
     SALDO_GIROK = SALDO_GIROK - TEMP_SUM;

    /* Umbuchungen auswerten aktuelles EINNAHMEKONTO im H*/
    select sum(betrag) from buchung
     where (ONRSOLL=:onr or ONRHABEN=:onr) and (ARTSOLL=19) and (ARTHABEN=19) and (KHABEN=:KNR) and (Datum >= :DTVON and Datum <= :DTBIS)
    into :TEMP_SUM;
    if (TEMP_SUM IS NULL) then
      TEMP_SUM = 0;
    if (TEMP_SUM<>0) THEN
     SALDO_GIROK = SALDO_GIROK + TEMP_SUM;

    /* Umbuchungen auswerten aktuelles EINNAHMEKONTO im S*/
    select sum(betrag) from buchung
     where (ONRSOLL=:onr or ONRHABEN=:onr) and (ARTSOLL=19) and (ARTHABEN=19) and (KSOLL=:KNR) and (Datum >= :DTVON and Datum <= :DTBIS)
    into :TEMP_SUM;
    if (TEMP_SUM IS NULL) then
      TEMP_SUM = 0;
    if (TEMP_SUM<>0) THEN
     SALDO_GIROK = SALDO_GIROK - TEMP_SUM;


    /* */
    /* HABEN - Seite auswerten */
     for
      select betrag, art from buchung, konten, banken
      where (ONRSOLL=:onr or ONRHABEN=:onr) and (((KHABEN=:KNR) and ((ARTSOLL=20) or (ARTSOLL=1))) or ((KNROP=:KNR) and ((ARTSOLL=20) or (ARTSOLL=1))) or (GN=71 and KNROP=:KNR)) and (Datum >= :DTVON and Datum <= :DTBIS)
      and buchung.KSOLL=konten.knr and buchung.ONRSOLL=konten.onr and banken.nr=KONTEN.BANKNR and (BEW=:IKTO1 or BEW=:IKTO2)
      union all
      select buchzahl.betrag, art from buchung, buchzahl, konten, banken
      where (ONRSOLL=:onr or ONRHABEN=:onr) and (ARTHABEN=71) and (ARTSOLL=20) and (Datum >= :DTVON and Datum <= :DTBIS)
      and buchung.KSOLL=konten.knr and buchung.ONRSOLL=konten.onr and banken.nr=KONTEN.BANKNR and (BEW=:IKTO1 or BEW=:IKTO2) and buchung.BNR=BUCHZAHL.BNR and buchzahl.knr=:knr
      union all
      select betrag, 2 from buchung, konten
      where (ONRSOLL=:onr or ONRHABEN=:onr) and (KHABEN=:KNR) and (ARTSOLL=24) and (Datum >= :DTVON and Datum <= :DTBIS)
      and buchung.KSOLL=konten.knr and buchung.ONRSOLL=konten.onr
     into :TEMP_SUM, :ART
     do
     begin
      if (TEMP_SUM IS NULL) then
       TEMP_SUM = 0;
      if (TEMP_SUM <> 0) then
       begin
        IF (ART = 0) THEN
         SALDO_GIROK = SALDO_GIROK + TEMP_SUM;
        ELSE
         SALDO_SONST = SALDO_SONST + TEMP_SUM;
       END
     end
    /* */
    for
     select max(kbruttogesamt) as gesamt from nkdetail where onr=:onr and kanrs=:knr group by kname
     into :TEMP_SUM
    do
     begin
      if (TEMP_SUM IS NULL) then
       TEMP_SUM = 0;
      SALDO_WDATU = SALDO_WDATU + TEMP_SUM;
     end
    /* */
    IF ((SALDO_GIROK <> 0) or (SALDO_SONST <> 0) or (SALDO_WDATU <> 0)) THEN
     begin
      SALDO_FESTG_SUM = SALDO_FESTG_SUM + SALDO_FESTG;
      SALDO_GIROK_SUM = SALDO_GIROK_SUM + SALDO_GIROK;
      SALDO_SONST_SUM = SALDO_SONST_SUM + SALDO_SONST;
      SALDO_WDATU_SUM = SALDO_WDATU_SUM + SALDO_WDATU;
      IF (KLASSE=1) THEN
       begin
        GRUPPEN_NR=2; /* AUSGABE */
        /* Ausgaben - fuer die berechnung des SUM_SALDO OK */
        /* Ausgaben sind -, sollen aber in Gruppe Ausgaben nicht mit Minus angezeigt werden */
        SALDO_FESTG = - SALDO_FESTG;
        SALDO_GIROK = - SALDO_GIROK;
        SALDO_SONST = - SALDO_SONST;
        /* SALDO_WDATU NICHT UMDREHEN DA FESTBETRAG */
       end
      ELSE
       GRUPPEN_NR=1; /* EINNAHME */
      SUSPEND;
     end
   END
  ELSE
   BEGIN
    SALDO_G_GIROK = 0; SALDO_N_GIROK = 0; SALDO_G_SONST = 0; SALDO_N_SONST = 0;
    /* SOLL - Seite auswerten */
    for
     select betrag, art from buchung, konten, banken
     where (ONRSOLL=:onr or ONRHABEN=:onr) and (ARTSOLL=20) and (KNROP=:KNR) and (GN=:IGN) and (Datum>=:DTVON and Datum<=:DTBIS) and (WDatum>=:DTVON and WDatum<=:DTBIS)
     and buchung.KSOLL=konten.knr and buchung.ONRSOLL=konten.onr and banken.nr=KONTEN.BANKNR and (BEW=:IKTO1 or BEW=:IKTO2)
     union all
     select buchzahl.betrag, art from buchung, buchzahl, konten, banken
     where (ONRSOLL=:onr or ONRHABEN=:onr) and (ARTSOLL=20) and (GN=:IGN) and (Datum >= :DTVON and Datum <= :DTBIS) and (WDatum>=:DTVON and WDatum<=:DTBIS)
     and buchung.KSOLL=konten.knr and buchung.ONRSOLL=konten.onr and banken.nr=KONTEN.BANKNR and (BEW=:IKTO1 or BEW=:IKTO2) and buchung.BNR=BUCHZAHL.BNR and buchzahl.knr=:knr
    into :TEMP_SUM, :ART
    do
    begin
     if (TEMP_SUM IS NULL) then
      TEMP_SUM = 0;
     if (TEMP_SUM <> 0) then
      begin
       /* TEMP_SUM=-TEMP_SUM; */
       IF (ART = 0) THEN
        BEGIN
         SALDO_GIROK = SALDO_GIROK + TEMP_SUM;
         if (TEMP_SUM > 0) then
          SALDO_N_GIROK = SALDO_N_GIROK + TEMP_SUM;
         ELSE
          SALDO_G_GIROK = SALDO_G_GIROK + TEMP_SUM;
        END
       ELSE
        BEGIN
         SALDO_SONST = SALDO_SONST + TEMP_SUM;
         if (TEMP_SUM > 0) then
          SALDO_N_SONST = SALDO_N_SONST + TEMP_SUM;
         ELSE
          SALDO_G_SONST = SALDO_G_SONST + TEMP_SUM;
        END
      END
    end
    /* */
    /* HABEN - Seite auswerten */
    for
     select betrag, art from buchung, konten, banken
     where (ONRSOLL=:onr or ONRHABEN=:onr) and (ARTHABEN=20) and (KNROP=:KNR) and (GN=:IGN) and (Datum>=:DTVON and Datum<=:DTBIS) and (WDatum>=:DTVON and WDatum<=:DTBIS)
     and buchung.KHABEN=konten.knr and buchung.ONRHABEN=konten.onr and banken.nr=KONTEN.BANKNR and (BEW=:IKTO1 or BEW=:IKTO2)
     union all
     select buchzahl.betrag, art from buchung, buchzahl, konten, banken
     where (ONRSOLL=:onr or ONRHABEN=:onr) and (ARTHABEN=20) and (GN=:IGN) and (Datum >= :DTVON and Datum <= :DTBIS) and (WDatum>=:DTVON and WDatum<=:DTBIS)
     and buchung.KHABEN=konten.knr and buchung.ONRHABEN=konten.onr and banken.nr=KONTEN.BANKNR and (BEW=:IKTO1 or BEW=:IKTO2) and buchung.BNR=BUCHZAHL.BNR and buchzahl.knr=:knr
    into :TEMP_SUM, :ART
    do
    begin
     if (TEMP_SUM IS NULL) then
      TEMP_SUM = 0;
     if (TEMP_SUM <> 0) then
      begin
       TEMP_SUM=-TEMP_SUM;
       IF (ART = 0) THEN
        BEGIN
         SALDO_GIROK = SALDO_GIROK + TEMP_SUM;
         if (TEMP_SUM > 0) then
          SALDO_N_GIROK = SALDO_N_GIROK + TEMP_SUM;
         ELSE
          SALDO_G_GIROK = SALDO_G_GIROK + TEMP_SUM;
        END
       ELSE
        BEGIN
         SALDO_SONST = SALDO_SONST + TEMP_SUM;
         if (TEMP_SUM > 0) then
          SALDO_N_SONST = SALDO_N_SONST + TEMP_SUM;
         ELSE
          SALDO_G_SONST = SALDO_G_SONST + TEMP_SUM;
        END
      END
    end
    /* */
    IF ((SALDO_GIROK <> 0) or (SALDO_SONST <> 0)) THEN
     begin
      IF (KLASSE=1) THEN
       GRUPPEN_NR=2; /* AUSGABE */
      ELSE
       GRUPPEN_NR=1; /* EINNAHME */
      --
      if ((KNR = 60090) or (IGN = 1)) then
       BEGIN
        IF (KNR = 60090) THEN
         STMP1 = 'Bewohner'; 
        ELSE
         STMP1 = 'EigentÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼mer';
        --
        if ((SALDO_G_GIROK <> 0) or (SALDO_G_SONST <> 0)) then
         begin
          SALDO_GIROK = SALDO_G_GIROK;
          SALDO_SONST = SALDO_G_SONST;
          IF (KNR = 60090) THEN
           SBEZTMP2 = 'Guthaben ' || STMP1 || ' aus Abr. Vj.';
          else
           SBEZTMP2 = 'Anpassung beschlossener VorschÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼sse (Guthaben) ' || STMP1 || ' aus Abr. Vj. (' || SBEZTMP || ')'; 
          KBEZ = SUBSTRING(SBEZTMP2 FROM 1 FOR 88);
          GRUPPEN_NR=2; /* AUSGABE */
          SALDO_GIROK_SUM = SALDO_GIROK_SUM + SALDO_GIROK;
          SALDO_SONST_SUM = SALDO_SONST_SUM + SALDO_SONST;
          SALDO_GIROK = -SALDO_GIROK;
          SALDO_SONST = -SALDO_SONST;
          SUSPEND;
         end
        --
        if ((SALDO_N_GIROK <> 0) or (SALDO_N_SONST <> 0)) then
         begin
          SALDO_GIROK = SALDO_N_GIROK;
          SALDO_SONST = SALDO_N_SONST;
          IF (KNR = 60090) THEN
           SBEZTMP2 = 'Nachzahlung ' || STMP1 || ' aus Abr. Vj.';
          else
           SBEZTMP2 = 'NachschÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼sse (Nachzahlung) ' || STMP1 || ' aus Abr. Vj. (' || SBEZTMP || ')'; 
          KBEZ = SUBSTRING(SBEZTMP2 FROM 1 FOR 88);
          GRUPPEN_NR=1; /* EINNAHME */
          SALDO_GIROK_SUM = SALDO_GIROK_SUM + SALDO_GIROK;
          SALDO_SONST_SUM = SALDO_SONST_SUM + SALDO_SONST;
          SUSPEND;
         end
       END
      ELSE
       BEGIN
        SALDO_FESTG_SUM = SALDO_FESTG_SUM + SALDO_FESTG;
        SALDO_GIROK_SUM = SALDO_GIROK_SUM + SALDO_GIROK;
        SALDO_SONST_SUM = SALDO_SONST_SUM + SALDO_SONST;
        SALDO_WDATU_SUM = SALDO_WDATU_SUM + SALDO_WDATU;
        SUSPEND;
       END
     end
    SALDO_FESTG = 0; SALDO_GIROK = 0; SALDO_SONST = 0; SALDO_WDATU = 0;
    SALDO_G_GIROK = 0; SALDO_N_GIROK = 0; SALDO_G_SONST = 0; SALDO_N_SONST = 0;

    /* Abgrenzungen SOLL - Seite auswerten */
    for
     select betrag, art from buchung, konten, banken
     where (ONRSOLL=:onr or ONRHABEN=:onr) and (ARTSOLL=20) and (KNROP=:KNR) and (GN=:IGN) and (Datum>=:DTVON and Datum<=:DTBIS) and (WDatum<:DTVON or WDatum>:DTBIS)
     and buchung.KSOLL=konten.knr and buchung.ONRSOLL=konten.onr and banken.nr=KONTEN.BANKNR and (BEW=:IKTO1 or BEW=:IKTO2)
     union all
     select buchzahl.betrag, art from buchung, buchzahl, konten, banken
     where (ONRSOLL=:onr or ONRHABEN=:onr) and (ARTSOLL=20) and (GN=:IGN) and (Datum >= :DTVON and Datum <= :DTBIS) and (WDatum<:DTVON or WDatum>:DTBIS)
     and buchung.KSOLL=konten.knr and buchung.ONRSOLL=konten.onr and banken.nr=KONTEN.BANKNR and (BEW=:IKTO1 or BEW=:IKTO2) and buchung.BNR=BUCHZAHL.BNR and buchzahl.knr=:knr
    into :TEMP_SUM, :ART
    do
    begin
     if (TEMP_SUM IS NULL) then
      TEMP_SUM = 0;
     if (TEMP_SUM <> 0) then
      begin
       IF (ART = 0) THEN
        BEGIN
         SALDO_GIROK = SALDO_GIROK + TEMP_SUM;
         if (TEMP_SUM > 0) then
          SALDO_N_GIROK = SALDO_N_GIROK + TEMP_SUM;
         ELSE
          SALDO_G_GIROK = SALDO_G_GIROK + TEMP_SUM;
        END
       ELSE
        BEGIN
         SALDO_SONST = SALDO_SONST + TEMP_SUM;
         if (TEMP_SUM > 0) then
          SALDO_N_SONST = SALDO_N_SONST + TEMP_SUM;
         ELSE
          SALDO_G_SONST = SALDO_G_SONST + TEMP_SUM;
        END
      END
    end
    /* */
    /* Abgrenzungen HABEN - Seite auswerten */
    for
     select betrag, art from buchung, konten, banken
     where (ONRSOLL=:onr or ONRHABEN=:onr) and (ARTHABEN=20) and (KNROP=:KNR) and (GN=:IGN) and (Datum>=:DTVON and Datum<=:DTBIS) and (WDatum<:DTVON or WDatum>:DTBIS)
     and buchung.KHABEN=konten.knr and buchung.ONRHABEN=konten.onr and banken.nr=KONTEN.BANKNR and (BEW=:IKTO1 or BEW=:IKTO2)
     union all
     select buchzahl.betrag, art from buchung, buchzahl, konten, banken
     where (ONRSOLL=:onr or ONRHABEN=:onr) and (ARTHABEN=20) and (GN=:IGN) and (Datum >= :DTVON and Datum <= :DTBIS) and (WDatum<:DTVON or WDatum>:DTBIS)
     and buchung.KHABEN=konten.knr and buchung.ONRHABEN=konten.onr and banken.nr=KONTEN.BANKNR and (BEW=:IKTO1 or BEW=:IKTO2) and buchung.BNR=BUCHZAHL.BNR and buchzahl.knr=:knr
    into :TEMP_SUM, :ART
    do
    begin
     if (TEMP_SUM IS NULL) then
      TEMP_SUM = 0;
     if (TEMP_SUM <> 0) then
      begin
       TEMP_SUM=-TEMP_SUM;
       IF (ART = 0) THEN
        BEGIN
         SALDO_GIROK = SALDO_GIROK + TEMP_SUM;
         if (TEMP_SUM > 0) then
          SALDO_N_GIROK = SALDO_N_GIROK + TEMP_SUM;
         ELSE
          SALDO_G_GIROK = SALDO_G_GIROK + TEMP_SUM;
        END
       ELSE
        BEGIN
         SALDO_SONST = SALDO_SONST + TEMP_SUM;
         if (TEMP_SUM > 0) then
          SALDO_N_SONST = SALDO_N_SONST + TEMP_SUM;
         ELSE
          SALDO_G_SONST = SALDO_G_SONST + TEMP_SUM;
        END
      END
    end
    /* */
    IF ((SALDO_GIROK <> 0) or (SALDO_SONST <> 0)) THEN
     begin
      IF (KLASSE=1) THEN
       GRUPPEN_NR=2; /* AUSGABE */
      ELSE
       GRUPPEN_NR=1; /* EINNAHME */
      --
      if ((KNR = 60090) or (IGN = 1)) then
       BEGIN
        IF (KNR = 60090) THEN
         STMP1 = 'Bewohner';
        ELSE
         STMP1 = 'EigentÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼mer';
        --
        if ((SALDO_G_GIROK <> 0) or (SALDO_G_SONST <> 0)) then
         begin
          SALDO_GIROK = SALDO_G_GIROK;
          SALDO_SONST = SALDO_G_SONST;
          IF (KNR = 60090) THEN
           SBEZTMP2 = 'Guthaben ' || STMP1 || ' (Abgr. Vor-/Folgejahre)';
          else
           SBEZTMP2 = 'Anpassung beschlossener VorschÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼sse (Guthaben) ' || STMP1 || ' (Abgr. Vor-/Folgejahre; ' || SBEZTMP || ')';
          KBEZ = SUBSTRING(SBEZTMP2 FROM 1 FOR 88);
          GRUPPEN_NR=2; /* AUSGABE */
          SALDO_GIROK_SUM = SALDO_GIROK_SUM + SALDO_GIROK;
          SALDO_SONST_SUM = SALDO_SONST_SUM + SALDO_SONST;
          SALDO_GIROK = -SALDO_GIROK;
          SALDO_SONST = -SALDO_SONST;
          SUSPEND;
         end
        --
        if ((SALDO_N_GIROK <> 0) or (SALDO_N_SONST <> 0)) then
         begin
          SALDO_GIROK = SALDO_N_GIROK;
          SALDO_SONST = SALDO_N_SONST;
          IF (KNR = 60090) THEN
           SBEZTMP2 = 'Nachzahlung ' || STMP1 || ' (Abgr. Vor-/Folgejahre)';
          else
           SBEZTMP2 = 'NachschÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼sse (Nachzahlung) ' || STMP1 || ' (Abgr. Vor-/Folgejahre; ' || SBEZTMP || ')';
          KBEZ = SUBSTRING(SBEZTMP2 FROM 1 FOR 88); 
          GRUPPEN_NR=1; /* EINNAHME */
          SALDO_GIROK_SUM = SALDO_GIROK_SUM + SALDO_GIROK;
          SALDO_SONST_SUM = SALDO_SONST_SUM + SALDO_SONST;
          SUSPEND;
         end
       END
      ELSE
       BEGIN
        KBEZ = KBEZ || ' (Abgr. Vor-/Folgejahre)';
        SALDO_FESTG_SUM = SALDO_FESTG_SUM + SALDO_FESTG;
        SALDO_GIROK_SUM = SALDO_GIROK_SUM + SALDO_GIROK;
        SALDO_SONST_SUM = SALDO_SONST_SUM + SALDO_SONST;
        SALDO_WDATU_SUM = SALDO_WDATU_SUM + SALDO_WDATU;
        SUSPEND;
       END
     end
   END
  END
 /* Ende - Alle Einnahmen-/Ausgabenkonten */
 
 /* Anfang - Konten BGH-Urteil-Heizkosten */
 GRUPPEN_NR=2; /* AUSGABE */
 KLASSE=1;
 OBJ=:OBJ;
 KNR=0;
 KBEZ='';
 SALDO_FESTG=0;
 SALDO_GIROK=0;
 SALDO_SONST=0;
 SALDO_WDATU=0;
 EA=1;
 for
  select kname, max(kbruttogesamt) as gesamt from nkdetail where onr=:onr and kanrs='99999' and haupt_nr=1 group by kname
 into :KBEZ, :SALDO_WDATU
 do
  begin
   if (SALDO_WDATU IS NULL) then 
    SALDO_WDATU = 0;
   IF (SALDO_WDATU <> 0) THEN
    begin
     SALDO_WDATU_SUM = SALDO_WDATU_SUM + SALDO_WDATU;
     SUSPEND;
    end    
  end
 /* Ende - Konten BGH-Urteil-Heizkosten */

 /* Anfang - ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã¢â‚¬Å“bertrage an passive RÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼cklagen-Bestandskonten  */
 OBJ = :ONR; SALDO_FESTG = 0; SALDO_GIROK = 0; SALDO_SONST = 0; SALDO_WDATU = 0; KBEZ = ''; KNR = 0;
 FOR
  select sum(buchzahl.BETRAG), buchzahl.ARTOP, rueckbkt.RUECKPOS from buchung, buchzahl, rueckbkt
  where (ONRSOLL=:onr or ONRHABEN=:onr) and (KSOLL in (select knr from rueckbkt where onr=:onr group by knr)) and (ARTHABEN in (27)) and (Datum >= :DTVON and Datum <= :DTBIS)
  and buchzahl.BNR=buchung.bnr and rueckbkt.onr=:onr and RUECKBKT.knr=buchzahl.knr and buchzahl.betrag<>0 group by buchzahl.ARTOP, rueckbkt.RUECKPOS
 into :TEMP_SUM, :ART, :RLPOS
 DO
  BEGIN
   SALDO_FESTG = SALDO_FESTG + TEMP_SUM;
   EXECUTE STATEMENT 'select name, case (' || :ART || ')
    when 1 then pos1name
    when 2 then pos2name
    when 3 then pos3name
    when 4 then pos4name
    when 5 then pos5name
    when 6 then pos6name
    when 7 then pos7name
    when 8 then pos8name
    when 9 then pos9name
    when 10 then pos10name
    else pos1name end from rueckpos where nr=' || :RLPOS INTO :STMP1, :STMP2;
   KBEZ = STMP2 || ' fÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼r ' || STMP1;
   IF (:TEMP_SUM < 0) then
    GRUPPEN_NR=2;
   ELSE
    GRUPPEN_NR=1;
   --
   IF (SALDO_FESTG <> 0) THEN
    BEGIN
     SALDO_FESTG_SUM = SALDO_FESTG_SUM + SALDO_FESTG;
     SALDO_FESTG = ABS(SALDO_FESTG);
     SUSPEND;
     SALDO_FESTG = 0; SALDO_GIROK = 0; SALDO_SONST = 0; SALDO_WDATU = 0; KBEZ = ''; KNR = 0;
    END
  END
 /* Ende - ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã¢â‚¬Å“bertrage an passive RÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼cklagen-Bestandskonten  */


 /* Anfang - ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã¢â‚¬Å“bertrage an andere aktive Bestandskonten */
 OBJ = :ONR; SALDO_FESTG = 0; SALDO_GIROK = 0; SALDO_SONST = 0; SALDO_WDATU = 0;
 KBEZ = 'ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã¢â‚¬Å“bertrÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ge'; KNR = 0; GRUPPEN_NR=3;
 FOR
  select objbanken.knr, 0 from objbanken, banken, konten where objbanken.onr=:onr and objbanken.BANKNR=banken.nr and ART=0
   and objbanken.onr=konten.onr and objbanken.knr=konten.knr and (BEW=:IKTO1 or BEW=:IKTO2)
   group by OBJBANKEN.KNR
  union all
  select objbanken.knr, 1 from objbanken, banken, konten where objbanken.onr=:onr and objbanken.BANKNR=banken.nr and ART=1
   and objbanken.onr=konten.onr and objbanken.knr=konten.knr and (BEW=:IKTO1 or BEW=:IKTO2)
   group by OBJBANKEN.KNR
  union all
  select knr, 2 from rueckbkt where onr=:onr group by knr
  union all
  select knr, 1 from konten where onr=:onr and KKLASSE=24 and KNR>0 and knr<>:IKTOUNEINBR group by knr
 INTO :ITMP, :ART
 DO
  begin
   /* SOLL - Seite auswerten */
   for
    select SUM(betrag) from buchung
    where (ONRSOLL=:onr or ONRHABEN=:onr) and (KSOLL=:ITMP) and (ARTHABEN in (20, 22, 24)) and (Datum >= :DTVON and Datum <= :DTBIS)
   into :TEMP_SUM
   do
    begin
     if (TEMP_SUM IS NULL) then
      TEMP_SUM = 0;
     if (TEMP_SUM <> 0) then
      begin
       IF (ART = 0) THEN
        SALDO_GIROK = SALDO_GIROK + TEMP_SUM;
       ELSE
        BEGIN
         IF (ART = 1) THEN
          SALDO_SONST = SALDO_SONST + TEMP_SUM;
         ELSE
          SALDO_FESTG = SALDO_FESTG + TEMP_SUM;
        END
      END
    end
   /* */
   /* HABEN - Seite auswerten */
   for
    select SUM(betrag) from buchung
    where (ONRSOLL=:onr or ONRHABEN=:onr) and (KHABEN=:ITMP) and (ARTSOLL in (20, 22, 24)) and (Datum >= :DTVON and Datum <= :DTBIS)
   into :TEMP_SUM
   do
    begin
     if (TEMP_SUM IS NULL) then
      TEMP_SUM = 0;
     if (TEMP_SUM <> 0) then
      begin
       IF (ART = 0) THEN
        SALDO_GIROK = SALDO_GIROK - TEMP_SUM;
       ELSE
        BEGIN
         IF (ART = 1) THEN
          SALDO_SONST = SALDO_SONST - TEMP_SUM;
         ELSE
          SALDO_FESTG = SALDO_FESTG - TEMP_SUM;
        END
      END
    end
  end
 /* */
 IF ((SALDO_GIROK <> 0) or (SALDO_SONST <> 0) or (SALDO_FESTG <> 0)) THEN
  BEGIN
   SALDO_FESTG_SUM = SALDO_FESTG_SUM + SALDO_FESTG;
   SALDO_GIROK_SUM = SALDO_GIROK_SUM + SALDO_GIROK;
   SALDO_SONST_SUM = SALDO_SONST_SUM + SALDO_SONST;
   SALDO_WDATU_SUM = SALDO_WDATU_SUM + SALDO_WDATU;
   SUSPEND;
   SALDO_FESTG = 0; SALDO_GIROK = 0; SALDO_SONST = 0; SALDO_WDATU = 0; KBEZ = ''; KNR = 0;
  END
 /* Ende - ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã¢â‚¬Å“bertrage an andere aktive Bestandskonten */


 /* Anfang - ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã¢â‚¬Å“bertrage an das Durchlaufkonto 99990 */
 OBJ = :ONR; SALDO_FESTG = 0; SALDO_GIROK = 0; SALDO_SONST = 0; SALDO_WDATU = 0;
 KBEZ = 'ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã¢â‚¬Å“bertrag an Durchlaufkto.'; KNR = 0; GRUPPEN_NR=3;
 FOR
  select objbanken.knr, 0 from objbanken, banken, konten where objbanken.onr=:onr and objbanken.BANKNR=banken.nr and ART=0
   and objbanken.onr=konten.onr and objbanken.knr=konten.knr and (BEW=:IKTO1 or BEW=:IKTO2)
   group by OBJBANKEN.KNR
  union all
  select objbanken.knr, 1 from objbanken, banken, konten where objbanken.onr=:onr and objbanken.BANKNR=banken.nr and ART=1
   and objbanken.onr=konten.onr and objbanken.knr=konten.knr and (BEW=:IKTO1 or BEW=:IKTO2)
   group by OBJBANKEN.KNR
  union all
  select knr, 2 from rueckbkt where onr=:onr group by knr
  union all
  select knr, 1 from konten where onr=:onr and KKLASSE=24 and KNR>0 and knr<>:IKTOUNEINBR group by knr
 INTO :ITMP, :ART
 DO
  begin
   /* SOLL - Seite auswerten */
   for
    select SUM(betrag) from buchung
    where (ONRSOLL=:onr or ONRHABEN=:onr) and (KSOLL=:ITMP) and (KHABEN=99990) and (Datum >= :DTVON and Datum <= :DTBIS)
   into :TEMP_SUM
   do
    begin
     if (TEMP_SUM IS NULL) then
      TEMP_SUM = 0;
     if (TEMP_SUM <> 0) then
      begin
       IF (ART = 0) THEN
        SALDO_GIROK = SALDO_GIROK + TEMP_SUM;
       ELSE
        BEGIN
         IF (ART = 1) THEN
          SALDO_SONST = SALDO_SONST + TEMP_SUM;
         ELSE
          SALDO_FESTG = SALDO_FESTG + TEMP_SUM;
        END
      END
    end
   /* */
   /* HABEN - Seite auswerten */
   for
    select SUM(betrag) from buchung
    where (ONRSOLL=:onr or ONRHABEN=:onr) and (KHABEN=:ITMP) and (KSOLL=99990) and (Datum >= :DTVON and Datum <= :DTBIS)
   into :TEMP_SUM
   do
    begin
     if (TEMP_SUM IS NULL) then
      TEMP_SUM = 0;
     if (TEMP_SUM <> 0) then
      begin
       IF (ART = 0) THEN
        SALDO_GIROK = SALDO_GIROK - TEMP_SUM;
       ELSE
        BEGIN
         IF (ART = 1) THEN
          SALDO_SONST = SALDO_SONST - TEMP_SUM;
         ELSE
          SALDO_FESTG = SALDO_FESTG - TEMP_SUM;
        END
      END
    end
  end
 /* */
 IF ((SALDO_GIROK <> 0) or (SALDO_SONST <> 0) or (SALDO_FESTG <> 0)) THEN
  BEGIN
   SALDO_FESTG_SUM = SALDO_FESTG_SUM + SALDO_FESTG;
   SALDO_GIROK_SUM = SALDO_GIROK_SUM + SALDO_GIROK;
   SALDO_SONST_SUM = SALDO_SONST_SUM + SALDO_SONST;
   SALDO_WDATU_SUM = SALDO_WDATU_SUM + SALDO_WDATU;
   SUSPEND;
   SALDO_FESTG = 0; SALDO_GIROK = 0; SALDO_SONST = 0; SALDO_WDATU = 0; KBEZ = ''; KNR = 0;
  END
 /* Ende - ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã¢â‚¬Å“bertrage an das Durchlaufkonto 99990 */


 /* Anfang - ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã¢â‚¬Å“bertrage an passive Bestandskonten ohne RÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼cklagen */
 OBJ = :ONR; SALDO_FESTG = 0; SALDO_GIROK = 0; SALDO_SONST = 0; SALDO_WDATU = 0;
 KBEZ = 'ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã¢â‚¬Å“bertrÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ge an passive Bestandskonten'; KNR = 0;
 FOR
  select objbanken.knr, 0 from objbanken, banken, konten where objbanken.onr=:onr and objbanken.BANKNR=banken.nr and ART=0
   and objbanken.onr=konten.onr and objbanken.knr=konten.knr and (BEW=:IKTO1 or BEW=:IKTO2)
   group by OBJBANKEN.KNR
  union all
  select objbanken.knr, 1 from objbanken, banken, konten where objbanken.onr=:onr and objbanken.BANKNR=banken.nr and ART=1
   and objbanken.onr=konten.onr and objbanken.knr=konten.knr and (BEW=:IKTO1 or BEW=:IKTO2)
   group by OBJBANKEN.KNR
  union all
  select knr, 1 from konten where onr=:onr and KKLASSE=24 and KNR>0 and knr<>:IKTOUNEINBR group by knr
 INTO :ITMP, :ART
 DO
  begin
   /* SOLL - Seite auswerten */
   for
    select SUM(betrag) from buchung
    where (ONRSOLL=:onr or ONRHABEN=:onr) and (KSOLL=:ITMP) and (ARTHABEN in (27)) and (Datum >= :DTVON and Datum <= :DTBIS)
   into :TEMP_SUM
   do
    begin
     if (TEMP_SUM IS NULL) then
      TEMP_SUM = 0;
     if (TEMP_SUM <> 0) then
      begin
       IF (ART = 0) THEN
        SALDO_GIROK = SALDO_GIROK + TEMP_SUM;
       ELSE
        BEGIN
         IF (ART = 1) THEN
          SALDO_SONST = SALDO_SONST + TEMP_SUM;
        END
      END
    end
   /* */
   /* HABEN - Seite auswerten */
   for
    select SUM(betrag) from buchung
    where (ONRSOLL=:onr or ONRHABEN=:onr) and (KHABEN=:ITMP) and (ARTSOLL in (27)) and (Datum >= :DTVON and Datum <= :DTBIS)
   into :TEMP_SUM
   do
    begin
     if (TEMP_SUM IS NULL) then
      TEMP_SUM = 0;
     if (TEMP_SUM <> 0) then
      begin
       IF (ART = 0) THEN
        SALDO_GIROK = SALDO_GIROK - TEMP_SUM;
       ELSE
        BEGIN
         IF (ART = 1) THEN
          SALDO_SONST = SALDO_SONST - TEMP_SUM;
         ELSE
          SALDO_FESTG = SALDO_FESTG - TEMP_SUM;
        END
      END
    end
  end

 IF ((SALDO_GIROK <> 0) or (SALDO_SONST <> 0) or (SALDO_FESTG <> 0)) THEN
  BEGIN
   SALDO_FESTG_SUM = SALDO_FESTG_SUM + SALDO_FESTG;
   SALDO_GIROK_SUM = SALDO_GIROK_SUM + SALDO_GIROK;
   SALDO_SONST_SUM = SALDO_SONST_SUM + SALDO_SONST;
   SALDO_WDATU_SUM = SALDO_WDATU_SUM + SALDO_WDATU;
   SUSPEND;
   SALDO_FESTG = 0; SALDO_GIROK = 0; SALDO_SONST = 0; SALDO_WDATU = 0; KBEZ = ''; KNR = 0;
  END
 /* Ende - ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã¢â‚¬Å“bertrage an passive Bestandskonten ohne RÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼cklagen */

 /* Salden der Bestandskonten einfÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼gen */
 KLASSE = 9999;
 OBJ = ONR;
 KNR = 0;
 SDATUM = CAST(DTBIS AS VARCHAR(10));
 KBEZ = 'Endbestand per ' || SUBSTRING(SDATUM FROM 9 FOR 2) || '.' || SUBSTRING(SDATUM FROM 6 FOR 2) || '.' || SUBSTRING(SDATUM FROM 1 FOR 4);
 SALDO_FESTG = SALDO_FESTG_SUM;
 SALDO_GIROK = SALDO_GIROK_SUM;
 SALDO_SONST = SALDO_SONST_SUM;
 /* SALDO_WDATU = SALDO_WDATU_SUM; */
 SALDO_WDATU = 0; /* Uwe: wenn ich im Bericht die W-DATUM spalte = verteilungsrelevante BetrÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ge summiere muss das hier 0 sein */
 GRUPPEN_NR=4;
 SUSPEND;

 /* Uwe kommt im Bericht am SchluÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸ */
 /* Anfang - ZufÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼hrungen und Entnahmen ausweisen */
 OBJ = :ONR; SALDO_FESTG = 0; SALDO_GIROK = 0; SALDO_SONST = 0; SALDO_WDATU = 0;
 select max(RL_GESAMTSOLL - ENTRL_GESAMT) as RL from nkmaster where onr=:onr into :TEMP_SUM;
 if (TEMP_SUM IS NULL) then
  TEMP_SUM = 0;
 SALDO_WDATU = TEMP_SUM;

 IF (SALDO_WDATU <> 0) THEN
  begin
   KLASSE = 0;
   KBEZ = 'Geplante ErhaltungsrÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼cklagenzufÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼hrung abzgl. Entnahmen';
   SALDO_WDATU_SUM = SALDO_WDATU_SUM + SALDO_WDATU;
   GRUPPEN_NR=5;
   SUSPEND;
  end
 /* Ende - ZufÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼hrungen und Entnahmen ausweisen */

END


-- Prozedur: INTEGER_LIST
CREATE OR ALTER PROCEDURE INTEGER_LIST
DECLARE VARIABLE CHAR_COUNT INTEGER;
DECLARE VARIABLE PARAM_LENGTH INTEGER;
DECLARE VARIABLE READ_VALUE CHAR(1);
DECLARE VARIABLE CURRENT_INTEGER VARCHAR(20);
begin
    param_length = CHAR_LENGTH(input);
    char_count = 0;
    current_integer = '';
    while (char_count < param_length) do begin
        char_count = :char_count + 1;
        read_value = substring(:input from :char_count for 1);
        if (:read_value <> ',') then begin
            current_integer = :current_integer || :read_value;
        end else if (:read_value <> ' ') then  begin
            int_value = cast(:current_integer as integer);
            current_integer = '';
            suspend;
        end

        if (:char_count = :param_length) then begin
            int_value = cast(:current_integer as integer);
            suspend;
        end
    end
end


-- Prozedur: JOURNAL
CREATE OR ALTER PROCEDURE JOURNAL
DECLARE VARIABLE BANKNRSOLL INTEGER;
DECLARE VARIABLE IBANKNRAKT INTEGER;
DECLARE VARIABLE BANKNRHABEN INTEGER;
DECLARE VARIABLE ARTSOLL INTEGER;
DECLARE VARIABLE ARTHABEN INTEGER;
DECLARE VARIABLE KLASSEGS INTEGER;
DECLARE VARIABLE KLASSEGH INTEGER;
DECLARE VARIABLE SPLITNR INTEGER;
DECLARE VARIABLE BANKSTR VARCHAR(15);
DECLARE VARIABLE BETRAG NUMERIC(15, 2);
DECLARE VARIABLE USTSATZ NUMERIC(15, 4);
DECLARE VARIABLE KLASSEBIS INTEGER;
DECLARE VARIABLE LBNR INTEGER;
DECLARE VARIABLE ITKLASSE INTEGER;
DECLARE VARIABLE IKAUSZUGBLATT SMALLINT;
DECLARE VARIABLE IKAUSZUGNR INTEGER;
BEGIN
 IBANKNRAKT=-1;
 BANKSTR='';
 ITKLASSE = KLASSE;
 HDBETRAG = 0; HDTEXT = ''; HDART = 0;
 IF (BNACHKONTEN='N') THEN
  BEGIN
   /*         */
   /* JOURNAL */
   /*         */
   IF (BWDATUM='N') THEN
    BEGIN
     FOR SELECT BNR, DATUM, WDATUM, KSOLL, KHABEN, BELEGNR, TEXT, MWST, BETRAG, BANKNRSOLL, BANKNRHABEN, OPBETRAG, SPLITNR, KSTRHABEN, KSTRSOLL, ARTSOLL, ARTHABEN,LBNR from buchung
      WHERE (ONRSOLL=:IONR OR ONRHABEN=:IONR)
      AND ((KSOLL>=:KNRVON AND KSOLL <=:KNRBIS) OR (KHABEN>=:KNRVON AND KHABEN <=:KNRBIS))
      AND (Datum>=:DTVON and Datum<=:DTBIS)
      AND BETRAG<>0
     INTO :BNR, :DATUM, :WDATUM, :KSOLL, :KHABEN, :BELEGNR, :TEXT, :MWST, :BETRAG, :BANKNRSOLL, :BANKNRHABEN, :OPBETRAG, :SPLITNR, :KSTRHABEN, :KSTRSOLL, :ARTSOLL, :ARTHABEN, :LBNR
     DO
      BEGIN
       HDBETRAG = 0; HDTEXT = ''; HDART = 0;
       IF ((ARTSOLL=1) or (ARTHABEN=1)) THEN
        BEGIN
	 select sum(betrag) from hdbuch where bnr=:bnr into :HDBETRAG;  
         select first 1 text, art from hdbuch where bnr=:bnr into HDTEXT, HDART; 
         if (HDBETRAG is null) then
          HDBETRAG = 0;
         if (HDART is null) then
          HDART = 0;
         if (HDTEXT is null) then
          HDTEXT = '';  
        END
       /* */      
       ONR=:IONR;
       IF (ARTSOLL=1) THEN
        KLASSEGS=1; /* K */
       ELSE
        IF ((ARTSOLL>=10 AND ARTSOLL<=19) or (ARTSOLL>=110 and ARTSOLL<=580)) THEN
         KLASSEGS=2;  /* E*/
        ELSE
         IF ((ARTSOLL>=20 AND ARTSOLL<=24) OR (ARTSOLL=30)) THEN
          KLASSEGS=4; /* A*/
         ELSE
          IF (ARTSOLL=27) THEN
           KLASSEGS=3;  /* P*/
          ELSE
           IF (ARTSOLL=71) THEN
            KLASSEGS=7;   /* KRED*/
           ELSE
            KLASSEGS=6;  /* DEB*/
       IF (ARTHABEN=1) THEN
        KLASSEGH=1; /* K */
       ELSE
        IF ((ARTHABEN>=10 AND ARTHABEN<=19) or (ARTHABEN>=110 and ARTHABEN<=580)) THEN
         KLASSEGH=2;  /* E*/
        ELSE
         IF ((ARTHABEN>=20 AND ARTHABEN<=24) OR (ARTHABEN=30)) THEN
          KLASSEGH=4; /* A*/
         ELSE
          IF (ARTHABEN=27) THEN
           KLASSEGH=3;  /* P*/
          ELSE
           IF (ARTHABEN=71) THEN
            KLASSEGH=7;   /* KRED*/
           ELSE
            KLASSEGH=6;  /* DEB*/
       IF (OPBETRAG IS NOT NULL) THEN
        BEGIN
         IF (OPBETRAG=0) THEN
          BEMERKUNG='SO';
         ELSE
          BEMERKUNG='OP';
        END
       ELSE
        IF (LBNR IS NOT NULL) THEN
         BEMERKUNG='LEV';
        ELSE
         BEMERKUNG='';
       IF (BANKNRSOLL IS NOT NULL) THEN
        BEGIN
         IF (BANKNRSOLL=IBANKNRAKT) THEN
          KSTRSOLL=KSTRSOLL || ' ' || BANKSTR;
         ELSE
           BEGIN
            SELECT KURZBEZ from Banken where NR=:BANKNRSOLL into :BANKSTR;
            KSTRSOLL=KSTRSOLL || ' ' || BANKSTR;
            IBANKNRAKT=BANKNRSOLL;
           END
        END
       ELSE
        BEGIN
         IF (:ARTSOLL<>71) THEN
          SELECT KNRSTR || ' ' || KBEZ from konten where ONR=:IONR AND KNR=:KSOLL INTO :KSTRSOLL;
         ELSE
          SELECT KNRSTR || ' ' || KBEZ from konten where ONR=0 AND KNR=:KSOLL INTO :KSTRSOLL;
        END
       IF (BANKNRHABEN IS NOT NULL) THEN
        BEGIN
         IF (BANKNRHABEN=IBANKNRAKT) THEN
          KSTRHABEN=KSTRHABEN || ' ' || BANKSTR;
         ELSE
           BEGIN
            SELECT KURZBEZ from Banken where NR=:BANKNRHABEN into :BANKSTR;
            KSTRHABEN=KSTRHABEN || ' ' || BANKSTR;
            IBANKNRAKT=BANKNRHABEN;
           END
        END
       ELSE
        BEGIN
         IF (:ARTHABEN<>71) THEN
          SELECT KNRSTR || ' ' || KBEZ from konten where ONR=:IONR AND KNR=:KHABEN INTO :KSTRHABEN;
         ELSE
          SELECT KNRSTR || ' ' || KBEZ from konten where ONR=0 AND KNR=:KHABEN INTO :KSTRHABEN;
        END
       /*Steuer*/
       IF (MWST<>0) THEN
        BEGIN
         USTSATZ=100+MWST;/*1+(MWST/100);*/
         IF ((ARTSOLL>=10 AND ARTSOLL<=19) OR (ARTSOLL=1) or (ARTSOLL>=110 and ARTSOLL<=580)) THEN
          BEGIN
           IF (BDOPPBU='J') THEN
            BEGIN
             BETRAGS=BETRAG;
             USTSOLL=BETRAG - ((BETRAG * 100) / USTSATZ);
             BETRAGH=BETRAG;
             USTHABEN=NULL;
            END
           ELSE
            BEGIN /* Einfache Buch Steuer berechnen */
             BETRAGS=BETRAG;
             BETRAGH=BETRAG;
             USTHABEN=NULL;
             USTSOLL=BETRAG - ((BETRAG * 100) / USTSATZ);
            END
          END
         ELSE
          /* Steuer im Haben?*/
          IF ((ARTHABEN>=10 AND ARTHABEN<=19) OR (ARTHABEN=1) or (ARTHABEN>=110 and ARTHABEN<=580)) THEN
           BEGIN
            IF (BDOPPBU='J') THEN
             BEGIN
              BETRAGH=BETRAG;
              USTHABEN=BETRAG - ((BETRAG * 100) / USTSATZ);
              BETRAGS=BETRAG;
              USTSOLL=NULL;
             END
            ELSE
             BEGIN /* Einfache Buch Steuer berechnen */
              BETRAGS=BETRAG;
              BETRAGH=BETRAG;
              USTHABEN=NULL;
              USTSOLL=BETRAG - ((BETRAG * 100) / USTSATZ);
             END
           END
          ELSE
           BEGIN /* PlausibilitÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤t: Steuer nur auf Aufwand/Ertrag */
            BETRAGS=BETRAG;
            BETRAGH=BETRAG;
            USTSOLL=NULL;
            USTHABEN=NULL;
            MWST=NULL;
           END
        END
       ELSE
        BEGIN /* keine Steuer + einfache BuchFÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼hrung Brutto*/
         BETRAGS=BETRAG;
         BETRAGH=BETRAG;
         USTSOLL=NULL;
         USTHABEN=NULL;
         MWST=NULL;
        END
       IF (KLASSE=6) THEN  /* steht fÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼r alle BEW/EIG */
        BEGIN
 /* BETRAG S = OPBETRAG */
         IF (BEMERKUNG<>'' AND BEMERKUNG<>'LEV') THEN
          BEGIN
           if (ARTSOLL=1) then /* gegen Ausgabe gebucht Rene 02.14*/
            BEGIN
             BETRAGH = -BETRAGH;
             USTHABEN = -USTHABEN;
            END
           BETRAGS=BETRAGH;
           USTSOLL=USTHABEN;
           BETRAGH=NULL;
           USTHABEN=NULL;
          END
         ELSE
          BEGIN
           if (ARTSOLL=1) then /* gegen Ausgabe gebucht Rene 02.14*/
            BEGIN
             BETRAGS = -BETRAGS;
             USTSOLL = -USTSOLL;
            END
           BETRAGH=BETRAGS;
           USTHABEN=USTSOLL;
           BETRAGS=NULL;
           USTSOLL=NULL;
          END
         /*Rene Verrechnungen*/
         IF (BANKNRSOLL IS NULL AND BANKNRHABEN IS NULL) THEN
          BEGIN /* VERRECHNUNG */
           IF ((ARTSOLL=24) OR (ARTSOLL=27)) THEN
            BEGIN
             BETRAGH=BETRAGH;
            END
           ELSE
            BEGIN
             BETRAGH=-BETRAGH;
            END
          END
        END
       ELSE
        IF (KLASSE=7) THEN  /* steht fÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼r alle KRED */
         BEGIN
          /* BETRAG S = OPBETRAG */
            IF (BEMERKUNG<>'' AND BEMERKUNG<>'LEV') THEN
             BEGIN
              if (KHABEN=GROUPKNR) then
               BEGIN
                if (ITKLASSE = 0) then
                 begin
                  BETRAGH = BETRAGS;
                  BETRAGS = NULL;
                 END
                else
                 begin
                  BETRAGS = BETRAGH; 
                  BETRAGH = NULL;                                  
                 end 
               END
              ELSE
               BEGIN
                BETRAGH=NULL;
               END
             END
            ELSE
             BEGIN
              if (KSOLL=GROUPKNR) then
               BEGIN
                if (ITKLASSE = 0) then
                 begin
                  BETRAGS = BETRAGH;
                  BETRAGH = NULL;
                 end
                else
                 begin
                  BETRAGH = BETRAGS;
                  BETRAGS = NULL;                
                 end  
               END
              ELSE
               BEGIN
                BETRAGS=NULL;
               END
             END
         END
       IF (BDOPPBU='J') THEN
        BEGIN  /* doppelte buchfÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼hrung ansicht */
         IF (KLASSE<>6 AND KLASSE<>7) THEN
          BEGIN
           IF (KNRVON=KNRBIS) THEN /* nur ein Konto */
            BEGIN
             IF (KSOLL=KNRVON) THEN
              BEGIN
               BETRAGH=NULL;
               USTHABEN=NULL;
              END
             ELSE
              BEGIN
               BETRAGS=NULL;
               USTSOLL=NULL;
              END
            END
           ELSE  /* mehrere Konten */
            BEGIN
             /* S und H ungleiche Klassen? */
             IF (NOT (KLASSEGS=KLASSE AND KLASSEGH=KLASSE)) THEN
              IF (KLASSEGS=KLASSE) THEN
               BEGIN
                BETRAGH=NULL;
                USTHABEN=NULL;
               END
              ELSE
               IF (KLASSEGH=KLASSE) THEN
                BEGIN
                 BETRAGS=NULL;
                 USTSOLL=NULL;
                END
            END
          END
        END /* doppelte BuchfÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼hrung */
       ELSE
        BEGIN /* einfache BuchfÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼hrung */
         IF (KLASSE<>6 AND KLASSE<>7) THEN
          BEGIN
           IF (KNRVON=KNRBIS) THEN /* nur ein Konto */
            BEGIN
             IF (KLASSE=1 OR KLASSE=4) THEN
              BEGIN
               if ((KNRVON=KNRBIS) AND (KHABEN=KNRVON)) then
                HDBETRAG = -HDBETRAG;
               IF ((KLASSEGH=KLASSE) and (KSOLL<>KNRVON)) THEN
                BEGIN
                 BETRAGS=-BETRAGH;
                 USTSOLL=-USTSOLL;
                END
              END
             ELSE
              IF (KLASSE=2 OR KLASSE=3) THEN
               IF (KLASSEGS=KLASSE) THEN
                BEGIN
                 BETRAGS=-BETRAGS;
                 USTSOLL=-USTSOLL;
                END
            END
           ELSE  /* mehrere Konten */
            BEGIN
             /* S und H ungleiche Klassen? */
             IF (NOT (KLASSEGS=KLASSE AND KLASSEGH=KLASSE)) THEN
              BEGIN
               IF (KLASSE=1 OR KLASSE=4) THEN
                BEGIN
                 IF (KLASSEGH=KLASSE) THEN
                  BEGIN
                   BETRAGS=-BETRAGH;
                   USTSOLL=-USTSOLL;
                  END
                END
               ELSE
                IF (KLASSE=2 OR KLASSE=3) THEN
                 IF (KLASSEGS=KLASSE) THEN
                  BEGIN
                   BETRAGS=-BETRAGS;
                   USTSOLL=-USTSOLL;
                  END
              END
             ELSE
              BEGIN  /* gleiche Klasse */
               IF ((ARTSOLL=1 AND ARTHABEN=1) OR (ARTSOLL=20 AND ARTHABEN=20) OR (ARTSOLL=19 AND ARTHABEN=19)) then /* umbuchung K oder A-Bank duplizieren */
                BEGIN
                 SUSPEND;
                 BETRAGS=-BETRAGS;
                 USTSOLL=-USTSOLL;
                 HDBETRAG = -HDBETRAG;
                END
              END /* gleiche Klasse = doppelt anzeigen! */
            END /* mehrere Konten */
          END /* nicht DEB KRED */
        END /* einfache BuchfÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼hrung */
       SUSPEND;
      END
    END
   ELSE
    BEGIN /* WDATUM */
     FOR SELECT BNR, DATUM, WDATUM, KSOLL, KHABEN, BELEGNR, TEXT, MWST, BETRAG, BANKNRSOLL, BANKNRHABEN, OPBETRAG, SPLITNR, KSTRHABEN, KSTRSOLL, ARTSOLL, ARTHABEN, LBNR from buchung
      WHERE (ONRSOLL=:IONR OR ONRHABEN=:IONR)
      AND ((KSOLL>=:KNRVON AND KSOLL <=:KNRBIS) OR (KHABEN>=:KNRVON AND KHABEN <=:KNRBIS))
      AND (WDatum>=:DTVON and WDatum<=:DTBIS)
      and BETRAG<>0
     INTO :BNR, :DATUM, :WDATUM, :KSOLL, :KHABEN, :BELEGNR, :TEXT, :MWST, :BETRAG, :BANKNRSOLL, :BANKNRHABEN, :OPBETRAG, :SPLITNR, :KSTRHABEN, :KSTRSOLL, :ARTSOLL, :ARTHABEN, :LBNR
     DO
      BEGIN
       HDBETRAG = 0; HDTEXT = ''; HDART = 0;
       IF ((ARTSOLL=1) or (ARTHABEN=1)) THEN
        BEGIN
         select sum(betrag) from hdbuch where bnr=:bnr into :HDBETRAG;  
         select first 1 text, art from hdbuch where bnr=:bnr into HDTEXT, HDART; 
         if (HDBETRAG is null) then
          HDBETRAG = 0;
         if (HDART is null) then
          HDART = 0;
         if (HDTEXT is null) then
          HDTEXT = '';           
        END
       /* */        
       ONR=:IONR;
       IF (ARTSOLL=1) THEN
        KLASSEGS=1; /* K */
       ELSE
        IF ((ARTSOLL>=10 AND ARTSOLL<=19) or (ARTSOLL>=110 and ARTSOLL<=580)) THEN
         KLASSEGS=2;  /* E*/
        ELSE
         IF ((ARTSOLL>=20 AND ARTSOLL<=24) OR (ARTSOLL=30)) THEN
          KLASSEGS=4; /* A*/
         ELSE
          IF (ARTSOLL=27) THEN
           KLASSEGS=3;  /* P*/
          ELSE
           IF (ARTSOLL=71) THEN
            KLASSEGS=7;   /* KRED*/
           ELSE
            KLASSEGS=6;  /* DEB*/
       IF (ARTHABEN=1) THEN
        KLASSEGH=1; /* K */
       ELSE
        IF ((ARTHABEN>=10 AND ARTHABEN<=19) or (ARTHABEN>=110 and ARTHABEN<=580)) THEN
         KLASSEGH=2;  /* E*/
        ELSE
         IF ((ARTHABEN>=20 AND ARTHABEN<=24) OR (ARTHABEN=30)) THEN
          KLASSEGH=4; /* A*/
         ELSE
          IF (ARTHABEN=27) THEN
           KLASSEGH=3;  /* P*/
          ELSE
           IF (ARTHABEN=71) THEN
            KLASSEGH=7;   /* KRED*/
           ELSE
            KLASSEGH=6;  /* DEB*/
       IF (OPBETRAG IS NOT NULL) THEN
        BEGIN
         IF (OPBETRAG=0) THEN
          BEMERKUNG='SO';
         ELSE
          BEMERKUNG='OP';
        END
       ELSE
        IF (LBNR IS NOT NULL) THEN
         BEMERKUNG='LEV';
        ELSE
         BEMERKUNG='';
       IF (BANKNRSOLL IS NOT NULL) THEN
        BEGIN
         IF (IBANKNRAKT=BANKNRSOLL) THEN
          KSTRSOLL=KSTRSOLL || ' ' || BANKSTR;
          ELSE
           BEGIN
            SELECT KURZBEZ from Banken where NR=:BANKNRSOLL into :BANKSTR;
            KSTRSOLL=KSTRSOLL || ' ' || BANKSTR;
            IBANKNRAKT=BANKNRSOLL;
           END
        END
       ELSE
        BEGIN
         IF (:ARTSOLL<>71) THEN
          SELECT KNRSTR || ' ' || KBEZ from konten where ONR=:IONR AND KNR=:KSOLL INTO :KSTRSOLL;
         ELSE
          SELECT KNRSTR || ' ' || KBEZ from konten where ONR=0 AND KNR=:KSOLL INTO :KSTRSOLL;
        END
       IF (BANKNRHABEN IS NOT NULL) THEN
        BEGIN
         IF (IBANKNRAKT=BANKNRHABEN) THEN
          KSTRHABEN=KSTRHABEN || ' ' || BANKSTR;
          ELSE
           BEGIN
            SELECT KURZBEZ from Banken where NR=:BANKNRHABEN into :BANKSTR;
            KSTRHABEN=KSTRHABEN || ' ' || BANKSTR;
            IBANKNRAKT=BANKNRHABEN;
           END
        END
       ELSE
        BEGIN
         IF (:ARTHABEN<>71) THEN
          SELECT KNRSTR || ' ' || KBEZ from konten where ONR=:IONR AND KNR=:KHABEN INTO :KSTRHABEN;
         ELSE
          SELECT KNRSTR || ' ' || KBEZ from konten where ONR=0 AND KNR=:KHABEN INTO :KSTRHABEN;
        END
       /*Steuer*/
       IF (MWST<>0) THEN
        BEGIN
         USTSATZ=100+MWST;/*1+(MWST/100);*/
         IF ((ARTSOLL>=10 AND ARTSOLL<=19) OR (ARTSOLL=1) or (ARTSOLL>=110 and ARTSOLL<=580)) THEN
          BEGIN
           IF (BDOPPBU='J') THEN
            BEGIN
             BETRAGS=BETRAG;
             USTSOLL=BETRAG - ((BETRAG * 100) / USTSATZ);
             BETRAGH=BETRAG;
             USTHABEN=NULL;
            END
           ELSE
            BEGIN /* Einfache Buch Steuer berechnen */
             BETRAGS=BETRAG;
             BETRAGH=BETRAG;
             USTHABEN=NULL;
             USTSOLL=BETRAG - ((BETRAG * 100) / USTSATZ);
            END
          END
         ELSE
          /* Steuer im Haben?*/
          IF ((ARTHABEN>=10 AND ARTHABEN<=19) OR (ARTHABEN=1) or (ARTHABEN>=110 and ARTHABEN<=580)) THEN
           BEGIN
            IF (BDOPPBU='J') THEN
             BEGIN
              BETRAGH=BETRAG;
              USTHABEN=BETRAG - ((BETRAG * 100) / USTSATZ);
              BETRAGS=BETRAG;
              USTSOLL=NULL;
             END
            ELSE
             BEGIN /* Einfache Buch Steuer berechnen */
              BETRAGS=BETRAG;
              BETRAGH=BETRAG;
              USTHABEN=NULL;
              USTSOLL=BETRAG - ((BETRAG * 100) / USTSATZ);
             END
           END
          ELSE
           BEGIN /* PlausibilitÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤t: Steuer nur auf Aufwand/Ertrag */
            BETRAGS=BETRAG;
            BETRAGH=BETRAG;
            USTSOLL=NULL;
            USTHABEN=NULL;
            MWST=NULL;
           END
        END
       ELSE
        BEGIN /* keine Steuer + einfache BuchFÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼hrung Brutto*/
         BETRAGS=BETRAG;
         BETRAGH=BETRAG;
         USTSOLL=NULL;
         USTHABEN=NULL;
         MWST=NULL;
        END
       IF (KLASSE=6) THEN  /* steht fÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼r alle BEW/EIG */
        BEGIN
         /* BETRAG S = OPBETRAG */
         IF (BEMERKUNG<>'' AND BEMERKUNG<>'LEV') THEN
          BEGIN
           if (ARTSOLL=1) then /* gegen Ausgabe gebucht Rene 02.14*/
            BEGIN
             BETRAGH = -BETRAGH;
             USTHABEN = -USTHABEN;
            END
           BETRAGS=BETRAGH;
           USTSOLL=USTHABEN;
           BETRAGH=NULL;
           USTHABEN=NULL;
          END
         ELSE
          BEGIN
           if (ARTSOLL=1) then /* gegen Ausgabe gebucht Rene 02.14*/
            BEGIN
             BETRAGS = -BETRAGS;
             USTSOLL = -USTSOLL;
            END
           BETRAGH=BETRAGS;
           USTHABEN=USTSOLL;
           BETRAGS=NULL;
           USTSOLL=NULL;
          END
         /*Rene Verrechnungen*/
         IF (BANKNRSOLL IS NULL AND BANKNRHABEN IS NULL) THEN
          BEGIN /* VERRECHNUNG */
           IF ((ARTSOLL=24) OR (ARTSOLL=27)) THEN
            BEGIN
             BETRAGH=BETRAGH;
            END
           ELSE
            BEGIN
             BETRAGH=-BETRAGH;
            END
          END
        END
       ELSE
        IF (KLASSE=7) THEN  /* steht fÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼r alle KRED */
         BEGIN
          /* BETRAG S = OPBETRAG */
            IF (BEMERKUNG<>'' AND BEMERKUNG<>'LEV') THEN
             BEGIN
              if (KHABEN=GROUPKNR) then
               BEGIN
                if (ITKLASSE = 0) then
                 begin
                  BETRAGH = BETRAGS;
                  BETRAGS = NULL;
                 END
                else
                 begin
                  BETRAGS = BETRAGH; 
                  BETRAGH = NULL;                                  
                 end 
               END
              ELSE
               BEGIN
                BETRAGH=NULL;
               END
             END
            ELSE
             BEGIN
              if (KSOLL=GROUPKNR) then
               BEGIN
                if (ITKLASSE = 0) then
                 begin
                  BETRAGS = BETRAGH;
                  BETRAGH = NULL;
                 end
                else
                 begin
                  BETRAGH = BETRAGS;
                  BETRAGS = NULL;                
                 end  
               END
              ELSE
               BEGIN
                BETRAGS=NULL;
               END
             END
         END
       IF (BDOPPBU='J') THEN
        BEGIN  /* doppelte buchfÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼hrung ansicht */
         IF (KLASSE<>6 AND KLASSE<>7) THEN
          BEGIN
           IF (KNRVON=KNRBIS) THEN /* nur ein Konto */
            BEGIN
             IF (KSOLL=KNRVON) THEN
              BEGIN
               BETRAGH=NULL;
               USTHABEN=NULL;
              END
             ELSE
              BEGIN
               BETRAGS=NULL;
               USTSOLL=NULL;
              END
            END
           ELSE  /* mehrere Konten */
            BEGIN
             /* S und H ungleiche Klassen? */
             IF (NOT (KLASSEGS=KLASSE AND KLASSEGH=KLASSE)) THEN
              IF (KLASSEGS=KLASSE) THEN
               BEGIN
                BETRAGH=NULL;
                USTHABEN=NULL;
               END
              ELSE
               IF (KLASSEGH=KLASSE) THEN
                BEGIN
                 BETRAGS=NULL;
                 USTSOLL=NULL;
                END
            END
          END
        END /* doppelte BuchfÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼hrung */
       ELSE
        BEGIN /* einfache BuchfÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼hrung */
         IF (KLASSE<>6 AND KLASSE<>7) THEN
          BEGIN
           IF (KNRVON=KNRBIS) THEN /* nur ein Konto */
            BEGIN
             IF (KLASSE=1 OR KLASSE=4) THEN
              BEGIN
               if ((KNRVON=KNRBIS) AND (KHABEN=KNRVON)) then
                HDBETRAG = -HDBETRAG;              
               IF ((KLASSEGH=KLASSE) and (KSOLL<>KNRVON)) THEN
                BEGIN
                 BETRAGS=-BETRAGH;
                 USTSOLL=-USTSOLL;
                END
              END
             ELSE
              IF (KLASSE=2 OR KLASSE=3) THEN
               IF (KLASSEGS=KLASSE) THEN
                BEGIN
                 BETRAGS=-BETRAGS;
                 USTSOLL=-USTSOLL;
                END
            END
           ELSE  /* mehrere Konten */
            BEGIN
             /* S und H ungleiche Klassen? */
             IF (NOT (KLASSEGS=KLASSE AND KLASSEGH=KLASSE)) THEN
              BEGIN
               IF (KLASSE=1 OR KLASSE=4) THEN
                BEGIN
                 IF (KLASSEGH=KLASSE) THEN
                  BEGIN
                   BETRAGS=-BETRAGH;
                   USTSOLL=-USTSOLL;
                  END
                END
               ELSE
                IF (KLASSE=2 OR KLASSE=3) THEN
                 IF (KLASSEGS=KLASSE) THEN
                  BEGIN
                   BETRAGS=-BETRAGS;
                   USTSOLL=-USTSOLL;
                  END
              END
             ELSE
              BEGIN  /* gleiche Klasse = doppelt anzeigen! */
               IF ((ARTSOLL=1 AND ARTHABEN=1) OR (ARTSOLL=20 AND ARTHABEN=20) OR (ARTSOLL=19 AND ARTHABEN=19)) then /* umbuchung K oder A-Bank duplizieren */
                BEGIN
                 SUSPEND;
                 BETRAGS=-BETRAGS;
                 USTSOLL=-USTSOLL;
                 HDBETRAG = -HDBETRAG;
                END               
              END /* gleiche Klasse = doppelt anzeigen! */
            END /* mehrere Konten */
          END /* nicht DEB KRED */
        END /* einfache BuchfÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼hrung */
       suspend;
      END
    END /* WDATUM */
  END
 ELSE
  /*                               */
  /* BUCHUNGSÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã¢â‚¬Å“BERSICHT NACH KONTEN */
  /*                               */
  BEGIN
   IF (BWDATUM='N') THEN
    BEGIN
     /* KLASSEBIS setzen */
     IF (KLASSE=1) THEN
      KLASSEBIS=1;
     ELSE
      IF (KLASSE=10) THEN
       KLASSEBIS=19;
      ELSE
       IF (KLASSE=20) THEN
        KLASSEBIS=24;
       ELSE
        IF (KLASSE=27) THEN
         KLASSEBIS=27;
        ELSE
         IF (KLASSE=60) THEN
          KLASSEBIS=64;
         ELSE
          IF (KLASSE=71) THEN
           KLASSEBIS=71;
          ELSE
           IF (KLASSE=0) THEN  /* alle Klassen */
            KLASSEBIS=580;
           ELSE
            IF (KLASSE=110) THEN
             KLASSEBIS=580;
     /* alle Konten einzeln */
     FOR SELECT KNR, KKLASSE from konten
      where ((ONR=:IONR) OR (ONR=0 AND (KKLASSE=71 OR KKLASSE=30)))
      and ((KKLASSE>=:KLASSE AND KKLASSE<=:KLASSEBIS) or (KKLASSE>=110))
      and (KNR>=:KNRVON AND KNR<=:KNRBIS)
      ORDER BY KKLASSE
     INTO :GROUPKNR, :KLASSE
     do
      begin /* for Konten */
       IF (KLASSE=1) THEN
        KLASSE=1;  /* P*/
       ELSE
        IF ((KLASSE>=10 AND KLASSE<=19) or (KLASSE>=110 and KLASSE<=580)) THEN
         KLASSE=2;  /* E*/
        ELSE
         IF ((KLASSE>=20 AND KLASSE<=24) OR (KLASSE=30)) THEN
          KLASSE=4; /* A*/
         ELSE
          IF (KLASSE=27) THEN
           KLASSE=3;  /* P*/
          ELSE
           IF (KLASSE=71) THEN
            KLASSE=7;   /* KRED*/
           ELSE
            KLASSE=6;  /* DEB*/
       FOR SELECT BNR, DATUM, WDATUM, KSOLL, KHABEN, BELEGNR, TEXT, MWST, BETRAG, BANKNRSOLL, BANKNRHABEN, OPBETRAG, SPLITNR, KSTRHABEN, KSTRSOLL, ARTSOLL, ARTHABEN,LBNR, KAUSZUGBLATT, KAUSZUGNR from buchung    
        WHERE (ONRSOLL=:IONR OR ONRHABEN=:IONR)                                                                                                                                              
        AND ((KSOLL=:GROUPKNR) OR (KHABEN=:GROUPKNR))
        AND (Datum>=:DTVON and Datum<=:DTBIS)
        and BETRAG<>0
       INTO :BNR, :DATUM, :WDATUM, :KSOLL, :KHABEN, :BELEGNR, :TEXT, :MWST, :BETRAG, :BANKNRSOLL, :BANKNRHABEN, :OPBETRAG, :SPLITNR, :KSTRHABEN, :KSTRSOLL, :ARTSOLL, :ARTHABEN,:LBNR, :iKAUSZUGBLATT, :iKAUSZUGNR
       DO
        BEGIN /* for buchungen */
        KAUSZUGBLATT=:iKAUSZUGBLATT; KAUSZUGNR= :iKAUSZUGNR;
         HDBETRAG = 0; HDTEXT = ''; HDART = 0;
         IF ((ARTSOLL=1) or (ARTHABEN=1)) THEN
          BEGIN
           select sum(betrag) from hdbuch where bnr=:bnr into :HDBETRAG;  
           select first 1 text, art from hdbuch where bnr=:bnr into HDTEXT, HDART; 
           if (HDBETRAG is null) then
            HDBETRAG = 0;
           if (HDART is null) then
            HDART = 0;
           if (HDTEXT is null) then
            HDTEXT = '';             
           if ((KHABEN=GROUPKNR) and (ARTSOLL=ARTHABEN)) then
            begin
             HDBETRAG = -HDBETRAG;
            end  
          END
         /* */        
         ONR=:IONR;
         IF (ARTSOLL=1) THEN
          KLASSEGS=1; /* K */
         ELSE
          IF ((ARTSOLL>=10 AND ARTSOLL<=19) or (ARTSOLL>=110 and ARTSOLL<=580)) THEN
           KLASSEGS=2;  /* E*/
          ELSE
           IF ((ARTSOLL>=20 AND ARTSOLL<=24) OR (ARTSOLL=30)) THEN
            KLASSEGS=4; /* A*/
           ELSE
            IF (ARTSOLL=27) THEN
             KLASSEGS=3;  /* P*/
            ELSE
             IF (ARTSOLL=71) THEN
              KLASSEGS=7;   /* KRED*/
             ELSE
              KLASSEGS=6;  /* DEB*/
         IF (ARTHABEN=1) THEN
          KLASSEGH=1; /* K */
         ELSE
          IF ((ARTHABEN>=10 AND ARTHABEN<=19) or (ARTHABEN>=110 and ARTHABEN<=580)) THEN
           KLASSEGH=2;  /* E*/
          ELSE
           IF ((ARTHABEN>=20 AND ARTHABEN<=24) OR (ARTHABEN=30)) THEN
            KLASSEGH=4; /* A*/
           ELSE
            IF (ARTHABEN=27) THEN
             KLASSEGH=3;  /* P*/
            ELSE
             IF (ARTHABEN=71) THEN
              KLASSEGH=7;   /* KRED*/
             ELSE
              KLASSEGH=6;  /* DEB*/
         IF (OPBETRAG IS NOT NULL) THEN
          BEGIN
           IF (OPBETRAG=0) THEN
            BEMERKUNG='SO';
           ELSE
            BEMERKUNG='OP';
          END
         ELSE
          IF (LBNR IS NOT NULL) THEN
           BEMERKUNG='LEV';
          ELSE
           BEMERKUNG='';
         IF (BANKNRSOLL IS NOT NULL) THEN
          BEGIN
           IF (IBANKNRAKT=BANKNRSOLL) THEN
            KSTRSOLL=KSTRSOLL || ' ' || BANKSTR;
           ELSE
            BEGIN
             SELECT KURZBEZ from Banken where NR=:BANKNRSOLL into :BANKSTR;
             KSTRSOLL=KSTRSOLL || ' ' || BANKSTR;
             IBANKNRAKT=BANKNRSOLL;
            END
          END
         ELSE
          BEGIN
           IF (:ARTSOLL<>71) THEN
            SELECT KNRSTR || ' ' || KBEZ from konten where ONR=:IONR AND KNR=:KSOLL INTO :KSTRSOLL;
           ELSE
            SELECT KNRSTR || ' ' || KBEZ from konten where ONR=0 AND KNR=:KSOLL INTO :KSTRSOLL;
          END
         IF (BANKNRHABEN IS NOT NULL) THEN
          BEGIN
         IF (IBANKNRAKT=BANKNRHABEN) THEN
          KSTRHABEN=KSTRHABEN || ' ' || BANKSTR;
          ELSE
           BEGIN
            SELECT KURZBEZ from Banken where NR=:BANKNRHABEN into :BANKSTR;
            KSTRHABEN=KSTRHABEN || ' ' || BANKSTR;
            IBANKNRAKT=BANKNRHABEN;
           END
          END
         ELSE
          BEGIN
           IF (:ARTHABEN<>71) THEN
            SELECT KNRSTR || ' ' || KBEZ from konten where ONR=:IONR AND KNR=:KHABEN INTO :KSTRHABEN;
           ELSE
            SELECT KNRSTR || ' ' || KBEZ from konten where ONR=0 AND KNR=:KHABEN INTO :KSTRHABEN;
          END
         /*Steuer*/
         IF (MWST<>0) THEN
          BEGIN
           USTSATZ=100+MWST;/*1+(MWST/100);*/
           IF ((ARTSOLL>=10 AND ARTSOLL<=19) OR (ARTSOLL=1) or (ARTSOLL>=110 and ARTSOLL<=580)) THEN
            BEGIN
             IF (BDOPPBU='J') THEN
              BEGIN
               BETRAGS=BETRAG;
               USTSOLL=BETRAG - ((BETRAG * 100) / USTSATZ);
               BETRAGH=BETRAG;
               USTHABEN=NULL;
              END
             ELSE
              BEGIN /* Einfache Buch Steuer berechnen */
               BETRAGS=BETRAG;
               BETRAGH=BETRAG;
               USTHABEN=NULL;
               USTSOLL=BETRAG - ((BETRAG * 100) / USTSATZ);
              END
            END
           ELSE
            /* Steuer im Haben?*/
            IF ((ARTHABEN>=10 AND ARTHABEN<=19) OR (ARTHABEN=1) or (ARTHABEN>=110 and ARTHABEN<=580)) THEN
             BEGIN
              IF (BDOPPBU='J') THEN
               BEGIN
                BETRAGH=BETRAG;
                USTHABEN=BETRAG - ((BETRAG * 100) / USTSATZ);
                BETRAGS=BETRAG;
                USTSOLL=NULL;
               END
              ELSE
               BEGIN /* Einfache Buch Steuer berechnen */
                BETRAGS=BETRAG;
                BETRAGH=BETRAG;
                USTHABEN=NULL;
                USTSOLL=BETRAG - ((BETRAG * 100) / USTSATZ);
               END
             END
            ELSE
             BEGIN /* PlausibilitÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤t: Steuer nur auf Aufwand/Ertrag */
              BETRAGS=BETRAG;
              BETRAGH=BETRAG;
              USTSOLL=NULL;
              USTHABEN=NULL;
              MWST=NULL;
             END
          END
         ELSE
          BEGIN /* keine Steuer + einfache BuchFÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼hrung Brutto*/
           BETRAGS=BETRAG;
           BETRAGH=BETRAG;
           USTSOLL=NULL;
           USTHABEN=NULL;
           MWST=NULL;
          END
         IF (KLASSE=6) THEN  /* steht fÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼r alle BEW/EIG */
          BEGIN
            /* BETRAG S = OPBETRAG */
           IF (BEMERKUNG<>'' AND BEMERKUNG<>'LEV') THEN
            BEGIN
             if (ARTSOLL=1) then /* gegen Ausgabe gebucht Rene 02.14*/
              BEGIN
               BETRAGH = -BETRAGH;
               USTHABEN = -USTHABEN;
              END
             BETRAGS=BETRAGH;
             USTSOLL=USTHABEN;
             BETRAGH=NULL;
             USTHABEN=NULL;
            END
           ELSE
            BEGIN
             if (ARTSOLL=1) then /* gegen Ausgabe gebucht Rene 02.14*/
              BEGIN
               BETRAGS = -BETRAGS;
               USTSOLL = -USTSOLL;
              END
             BETRAGH=BETRAGS;
             USTHABEN=USTSOLL;
             BETRAGS=NULL;
             USTSOLL=NULL;
            END
           /*Rene Verrechnungen*/
           IF (BANKNRSOLL IS NULL AND BANKNRHABEN IS NULL) THEN
            BEGIN /* VERRECHNUNG */
             IF ((ARTSOLL=24) OR (ARTSOLL=27)) THEN
              BEGIN
               BETRAGH=BETRAGH;
              END
             ELSE
              BEGIN
               BETRAGH=-BETRAGH;
              END
            END
          END
         ELSE
          IF (KLASSE=7) THEN  /* steht fÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼r alle KRED */
           BEGIN
            /* BETRAG S = OPBETRAG */
            IF (BEMERKUNG<>'' AND BEMERKUNG<>'LEV') THEN
             BEGIN
              if (KHABEN=GROUPKNR) then
               BEGIN
                if (ITKLASSE = 0) then
                 begin
                  BETRAGH = BETRAGS;
                  BETRAGS = NULL;
                 END
                else
                 begin
                  BETRAGS = BETRAGH; 
                  BETRAGH = NULL;                                  
                 end 
               END
              ELSE
               BEGIN
                BETRAGH=NULL;
               END
             END
            ELSE
             BEGIN
              if (KSOLL=GROUPKNR) then
               BEGIN
                if (ITKLASSE = 0) then
                 begin
                  BETRAGS = BETRAGH;
                  BETRAGH = NULL;
                 end
                else
                 begin
                  BETRAGH = BETRAGS;
                  BETRAGS = NULL;                
                 end  
               END
              ELSE
               BEGIN
                BETRAGS=NULL;
               END
             END
           END
         IF (BDOPPBU='J') THEN
          BEGIN  /* doppelte buchfÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼hrung ansicht */
           IF (KLASSE<>6 AND KLASSE<>7) THEN
            BEGIN
             IF (KSOLL=GROUPKNR) THEN
              BEGIN
               BETRAGH=NULL;
               USTHABEN=NULL;
              END
             ELSE
              IF (KHABEN=GROUPKNR) THEN
               BEGIN
                BETRAGS=NULL;
                USTSOLL=NULL;
               END
            END /* KLASSE <>6 Klasse <>7 */
          END /* doppelte BuchfÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼hrung */
         ELSE
          BEGIN /* einfache BuchfÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼hrung */
           IF (KLASSE<>6 AND KLASSE<>7) THEN
            BEGIN
             IF (KLASSE=1 OR KLASSE=4) THEN
              BEGIN
               IF (ARTSOLL=1 AND ARTHABEN=1) THEN /* UMBUCHUNG */
                BEGIN
                 IF (GROUPKNR=KHABEN) THEN
                  BEGIN
                   BETRAGS=-BETRAGH;
                   USTSOLL=-USTSOLL;
                  END
                END
               ELSE
                BEGIN
                 IF (KLASSEGH=KLASSE AND KSOLL<>GROUPKNR) THEN
                  BEGIN
                   BETRAGS=-BETRAGH;
                   USTSOLL=-USTSOLL;
                  END
                END
              END
             ELSE
              IF (KLASSE=2 OR KLASSE=3) THEN
               BEGIN
                IF (ARTSOLL=19 AND ARTHABEN=19) THEN /* UMBUCHUNG */
                 BEGIN
                  IF (GROUPKNR=KSOLL) THEN
                   BEGIN
                    BETRAGS=-BETRAGH;
                    USTSOLL=-USTSOLL;
                   END
                 END
                ELSE
                 BEGIN
                  IF (KLASSEGS=KLASSE) THEN
                   BEGIN
                    BETRAGS=-BETRAGS;
                    USTSOLL=-USTSOLL;
                    if ((KLASSE = 3) and (GROUPKNR=KHABEN)) THEN
                     BEGIN
                      BETRAGS=-BETRAGS;
                      USTSOLL=-USTSOLL;
                     END
                   END
                 END
               END
            END /* nicht DEB KRED */
          END /* einfache BuchfÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼hrung */
         suspend;
        END /* for Buchungen */
      END /* for Konten */
    END /* nicht W-Datum */
   ELSE
  BEGIN /* WDATUM */
   /* KLASSEBIS setzen */
   IF (KLASSE=1) THEN
    KLASSEBIS=1;
   ELSE
    IF (KLASSE=10) THEN
     KLASSEBIS=19;
    ELSE
     IF (KLASSE=20) THEN
      KLASSEBIS=24;
     ELSE
      IF (KLASSE=27) THEN
       KLASSEBIS=27;
      ELSE
       IF (KLASSE=60) THEN
        KLASSEBIS=64;
       ELSE
        IF (KLASSE=71) THEN
         KLASSEBIS=71;
        ELSE
         IF (KLASSE=0) THEN  /* alle Klassen */
          KLASSEBIS=580;
         ELSE
          IF (KLASSE=110) THEN
           KLASSEBIS=580;
    /* alle Konten einzeln */
     FOR SELECT KNR, KKLASSE from konten
      where ((ONR=:IONR) OR (ONR=0 AND (KKLASSE=71 OR KKLASSE=30)))
      and ((KKLASSE>=:KLASSE AND KKLASSE<=:KLASSEBIS) or (KKLASSE>=110))
      and (KNR>=:KNRVON AND KNR<=:KNRBIS)
      ORDER BY KKLASSE
     INTO :GROUPKNR, :KLASSE
   do
    begin /* for Konten */
     IF (KLASSE=1) THEN 
       KLASSE=1;  /* P*/
     ELSE
      IF ((KLASSE>=10 AND KLASSE<=19) or (KLASSE>=110 and KLASSE<=580)) THEN
       KLASSE=2;  /* E*/
      ELSE
       IF ((KLASSE>=20 AND KLASSE<=24) OR (KLASSE=30)) THEN
        KLASSE=4; /* A*/
       ELSE
        IF (KLASSE=27) THEN
         KLASSE=3;  /* P*/
        ELSE
         IF (KLASSE=71) THEN
          KLASSE=7;   /* KRED*/
         ELSE
          KLASSE=6;  /* DEB*/
     FOR SELECT BNR, DATUM, WDATUM, KSOLL, KHABEN, BELEGNR, TEXT, MWST, BETRAG, BANKNRSOLL, BANKNRHABEN, OPBETRAG, SPLITNR, KSTRHABEN, KSTRSOLL, ARTSOLL, ARTHABEN, LBNR,  KAUSZUGBLATT,KAUSZUGNR from buchung
      WHERE (ONRSOLL=:IONR OR ONRHABEN=:IONR)
      AND ((KSOLL=:GROUPKNR) OR (KHABEN=:GROUPKNR))
      AND (WDatum>=:DTVON and WDatum<=:DTBIS)
      and BETRAG<>0
     INTO :BNR, :DATUM, :WDATUM, :KSOLL, :KHABEN, :BELEGNR, :TEXT, :MWST, :BETRAG, :BANKNRSOLL, :BANKNRHABEN, :OPBETRAG, :SPLITNR, :KSTRHABEN, :KSTRSOLL, :ARTSOLL, :ARTHABEN, :LBNR, :iKAUSZUGBLATT,:iKAUSZUGNR
     DO
      BEGIN /* for buchungen */
       KAUSZUGBLATT=:iKAUSZUGBLATT; KAUSZUGNR= :iKAUSZUGNR;
       HDBETRAG = 0; HDTEXT = ''; HDART = 0;
         IF ((ARTSOLL=1) or (ARTHABEN=1)) THEN
          BEGIN
		   select sum(betrag) from hdbuch where bnr=:bnr into :HDBETRAG;  
           select first 1 text, art from hdbuch where bnr=:bnr into HDTEXT, HDART; 
           if (HDBETRAG is null) then
            HDBETRAG = 0;
           if (HDART is null) then
            HDART = 0;
           if (HDTEXT is null) then
            HDTEXT = '';             
           if ((KHABEN=GROUPKNR) and (ARTSOLL=ARTHABEN)) then
            begin
             HDBETRAG = -HDBETRAG;
            end
          END
         /* */      
       ONR=:IONR;
       IF (ARTSOLL=1) THEN
        KLASSEGS=1; /* K */
       ELSE
        IF ((ARTSOLL>=10 AND ARTSOLL<=19) or (ARTSOLL>=110 and ARTSOLL<=580)) THEN
         KLASSEGS=2;  /* E*/
        ELSE
         IF ((ARTSOLL>=20 AND ARTSOLL<=24) OR (ARTSOLL=30)) THEN
          KLASSEGS=4; /* A*/
         ELSE
          IF (ARTSOLL=27) THEN
           KLASSEGS=3;  /* P*/
          ELSE
           IF (ARTSOLL=71) THEN
            KLASSEGS=7;   /* KRED*/
           ELSE
            KLASSEGS=6;  /* DEB*/
       IF (ARTHABEN=1) THEN
        KLASSEGH=1; /* K */
       ELSE
        IF ((ARTHABEN>=10 AND ARTHABEN<=19) or (ARTHABEN>=110 and ARTHABEN<=580)) THEN
         KLASSEGH=2;  /* E*/
        ELSE
         IF ((ARTHABEN>=20 AND ARTHABEN<=24) OR (ARTHABEN=30)) THEN
          KLASSEGH=4; /* A*/
         ELSE
          IF (ARTHABEN=27) THEN
           KLASSEGH=3;  /* P*/
          ELSE
           IF (ARTHABEN=71) THEN
            KLASSEGH=7;   /* KRED*/
           ELSE
            KLASSEGH=6;  /* DEB*/
       IF (OPBETRAG IS NOT NULL) THEN
        BEGIN
         IF (OPBETRAG=0) THEN
          BEMERKUNG='SO';
         ELSE
          BEMERKUNG='OP';
        END
       ELSE
        IF (LBNR IS NOT NULL) THEN
         BEMERKUNG='LEV';
        ELSE
         BEMERKUNG='';
       IF (BANKNRSOLL IS NOT NULL) THEN
        BEGIN
         IF (IBANKNRAKT=BANKNRSOLL) THEN
          KSTRSOLL=KSTRSOLL || ' ' || BANKSTR;
          ELSE
           BEGIN
            SELECT KURZBEZ from Banken where NR=:BANKNRSOLL into :BANKSTR;
            KSTRSOLL=KSTRSOLL || ' ' || BANKSTR;
            IBANKNRAKT=BANKNRSOLL;
           END
        END
       ELSE
        BEGIN
         IF (:ARTSOLL<>71) THEN
          SELECT KNRSTR || ' ' || KBEZ from konten where ONR=:IONR AND KNR=:KSOLL INTO :KSTRSOLL;
         ELSE
          SELECT KNRSTR || ' ' || KBEZ from konten where ONR=0 AND KNR=:KSOLL INTO :KSTRSOLL;
        END
       IF (BANKNRHABEN IS NOT NULL) THEN
        BEGIN
         IF (IBANKNRAKT=BANKNRHABEN) THEN
          KSTRHABEN=KSTRHABEN || ' ' || BANKSTR;
          ELSE
           BEGIN
            SELECT KURZBEZ from Banken where NR=:BANKNRHABEN into :BANKSTR;
            KSTRHABEN=KSTRHABEN || ' ' || BANKSTR;
            IBANKNRAKT=BANKNRHABEN;
           END
        END
       ELSE
        BEGIN
         IF (:ARTHABEN<>71) THEN
          SELECT KNRSTR || ' ' || KBEZ from konten where ONR=:IONR AND KNR=:KHABEN INTO :KSTRHABEN;
         ELSE
          SELECT KNRSTR || ' ' || KBEZ from konten where ONR=0 AND KNR=:KHABEN INTO :KSTRHABEN;
        END
       /*Steuer*/
       IF (MWST<>0) THEN
        BEGIN
         USTSATZ=100+MWST;/*1+(MWST/100);*/
         IF ((ARTSOLL>=10 AND ARTSOLL<=19) OR (ARTSOLL=1) or (ARTSOLL>=110 and ARTSOLL<=580)) THEN
          BEGIN
           IF (BDOPPBU='J') THEN
            BEGIN
             BETRAGS=BETRAG;
             USTSOLL=BETRAG - ((BETRAG * 100) / USTSATZ);
             BETRAGH=BETRAG;
             USTHABEN=NULL;
            END
           ELSE
            BEGIN /* Einfache Buch Steuer berechnen */
             BETRAGS=BETRAG;
             BETRAGH=BETRAG;
             USTHABEN=NULL;
             USTSOLL=BETRAG - ((BETRAG * 100) / USTSATZ);
            END
          END
         ELSE
          /* Steuer im Haben?*/
          IF ((ARTHABEN>=10 AND ARTHABEN<=19) OR (ARTHABEN=1) or (ARTHABEN>=110 and ARTHABEN<=580)) THEN
           BEGIN
            IF (BDOPPBU='J') THEN
             BEGIN
              BETRAGH=BETRAG; /* RENE 05.08 =BETRAGS */
              USTHABEN=BETRAG - ((BETRAG * 100) / USTSATZ);
              BETRAGS=BETRAG;
              USTSOLL=NULL;
             END
            ELSE
             BEGIN /* Einfache Buch Steuer berechnen */
              BETRAGS=BETRAG;
              BETRAGH=BETRAG;
              USTHABEN=NULL;
              USTSOLL=BETRAG - ((BETRAG * 100) / USTSATZ);
             END
           END
          ELSE
           BEGIN /* PlausibilitÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤t: Steuer nur auf Aufwand/Ertrag */
            BETRAGS=BETRAG;
            BETRAGH=BETRAG;
            USTSOLL=NULL;
            USTHABEN=NULL;
            MWST=NULL;
           END
        END
       ELSE
        BEGIN /* keine Steuer + einfache BuchFÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼hrung Brutto*/
         BETRAGS=BETRAG;
         BETRAGH=BETRAG;
         USTSOLL=NULL;
         USTHABEN=NULL;
         MWST=NULL;
        END
       IF (KLASSE=6) THEN  /* steht fÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼r alle BEW/EIG */
        BEGIN
         /* BETRAG S = OPBETRAG */
         IF (BEMERKUNG<>'' AND BEMERKUNG<>'LEV') THEN
          BEGIN
           if (ARTSOLL=1) then /* gegen Ausgabe gebucht Rene 02.14*/
            BEGIN
             BETRAGH = -BETRAGH;
             USTHABEN = -USTHABEN;
            END
           BETRAGS=BETRAGH;
           USTSOLL=USTHABEN;
           BETRAGH=NULL;
           USTHABEN=NULL;
          END
         ELSE
          BEGIN
           if (ARTSOLL=1) then /* gegen Ausgabe gebucht Rene 02.14*/
            BEGIN
             BETRAGS = -BETRAGS;
             USTSOLL = -USTSOLL;
            END
           BETRAGH=BETRAGS;
           USTHABEN=USTSOLL;
           BETRAGS=NULL;
           USTSOLL=NULL;
          END
         /*Rene Verrechnungen*/
         IF (BANKNRSOLL IS NULL AND BANKNRHABEN IS NULL) THEN
          BEGIN /* VERRECHNUNG */
           IF ((ARTSOLL=24) OR (ARTSOLL=27)) THEN
            BEGIN
             BETRAGH=BETRAGH;
            END
           ELSE
            BEGIN
             BETRAGH=-BETRAGH;
            END
          END
        END
       ELSE
        IF (KLASSE=7) THEN  /* steht fÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼r alle KRED */
         BEGIN
          /* BETRAG S = OPBETRAG */
            IF (BEMERKUNG<>'' AND BEMERKUNG<>'LEV') THEN
             BEGIN
              if (KHABEN=GROUPKNR) then
               BEGIN
                if (ITKLASSE = 0) then
                 begin
                  BETRAGH = BETRAGS;
                  BETRAGS = NULL;
                 END
                else
                 begin
                  BETRAGS = BETRAGH; 
                  BETRAGH = NULL;                                  
                 end 
               END
              ELSE
               BEGIN
                BETRAGH=NULL;
               END
             END
            ELSE
             BEGIN
              if (KSOLL=GROUPKNR) then
               BEGIN
                if (ITKLASSE = 0) then
                 begin
                  BETRAGS = BETRAGH;
                  BETRAGH = NULL;
                 end
                else
                 begin
                  BETRAGH = BETRAGS;
                  BETRAGS = NULL;                
                 end  
               END
              ELSE
               BEGIN
                BETRAGS=NULL;
               END
             END
         END
       IF (BDOPPBU='J') THEN
        BEGIN  /* doppelte buchfÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼hrung ansicht */
         IF (KLASSE<>6 AND KLASSE<>7) THEN
          BEGIN
           IF (KSOLL=GROUPKNR) THEN
            BEGIN
             BETRAGH=NULL;
             USTHABEN=NULL;
            END
           ELSE
            IF (KHABEN=GROUPKNR) THEN
             BEGIN
              BETRAGS=NULL;
              USTSOLL=NULL;
             END
          END /* KLASSE <>6 Klasse <>7 */
        END /* doppelte BuchfÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼hrung */
       ELSE
        BEGIN /* einfache BuchfÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼hrung */
         IF (KLASSE<>6 AND KLASSE<>7) THEN
          BEGIN
           IF (KLASSE=1 OR KLASSE=4) THEN
            BEGIN
             IF (ARTSOLL=1 AND ARTHABEN=1) THEN /* UMBUCHUNG */
              BEGIN
               IF (GROUPKNR=KHABEN) THEN
                BEGIN
                 BETRAGS=-BETRAGH;
                 USTSOLL=-USTSOLL;
                END
              END
             ELSE
              BEGIN
               IF (KLASSEGH=KLASSE AND KSOLL<>GROUPKNR) THEN
                BEGIN
                 BETRAGS=-BETRAGH;
                 USTSOLL=-USTSOLL;
                END
              END
            END
           ELSE
            IF (KLASSE=2 OR KLASSE=3) THEN
             BEGIN
              IF (ARTSOLL=19 AND ARTHABEN=19) THEN /* UMBUCHUNG */
               BEGIN
                IF (GROUPKNR=KSOLL) THEN
                 BEGIN
                  BETRAGS=-BETRAGH;
                  USTSOLL=-USTSOLL;
                 END
               END
              ELSE
               BEGIN
                IF (KLASSEGS=KLASSE) THEN
                 BEGIN
                  BETRAGS=-BETRAGS;
                  USTSOLL=-USTSOLL;
                  if ((KLASSE = 3) and (GROUPKNR=KHABEN)) THEN
                   BEGIN
                    BETRAGS=-BETRAGS;
                    USTSOLL=-USTSOLL;
                   END
                 END
               END
             END
          END /* nicht DEB KRED */
        END /* einfache BuchfÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼hrung */
       suspend;
      END /* for Buchungen */
     END /* for Konten */
    END /* WDATUM */
  END  /* BUCHUNGSÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã¢â‚¬Å“BERSICHT NACH KONTEN */
END


-- Prozedur: JOURNAL_EINAUS
CREATE OR ALTER PROCEDURE JOURNAL_EINAUS
DECLARE VARIABLE KLASSE INTEGER;
DECLARE VARIABLE ITMP INTEGER;
BEGIN
 ONR =: IONR;
 AUSGABE = 0;
 IF (ART = 1) THEN
  DRUCKEN = 0;
 ELSE
  DRUCKEN = 1;
 
 /* EINNAHMEN */
 FOR 
  SELECT KNR, KKLASSE from konten where ONR=:IONR and ((KKLASSE>=60 AND KKLASSE<=62) OR (KKLASSE=19)) and KNR>=:EKNRVON AND KNR<=:EKNRBIS ORDER BY KKLASSE
 INTO :GROUPKNR, :KLASSE
 do
  begin /* for Konten */
   FOR SELECT BNR, DATUM, WDATUM, KSOLL, KHABEN,
              BELEGNR, TEXT, MWST, BETRAG, ONR, KSTRHABEN, KSTRSOLL
   from journal_einaus_k (:ONR,:GROUPKNR,:DTVON,:DTBIS,:KLASSE,'N')
   INTO :BNR, :DATUM, :WDATUM, :KSOLL, :KHABEN,
        :BELEGNR, :TEXT, :MWST, :BETRAG, :ONR, :KSTRHABEN, :KSTRSOLL
   do
    SUSPEND;
  END
 
 /* AUSGABEN */
 AUSGABE = 1;
 IF (ART = 0) THEN
  DRUCKEN = 0;
 ELSE
  DRUCKEN = 1;
 FOR 
  SELECT KNR, KKLASSE from konten where ONR=:IONR and ((KKLASSE=1) or ((KKLASSE=27) and (RLPOS is not null))) and KNR>=:AKNRVON AND KNR<=:AKNRBIS ORDER BY KKLASSE
 INTO :GROUPKNR, :KLASSE
  do
   begin /* for Konten */
    IF (:KLASSE = 1) THEN
     BEGIN
      FOR SELECT BNR, DATUM, WDATUM, KSOLL, KHABEN,
                 BELEGNR, TEXT, MWST, BETRAG, ONR, KSTRHABEN, KSTRSOLL
      from journal_einaus_k (:ONR,:GROUPKNR,:DTVON,:DTBIS,:KLASSE,'N')
      INTO :BNR, :DATUM, :WDATUM, :KSOLL, :KHABEN,
           :BELEGNR, :TEXT, :MWST, :BETRAG, :ONR, :KSTRHABEN, :KSTRSOLL
      do
       SUSPEND;
     END
    ELSE
     BEGIN
      select KONTO_VZ from rueckpos where onr=:IONR and KNRP=:GROUPKNR INTO :ITMP;
      /* Beitragsverpflichtung in Saldo ALT aufnehmen */
      select sum(sum_vz) from VZ_BE_DETAIL (:IONR, :DTVON, :DTBIS, 200000, 299999, :BWDATUM) where vzpos=(:ITMP-60000) into :BETRAG;
      if (BETRAG is null) then
       BETRAG = 0;

      BNR = 0;
      ONR =: IONR;
      DATUM = :DTBIS;
      WDATUM = :DTBIS;
      KSOLL = GROUPKNR;
      KHABEN = GROUPKNR;
      BELEGNR = 0;
      TEXT = 'Beitragsverpflichtung zur ErhaltungsrÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼cklage';
      MWST = 0;
      KSTRHABEN = GROUPKNR;
      KSTRSOLL = GROUPKNR;
      
      IF (BETRAG <> 0) THEN
       SUSPEND;
     END    
   END
END


-- Prozedur: JOURNAL_EINAUS_K
CREATE OR ALTER PROCEDURE JOURNAL_EINAUS_K
DECLARE VARIABLE BANKNRSOLL INTEGER;
DECLARE VARIABLE BANKNRHABEN INTEGER;
DECLARE VARIABLE ARTSOLL INTEGER;
DECLARE VARIABLE ARTHABEN INTEGER;
DECLARE VARIABLE SPLITNR INTEGER;
DECLARE VARIABLE LEVBANKSTR VARCHAR(15);
DECLARE VARIABLE LEVBANK2STR VARCHAR(15);
DECLARE VARIABLE LEVBANKNR INTEGER;
DECLARE VARIABLE LEVBANK2NR INTEGER;
DECLARE VARIABLE TEMPSTR VARCHAR(15);
DECLARE VARIABLE KTEMPHABEN INTEGER;
DECLARE VARIABLE DUMMY INTEGER;
DECLARE VARIABLE KNROP INTEGER;
DECLARE VARIABLE MWSTOP NUMERIC(15, 2);
BEGIN
 SELECT NR, KURZBEZ FROM BANKEN WHERE NR IN (SELECT LEVBANKNR FROM OBJEKTE WHERE ONR=:IONR) INTO :LEVBANKNR, :LEVBANKSTR;
 SELECT NR, KURZBEZ FROM BANKEN WHERE NR IN (SELECT LEVBANKNR2 FROM OBJEKTE WHERE ONR=:IONR) INTO :LEVBANK2NR, :LEVBANK2STR;
 /* BUCHUNGEN */
 FOR
  SELECT BNR, DATUM, WDATUM, KSOLL, KHABEN, BELEGNR, TEXT, MWST, BETRAG, BANKNRSOLL, BANKNRHABEN, SPLITNR, KSTRHABEN, KSTRSOLL, ARTSOLL, ARTHABEN, MWSTOP, KNROP from buchung
  WHERE (ONRSOLL=:IONR OR ONRHABEN=:IONR) AND (KSOLL=:KNR OR KHABEN=:KNR) AND OPBETRAG IS NULL AND (Datum>=:DTVON and Datum<=:DTBIS) and BETRAG<>0
 INTO :BNR, :DATUM, :WDATUM, :KSOLL, :KHABEN, :BELEGNR, :TEXT, :MWST, :BETRAG, :BANKNRSOLL, :BANKNRHABEN, :SPLITNR, :KSTRHABEN, :KSTRSOLL, :ARTSOLL, :ARTHABEN, :MWSTOP, :KNROP
 DO
  BEGIN
   ONR=:IONR;
   IF (BANKNRSOLL IS NOT NULL) THEN
    BEGIN
     IF (BANKNRSOLL=LEVBANKNR) THEN
      KSTRSOLL=KSTRSOLL || ' ' || LEVBANKSTR;
     ELSE
      IF (BANKNRSOLL=LEVBANK2NR) THEN
       KSTRSOLL=KSTRSOLL || ' ' || LEVBANKSTR;
      ELSE
       BEGIN
        SELECT KURZBEZ from Banken where NR=:BANKNRSOLL into :TEMPSTR;
        KSTRSOLL=KSTRSOLL || ' ' || TEMPSTR;
       END
    END
   ELSE
    BEGIN
     SELECT KNRSTR || ' ' || KBEZ from konten where ONR=:IONR AND KNR=:KSOLL INTO :KSTRSOLL;
    END
   IF (BANKNRHABEN IS NOT NULL) THEN
    BEGIN
     IF (BANKNRHABEN=LEVBANKNR) THEN
      KSTRHABEN=KSTRHABEN || ' ' || LEVBANKSTR;
     ELSE
      IF (BANKNRHABEN=LEVBANK2NR) THEN
       KSTRHABEN=KSTRHABEN || ' ' || LEVBANKSTR;
      ELSE
       BEGIN
        SELECT KURZBEZ from Banken where NR=:BANKNRHABEN into :TEMPSTR;
        KSTRHABEN=KSTRHABEN || ' ' || TEMPSTR;
       END
    END
   ELSE
    SELECT KNRSTR || ' ' || KBEZ from konten where ONR=:IONR AND KNR=:KHABEN INTO :KSTRHABEN;
   IF ((ARTSOLL=19 AND ARTHABEN=19) or (ARTSOLL=1 AND ARTHABEN=1)) THEN
    BEGIN
     IF (KHABEN=KNR) THEN
      BETRAG=-BETRAG;
    END
   ELSE
    IF ((ARTSOLL=19) or (ARTHABEN=1)) THEN
     BETRAG=-BETRAG;
   /*Rene Verrechnungen*/
   IF ((KLASSE>=60 AND KLASSE<=64) OR (KLASSE=19)) THEN
    BEGIN
     IF (BANKNRSOLL IS NULL AND BANKNRHABEN IS NULL) THEN
      BEGIN /* VERRECHNUNG */
       IF ((ARTSOLL=24) OR (ARTSOLL=27) OR (ARTSOLL=30)) THEN
        BETRAG=BETRAG;
       ELSE
        BETRAG=-BETRAG;
      END
    END
   IF (MWSTOP IS NOT NULL) THEN
    IF (MWSTOP>0) THEN
     MWST=MWSTOP;
    ELSE
     BEGIN
      IF ((KLASSE>=60 AND KLASSE<=64) OR (KLASSE=19)) THEN
       SELECT FIRST 1 MWSTOP FROM BUCHZAHL WHERE BNR=:BNR INTO :MWST;
     END
   suspend;
  END
 /* LIEFERANTEN-BUCHUNGEN */
 FOR
  SELECT BNR, DATUM, WDATUM, KSOLL, KHABEN, BELEGNR, TEXT, MWSTOP, BETRAG, BANKNRSOLL, BANKNRHABEN, SPLITNR, KSTRHABEN, KSTRSOLL, ARTSOLL, ARTHABEN, MWSTOP, KNROP from buchung
  WHERE (ONRSOLL=:IONR OR ONRHABEN=:IONR) AND (ARTSOLL=71 OR ARTHABEN=71) AND OPBETRAG IS NULL AND (Datum>=:DTVON and Datum<=:DTBIS) and BETRAG<>0 and knrop=:knr
  union all
  SELECT buchung.BNR, DATUM, WDATUM, KSOLL, KHABEN, BELEGNR, TEXT, MWST, BUCHZAHL.BETRAG, BANKNRSOLL, BANKNRHABEN, SPLITNR, KSTRHABEN, KSTRSOLL, ARTSOLL, ARTHABEN, buchung.MWSTOP, KNROP from buchung, buchzahl
  WHERE (ONRSOLL=:IONR OR ONRHABEN=:IONR) AND (ARTSOLL=71 OR ARTHABEN=71) AND OPBETRAG IS NULL AND (Datum>=:DTVON and Datum<=:DTBIS) and buchung.BETRAG<>0 and knrop=0
  and BUCHZAHL.bnr=buchung.bnr and buchzahl.KNR=:knr
 INTO :BNR, :DATUM, :WDATUM, :KSOLL, :KHABEN, :BELEGNR, :TEXT, :MWST, :BETRAG, :BANKNRSOLL, :BANKNRHABEN, :SPLITNR, :KSTRHABEN, :KSTRSOLL, :ARTSOLL, :ARTHABEN, :MWSTOP, :KNROP
 DO
  BEGIN
   ONR=:IONR;
   IF ((KLASSE=19)) THEN
    BETRAG = -BETRAG; 
   suspend; 
  END  
END


-- Prozedur: JOURNAL_HD
CREATE OR ALTER PROCEDURE JOURNAL_HD
DECLARE VARIABLE BANKNRSOLL INTEGER;
 DECLARE VARIABLE BANKNRHABEN INTEGER;
 DECLARE VARIABLE ARTSOLL INTEGER;
 DECLARE VARIABLE ARTHABEN INTEGER;
 DECLARE VARIABLE LEVBANKSTR VARCHAR(15);
 DECLARE VARIABLE LEVBANK2STR VARCHAR(15);
 DECLARE VARIABLE LEVBANKNR INTEGER;
 DECLARE VARIABLE LEVBANK2NR INTEGER;
 DECLARE VARIABLE TEMPSTR VARCHAR(15);
 DECLARE VARIABLE KNR INTEGER;
 DECLARE VARIABLE IKUSCHLNR1 INTEGER;
 DECLARE VARIABLE IKUSCHLNR2 INTEGER;
 DECLARE VARIABLE IKUSCHLPROZ1 SMALLINT;
 DECLARE VARIABLE IKUSCHLPROZ2 SMALLINT;
 DECLARE VARIABLE KBEW CHAR(1);
 DECLARE VARIABLE HEIZEXTERN CHAR(1);
 DECLARE VARIABLE BHEIZ CHAR(1);
 DECLARE VARIABLE KVERTEILUNG CHAR(1);
 DECLARE VARIABLE BETRAG1 NUMERIC (15,2);
 DECLARE VARIABLE BETRAG2 NUMERIC (15,2);
 DECLARE VARIABLE BETRAG3 NUMERIC (15,2);
 DECLARE VARIABLE BETRAG4 NUMERIC (15,2);
 DECLARE VARIABLE BETRAG5 NUMERIC (15,2);
 DECLARE VARIABLE HAUSTYP INTEGER;
 DECLARE VARIABLE IHEIZK INTEGER;
 DECLARE VARIABLE KWUSCHL INTEGER;
 DECLARE VARIABLE BUSCHL1 INTEGER;
 DECLARE VARIABLE BUSCHL2 INTEGER;
 DECLARE VARIABLE WUSCHL1 INTEGER;
 DECLARE VARIABLE WUSCHL2 INTEGER;
 DECLARE VARIABLE BUSCHLPROZ1 FLOAT;
 DECLARE VARIABLE BUSCHLPROZ2 FLOAT;
 DECLARE VARIABLE WUSCHLPROZ1 FLOAT;
 DECLARE VARIABLE WUSCHLPROZ2 FLOAT;
 DECLARE VARIABLE KKSTNR INTEGER;

BEGIN
 SELECT NR, KURZBEZ FROM BANKEN WHERE NR IN (SELECT LEVBANKNR FROM OBJEKTE WHERE ONR=:IONR) INTO :LEVBANKNR, :LEVBANKSTR;
 SELECT NR, KURZBEZ FROM BANKEN WHERE NR IN (SELECT LEVBANKNR2 FROM OBJEKTE WHERE ONR=:IONR) INTO :LEVBANK2NR, :LEVBANK2STR;
 /*         */
 /* JOURNAL der Haushaltsnahen Dienstleistungen */
 /*         */
 SELECT ONR, BSONST, VERWNR, HEIZEXTERN, KWUSCHL, BUSCHL1, BUSCHL2, WUSCHL1, WUSCHL2, BUSCHLPROZ1, BUSCHLPROZ2, WUSCHLPROZ1, WUSCHLPROZ2
 from objekte where ONR=:IONR
 into ONR, HAUSTYP, VERWNR, HEIZEXTERN,:KWUSCHL, :BUSCHL1, :BUSCHL2, :WUSCHL1, :WUSCHL2, :BUSCHLPROZ1, :BUSCHLPROZ2, :WUSCHLPROZ1, :WUSCHLPROZ2;
 /* KONTEN */
 FOR select KNR, KUSCHLNR1, KUSCHLNR2, KUSCHLPROZ1, KUSCHLPROZ2, KBEW, KVERTEILUNG, BHEIZ, IHEIZK, KKSTNR from konten
 where ONR=:IONR and (KKSTNr<3 or BHEIZ='J' or IHEIZK>0) AND KKLASSE=1
 into :KNR, :IKUSCHLNR1, :IKUSCHLNR2, :IKUSCHLPROZ1, :IKUSCHLPROZ2, :KBEW, :KVERTEILUNG, :BHEIZ, :IHEIZK, :KKSTNR
 do
  begin
   IF (BHEIZ IS NULL) THEN
    BHEIZ='N';
   ELSE
    IF (BHEIZ='J' and HEIZEXTERN='N') THEN
     IHEIZK=1;
   IF (NOT (HEIZEXTERN='J' AND KKSTNR=3)) THEN /* EXTERNE HEIZKOSTEN: NICHT ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã¢â‚¬Å“BERNEHMEN */
    BEGIN
     IF (IHEIZK>0) THEN
      BEGIN /* interne HK */
       IF (IHEIZK=1 OR IHEIZK=2) THEN
        BEGIN
         IKUSCHLNR1=BUSCHL1;
         IKUSCHLNR2=BUSCHL2;
         IKUSCHLPROZ1=BUSCHLPROZ1 * 100;
         IKUSCHLPROZ2=BUSCHLPROZ2 * 100;
        END
       ELSE
        IF (IHEIZK=3) THEN /* WW */
         BEGIN
          IKUSCHLNR1=WUSCHL1;
          IKUSCHLNR2=WUSCHL2;
          IKUSCHLPROZ1=WUSCHLPROZ1 * 100;
          IKUSCHLPROZ2=WUSCHLPROZ2 * 100;
         END
       ELSE /* Kaltwasser */
        BEGIN
         IKUSCHLNR1=KWUSCHL;
         IKUSCHLNR2=0;
         IKUSCHLPROZ1=10000;
         IKUSCHLPROZ2=0;
        END
      END /* interne HK */
   IF (HAUSTYP=0 OR HAUSTYP=2) THEN
    BEGIN
     IF (IKUSCHLNR1>=50) THEN
      BEW=0;
     ELSE
      BEW=1;
     END
    ELSE
     BEGIN /* reine WEG */
      IF (KVERTEILUNG='J') THEN
       BEW=1;
      ELSE
       BEW=0;
     END
   IF (BWDATUM='N') THEN
    BEGIN
     /* Ausgabekont im SOLL + */
     for select betrag1, betrag2, betrag3, betrag4,
     buchung.BNR, DATUM, WDATUM, KSOLL, KHABEN, BELEGNR, TEXT, MWST, BETRAG, BANKNRSOLL, BANKNRHABEN, KSTRHABEN, KSTRSOLL, ARTSOLL, ARTHABEN
     from hdbuchung, buchung where hdbuchung.bnr=buchung.bnr
     and ONRSOLL=:IONR AND KSOLL=:KNR and (buchung.datum>=:DTVON and buchung.datum<=:DTBIS)
     INTO :BETRAG1, :BETRAG2, :BETRAG3, :BETRAG4,
          :BNR, :DATUM, :WDATUM, :KSOLL, :KHABEN, :BELEGNR, :TEXT, :MWST, :BETRAG, :BANKNRSOLL, :BANKNRHABEN, :KSTRHABEN, :KSTRSOLL, :ARTSOLL, :ARTHABEN
     DO
      BEGIN
       IF (BETRAG1 IS NULL) THEN
        BETRAG1=0;
       IF (BETRAG2 IS NULL) THEN
        BETRAG2=0;
       IF (BETRAG3 IS NULL) THEN
        BETRAG3=0;
       IF (BETRAG4 IS NULL) THEN
        BETRAG4=0;
       IF (BETRAG1<>0 OR BETRAG2<>0 OR BETRAG3<>0 or BETRAG4<>0) THEN
        BEGIN
         IF (BANKNRHABEN IS NOT NULL) THEN
          BEGIN
           IF (BANKNRHABEN=LEVBANKNR) THEN
            KSTRHABEN=KSTRHABEN || ' ' || LEVBANKSTR;
           ELSE
            IF (BANKNRHABEN=LEVBANK2NR) THEN
             KSTRHABEN=KSTRHABEN || ' ' || LEVBANKSTR;
           ELSE
            BEGIN
             SELECT KURZBEZ from Banken where NR=:BANKNRSOLL into :TEMPSTR;
             KSTRHABEN=KSTRHABEN || ' ' || TEMPSTR;
            END
          END
         ELSE
          BEGIN
           IF (:ARTHABEN<>71) THEN
            SELECT KNRSTR || ' ' || KBEZ from konten where ONR=:IONR AND KNR=:KSOLL INTO :KSTRHABEN;
           ELSE
            SELECT KNRSTR || ' ' || KBEZ from konten where ONR=0 AND KNR=:KSOLL INTO :KSTRHABEN;
           END
          SELECT KNRSTR || ' ' || KBEZ from konten where ONR=:IONR AND KNR=:KSOLL INTO :KSTRSOLL;
         IF (IKUSCHLPROZ1>0) THEN
          BEGIN
           USCHL=IKUSCHLNR1;
           USCHLPROZ=IKUSCHLPROZ1;
           IF (BETRAG1<>0) THEN
            BEGIN
             PARAGRAF=1;
             BETRAG_ANT=BETRAG1 * IKUSCHLPROZ1 / 10000;
             SUSPEND;
            END
           IF (BETRAG2<>0) THEN
            BEGIN
             PARAGRAF=2;
             BETRAG_ANT=BETRAG2 * IKUSCHLPROZ1 / 10000;
             SUSPEND;
            END
           IF (BETRAG3<>0) THEN
            BEGIN
             PARAGRAF=3;
             BETRAG_ANT=BETRAG3 * IKUSCHLPROZ1 / 10000;
             SUSPEND;
            END
           IF (BETRAG4<>0) THEN
            BEGIN
             PARAGRAF=4;
             BETRAG_ANT=BETRAG4 * IKUSCHLPROZ1 / 10000;
             SUSPEND;
            END
          END /* KUSCHLPROZ > 0 */
         IF (IKUSCHLPROZ2>0) THEN
          BEGIN
           USCHL=IKUSCHLNR2;
           USCHLPROZ=IKUSCHLPROZ2;
           IF (BETRAG1<>0) THEN
            BEGIN
             PARAGRAF=1;
             BETRAG_ANT=BETRAG1 * IKUSCHLPROZ2 / 10000;
             SUSPEND;
            END
           IF (BETRAG2<>0) THEN
            BEGIN
             PARAGRAF=2;
             BETRAG_ANT=BETRAG2 * IKUSCHLPROZ2 / 10000;
             SUSPEND;
            END
           IF (BETRAG3<>0) THEN
            BEGIN
             PARAGRAF=3;
             BETRAG_ANT=BETRAG3 * IKUSCHLPROZ2 / 10000;
             SUSPEND;
            END
           IF (BETRAG4<>0) THEN
            BEGIN
             PARAGRAF=4;
             BETRAG_ANT=BETRAG4 * IKUSCHLPROZ2 / 10000;
             SUSPEND;
            END
          END /* KUSCHLPROZ > 0 */
        END /* ein Betrag1..4 <>0 */
      END  /* for select */
     /* Ausgabekonten im HABEN */
     for select betrag1, betrag2, betrag3, betrag4,
     buchung.BNR, DATUM, WDATUM, KSOLL, KHABEN, BELEGNR, TEXT, MWST, BETRAG, BANKNRSOLL, BANKNRHABEN, KSTRHABEN, KSTRSOLL, ARTSOLL, ARTHABEN
     from hdbuchung, buchung where hdbuchung.bnr=buchung.bnr
     and ONRHABEN=:IONR AND KHABEN=:KNR and (buchung.datum>=:DTVON and buchung.datum<=:DTBIS)
     INTO :BETRAG1, :BETRAG2, :BETRAG3, :BETRAG4,
          :BNR, :DATUM, :WDATUM, :KSOLL, :KHABEN, :BELEGNR, :TEXT, :MWST, :BETRAG, :BANKNRSOLL, :BANKNRHABEN, :KSTRHABEN, :KSTRSOLL, :ARTSOLL, :ARTHABEN
     DO
      BEGIN
       IF (BETRAG1 IS NULL) THEN
        BETRAG1=0;
       IF (BETRAG2 IS NULL) THEN
        BETRAG2=0;
       IF (BETRAG3 IS NULL) THEN
        BETRAG3=0;
       IF (BETRAG4 IS NULL) THEN
        BETRAG4=0;
       IF (BETRAG1<>0 OR BETRAG2<>0 OR BETRAG3<>0 or BETRAG4<>0) THEN
        BEGIN
         IF (BANKNRHABEN IS NOT NULL) THEN
          BEGIN
           IF (BANKNRHABEN=LEVBANKNR) THEN
            KSTRHABEN=KSTRHABEN || ' ' || LEVBANKSTR;
           ELSE
            IF (BANKNRHABEN=LEVBANK2NR) THEN
             KSTRHABEN=KSTRHABEN || ' ' || LEVBANKSTR;
           ELSE
            BEGIN
             SELECT KURZBEZ from Banken where NR=:BANKNRSOLL into :TEMPSTR;
             KSTRHABEN=KSTRHABEN || ' ' || TEMPSTR;
            END
          END
         ELSE
          BEGIN
           IF (:ARTHABEN<>71) THEN
            SELECT KNRSTR || ' ' || KBEZ from konten where ONR=:IONR AND KNR=:KSOLL INTO :KSTRHABEN;
           ELSE
            SELECT KNRSTR || ' ' || KBEZ from konten where ONR=0 AND KNR=:KSOLL INTO :KSTRHABEN;
           END
          SELECT KNRSTR || ' ' || KBEZ from konten where ONR=:IONR AND KNR=:KSOLL INTO :KSTRSOLL;
        END
       BETRAG=-BETRAG;
       BETRAG1=-BETRAG1;
       BETRAG2=-BETRAG2;
       BETRAG3=-BETRAG3;
       BETRAG4=-BETRAG4;
       IF (IKUSCHLPROZ1>0) THEN
        BEGIN
         USCHL=IKUSCHLNR1;
         USCHLPROZ=IKUSCHLPROZ1;
         IF (BETRAG1<>0) THEN
          BEGIN
           PARAGRAF=1;
           BETRAG_ANT=BETRAG1 * IKUSCHLPROZ1 / 10000;
           SUSPEND;
          END
         IF (BETRAG2<>0) THEN
          BEGIN
           PARAGRAF=2;
           BETRAG_ANT=BETRAG2 * IKUSCHLPROZ1 / 10000;
           SUSPEND;
          END
         IF (BETRAG3<>0) THEN
          BEGIN
           PARAGRAF=3;
           BETRAG_ANT=BETRAG3 * IKUSCHLPROZ1 / 10000;
           SUSPEND;
          END
         IF (BETRAG4<>0) THEN
          BEGIN
           PARAGRAF=4;
           BETRAG_ANT=BETRAG4 * IKUSCHLPROZ1 / 10000;
           SUSPEND;
          END
        END  /* KUSCHLPROZ > 0 */
       IF (IKUSCHLPROZ2>0) THEN
        BEGIN
         USCHL=IKUSCHLNR2;
         USCHLPROZ=IKUSCHLPROZ2;
         IF (BETRAG1<>0) THEN
          BEGIN
           PARAGRAF=1;
           BETRAG_ANT=BETRAG1 * IKUSCHLPROZ2 / 10000;
           SUSPEND;
          END
         IF (BETRAG2<>0) THEN
          BEGIN
           PARAGRAF=2;
           BETRAG_ANT=BETRAG2 * IKUSCHLPROZ2 / 10000;
           SUSPEND;
          END
         IF (BETRAG3<>0) THEN
          BEGIN
           PARAGRAF=3;
           BETRAG_ANT=BETRAG3 * IKUSCHLPROZ2 / 10000;
           SUSPEND;
          END
         IF (BETRAG4<>0) THEN
          BEGIN
           PARAGRAF=4;
           BETRAG_ANT=BETRAG4 * IKUSCHLPROZ2 / 10000;
           SUSPEND;
          END
        END  /* KUSCHLPROZ > 0 */
      END /* FOR SELECT */
     END /*BDATUM */
    ELSE
 BEGIN /* WDATUM */
/* Ausgabekont im SOLL + */
     for select betrag1, betrag2, betrag3, betrag4,
     buchung.BNR, DATUM, WDATUM, KSOLL, KHABEN, BELEGNR, TEXT, MWST, BETRAG, BANKNRSOLL, BANKNRHABEN, KSTRHABEN, KSTRSOLL, ARTSOLL, ARTHABEN
     from hdbuchung, buchung where hdbuchung.bnr=buchung.bnr
     and ONRSOLL=:IONR AND KSOLL=:KNR and (buchung.wdatum>=:DTVON and buchung.wdatum<=:DTBIS)
     INTO :BETRAG1, :BETRAG2, :BETRAG3, :BETRAG4,
          :BNR, :DATUM, :WDATUM, :KSOLL, :KHABEN, :BELEGNR, :TEXT, :MWST, :BETRAG, :BANKNRSOLL, :BANKNRHABEN, :KSTRHABEN, :KSTRSOLL, :ARTSOLL, :ARTHABEN
     DO
      BEGIN
       IF (BETRAG1 IS NULL) THEN
        BETRAG1=0;
       IF (BETRAG2 IS NULL) THEN
        BETRAG2=0;
       IF (BETRAG3 IS NULL) THEN
        BETRAG3=0;
       IF (BETRAG4 IS NULL) THEN
        BETRAG4=0;
       IF (BETRAG1<>0 OR BETRAG2<>0 OR BETRAG3<>0 or BETRAG4<>0) THEN
        BEGIN
         IF (BANKNRHABEN IS NOT NULL) THEN
          BEGIN
           IF (BANKNRHABEN=LEVBANKNR) THEN
            KSTRHABEN=KSTRHABEN || ' ' || LEVBANKSTR;
           ELSE
            IF (BANKNRHABEN=LEVBANK2NR) THEN
             KSTRHABEN=KSTRHABEN || ' ' || LEVBANKSTR;
           ELSE
            BEGIN
             SELECT KURZBEZ from Banken where NR=:BANKNRSOLL into :TEMPSTR;
             KSTRHABEN=KSTRHABEN || ' ' || TEMPSTR;
            END
          END
         ELSE
          BEGIN
           IF (:ARTHABEN<>71) THEN
            SELECT KNRSTR || ' ' || KBEZ from konten where ONR=:IONR AND KNR=:KSOLL INTO :KSTRHABEN;
           ELSE
            SELECT KNRSTR || ' ' || KBEZ from konten where ONR=0 AND KNR=:KSOLL INTO :KSTRHABEN;
           END
          SELECT KNRSTR || ' ' || KBEZ from konten where ONR=:IONR AND KNR=:KSOLL INTO :KSTRSOLL;
         IF (IKUSCHLPROZ1>0) THEN
          BEGIN
           USCHL=IKUSCHLNR1;
           USCHLPROZ=IKUSCHLPROZ1;
           IF (BETRAG1<>0) THEN
            BEGIN
             PARAGRAF=1;
             BETRAG_ANT=BETRAG1 * IKUSCHLPROZ1 / 10000;
             SUSPEND;
            END
           IF (BETRAG2<>0) THEN
            BEGIN
             PARAGRAF=2;
             BETRAG_ANT=BETRAG2 * IKUSCHLPROZ1 / 10000;
             SUSPEND;
            END
           IF (BETRAG3<>0) THEN
            BEGIN
             PARAGRAF=3;
             BETRAG_ANT=BETRAG3 * IKUSCHLPROZ1 / 10000;
             SUSPEND;
            END
           IF (BETRAG4<>0) THEN
            BEGIN
             PARAGRAF=4;
             BETRAG_ANT=BETRAG4 * IKUSCHLPROZ1 / 10000;
             SUSPEND;
            END
          END /* KUSCHLPROZ > 0 */
         IF (IKUSCHLPROZ2>0) THEN
          BEGIN
           USCHL=IKUSCHLNR2;
           USCHLPROZ=IKUSCHLPROZ2;
           IF (BETRAG1<>0) THEN
            BEGIN
             PARAGRAF=1;
             BETRAG_ANT=BETRAG1 * IKUSCHLPROZ2 / 10000;
             SUSPEND;
            END
           IF (BETRAG2<>0) THEN
            BEGIN
             PARAGRAF=2;
             BETRAG_ANT=BETRAG2 * IKUSCHLPROZ2 / 10000;
             SUSPEND;
            END
           IF (BETRAG3<>0) THEN
            BEGIN
             PARAGRAF=3;
             BETRAG_ANT=BETRAG3 * IKUSCHLPROZ2 / 10000;
             SUSPEND;
            END
           IF (BETRAG4<>0) THEN
            BEGIN
             PARAGRAF=4;
             BETRAG_ANT=BETRAG4 * IKUSCHLPROZ2 / 10000;
             SUSPEND;
            END
          END /* KUSCHLPROZ > 0 */
        END /* ein Betrag1..4 <>0 */
      END  /* for select */
     /* Ausgabekonten im HABEN */
     for select betrag1, betrag2, betrag3, betrag4,
     buchung.BNR, DATUM, WDATUM, KSOLL, KHABEN, BELEGNR, TEXT, MWST, BETRAG, BANKNRSOLL, BANKNRHABEN, KSTRHABEN, KSTRSOLL, ARTSOLL, ARTHABEN
     from hdbuchung, buchung where hdbuchung.bnr=buchung.bnr
     and ONRHABEN=:IONR AND KHABEN=:KNR and (buchung.wdatum>=:DTVON and buchung.wdatum<=:DTBIS)
     INTO :BETRAG1, :BETRAG2, :BETRAG3, :BETRAG4,
          :BNR, :DATUM, :WDATUM, :KSOLL, :KHABEN, :BELEGNR, :TEXT, :MWST, :BETRAG, :BANKNRSOLL, :BANKNRHABEN, :KSTRHABEN, :KSTRSOLL, :ARTSOLL, :ARTHABEN
     DO
      BEGIN
       IF (BETRAG1 IS NULL) THEN
        BETRAG1=0;
       IF (BETRAG2 IS NULL) THEN
        BETRAG2=0;
       IF (BETRAG3 IS NULL) THEN
        BETRAG3=0;
       IF (BETRAG4 IS NULL) THEN
        BETRAG4=0;
       IF (BETRAG1<>0 OR BETRAG2<>0 OR BETRAG3<>0 or BETRAG4<>0) THEN
        BEGIN
         IF (BANKNRHABEN IS NOT NULL) THEN
          BEGIN
           IF (BANKNRHABEN=LEVBANKNR) THEN
            KSTRHABEN=KSTRHABEN || ' ' || LEVBANKSTR;
           ELSE
            IF (BANKNRHABEN=LEVBANK2NR) THEN
             KSTRHABEN=KSTRHABEN || ' ' || LEVBANKSTR;
           ELSE
            BEGIN
             SELECT KURZBEZ from Banken where NR=:BANKNRSOLL into :TEMPSTR;
             KSTRHABEN=KSTRHABEN || ' ' || TEMPSTR;
            END
          END
         ELSE
          BEGIN
           IF (:ARTHABEN<>71) THEN
            SELECT KNRSTR || ' ' || KBEZ from konten where ONR=:IONR AND KNR=:KSOLL INTO :KSTRHABEN;
           ELSE
            SELECT KNRSTR || ' ' || KBEZ from konten where ONR=0 AND KNR=:KSOLL INTO :KSTRHABEN;
           END
          SELECT KNRSTR || ' ' || KBEZ from konten where ONR=:IONR AND KNR=:KSOLL INTO :KSTRSOLL;
        END
       BETRAG=-BETRAG;
       BETRAG1=-BETRAG1;
       BETRAG2=-BETRAG2;
       BETRAG3=-BETRAG3;
       BETRAG4=-BETRAG4;
       IF (IKUSCHLPROZ1>0) THEN
        BEGIN
         USCHL=IKUSCHLNR1;
         USCHLPROZ=IKUSCHLPROZ1;
         IF (BETRAG1<>0) THEN
          BEGIN
           PARAGRAF=1;
           BETRAG_ANT=BETRAG1 * IKUSCHLPROZ1 / 10000;
           SUSPEND;
          END
         IF (BETRAG2<>0) THEN
          BEGIN
           PARAGRAF=2;
           BETRAG_ANT=BETRAG2 * IKUSCHLPROZ1 / 10000;
           SUSPEND;
          END
         IF (BETRAG3<>0) THEN
          BEGIN
           PARAGRAF=3;
           BETRAG_ANT=BETRAG3 * IKUSCHLPROZ1 / 10000;
           SUSPEND;
          END
         IF (BETRAG4<>0) THEN
          BEGIN
           PARAGRAF=4;
           BETRAG_ANT=BETRAG4 * IKUSCHLPROZ1 / 10000;
           SUSPEND;
          END
        END  /* KUSCHLPROZ > 0 */
       IF (IKUSCHLPROZ2>0) THEN
        BEGIN
         USCHL=IKUSCHLNR2;
         USCHLPROZ=IKUSCHLPROZ2;
         IF (BETRAG1<>0) THEN
          BEGIN
           PARAGRAF=1;
           BETRAG_ANT=BETRAG1 * IKUSCHLPROZ2 / 10000;
           SUSPEND;
          END
         IF (BETRAG2<>0) THEN
          BEGIN
           PARAGRAF=2;
           BETRAG_ANT=BETRAG2 * IKUSCHLPROZ2 / 10000;
           SUSPEND;
          END
         IF (BETRAG3<>0) THEN
          BEGIN
           PARAGRAF=3;
           BETRAG_ANT=BETRAG3 * IKUSCHLPROZ2 / 10000;
           SUSPEND;
          END
         IF (BETRAG4<>0) THEN
          BEGIN
           PARAGRAF=4;
           BETRAG_ANT=BETRAG4 * IKUSCHLPROZ2 / 10000;
           SUSPEND;
          END
        END  /* KUSCHLPROZ > 0 */
      END /* FOR SELECT */
     END   /* WDATUM */
   END    /* HEIZEXTERN */
  END /* FOR KONTEN */
 END


-- Prozedur: KAUTIONSLIST
CREATE OR ALTER PROCEDURE KAUTIONSLIST
DECLARE VARIABLE IAKTONR INTEGER;
DECLARE VARIABLE EINZUG DATE;
DECLARE VARIABLE BFIRMA VARCHAR(1);
DECLARE VARIABLE BFIRMANAME VARCHAR(80);
DECLARE VARIABLE BBRIEFAN VARCHAR(40);
DECLARE VARIABLE STR VARCHAR(161);
BEGIN
 IAKTONR=0;
 FOR
  select b.onr, knr, ba.bname || ' ' || ba.bvname, ba.btel, ba.bfax, ba.bemail, kaut_abgerechnet, kaut_bez_konto, kaut_bank, kaut_blz,
  kaut_konto, kaut_vereinbart, ba.bstr || ', ' || ba.bplzort, vende, bewstatus, kaut_bic, kaut_iban, ebez, sepa_format, 
  ba.bblz, ba.bkonto, ba.bbic, ba.biban, ba.bbank, vbeginn, BFirma, BFirmaName,ba.BBriefan 
  from bewohner b, bewadr ba, wohnung w, objekte o, status
  where b.bewnr=ba.bewnr and b.onr=w.onr and b.enr=w.enr and b.onr=o.onr and (b.onr>=:IONRVON AND b.onr<=:IONRBIS) and bsonst<>1
  order by b.onr, knr
 INTO
  :ONR, :KNR, :NAME, :TEL, :FAX, :EMAIL, :ABGERECHNET, :KONTOART,:BANK, :BLZ, :KONTO, :VEREINBART, :ANSCHRIFT, :AUSZUG, :BEWSTATUS, :BIC, :IBAN, :WHGBEZ, :SEPA, :BBLZ, :BKONTO, :BBIC, :BIBAN, :BBANK, :EINZUG, :BFirma, :BFirmaName,:BBriefan
 DO
  BEGIN
  
   if (bfirma = 'J') then
    begin
     if (BBriefAn = 'Sehr geehrte Damen und Herren') then
      Name = BFirmaName;
     else
      begin
       str = BFirmaName;
       if (NAME <> '') then
         str = str || '; ' || Trim(Name);
       Name = str;  
       end
    end 
 
  
   /* 0=Alle, 1=Abgerechnet, 2=Nicht abgerechnet */
   IF (IAKTONR <> ONR) THEN
    IAKTONR=ONR;
   /* */
   IF (AUSZUG < '01.01.1901') then
    AUSZUG = NULL;
   IF (EINZUG < '01.01.1901') then
    EINZUG = NULL;    
   IF (ABGERECHNET < '01.01.1901') then
    ABGERECHNET = NULL;
   IF (IABGERECHNET = 0 OR (IABGERECHNET = 1 AND ABGERECHNET IS NOT NULL)
    OR (IABGERECHNET = 2 AND ABGERECHNET IS NULL)) THEN
    BEGIN
     IF ((EINZUG IS NULL AND AUSZUG IS NULL) OR
     (EINZUG IS NULL AND AUSZUG >= DTVON) OR
     (EINZUG <= DTBIS AND AUSZUG IS NULL) OR
     ((AUSZUG>=DTVON AND AUSZUG<=DTBIS) OR (EINZUG>=DTVON AND EINZUG<=DTBIS))) THEN
      BEGIN
       EXECUTE PROCEDURE GET_KNRSTR(:KNR) RETURNING_VALUES :KNRSTR;
       SELECT Sum(Betrag) from BUCHKAUT WHERE ONR=:ONR and KNR=:KNR INTO :STAND;
       SELECT Sum(Betrag) from BUCHKAUT WHERE ONR=:ONR and KNR=:KNR and EINZAHLUNG='J' INTO :ERHALTEN;
       IF (ERHALTEN < VEREINBART) THEN
        OFFEN = ERHALTEN - VEREINBART;
       ELSE
        IF (ERHALTEN IS NULL) THEN
         OFFEN = -VEREINBART;
        ELSE
         OFFEN = NULL;
       /* */
       IF (NOT (ART_BEWSTATUS = 1 AND BEWSTATUS = 1)) THEN  /* Option Leerstand nicht anzeigen */
        SUSPEND;
      END
    END
  END
END


-- Prozedur: KONTOAUSZUG
CREATE OR ALTER PROCEDURE KONTOAUSZUG
DECLARE VARIABLE KKLASSE INTEGER;
DECLARE VARIABLE KSOLL INTEGER;
DECLARE VARIABLE KHABEN INTEGER;
DECLARE VARIABLE ARTS INTEGER;
DECLARE VARIABLE ARTH INTEGER;
DECLARE VARIABLE BANKNRSOLL INTEGER;
DECLARE VARIABLE BANKNRHABEN INTEGER;
DECLARE VARIABLE SPLITNR INTEGER;
DECLARE VARIABLE BANKNR INTEGER;
DECLARE VARIABLE TEMPONR INTEGER;
DECLARE VARIABLE ONRSOLL INTEGER;
DECLARE VARIABLE ONRHABEN INTEGER;
DECLARE VARIABLE IAKTOBJ INTEGER;
DECLARE VARIABLE LBNR INTEGER;
BEGIN
 KONTO=IKNR;
 HDBETRAG = 0; HDTEXT = ''; HDART = 0;
 if (IONR<0) then
  IAKTOBJ=-IONR;
 else
  IAKTOBJ=IONR;
 select KKLASSE from konten where ONR=:IAKTOBJ and KNR=:IKNR INTO KKLASSE;
 if (KKLASSE IS NULL) THEN
  BEGIN
   select KKLASSE from konten where ONR=0 and KNR=:IKNR INTO KKLASSE;
   IONR=0;
  END
 IF ((KKLASSE<60) OR (KKLASSE>=110 and KKLASSE<=580)) THEN
  BEGIN
   if ((IONR<0) and ((KKLASSE=1) or (KKLASSE>=19))) then
    begin
     /*DATUM*/
     IF (BWDATUM<>'J') THEN
      BEGIN
       FOR SELECT BNR, DATUM, WDATUM, KSOLL, KHABEN, BELEGNR, TEXT, MWST, BETRAG, BANKNRSOLL, BANKNRHABEN, BRENNSTMENGE, ONRSOLL, ONRHABEN, KAUSZUGNR, KAUSZUGBLATT, BNR, NICHTUMLEGEN, artsoll, arthaben from buchung
        WHERE ((KSOLL=:IKNR) OR (KHABEN=:IKNR))
        AND (Datum>=:DTVON and Datum<=:DTBIS)
       INTO :BNR, :DATUM, :WDATUM, :KSOLL, :KHABEN, :BELEGNR, :TEXT, :MWST, :BETRAG, :BANKNRSOLL, :BANKNRHABEN, :BRENNSTMENGE, :ONRSOLL, :ONRHABEN, :KAUSZUGNR, :KAUSZUGBLATT, :BNR, :NICHTUMLEGEN, :arts, :arth
       DO
        BEGIN
         HDBETRAG = 0; HDTEXT = ''; HDART = 0;
         IF (KKLASSE = 1) THEN
          BEGIN
           select sum(betrag) from hdbuch where bnr=:bnr into :HDBETRAG;  
           select first 1 text, art from hdbuch where bnr=:bnr into HDTEXT, HDART;
           if (HDBETRAG is null) then
            HDBETRAG = 0;
           if (HDTEXT is null) then
            HDTEXT = '';
           if (HDART is null) then
            HDART = 0;  
           if ((KHABEN=IKNR) and (arts=arth)) then
            HDBETRAG = -HDBETRAG;
          END
         ELSE
          BEGIN
           HDBETRAG = 0; HDTEXT = ''; HDART = 0;
          END
         /* */
         IF (KSOLL=IKNR) THEN
          BEGIN
           IF (((KKLASSE>=10 AND KKLASSE<=19) OR (KKLASSE>=110 AND KKLASSE<=580)) OR KKLASSE=27) THEN
            BEGIN
             BETRAG=-BETRAG;
             BRENNSTMENGE=-BRENNSTMENGE;
            END
           GKONTO=KHABEN;
           TEMPONR=ONRHABEN;
           BANKNR=BANKNRHABEN;
          END
         ELSE
          BEGIN
           IF (NOT (((KKLASSE>=10 AND KKLASSE<=19) OR (KKLASSE>=110 AND KKLASSE<=580)) OR KKLASSE=27)) THEN
            BEGIN
             BETRAG=-BETRAG;
             BRENNSTMENGE=-BRENNSTMENGE;
            END
           GKONTO=KSOLL;
           TEMPONR=ONRSOLL;
           BANKNR=BANKNRSOLL;
          END
         ONR=TEMPONR;
         IF (BANKNR IS NOT NULL) THEN
          SELECT KURZBEZ from banken where NR=:BANKNR
          into :GKONTOSTR;
         ELSE
          SELECT KNRSTR || ' ' || KBEZ from konten where ONR=:TEMPONR AND KNR=:GKONTO
          into :GKONTOSTR;
         /* Soll von Lieferanten */
         IF ((IONR<0) and (ARTS=1) and (ARTH=71) and (ONR=0)) THEN
          ONR=ONRSOLL;            
         IF (BETRAG<>0) THEN
          BEGIN
           IF (KKLASSE<>30) THEN
            SUSPEND;
           ELSE
            SUSPEND;
          END
        END
      END
     ELSE
      BEGIN /* WDATUM */
       FOR SELECT BNR, DATUM, WDATUM, KSOLL, KHABEN, BELEGNR, TEXT, MWST, BETRAG,BANKNRSOLL, BANKNRHABEN, BRENNSTMENGE, ONRSOLL, ONRHABEN, KAUSZUGNR, KAUSZUGBLATT, BNR, NICHTUMLEGEN, artsoll, arthaben from buchung
       WHERE ((KSOLL=:IKNR) OR (KHABEN=:IKNR))
       AND (WDatum>=:DTVON and WDatum<=:DTBIS)
       INTO :BNR, :DATUM, :WDATUM, :KSOLL, :KHABEN, :BELEGNR, :TEXT, :MWST, :BETRAG, :BANKNRSOLL, :BANKNRHABEN, :BRENNSTMENGE, :ONRSOLL, :ONRHABEN, :KAUSZUGNR, :KAUSZUGBLATT, :BNR, :NICHTUMLEGEN, :arts, :arth
       DO
        BEGIN
         HDBETRAG = 0; HDTEXT = ''; HDART = 0;
         IF (KKLASSE = 1) THEN
          BEGIN
           select sum(betrag) from hdbuch where bnr=:bnr into :HDBETRAG;  
           select first 1 text, art from hdbuch where bnr=:bnr into HDTEXT, HDART;
           if (HDBETRAG is null) then
            HDBETRAG = 0;
           if (HDTEXT is null) then
            HDTEXT = '';
           if (HDART is null) then
            HDART = 0;             
           if ((KHABEN=IKNR) and (arts=arth)) then
            HDBETRAG = -HDBETRAG;
          END
         ELSE
          BEGIN
           HDBETRAG = 0; HDTEXT = ''; HDART = 0;
          END
         /* */        
         IF (KSOLL=IKNR) THEN
          BEGIN
           IF (((KKLASSE>=10 AND KKLASSE<=19) OR (KKLASSE>=110 AND KKLASSE<=580)) OR KKLASSE=27) THEN
            BEGIN
             BETRAG=-BETRAG;
             BRENNSTMENGE=-BRENNSTMENGE;
            END
           GKONTO=KHABEN;
           TEMPONR=ONRHABEN;
           BANKNR=BANKNRHABEN;
          END
         ELSE
          BEGIN
           IF (NOT (((KKLASSE>=10 AND KKLASSE<=19) OR (KKLASSE>=110 AND KKLASSE<=580)) OR KKLASSE=27)) THEN
            BEGIN
             BETRAG=-BETRAG;
             BRENNSTMENGE=-BRENNSTMENGE;
            END
          GKONTO=KSOLL;
          TEMPONR=ONRSOLL;
          BANKNR=BANKNRSOLL;
          END
         ONR=TEMPONR;
         IF (BANKNR IS NOT NULL) THEN
          SELECT KURZBEZ from banken where NR=:BANKNR
          into :GKONTOSTR;
         ELSE
          SELECT KNRSTR || ' ' || KBEZ from konten where ONR=:TEMPONR AND KNR=:GKONTO
          into :GKONTOSTR;
         /* Soll von Lieferanten */
         IF ((IONR<0) and (ARTS=1) and (ARTH=71) and (ONR=0)) THEN
          ONR=ONRSOLL;           
         IF (BETRAG<>0) THEN
          BEGIN
           IF (KKLASSE<>30) THEN
            SUSPEND;
           ELSE
            SUSPEND;
          END
        END
      END
    end
   else /*nich alle objekte oder falsche kontenklasse*/
    begin
     /*DATUM*/
     IF (BWDATUM<>'J') THEN
      BEGIN
       FOR SELECT BNR, DATUM, WDATUM, KSOLL, KHABEN, BELEGNR, TEXT, MWST, BETRAG, BANKNRSOLL, BANKNRHABEN, BRENNSTMENGE, ONRSOLL, ONRHABEN, KAUSZUGNR, KAUSZUGBLATT, BNR, NICHTUMLEGEN, artsoll, arthaben from buchung
        WHERE ((ONRSOLL=:IONR and KSOLL=:IKNR) OR (ONRHABEN=:IONR and KHABEN=:IKNR))
        AND (Datum>=:DTVON and Datum<=:DTBIS)
       INTO :BNR, :DATUM, :WDATUM, :KSOLL, :KHABEN, :BELEGNR, :TEXT, :MWST, :BETRAG, :BANKNRSOLL, :BANKNRHABEN, :BRENNSTMENGE, :ONRSOLL, :ONRHABEN, :KAUSZUGNR, :KAUSZUGBLATT, :BNR, :NICHTUMLEGEN, :arts, :arth
       DO
        BEGIN
         HDBETRAG = 0; HDTEXT = ''; HDART = 0;
         IF (KKLASSE = 1) THEN
          BEGIN
           select sum(betrag) from hdbuch where bnr=:bnr into :HDBETRAG;  
           select first 1 text, art from hdbuch where bnr=:bnr into HDTEXT, HDART;
           if (HDBETRAG is null) then
            HDBETRAG = 0;
           if (HDTEXT is null) then
            HDTEXT = '';
           if (HDART is null) then
            HDART = 0;  
           if ((KHABEN=IKNR) and (arts=arth)) then
            HDBETRAG = -HDBETRAG;
          END
         ELSE
          BEGIN
           HDBETRAG = 0; HDTEXT = ''; HDART = 0;
          END
         /* */        
         IF (KSOLL=IKNR) THEN
          BEGIN
           IF (((KKLASSE>=10 AND KKLASSE<=19) OR (KKLASSE>=110 AND KKLASSE<=580)) OR KKLASSE=27) THEN
            BEGIN
             BETRAG=-BETRAG;
             BRENNSTMENGE=-BRENNSTMENGE;
            END
           GKONTO=KHABEN;
           TEMPONR=ONRHABEN;
           BANKNR=BANKNRHABEN;
          END
         ELSE
          BEGIN
           IF (NOT (((KKLASSE>=10 AND KKLASSE<=19) OR (KKLASSE>=110 AND KKLASSE<=580)) OR KKLASSE=27)) THEN
            BEGIN
             BETRAG=-BETRAG;
             BRENNSTMENGE=-BRENNSTMENGE;
            END
           GKONTO=KSOLL;
           TEMPONR=ONRSOLL;
           BANKNR=BANKNRSOLL;
          END
         ONR=IONR;
         IF (BANKNR IS NOT NULL) THEN
          SELECT KURZBEZ from banken where NR=:BANKNR
          into :GKONTOSTR;
         ELSE
          SELECT KNRSTR || ' ' || KBEZ from konten where ONR=:TEMPONR AND KNR=:GKONTO
          into :GKONTOSTR;
         IF (BETRAG<>0) THEN
          BEGIN
           IF (KKLASSE<>30) THEN
            SUSPEND;
           ELSE
            IF (ONRSOLL=IAKTOBJ OR ONRHABEN=IAKTOBJ) THEN
             SUSPEND;
          END
        END
      END
     ELSE
      BEGIN /* WDATUM */
       FOR SELECT BNR, DATUM, WDATUM, KSOLL, KHABEN, BELEGNR, TEXT, MWST, BETRAG,BANKNRSOLL, BANKNRHABEN, BRENNSTMENGE, ONRSOLL, ONRHABEN, KAUSZUGNR, KAUSZUGBLATT, BNR, NICHTUMLEGEN, artsoll, arthaben from buchung
       WHERE ((ONRSOLL=:IONR and KSOLL=:IKNR) OR (ONRHABEN=:IONR and KHABEN=:IKNR))
       AND (WDatum>=:DTVON and WDatum<=:DTBIS)
       INTO :BNR, :DATUM, :WDATUM, :KSOLL, :KHABEN, :BELEGNR, :TEXT, :MWST, :BETRAG, :BANKNRSOLL, :BANKNRHABEN, :BRENNSTMENGE, :ONRSOLL, :ONRHABEN, :KAUSZUGNR, :KAUSZUGBLATT, :BNR, :NICHTUMLEGEN, :arts, :arth
       DO
        BEGIN
         HDBETRAG = 0; HDTEXT = ''; HDART = 0;
         IF (KKLASSE = 1) THEN
          BEGIN
           select sum(betrag) from hdbuch where bnr=:bnr into :HDBETRAG;  
           select first 1 text, art from hdbuch where bnr=:bnr into HDTEXT, HDART;
           if (HDTEXT is null) then
            HDTEXT = '';
           if (HDART is null) then
            HDART = 0;             
           if (HDBETRAG is null) then
            HDBETRAG = 0;
           if ((KHABEN=IKNR) and (arts=arth)) then
            HDBETRAG = -HDBETRAG;
          END
         ELSE
          BEGIN
           HDBETRAG = 0; HDTEXT = ''; HDART = 0;
          END
         /* */        
         IF (KSOLL=IKNR) THEN
          BEGIN
           IF (((KKLASSE>=10 AND KKLASSE<=19) OR (KKLASSE>=110 AND KKLASSE<=580)) OR KKLASSE=27) THEN
            BEGIN
             BETRAG=-BETRAG;
             BRENNSTMENGE=-BRENNSTMENGE;
            END
           GKONTO=KHABEN;
           TEMPONR=ONRHABEN;
           BANKNR=BANKNRHABEN;
          END
         ELSE
          BEGIN
           IF (NOT (((KKLASSE>=10 AND KKLASSE<=19) OR (KKLASSE>=110 AND KKLASSE<=580)) OR KKLASSE=27)) THEN
            BEGIN
             BETRAG=-BETRAG;
             BRENNSTMENGE=-BRENNSTMENGE;
            END
          GKONTO=KSOLL;
          TEMPONR=ONRSOLL;
          BANKNR=BANKNRSOLL;
          END
         ONR=IONR;
         IF (BANKNR IS NOT NULL) THEN
          SELECT KURZBEZ from banken where NR=:BANKNR
          into :GKONTOSTR;
         ELSE
          SELECT KNRSTR || ' ' || KBEZ from konten where ONR=:TEMPONR AND KNR=:GKONTO
          into :GKONTOSTR;
         IF (BETRAG<>0) THEN
          BEGIN
           IF (KKLASSE<>30) THEN
            SUSPEND;
           ELSE
            IF (ONRSOLL=IAKTOBJ OR ONRHABEN=IAKTOBJ) THEN
             SUSPEND;
          END
        END
      END
    end /*alle Objekte*/
  END
 ELSE
 /*          */
 /* DEB/KRED */
 /*          */
  BEGIN
   /*DATUM*/
   IF (BWDATUM<>'J') THEN
    BEGIN
     IF (BSOLL='J') THEN
      BEGIN /* Sollstelungen */
       FOR SELECT BNR, DATUM, WDATUM, KSOLL, KHABEN, BELEGNR, TEXT, MWST, BETRAG, BANKNRSOLL, BANKNRHABEN, OPBETRAG, SPLITNR, ONRSOLL, ONRHABEN, BRENNSTMENGE, KAUSZUGNR, KAUSZUGBLATT,LBNR, NICHTUMLEGEN from buchung
       WHERE ((ONRSOLL=:IONR and KSOLL=:IKNR) OR (ONRHABEN=:IONR and KHABEN=:IKNR))
       AND (Datum>=:DTVON and Datum<=:DTBIS)
       AND SPLITNR IS NULL and BETRAG<>0
       UNION
       SELECT buchung.BNR, DATUM, WDATUM, KSOLL, KHABEN, BELEGNR, TEXT, MWST, splitbuch.BETRAG, BANKNRSOLL, BANKNRHABEN, sum(splitbuch.OPBETRAG), SPLITNR, ONRSOLL, ONRHABEN, BRENNSTMENGE, KAUSZUGNR, KAUSZUGBLATT,LBNR, NICHTUMLEGEN from buchung, splitbuch
       WHERE ((ONRSOLL=:IONR and KSOLL=:IKNR) OR (ONRHABEN=:IONR and KHABEN=:IKNR))
       AND (Datum>=:DTVON and Datum<=:DTBIS)
       AND SPLITNR IS NOT NULL and splitbuch.BETRAG<>0
       AND BUCHUNG.BNR = SPLITBUCH.BNR
       GROUP BY buchung.BNR, DATUM, WDATUM, KSOLL, KHABEN, BELEGNR, TEXT, MWST, splitbuch.BETRAG, BANKNRSOLL, BANKNRHABEN, SPLITNR, ONRSOLL, ONRHABEN, BRENNSTMENGE, KAUSZUGNR, KAUSZUGBLATT,LBNR, NICHTUMLEGEN
       INTO :BNR, :DATUM, :WDATUM, :KSOLL, :KHABEN, :BELEGNR, :TEXT, :MWST, :BETRAG, :BANKNRSOLL, :BANKNRHABEN, :OPBETRAG, :SPLITNR, :ONRSOLL, :ONRHABEN, :BRENNSTMENGE, :KAUSZUGNR, :KAUSZUGBLATT, :LBNR, :NICHTUMLEGEN
       DO
        BEGIN
         HDBETRAG = 0; HDTEXT = ''; HDART = 0;
         IF (KSOLL=IKNR) THEN
          BEGIN
           IF (((KKLASSE>=10 AND KKLASSE<=19) OR (KKLASSE>=110 AND KKLASSE<=580)) OR KKLASSE=27) THEN
            BEGIN
             BETRAG=-BETRAG;
             BRENNSTMENGE=-BRENNSTMENGE;
            END
           GKONTO=KHABEN;
           BANKNR=BANKNRHABEN;
           ONR=ONRHABEN;
          END
         ELSE
          BEGIN
           IF (NOT (((KKLASSE>=10 AND KKLASSE<=19) OR (KKLASSE>=110 AND KKLASSE<=580)) OR KKLASSE=27)) THEN
            BEGIN
             BETRAG=-BETRAG;
             BRENNSTMENGE=-BRENNSTMENGE;
            END
           GKONTO=KSOLL;
           BANKNR=BANKNRSOLL;
           ONR=ONRSOLL;
          END
         IF (BANKNR IS NOT NULL) THEN
          SELECT KURZBEZ from banken where NR=:BANKNR
          into :GKONTOSTR;
         ELSE
          SELECT KNRSTR || ' ' || KBEZ from konten where ONR=:ONR AND KNR=:GKONTO
          into :GKONTOSTR;
         IF (OPBETRAG IS NOT NULL) THEN
          BEGIN
           IF (OPBETRAG=0) THEN
            BEGIN
             IF (SPLITNR IS NULL) THEN
              BEMERKUNG='SO';
             ELSE
              BEMERKUNG='SO..';
            END
           ELSE
            BEGIN
             IF (SPLITNR IS NULL) THEN
              BEMERKUNG='OP';
             ELSE
              BEMERKUNG='OP..';
            END
          END
         ELSE
          BEGIN
           IF (LBNR IS NOT NULL) then
            BEMERKUNG='LEV';
           ELSE
            BEMERKUNG='';
          END
         IF (KKLASSE<>71) THEN
          BETRAG=-BETRAG;
         IF (BETRAG<>0) THEN
          SUSPEND;
       END
      END /* Sollstelungen */
     ELSE
      BEGIN /* keine Sollstelungen */
       FOR SELECT BNR, DATUM, WDATUM, KSOLL, KHABEN, BELEGNR, TEXT, MWST, BETRAG, BANKNRSOLL, BANKNRHABEN, OPBETRAG, SPLITNR, ONRSOLL, ONRHABEN, BRENNSTMENGE, KAUSZUGNR, KAUSZUGBLATT,LBNR,NICHTUMLEGEN from buchung
       WHERE ((ONRSOLL=:IONR and KSOLL=:IKNR) OR (ONRHABEN=:IONR and KHABEN=:IKNR))
       AND (Datum>=:DTVON and Datum<=:DTBIS)
       AND OPBETRAG IS NULL and BETRAG<>0
       INTO :BNR, :DATUM, :WDATUM, :KSOLL, :KHABEN, :BELEGNR, :TEXT, :MWST, :BETRAG, :BANKNRSOLL, :BANKNRHABEN, :OPBETRAG, :SPLITNR, :ONRSOLL, :ONRHABEN, :BRENNSTMENGE, :KAUSZUGNR, :KAUSZUGBLATT, :LBNR, :NICHTUMLEGEN
       DO
        BEGIN
         HDBETRAG = 0; HDTEXT = ''; HDART = 0;
         IF (KSOLL=IKNR) THEN
          BEGIN
           IF (((KKLASSE>=10 AND KKLASSE<=19) OR (KKLASSE>=110 AND KKLASSE<=580)) OR KKLASSE=27) THEN
            BEGIN
             BETRAG=-BETRAG;
             BRENNSTMENGE=-BRENNSTMENGE;
            END
           GKONTO=KHABEN;
           BANKNR=BANKNRHABEN;
           ONR=ONRHABEN;
          END
         ELSE
          BEGIN
           IF (NOT (((KKLASSE>=10 AND KKLASSE<=19) OR (KKLASSE>=110 AND KKLASSE<=580)) OR KKLASSE=27)) THEN
            BEGIN
             BETRAG=-BETRAG;
             BRENNSTMENGE=-BRENNSTMENGE;
            END
           GKONTO=KSOLL;
           BANKNR=BANKNRSOLL;
           ONR=ONRSOLL;
          END
         IF (BANKNR IS NOT NULL) THEN
          SELECT KURZBEZ from banken where NR=:BANKNR
          into :GKONTOSTR;
         ELSE
          SELECT KNRSTR || ' ' || KBEZ from konten where ONR=:ONR AND KNR=:GKONTO
          into :GKONTOSTR;
         IF (OPBETRAG IS NOT NULL) THEN
          BEGIN
           IF (OPBETRAG=0) THEN
            BEGIN
             IF (SPLITNR IS NULL) THEN
              BEMERKUNG='SO';
             ELSE
              BEMERKUNG='SO..';
            END
           ELSE
            BEGIN
             IF (SPLITNR IS NULL) THEN
              BEMERKUNG='OP';
             ELSE
              BEMERKUNG='OP..';
            END
          END
         ELSE
          BEGIN
           IF (LBNR IS NOT NULL) THEN
            BEMERKUNG='LEV';
           ELSE
            BEMERKUNG='';
          END
         IF (KKLASSE<>71) THEN
          BETRAG=-BETRAG;
         IF (BETRAG<>0) THEN
          SUSPEND;
        END
      END   /* keine Sollstelungen */
    END
   ELSE
    BEGIN /* WDATUM */
     IF (BSOLL='J') THEN
      BEGIN /* Sollstelungen */
       FOR SELECT BNR, DATUM, WDATUM, KSOLL, KHABEN, BELEGNR, TEXT, MWST, BETRAG, BANKNRSOLL, BANKNRHABEN, OPBETRAG, SPLITNR, ONRSOLL, ONRHABEN, BRENNSTMENGE, KAUSZUGNR, KAUSZUGBLATT, LBNR, NICHTUMLEGEN from buchung
       WHERE ((ONRSOLL=:IONR and KSOLL=:IKNR) OR (ONRHABEN=:IONR and KHABEN=:IKNR))
       AND (WDatum>=:DTVON and WDatum<=:DTBIS)
       AND SPLITNR IS NULL and BETRAG<>0
       UNION
       SELECT buchung.BNR, DATUM, WDATUM, KSOLL, KHABEN, BELEGNR, TEXT, MWST, splitbuch.BETRAG, BANKNRSOLL, BANKNRHABEN, sum(splitbuch.OPBETRAG), SPLITNR, ONRSOLL, ONRHABEN, BRENNSTMENGE, KAUSZUGNR, KAUSZUGBLATT,LBNR,NICHTUMLEGEN from buchung, splitbuch
       WHERE ((ONRSOLL=:IONR and KSOLL=:IKNR) OR (ONRHABEN=:IONR and KHABEN=:IKNR))
       AND (WDatum>=:DTVON and WDatum<=:DTBIS)
       AND SPLITNR IS NOT NULL and splitbuch.BETRAG<>0
       AND BUCHUNG.BNR = SPLITBUCH.BNR
       GROUP BY buchung.BNR, DATUM, WDATUM, KSOLL, KHABEN, BELEGNR, TEXT, MWST, splitbuch.BETRAG, BANKNRSOLL, BANKNRHABEN, SPLITNR, ONRSOLL, ONRHABEN, BRENNSTMENGE, KAUSZUGNR, KAUSZUGBLATT,LBNR,NICHTUMLEGEN
       INTO :BNR, :DATUM, :WDATUM, :KSOLL, :KHABEN, :BELEGNR, :TEXT, :MWST, :BETRAG, :BANKNRSOLL, :BANKNRHABEN, :OPBETRAG, :SPLITNR, :ONRSOLL, :ONRHABEN, :BRENNSTMENGE, :KAUSZUGNR, :KAUSZUGBLATT,:LBNR,:NICHTUMLEGEN
       DO
        BEGIN
         HDBETRAG = 0; HDTEXT = ''; HDART = 0;
         IF (KSOLL=IKNR) THEN
          BEGIN
           IF (((KKLASSE>=10 AND KKLASSE<=19) OR (KKLASSE>=110 AND KKLASSE<=580)) OR KKLASSE=27) THEN
            BEGIN
             BETRAG=-BETRAG;
             BRENNSTMENGE=-BRENNSTMENGE;
            END
           GKONTO=KHABEN;
           BANKNR=BANKNRHABEN;
           ONR=ONRHABEN;
          END
         ELSE
          BEGIN
           IF (NOT (((KKLASSE>=10 AND KKLASSE<=19) OR (KKLASSE>=110 AND KKLASSE<=580)) OR KKLASSE=27)) THEN
            BEGIN
             BETRAG=-BETRAG;
             BRENNSTMENGE=-BRENNSTMENGE;
            END
           GKONTO=KSOLL;
           BANKNR=BANKNRSOLL;
           ONR=ONRSOLL;
          END
         IF (BANKNR IS NOT NULL) THEN
          SELECT KURZBEZ from banken where NR=:BANKNR
          into :GKONTOSTR;
         ELSE
          SELECT KNRSTR || ' ' || KBEZ from konten where ONR=:ONR AND KNR=:GKONTO
          into :GKONTOSTR;
         IF (OPBETRAG IS NOT NULL) THEN
          BEGIN
           IF (OPBETRAG=0) THEN
            BEGIN
             IF (SPLITNR IS NULL) THEN
              BEMERKUNG='SO';
             ELSE
              BEMERKUNG='SO..';
            END
           ELSE
            BEGIN
             IF (SPLITNR IS NULL) THEN
              BEMERKUNG='OP';
             ELSE
              BEMERKUNG='OP..';
            END
          END
         ELSE
          BEGIN
           IF (LBNR IS NOT NULL) then
            BEMERKUNG='LEV';
           ELSE
            BEMERKUNG='';
          END
         IF (KKLASSE<>71) THEN
          BETRAG=-BETRAG;
         IF (BETRAG<>0) THEN
          SUSPEND;
       END
      END /* Sollstelungen */
     ELSE
      BEGIN /* keine Sollstelungen */
       FOR SELECT BNR, DATUM, WDATUM, KSOLL, KHABEN, BELEGNR, TEXT, MWST, BETRAG, BANKNRSOLL, BANKNRHABEN, OPBETRAG, SPLITNR, ONRSOLL, ONRHABEN, BRENNSTMENGE, KAUSZUGNR, KAUSZUGBLATT, LBNR, NICHTUMLEGEN from buchung
       WHERE ((ONRSOLL=:IONR and KSOLL=:IKNR) OR (ONRHABEN=:IONR and KHABEN=:IKNR))
       AND (WDatum>=:DTVON and WDatum<=:DTBIS)
       AND OPBETRAG IS NULL and BETRAG<>0
       INTO :BNR, :DATUM, :WDATUM, :KSOLL, :KHABEN, :BELEGNR, :TEXT, :MWST, :BETRAG, :BANKNRSOLL, :BANKNRHABEN, :OPBETRAG, :SPLITNR, :ONRSOLL, :ONRHABEN, :BRENNSTMENGE, :KAUSZUGNR, :KAUSZUGBLATT, :LBNR, :NICHTUMLEGEN
       DO
        BEGIN
         HDBETRAG = 0; HDTEXT = ''; HDART = 0;
         IF (KSOLL=IKNR) THEN
          BEGIN
           IF (((KKLASSE>=10 AND KKLASSE<=19) OR (KKLASSE>=110 AND KKLASSE<=580)) OR KKLASSE=27) THEN
            BEGIN
             BETRAG=-BETRAG;
             BRENNSTMENGE=-BRENNSTMENGE;
            END
           GKONTO=KHABEN;
           BANKNR=BANKNRHABEN;
           ONR=ONRHABEN;
          END
         ELSE
          BEGIN
           IF (NOT (((KKLASSE>=10 AND KKLASSE<=19) OR (KKLASSE>=110 AND KKLASSE<=580)) OR KKLASSE=27)) THEN
            BEGIN
             BETRAG=-BETRAG;
             BRENNSTMENGE=-BRENNSTMENGE;
            END
           GKONTO=KSOLL;
           BANKNR=BANKNRSOLL;
           ONR=ONRSOLL;
          END
         IF (BANKNR IS NOT NULL) THEN
          SELECT KURZBEZ from banken where NR=:BANKNR
          into :GKONTOSTR;
         ELSE
          SELECT KNRSTR || ' ' || KBEZ from konten where ONR=:ONR AND KNR=:GKONTO
          into :GKONTOSTR;
         IF (OPBETRAG IS NOT NULL) THEN
          BEGIN
           IF (OPBETRAG=0) THEN
            BEGIN
             IF (SPLITNR IS NULL) THEN
              BEMERKUNG='SO';
             ELSE
              BEMERKUNG='SO..';
            END
           ELSE
            BEGIN
             IF (SPLITNR IS NULL) THEN
              BEMERKUNG='OP';
             ELSE
              BEMERKUNG='OP..';
            END
          END
         ELSE
          BEGIN
           IF (LBNR IS NOT NULL) THEN
            BEMERKUNG='LEV';
           ELSE
            BEMERKUNG='';
          END
         IF (KKLASSE<>71) THEN
          BETRAG=-BETRAG;
         IF (BETRAG<>0) THEN
          SUSPEND;
        END
      END   /* keine Sollstelungen */
    END   /* WDATUM */
  END /* DEB / KRED */
END


-- Prozedur: KONTOSALDO
CREATE OR ALTER PROCEDURE KONTOSALDO
DECLARE VARIABLE KKLASSE INTEGER;
DECLARE VARIABLE SUMSOLL NUMERIC(15, 2);
DECLARE VARIABLE SUMHABEN NUMERIC(15, 2);
DECLARE VARIABLE SUMSOLL_NETTO NUMERIC(15, 2);
DECLARE VARIABLE SUMHABEN_NETTO NUMERIC(15, 2);
DECLARE VARIABLE IGN_V SMALLINT;
DECLARE VARIABLE IGN_B SMALLINT;
DECLARE VARIABLE DTBDATUMVON DATE;
DECLARE VARIABLE DTBDATUMBIS DATE;
DECLARE VARIABLE DTWDATUMVON DATE;
DECLARE VARIABLE DTWDATUMBIS DATE;
BEGIN
 select KKLASSE from konten where ONR=:IONR and KNR=:IKNR INTO KKLASSE;
 /* */
 IF ((IKNR=60090) OR (IKNR=60190)) THEN
  BEGIN
   IGN_V=1;
   IGN_B=1;
  END 
 ELSE
  BEGIN
   IGN_V=0;
   IGN_B=71;
  END
 /* Datum */ 
 if (BWDATUM = 'N') then
  begin
   DTBDATUMVON = DTVON;
   DTBDATUMBIS = DTBIS;
   DTWDATUMVON = '01.01.1900';
   DTWDATUMBIS = '01.01.1900';
  end
 else
  begin
   DTWDATUMVON = DTVON;
   DTWDATUMBIS = DTBIS;
   DTBDATUMVON = '01.01.1900';
   DTBDATUMBIS = '01.01.1900';
  end   
 /* Buchungen */
 SELECT SUM(BETRAG), SUM((Betrag*100) / (100+MWST)) from buchung WHERE ONRSOLL=:IONR and KSOLL=:IKNR and ((GN=:IGN_V) OR (GN=:IGN_B)) AND ((DATUM>=:DTBDATUMVON and DATUM<=:DTBDATUMBIS) or (WDATUM>=:DTWDATUMVON and WDATUM<=:DTWDATUMBIS))
 INTO :SUMSOLL, SUMSOLL_NETTO;
 SELECT SUM(BETRAG), SUM((Betrag*100) / (100+MWST)) from buchung WHERE ONRHABEN=:IONR and KHABEN=:IKNR and ((GN=:IGN_V) OR (GN=:IGN_B)) AND ((DATUM>=:DTBDATUMVON and DATUM<=:DTBDATUMBIS) or (WDATUM>=:DTWDATUMVON and WDATUM<=:DTWDATUMBIS))
 INTO :SUMHABEN, SUMHABEN_NETTO;
 /* Summe */
 IF (SUMSOLL IS NULL) THEN
  SUMSOLL=0;
 IF (SUMHABEN IS NULL) THEN
  SUMHABEN=0;
 IF (SUMSOLL_NETTO IS NULL) THEN
  SUMSOLL_NETTO=0;
 IF (SUMHABEN_NETTO IS NULL) THEN
  SUMHABEN_NETTO=0;
 /* Ergebnis */
 IF ((KKLASSE>=10 AND KKLASSE<=19) OR KKLASSE=27) THEN
  BEGIN
   SALDO=SUMHABEN-SUMSOLL;
   SALDONETTO=SUMHABEN_NETTO-SUMSOLL_NETTO;
  END
 ELSE
  BEGIN
   SALDO=SUMSOLL-SUMHABEN;
   SALDONETTO=SUMSOLL_NETTO-SUMHABEN_NETTO;
  END
 SUSPEND;
END


-- Prozedur: KONTOSALDO_ALT
CREATE OR ALTER PROCEDURE KONTOSALDO_ALT
DECLARE VARIABLE KKLASSE INTEGER;
 DECLARE VARIABLE SUMSOLL NUMERIC(15,2);
 DECLARE VARIABLE SUMHABEN NUMERIC(15,2);
BEGIN
 IF (IKNR=98000 or IKNR=99990) THEN
  BEGIN
   IF (BWDATUM<>'J') THEN
    BEGIN
     SELECT SUM(BETRAG) from buchung
     WHERE ONRSOLL=0 and KSOLL=:IKNR and ONRHABEN=:IONR
     AND Datum<:DTBIS
     INTO :SUMSOLL;
     SELECT SUM(BETRAG) from buchung
     WHERE ONRHABEN=0 and KHABEN=:IKNR and ONRSOLL=:IONR
     AND Datum<:DTBIS
     INTO :SUMHABEN;
    END /* DATUM */
   ELSE
    BEGIN /* WDATUM */
     SELECT SUM(BETRAG) from buchung
     WHERE ONRSOLL=0 and KSOLL=:IKNR and ONRHABEN=:IONR
     AND WDatum<:DTBIS
     INTO :SUMSOLL;
     SELECT SUM(BETRAG) from buchung
     WHERE ONRHABEN=0 and KHABEN=:IKNR and ONRSOLL=:IONR
     AND WDatum<:DTBIS
     INTO :SUMHABEN;
    END /* WDATUM */
   IF (SUMSOLL IS NULL) THEN
    SUMSOLL=0;
   IF (SUMHABEN IS NULL) THEN
    SUMHABEN=0;
   SALDO=SUMSOLL-SUMHABEN;
   SUSPEND;
  END /* 98000, 99990 */
 ELSE
  BEGIN
 select KKLASSE from konten where ONR=:IONR and KNR=:IKNR INTO KKLASSE;
 IF (KKLASSE<60) THEN
  BEGIN
   /*DATUM*/
   IF (BWDATUM<>'J') THEN
    BEGIN
     SELECT SUM(BETRAG) from buchung
     WHERE ONRSOLL=:IONR and KSOLL=:IKNR
     AND Datum<:DTBIS
     INTO :SUMSOLL;
     SELECT SUM(BETRAG) from buchung
     WHERE ONRHABEN=:IONR and KHABEN=:IKNR
     AND Datum<:DTBIS
     INTO :SUMHABEN;
    END
   ELSE
    BEGIN
     SELECT SUM(BETRAG) from buchung
     WHERE ONRSOLL=:IONR and KSOLL=:IKNR
     AND WDatum<:DTBIS
     INTO :SUMSOLL;
     SELECT SUM(BETRAG) from buchung
     WHERE ONRHABEN=:IONR and KHABEN=:IKNR
     AND WDatum<:DTBIS
     INTO :SUMHABEN;
    END
   IF (SUMSOLL IS NULL) THEN
    SUMSOLL=0;
   IF (SUMHABEN IS NULL) THEN
    SUMHABEN=0;
  IF ((KKLASSE>=10 AND KKLASSE<=19) OR KKLASSE=27) THEN
   SALDO=SUMHABEN-SUMSOLL;
  ELSE
   SALDO=SUMSOLL-SUMHABEN;
  SUSPEND;
  END
 ELSE  /* DEB/KRED */
  BEGIN
   /*DATUM*/
   IF (BWDATUM<>'J') THEN
    BEGIN
     IF (BSOLL='J') THEN
      BEGIN /* Sollstelungen */
       SELECT SUM(BETRAG) from buchung
       WHERE ONRSOLL=:IONR and KSOLL=:IKNR
       AND Datum<:DTBIS
       INTO :SUMSOLL;
       SELECT SUM(BETRAG) from buchung
       WHERE ONRHABEN=:IONR and KHABEN=:IKNR
       AND Datum<:DTBIS
       INTO :SUMHABEN;
     END /* Sollstelungen */
    ELSE
     BEGIN /* keine Sollstelungen */
       SELECT SUM(BETRAG) from buchung
       WHERE ONRSOLL=:IONR and KSOLL=:IKNR
       AND Datum<:DTBIS
       AND OPBETRAG IS NULL
       INTO :SUMSOLL;
       SELECT SUM(BETRAG) from buchung
       WHERE ONRHABEN=:IONR and KHABEN=:IKNR
       AND Datum<:DTBIS
       AND OPBETRAG IS NULL
       INTO :SUMHABEN;
     END   /* keine Sollstelungen */
    END
   ELSE
    BEGIN /* WDATUM */
     IF (BSOLL='J') THEN
      BEGIN /* Sollstelungen */
       SELECT SUM(BETRAG) from buchung
       WHERE ONRSOLL=:IONR and KSOLL=:IKNR
       AND WDatum<:DTBIS
       INTO :SUMSOLL;
       SELECT SUM(BETRAG) from buchung
       WHERE ONRHABEN=:IONR and KHABEN=:IKNR
       AND WDatum<:DTBIS
       INTO :SUMHABEN;
     END /* Sollstelungen */
    ELSE
     BEGIN /* keine Sollstelungen */
       SELECT SUM(BETRAG) from buchung
       WHERE ONRSOLL=:IONR and KSOLL=:IKNR
       AND WDatum<:DTBIS
       AND OPBETRAG IS NULL
       INTO :SUMSOLL;
       SELECT SUM(BETRAG) from buchung
       WHERE ONRHABEN=:IONR and KHABEN=:IKNR
       AND WDatum<:DTBIS
       AND OPBETRAG IS NULL
       INTO :SUMHABEN;
     END   /* keine Sollstelungen */
    END   /* WDATUM */
   IF (SUMSOLL IS NULL) THEN
    SUMSOLL=0;
   IF (SUMHABEN IS NULL) THEN
    SUMHABEN=0;
  IF (KKLASSE=71) THEN
   SALDO=SUMSOLL-SUMHABEN;
  ELSE
   SALDO=SUMHABEN-SUMSOLL;
  SUSPEND;
  END /* DEB / KRED */
 END /* nicht 98000... */
END


-- Prozedur: KONTOSALDO_UST
CREATE OR ALTER PROCEDURE KONTOSALDO_UST
DECLARE VARIABLE MWST NUMERIC(15, 4);
DECLARE VARIABLE NETTO NUMERIC(15, 2);
DECLARE VARIABLE BRUTTO NUMERIC(15, 2);
DECLARE VARIABLE NR INTEGER;
DECLARE VARIABLE BFOUND CHAR(1);
DECLARE VARIABLE DTBDATUMVON DATE;
DECLARE VARIABLE DTBDATUMBIS DATE;
DECLARE VARIABLE DTWDATUMVON DATE;
DECLARE VARIABLE DTWDATUMBIS DATE;
BEGIN
 SALDONETTO=0;
 SALDO=0;
 NR=1;
 MWST1=0; MWST2=7; MWST3=16; MWST4=19; MWST5=0; MWST6=0;
 NETTO1=0; NETTO2=0; NETTO3=0; NETTO4=0; NETTO5=0; NETTO6=0;
 if (BWDATUM = 'N') then
  begin
   DTBDATUMVON = DTVON;
   DTBDATUMBIS = DTBIS;
   DTWDATUMVON = '01.01.1900';
   DTWDATUMBIS = '01.01.1900';
  end
 else
  begin
   DTWDATUMVON = DTVON;
   DTWDATUMBIS = DTBIS;
   DTBDATUMVON = '01.01.1900';
   DTBDATUMBIS = '01.01.1900';
  end 
 /* SOLL */
 FOR
  SELECT MWST, Sum(Betrag), SUM((Betrag*100) / (100+MWST)) from buchung
  WHERE ONRSOLL=:IONR and KSOLL=:IKNR
  AND ((DATUM>=:DTBDATUMVON and DATUM<=:DTBDATUMBIS) or (WDATUM>=:DTWDATUMVON and WDATUM<=:DTWDATUMBIS))
  GROUP BY MWST ORDER BY MWST
 INTO :MWST, BRUTTO, :NETTO
 DO
  BEGIN
   SALDONETTO = SALDONETTO + NETTO;
   SALDO = SALDO + BRUTTO;
   IF (NR = 1) THEN
    BEGIN
     NETTO1 = NETTO;
     MWST1 = MWST;
    END
   IF (NR = 2) THEN
    BEGIN
     NETTO2 = NETTO;
     MWST2 = MWST;
    END
   IF (NR = 3) THEN
    BEGIN
     NETTO3 = NETTO;
     MWST3 = MWST;
    END
   IF (NR = 4) THEN
    BEGIN
     NETTO4 = NETTO;
     MWST4 = MWST;
    END
   IF (NR = 5) THEN
    BEGIN
     NETTO5 = NETTO;
     MWST5 = MWST;
    END
   IF (NR = 6) THEN
    BEGIN
     NETTO6 = NETTO;
     MWST6 = MWST;
    END
   NR = NR + 1;
  END
 /*HABEN */
 FOR
  SELECT MWST, Sum(Betrag), SUM((Betrag*100) / (100+MWST)) from buchung
  WHERE ONRHABEN=:IONR and KHABEN=:IKNR
  AND ((DATUM>=:DTBDATUMVON and DATUM<=:DTBDATUMBIS) or (WDATUM>=:DTWDATUMVON and WDATUM<=:DTWDATUMBIS))
  GROUP BY MWST ORDER BY MWST
 INTO :MWST, BRUTTO, :NETTO
 DO
  BEGIN
   BFOUND = 'N';
   SALDONETTO = SALDONETTO - NETTO;
   SALDO = SALDO - BRUTTO;
   IF ((MWST = MWST1) AND (BFOUND = 'N')) THEN
    BEGIN
     NETTO1 = NETTO1 - NETTO;
     BFOUND = 'J';
    END
   IF ((MWST = MWST2) AND (BFOUND = 'N')) THEN
    BEGIN
     NETTO2 = NETTO2 - NETTO;
     BFOUND = 'J';
    END
   IF ((MWST = MWST3) AND (BFOUND = 'N')) THEN
    BEGIN
     NETTO3=NETTO3 - NETTO;
     BFOUND = 'J';
    END
   IF ((MWST = MWST4) AND (BFOUND = 'N')) THEN
    BEGIN
     NETTO4 = NETTO4 - NETTO;
     BFOUND = 'J';
    END
   IF ((MWST = MWST5) AND (BFOUND = 'N')) THEN
    BEGIN
     NETTO5 = NETTO5 - NETTO;
     BFOUND = 'J';
    END
   IF ((MWST = MWST6) AND (BFOUND = 'N')) THEN
    BEGIN
     NETTO6 = NETTO6 - NETTO;
     BFOUND = 'J';
    END
  END
 SUSPEND;
END


-- Prozedur: KONTOSTAENDE_AKTUALISIEREN
CREATE OR ALTER PROCEDURE KONTOSTAENDE_AKTUALISIEREN
DECLARE VARIABLE INR INTEGER;
DECLARE VARIABLE IONR INTEGER;
DECLARE VARIABLE IONRVON INTEGER;
DECLARE VARIABLE IONRBIS INTEGER;
DECLARE VARIABLE SUMSOLL NUMERIC(15, 2);
DECLARE VARIABLE SUMHABEN NUMERIC(15, 2);
DECLARE VARIABLE KSTAND NUMERIC(15, 2);
DECLARE VARIABLE IKNR INTEGER;
DECLARE VARIABLE IKKLASSE INTEGER;
DECLARE VARIABLE DVON DATE;
DECLARE VARIABLE DBIS DATE;
DECLARE VARIABLE NTMP1 NUMERIC(15, 2);
DECLARE VARIABLE NTMP2 NUMERIC(15, 2);
BEGIN
 /* ONR setzen */
 IF (IONR2 = -1) THEN
  BEGIN
   IONRVON = 0;
   IONRBIS = 999; 
  END
 ELSE
  BEGIN
   IONRVON = IONR2;
   IONRBIS = IONR2;  
  END

 /* Kontostand aktualisieren */
 FOR
  SELECT ONR, KNR, KKLASSE, KBRUTTO, KBRUTTOWJ FROM KONTEN WHERE ONR>=:IONRVON AND ONR<=:IONRBIS and KKLASSE>19
 INTO :IONR, :IKNR, :IKKLASSE, :NTMP1, :NTMP2
 DO
  begin  
   Select Sum(Betrag) from buchung where ONRSOLL=:IONR and KSOLL=:IKNR INTO :SUMSOLL;
   Select Sum(Betrag) from buchung where ONRHABEN=:IONR and KHABEN=:IKNR INTO :SUMHABEN;
   IF (SUMSOLL IS NULL) then SUMSOLL=0;
   IF (SUMHABEN IS NULL) then SUMHABEN=0;
   IF (NTMP1 IS NULL) then NTMP1=0;
   IF (NTMP2 IS NULL) then NTMP2=0;    
   IF (IKKLASSE=27 OR IKKLASSE=71 OR (IKKLASSE>=10 and IKKLASSE<=19)) THEN
    KSTAND=SUMHABEN-SUMSOLL;
   ELSE
    KSTAND=SUMSOLL-SUMHABEN;
   /* */
   IF ((KSTAND <> NTMP1) OR (KSTAND <> NTMP2)) THEN
    Update konten set KBrutto=:KSTAND, KBRUTTOWJ=:KSTAND where ONR=:IONR and KNR=:IKNR;
  end 
   
 /* Kontostand WS aktualisieren -> Sachkonten  BK-Zeitraum*/
 For
  SELECT KONTEN.ONR, KNR, KKLASSE, BKVON, BKBIS, KBRUTTOWJ FROM KONTEN, OBJEKTE where KONTEN.ONR=OBJEKTE.ONR AND KKLASSE<=19 AND KKSTNR<>2 AND (KONTEN.ONR>=:IONRVON AND KONTEN.ONR<=:IONRBIS) ORDER BY ONR, KNR
 INTO :IONR, :IKNR, :IKKLASSE, :DVON, :DBIS, :NTMP1
 do
  begin
   Select Sum(Betrag) from buchung where ONRSOLL=:IONR and KSOLL=:IKNR and (Datum>=:DVON and Datum<=:DBIS) INTO SUMSOLL;
   Select Sum(Betrag) from buchung where ONRHABEN=:IONR and KHABEN=:IKNR and (Datum>=:DVON and Datum<=:DBIS) INTO SUMHABEN;
   IF (SUMSOLL IS NULL) then SUMSOLL=0;
   IF (SUMHABEN IS NULL) then SUMHABEN=0;
   IF (NTMP1 IS NULL) then NTMP1=0;
   IF (IKKLASSE=27 OR IKKLASSE=71 OR (IKKLASSE>=10 and IKKLASSE<=19)) THEN
    KSTAND=SUMHABEN-SUMSOLL;
   ELSE
    KSTAND=SUMSOLL-SUMHABEN;
   /* */
   IF (KSTAND <> NTMP1) THEN   
    Update konten set KBruttoWJ=:KSTAND where ONR=:IONR and KNR=:IKNR;
  end
  
 /* Kontostand WS aktualisieren -> Sachkonten  HK-Zeitraum*/
 For
  SELECT KONTEN.ONR, KNR, KKLASSE, HKVON, HKBIS, KBRUTTOWJ FROM KONTEN, OBJEKTE where KONTEN.ONR=OBJEKTE.ONR AND KKLASSE<=19 AND KKSTNR=2 AND (KONTEN.ONR>=:IONRVON AND KONTEN.ONR<=:IONRBIS) ORDER BY ONR, KNR
 INTO :IONR, :IKNR, :IKKLASSE, :DVON, :DBIS, :NTMP1
 do
  begin
   Select Sum(Betrag) from buchung where ONRSOLL=:IONR and KSOLL=:IKNR and (Datum>=:DVON and Datum<=:DBIS) INTO SUMSOLL;
   Select Sum(Betrag) from buchung where ONRHABEN=:IONR and KHABEN=:IKNR and (Datum>=:DVON and Datum<=:DBIS) INTO SUMHABEN;
   IF (SUMSOLL IS NULL) then SUMSOLL=0;
   IF (SUMHABEN IS NULL) then SUMHABEN=0;
   IF (NTMP1 IS NULL) then NTMP1=0;
   IF (IKKLASSE=27 OR IKKLASSE=71 OR (IKKLASSE>=10 and IKKLASSE<=19)) THEN
    KSTAND=SUMHABEN-SUMSOLL;
   ELSE
    KSTAND=SUMSOLL-SUMHABEN;
   /* */
   IF (KSTAND <> NTMP1) THEN   
    Update konten set KBruttoWJ=:KSTAND where ONR=:IONR and KNR=:IKNR;
  end
  
 /* BANKEN */
 for 
  select sum(kbrutto), banknr from konten, banken where banknr is not null and nr=banknr group by banknr, kstand having sum(kbrutto)<>kstand
 into :KSTAND, :IKNR
 do
  begin
   update banken set KSTAND=:KSTAND where NR=:IKNR;
  end 
END


-- Prozedur: KONTOSTAENDE_AKTUALISIERENOBJ
CREATE OR ALTER PROCEDURE KONTOSTAENDE_AKTUALISIERENOBJ
declare variable INR Integer;
declare variable IONR Integer;
declare variable SUMSOLL NUMERIC (15,2);
declare variable SUMHABEN NUMERIC (15,2);
declare variable KSTAND NUMERIC (15,2);
declare variable IKNR Integer;
declare variable IKKLASSE Integer;
declare variable DVON DATE;
declare variable DBIS DATE;
BEGIN
/* Kontostand aktualisieren */
For Select ONR, KNR, KKLASSE from konten where ONR=:SOLLONR
INTO :IONR, :IKNR, :IKKLASSE
do
begin
 Select Sum(Betrag) from buchung
 where ONRSOLL=:IONR and KSOLL=:IKNR
 INTO :SUMSOLL;
 Select Sum(Betrag) from buchung
 where ONRHABEN=:IONR and KHABEN=:IKNR
 INTO :SUMHABEN;
 IF (SUMSOLL IS NULL) then
  SUMSOLL=0;
 IF (SUMHABEN IS NULL) then
  SUMHABEN=0;
 IF (IKKLASSE=27 OR IKKLASSE=71 OR (IKKLASSE>=10 and IKKLASSE<=19)) THEN
  KSTAND=SUMHABEN-SUMSOLL;
 ELSE
  KSTAND=SUMSOLL-SUMHABEN;
 Update konten set KBrutto=:KSTAND, KBRUTTOWJ=:KSTAND where ONR=:IONR and KNR=:IKNR;
end
/* Kontostand WS aktualisieren -> Sachkonten  BK-Zeitraum*/
For Select ONR, KNR, KKLASSE from konten where ONR=:SOLLONR and KKLASSE <= 19 and KKSTNR<>2
INTO :IONR, :IKNR, :IKKLASSE
do
begin
 Select BKVON, BKBIS from Objekte
 where ONR=:IONR
 INTO :DVON, :DBIS;
 Select Sum(Betrag) from buchung
 where ONRSOLL=:IONR and KSOLL=:IKNR and (Datum>=:DVON and Datum<=:DBIS)
 INTO SUMSOLL;
 IF (SUMSOLL IS NULL) then
  SUMSOLL=0;
 Select Sum(Betrag) from buchung
 where ONRHABEN=:IONR and KHABEN=:IKNR and (Datum>=:DVON and Datum<=:DBIS)
 INTO SUMHABEN;
 IF (SUMHABEN IS NULL) then
  SUMHABEN=0;
 IF (IKKLASSE=27 OR IKKLASSE=71 OR (IKKLASSE>=10 and IKKLASSE<=19)) THEN
  KSTAND=SUMHABEN-SUMSOLL;
 ELSE
  KSTAND=SUMSOLL-SUMHABEN;
 Update konten set KBruttoWJ=:KSTAND where ONR=:IONR and KNR=:IKNR;
end
/* Kontostand WS aktualisieren -> Sachkonten  HK-Zeitraum*/
For Select ONR, KNR, KKLASSE from konten where ONR=:SOLLONR and KKLASSE <= 19 and KKSTNR=2
INTO :IONR, :IKNR, :IKKLASSE
do
begin
 Select HKVON, HKBIS from Objekte
 where ONR=:IONR
 INTO :DVON, :DBIS;
 Select Sum(Betrag) from buchung
 where ONRSOLL=:IONR and KSOLL=:IKNR and (Datum>=:DVON and Datum<=:DBIS)
 INTO SUMSOLL;
 IF (SUMSOLL IS NULL) then
  SUMSOLL=0;
 Select Sum(Betrag) from buchung
 where ONRHABEN=:IONR and KHABEN=:IKNR and (Datum>=:DVON and Datum<=:DBIS)
 INTO SUMHABEN;
 IF (SUMHABEN IS NULL) then
  SUMHABEN=0;
 IF (IKKLASSE=27 OR IKKLASSE=71 OR (IKKLASSE>=10 and IKKLASSE<=19)) THEN
  KSTAND=SUMHABEN-SUMSOLL;
 ELSE
  KSTAND=SUMSOLL-SUMHABEN;
 Update konten set KBruttoWJ=:KSTAND where ONR=:IONR and KNR=:IKNR;
end
/* BANKEN */
for select sum(kbrutto), banknr from konten where banknr is not null group by banknr
into :KSTAND, :IKNR do
 begin
  update banken set KSTAND=:KSTAND where NR=:IKNR;
 end
END


-- Prozedur: KONTOSTAND_AKTUALISIEREN
CREATE OR ALTER PROCEDURE KONTOSTAND_AKTUALISIEREN
declare variable DVON DATE;
declare variable DBIS DATE;
declare variable IKKSTNR INTEGER;
declare variable IKKLASSE INTEGER;
declare variable RBETRAG NUMERIC(15,2);
declare variable IM_WS CHAR(1);
BEGIN
 IF (KNR IS NOT NULL AND BETRAG<>0) THEN
  BEGIN
  /* VORZEICHEN SOLL SETZEN */
  IM_WS='J';
  IF ((ART>=10 AND ART<=19) OR (ART=27) OR (ART=71)) THEN
   BEGIN
    IF (ISSOLL='J') THEN
      RBETRAG=-BETRAG;
    ELSE
      RBETRAG=BETRAG;
   END
  ELSE
   BEGIN
    IF (ISSOLL='J') THEN
      RBETRAG=BETRAG;
    ELSE
      RBETRAG=-BETRAG;
   END
  IF (ART<=19) THEN
   BEGIN
    /* IM WIRTSCHAFTSJAHR? */
    SELECT KKSTNR, KKLASSE FROM KONTEN
    WHERE ONR = :ONR AND KNR = :KNR
    INTO :IKKSTNR, :IKKLASSE;
    IF (IKKSTNR <>2) then
     BEGIN
      SELECT BKVON, BKBIS from OBJEKTE
      WHERE ONR=:ONR
      INTO :DVON, :DBIS;
     END
    ELSE
     BEGIN
      SELECT HKVON, HKBIS from OBJEKTE
      WHERE ONR=:ONR
      INTO :DVON, :DBIS;
     end
    IF (NOT (DATUM>=:DVON and DATUM<=:DBIS)) THEN
     IM_WS='N';
   END
  IF (IM_WS='J' OR IKKLASSE>19) THEN
   UPDATE KONTEN SET KONTEN.KBRUTTO = KONTEN.KBRUTTO + :RBETRAG, KONTEN.KBRUTTOWJ = KONTEN.KBRUTTOWJ + :RBETRAG WHERE
          KONTEN.ONR = :ONR AND KONTEN.KNR = :KNR;
  ELSE
   UPDATE KONTEN SET KONTEN.KBRUTTO = KONTEN.KBRUTTO + :RBETRAG WHERE
          KONTEN.ONR = :ONR AND KONTEN.KNR = :KNR;
  /*   BANKKONTO KSTAND aktualisieren */
  IF (BANKNR IS NOT NULL) THEN
   UPDATE BANKEN SET BANKEN.KSTAND = BANKEN.KSTAND + :RBETRAG WHERE
          BANKEN.NR = :BANKNR;
 END
END


-- Prozedur: MITARBEITER_CRM
CREATE OR ALTER PROCEDURE MITARBEITER_CRM
DECLARE VARIABLE NAME VARCHAR(80);
DECLARE VARIABLE VORNAME VARCHAR(80);
BEGIN
FOR
 select Name, Vorname from mitarbeiter where id=:idm1 or id=:idm2 or id=:idm3 or id=:idm4 
  or id=:idm5 or id=:idm6 or id=:idm7 or id=:idm8 or id=:idm9 or id=:idm10 or id=:idm11 or id=:idm12
into :NAME, :VORNAME
DO
 begin
  if (NAME_VORNAME <> '') then 
   BEGIN
     NAME_VORNAME  = NAME_VORNAME || ', ';
     if (NAME<>'') THEN
      NAME_VORNAME = NAME_VORNAME || TRIM(NAME); 
     if (VORNAME<>'') THEN 
      NAME_VORNAME=NAME_VORNAME || ' ' || VORNAME;
   END
  ELSE 
  BEGIN
  NAME_VORNAME = TRIM(NAME);  
  if (VORNAME<>'') THEN
   if (NAME='') THEN
    NAME_VORNAME=VORNAME;
   else 
    NAME_VORNAME=NAME_VORNAME || ' ' || VORNAME;
   END
  end
  SUSPEND;
 
END


-- Prozedur: OFFENE_POSTEN_LISTE
CREATE OR ALTER PROCEDURE OFFENE_POSTEN_LISTE
DECLARE VARIABLE ONRSOLL INTEGER;
DECLARE VARIABLE ONRHABEN INTEGER;
DECLARE VARIABLE KSOLL INTEGER;
DECLARE VARIABLE KHABEN INTEGER;
DECLARE VARIABLE ARTSOLL INTEGER;
DECLARE VARIABLE ARTHABEN INTEGER;
DECLARE VARIABLE KSTRSOLL VARCHAR(15);
DECLARE VARIABLE KSTRHABEN VARCHAR(15);
BEGIN
 if (IONR=-1) then
  begin
   FOR SELECT
    Datum, ONRSOLL, KSOLL, KSTRSOLL, ARTSOLL, ONRHABEN, KHABEN, KSTRHABEN, ARTHABEN, TEXT, BNR, LBNR, OPBetrag, Betrag, 
      Mwst, SPLITNR, LASTERZEUGT, BELEGNR, ZZDATUM, MAHNSTUFE, ZULETZT_GEMAHNT from buchung
    WHERE (Datum>=:DTVON and Datum<=:DTBIS)
    AND (SPLITNR IS NULL)
    AND (OPBETRAG<>0)
   UNION
    SELECT Datum, ONRSOLL, KSOLL, KSTRSOLL, ARTSOLL, ONRHABEN, KHABEN, KSTRHABEN, ARTHABEN, TEXT, splitbuch.BNR, LBNR, splitbuch.OPBetrag, 
     splitbuch.Betrag, Mwst, SPLITNR, LASTERZEUGT, BELEGNR, ZZDATUM, MAHNSTUFE, ZULETZT_GEMAHNT from buchung, splitbuch
    WHERE (Datum>=:DTVON and Datum<=:DTBIS)
    AND (SPLITNR IS NOT NULL)
    AND (splitbuch.OPBETRAG<>0)
    and buchung.bnr=splitbuch.bnr
    INTO :DATUM, :ONRSOLL, :KSOLL, :KSTRSOLL, :ARTSOLL, :ONRHABEN, :KHABEN, :KSTRHABEN, :ARTHABEN, :TEXT, :BNR, :LBNR, :OPBETRAG, 
     :OPGESBETRAG, :MWST, :SPLITNR, :LASTERZEUGT, :BELEGNR, :ZZDATUM, :MAHNSTUFE, :ZULETZT_GEMAHNT
    DO
     BEGIN
      ZAHLUNG=OPGESBETRAG-OPBETRAG;
      IF (LASTERZEUGT IS NULL) THEN
       LASTERZEUGT=0;
      IF (MWST IS NULL) THEN
       MWST=0;       
      IF ((ARTSOLL>=60 AND ARTSOLL<=62) or (ARTHABEN>=60 AND ARTHABEN<=62)) THEN
       BEGIN
        ISDEBITOR=1;
        IF (ARTSOLL>=60 AND ARTSOLL<=62) THEN
         BEGIN
          ONR=ONRSOLL;
          KNR=KSOLL;
          KNRSTR=KSTRSOLL;
          KKLASSE=ARTSOLL;
         END
        ELSE
         BEGIN
          ONR=ONRHABEN;
          KNR=KHABEN;
          KNRSTR=KSTRHABEN;
          KKLASSE=ARTHABEN;
         END
        IF (LBNR IS NOT NULL) THEN
         BEGIN
          BEMERKUNG='DTA';
          TEXT='[S] ' || TEXT;
         END
        ELSE
         IF (SPLITNR IS NOT NULL) THEN
          BEGIN
           BEMERKUNG='OP..';
          END
         ELSE
          BEMERKUNG='OP';
        SUSPEND;
       END /* DEBITOREN OP */
      ELSE
      /* KREDITOREN OP */
      IF ((ARTSOLL=71 or ARTHABEN=71) and ((KSOLL>=:KNRVON and KSOLL<=:KNRBIS) or (KHABEN>=:KNRVON and KHABEN<=:KNRBIS))) THEN
       BEGIN
        ISDEBITOR=2;
        IF (ARTSOLL=71) THEN 
         BEGIN
          ONR=ONRHABEN;
          KNR=KSOLL;
          KNRSTR=KSTRSOLL;
          KKLASSE=ARTSOLL;
         END
        ELSE
         BEGIN
          ONR=ONRSOLL;
          KNR=KHABEN;
          KNRSTR=KSTRHABEN;
          KKLASSE=ARTHABEN;
         END
        LASTERZEUGT=-1;
        IF (LBNR IS NOT NULL) THEN
         BEGIN
          BEMERKUNG='DTA';
          TEXT='[S] ' || TEXT;
         END
        ELSE
         IF (SPLITNR IS NOT NULL) THEN
          BEGIN
           BEMERKUNG='OP..';
          END
         ELSE
          BEMERKUNG='OP';
        SUSPEND;
       END /* KREDITOREN OP */
     END
  end
 else
  begin
   FOR SELECT
    Datum, ONRSOLL, KSOLL, KSTRSOLL, ARTSOLL, ONRHABEN, KHABEN, KSTRHABEN, ARTHABEN, TEXT, BNR, LBNR, OPBetrag, 
     Betrag, Mwst, SPLITNR, LASTERZEUGT, BELEGNR, ZZDATUM, MAHNSTUFE, ZULETZT_GEMAHNT from buchung
    WHERE (ONRSOLL=:IONR OR ONRHABEN=:IONR)
    AND ((KSOLL>=:KNRVON AND KSOLL <=:KNRBIS) OR (KHABEN>=:KNRVON AND KHABEN <=:KNRBIS))
    AND (Datum>=:DTVON and Datum<=:DTBIS)
    AND (SPLITNR IS NULL)
    AND (OPBETRAG<>0)
   UNION
    SELECT Datum, ONRSOLL, KSOLL, KSTRSOLL, ARTSOLL, ONRHABEN, KHABEN, KSTRHABEN, ARTHABEN, TEXT, splitbuch.BNR, 
    LBNR, splitbuch.OPBetrag, splitbuch.Betrag, Mwst, SPLITNR, LASTERZEUGT, BELEGNR, ZZDATUM, MAHNSTUFE, ZULETZT_GEMAHNT from buchung, splitbuch
    WHERE (ONRSOLL=:IONR OR ONRHABEN=:IONR)
    AND ((KSOLL>=:KNRVON AND KSOLL <=:KNRBIS) OR (KHABEN>=:KNRVON AND KHABEN <=:KNRBIS))
    AND (Datum>=:DTVON and Datum<=:DTBIS)
    AND (SPLITNR IS NOT NULL)
    AND (splitbuch.OPBETRAG<>0)
    and buchung.bnr=splitbuch.bnr
    INTO :DATUM, :ONRSOLL, :KSOLL, :KSTRSOLL, :ARTSOLL, :ONRHABEN, :KHABEN, :KSTRHABEN, :ARTHABEN, :TEXT, :BNR, :LBNR, :OPBETRAG, 
      :OPGESBETRAG, :MWST, :SPLITNR, :LASTERZEUGT, :BELEGNR, :ZZDATUM, :MAHNSTUFE, :ZULETZT_GEMAHNT
    DO
     BEGIN
      ZAHLUNG=OPGESBETRAG-OPBETRAG;
      IF (LASTERZEUGT IS NULL) THEN
       LASTERZEUGT=0;
      IF (MWST IS NULL) THEN
       MWST=0;       
      IF ((ARTSOLL>=60 AND ARTSOLL<=62) or (ARTHABEN>=60 AND ARTHABEN<=62)) THEN
       BEGIN
        ISDEBITOR=1;
        IF (ARTSOLL>=60 AND ARTSOLL<=62) THEN
         BEGIN
          ONR=ONRSOLL;
          KNR=KSOLL;
          KNRSTR=KSTRSOLL;
          KKLASSE=ARTSOLL;
         END
        ELSE
         BEGIN
          ONR=ONRHABEN;
          KNR=KHABEN;
          KNRSTR=KSTRHABEN;
          KKLASSE=ARTHABEN;
         END
        IF (LBNR IS NOT NULL) THEN
         BEGIN
          BEMERKUNG='DTA';
          TEXT='[S] ' || TEXT;
         END
        ELSE
         IF (SPLITNR IS NOT NULL) THEN
          BEGIN
           BEMERKUNG='OP..';
          END
         ELSE
          BEMERKUNG='OP';
        SUSPEND;
       END /* DEBITOREN OP */
      ELSE
      /* KREDITOREN OP */
      IF (ARTSOLL=71 or ARTHABEN=71) THEN
       BEGIN
        ISDEBITOR=2;
        IF (ARTSOLL=71) THEN
         BEGIN
          ONR=ONRHABEN;
          KNR=KSOLL;
          KNRSTR=KSTRSOLL;
          KKLASSE=ARTSOLL;
         END
        ELSE
         BEGIN
          ONR=ONRSOLL;
          KNR=KHABEN;
          KNRSTR=KSTRHABEN;
          KKLASSE=ARTHABEN;
         END
        LASTERZEUGT=-1;
        IF (LBNR IS NOT NULL) THEN
         BEGIN
          BEMERKUNG='DTA';
          TEXT='[S] ' || TEXT;
         END
        ELSE
         IF (SPLITNR IS NOT NULL) THEN
          BEGIN
           BEMERKUNG='OP..';
          END
         ELSE
          BEMERKUNG='OP';
        SUSPEND;
       END /* KREDITOREN OP */
     END
  end
END


-- Prozedur: OFFENE_SOLLSTELLUNGEN
CREATE OR ALTER PROCEDURE OFFENE_SOLLSTELLUNGEN
DECLARE VARIABLE ONRSOLL INTEGER;
 DECLARE VARIABLE ONRHABEN INTEGER;
 DECLARE VARIABLE KSTRSOLL VARCHAR(15);
 DECLARE VARIABLE KSTRHABEN VARCHAR(15);
BEGIN
 FOR SELECT
  Datum, ONRSOLL, KSOLL, KSTRSOLL, ARTSOLL, ONRHABEN, KHABEN, KSTRHABEN, ARTHABEN, TEXT, BNR, LBNR, OPBetrag, Betrag, Mwst, SPLITNR, LASTERZEUGT, BANKNRSOLL, BANKNRHABEN, LASTBANK, GN from buchung
  WHERE OPBETRAG<>0 and LBNR IS NULL and SPLITNR IS NULL and LASTBANK = :BANKNR and (Datum>=:DTVON and Datum<=:DTBIS)
 UNION
  select Datum, ONRSOLL, KSOLL, KSTRSOLL, ARTSOLL, ONRHABEN, KHABEN, KSTRHABEN, ARTHABEN, TEXT, splitbuch.BNR, LBNR, splitbuch.OPBetrag, splitbuch.Betrag, Mwst, SPLITNR, LASTERZEUGT, BANKNRSOLL, BANKNRHABEN, LASTBANK, GN from buchung, splitbuch
  WHERE splitbuch.OPBETRAG<>0 and LBNR IS NULL and SPLITNR IS NOT NULL and LASTBANK = :BANKNR and (Datum>=:DTVON and Datum<=:DTBIS)
  AND buchung.bnr=splitbuch.bnr
  INTO :DATUM, :ONRSOLL, :KSOLL, :KSTRSOLL, :ARTSOLL, :ONRHABEN, :KHABEN, :KSTRHABEN, :ARTHABEN, :TEXT, :BNR, :LBNR, :OPBETRAG, :OPGESBETRAG, :MWST, :SPLITNR, :LASTERZEUGT, :BANKNRSOLL, :BANKNRHABEN, :LASTBANK, :GN
  DO
   BEGIN
    OPRESTBETRAG=OPGESBETRAG-OPBETRAG;
    IF (LASTERZEUGT IS NULL) THEN
     LASTERZEUGT=-1;
    IF ((ARTSOLL>=60 AND ARTSOLL<=64) or (ARTHABEN>=60 AND ARTHABEN<=64)) THEN
     BEGIN
      ISDEBITOR=1;
      IF (ARTSOLL>=60 AND ARTSOLL<=64) THEN
       BEGIN
        ONR=ONRSOLL;
        KNR=KSOLL;
        KKLASSE=ARTSOLL;
        KNROP=KHABEN;
        ARTOP=ARTHABEN;
       END
      ELSE
       BEGIN
        ONR=ONRHABEN;
        KNR=KHABEN;
        KKLASSE=ARTHABEN;
        KNROP=KSOLL;
        ARTOP=ARTSOLL;
       END
      EXECUTE PROCEDURE GET_SOLLSTBEZ(ONR, KNR, ISDEBITOR) RETURNING_VALUES BEZ;
      IF (ARTHABEN=13 OR ARTHABEN=18) THEN
       ISGN=1;
      ELSE
       ISGN=0;       
      SELECT SUBSTRING(KNRSTR || ' ' || KBEZ FROM 1 FOR 120) from konten where ONR=:ONR AND KNR=:KNR
       into :KNRSTR;
      SUSPEND;
     END /* DEBITOREN OP */
    ELSE
    /* KREDITOREN OP */
    IF (ARTSOLL=71 or ARTHABEN=71) THEN
     BEGIN
      ISDEBITOR=2;
      IF (ARTSOLL=71) THEN
       BEGIN
        ONR=ONRHABEN;
        KNR=KSOLL;
        KNRSTR=KSTRSOLL;
        KKLASSE=ARTSOLL;
        ARTOP=ARTHABEN;
        KNROP=KHABEN;
       END
      ELSE
       BEGIN
        ONR=ONRSOLL;
        KNR=KHABEN;
        KNRSTR=KSTRHABEN;
        KKLASSE=ARTHABEN;
        ARTOP=ARTSOLL;
        KNROP=KSOLL;
       END
      SELECT NAME || ', ' || STRASSE || ' ' || PLZ || ' ' || ORT || TEL1 from lieferan
      where LIEFKNR=:KNR
      INTO
      BEZ;
      LASTERZEUGT=-1;
      SELECT SUBSTRING(KNRSTR || ' ' || KBEZ FROM 1 FOR 120) from konten where ONR=0 AND KNR=:KNR
       into :KNRSTR;
      SUSPEND;
     END /* KREDITOREN OP */
   END
 /* JETZT NOCH DIE SLEV */
 FOR SELECT
  Datum, Betrag, TEXT, LBNR, ONR  from slevbuch
  WHERE OPBETRAG>0 AND BANKNR=:BANKNR and (Datum>=:DTVON and Datum<=:DTBIS)
  INTO :DATUM, :OPBETRAG, :TEXT, :LBNR, :ONR
  DO
   BEGIN
    BNR=LBNR;
    LASTERZEUGT=1;
    ISDEBITOR=1;
    OPRESTBETRAG=0;
    OPGESBETRAG=OPBETRAG;
    OPRESTBETRAG=OPGESBETRAG-OPBETRAG;
    BEZ='Sammel-Lastschriftseinzug (DTA)';
    IF (ONR IS NULL or ONR=0) then
     ONR=NULL;
    KNR=NULL;
    KNRSTR=NULL;
    KKLASSE=NULL;
    SUSPEND;
   END
END


-- Prozedur: OFFENE_SOLLSTELLUNGEN_DIREKT
CREATE OR ALTER PROCEDURE OFFENE_SOLLSTELLUNGEN_DIREKT
DECLARE VARIABLE ONRSOLL INTEGER;
 DECLARE VARIABLE ONRHABEN INTEGER;
 DECLARE VARIABLE KSOLL INTEGER;
 DECLARE VARIABLE KHABEN INTEGER;
 DECLARE VARIABLE ARTSOLL INTEGER;
 DECLARE VARIABLE ARTHABEN INTEGER;
 DECLARE VARIABLE KSTRSOLL VARCHAR(15);
 DECLARE VARIABLE KSTRHABEN VARCHAR(15);
BEGIN
 SUMMEOP=0;
 FOR SELECT
    Datum, ONRSOLL, KSOLL, KSTRSOLL, ARTSOLL, ONRHABEN, KHABEN, KSTRHABEN, ARTHABEN, TEXT, BNR, LBNR, OPBetrag, Betrag, Mwst, SPLITNR, LASTERZEUGT,GN, LASTBANK from buchung
    WHERE BNR=:IBNR and SPLITNR IS NULL
   UNION
    SELECT Datum, ONRSOLL, KSOLL, KSTRSOLL, ARTSOLL, ONRHABEN, KHABEN, KSTRHABEN, ARTHABEN, TEXT, splitbuch.BNR, LBNR, splitbuch.OPBetrag, splitbuch.Betrag, Mwst, SPLITNR, LASTERZEUGT, GN, LASTBANK from buchung, splitbuch
    WHERE buchung.bnr=:IBNR AND (SPLITNR IS NOT NULL)   and buchung.bnr=splitbuch.bnr
    INTO :DATUM, :ONRSOLL, :KSOLL, :KSTRSOLL, :ARTSOLL, :ONRHABEN, :KHABEN, :KSTRHABEN, :ARTHABEN, :TEXT, :BNR, :LBNR, :OPBETRAG, :OPGESBETRAG, :MWST, :SPLITNR, :LASTERZEUGT, :GN, :LASTBANK
    DO
     BEGIN
      OPRESTBETRAG=OPGESBETRAG-OPBETRAG;
      IF (LASTERZEUGT IS NULL) THEN
       LASTERZEUGT=0;
      IF ((ARTSOLL>=60 AND ARTSOLL<=64) or (ARTHABEN>=60 AND ARTHABEN<=64)) THEN
       BEGIN
        ISDEBITOR=1;
        IF (ARTSOLL>=60 AND ARTSOLL<=64) THEN
         BEGIN
          ONR=ONRSOLL;
          KNR=KSOLL;
          KNRSTR=KSTRSOLL;
          KKLASSE=ARTSOLL;
          KNROP=KHABEN;
          ARTOP=ARTHABEN;
         END
        ELSE
         BEGIN
          ONR=ONRHABEN;
          KNR=KHABEN;
          KNRSTR=KSTRHABEN;
          KKLASSE=ARTHABEN;
          KNROP=KSOLL;
          ARTOP=ARTSOLL;
         END
        SUMMEOP=SUMMEOP+OPGESBETRAG;
        IF (LBNR IS NOT NULL) THEN
         BEGIN
          BEMERKUNG='DTA';
          TEXT='[S] ' || TEXT;
         END
        ELSE
         IF (SPLITNR IS NOT NULL) THEN
          BEGIN
           BEMERKUNG='OP..';
          END
         ELSE
          BEMERKUNG='OP';
        SUSPEND;
       END /* DEBITOREN OP */
      ELSE
      /* KREDITOREN OP */
      IF (ARTSOLL=71 or ARTHABEN=71) THEN
       BEGIN
        ISDEBITOR=2;
        IF (ARTSOLL=71) THEN
         BEGIN
          ONR=ONRHABEN;
          KNR=KSOLL;
          KNRSTR=KSTRSOLL;
          KKLASSE=ARTSOLL;
          ARTOP=ARTHABEN;
          KNROP=KHABEN;
         END
        ELSE
         BEGIN
          ONR=ONRSOLL;
          KNR=KHABEN;
          KNRSTR=KSTRHABEN;
          KKLASSE=ARTHABEN;
          ARTOP=ARTSOLL;
          KNROP=KSOLL;
         END
        LASTERZEUGT=-1;
        SUMMEOP=SUMMEOP+OPGESBETRAG;
        IF (LBNR IS NOT NULL) THEN
         BEGIN
          BEMERKUNG='DTA';
          TEXT='[S] ' || TEXT;
         END
        ELSE
         IF (SPLITNR IS NOT NULL) THEN
          BEGIN
           BEMERKUNG='OP..';
          END
         ELSE
          BEMERKUNG='OP';
        SUSPEND;
       END /* KREDITOREN OP */
     END
END


-- Prozedur: OFFENE_SOLLSTELLUNGEN_KONTO
CREATE OR ALTER PROCEDURE OFFENE_SOLLSTELLUNGEN_KONTO
DECLARE VARIABLE ONRSOLL INTEGER;
DECLARE VARIABLE ONRHABEN INTEGER;
DECLARE VARIABLE KSOLL INTEGER;
DECLARE VARIABLE KHABEN INTEGER;
DECLARE VARIABLE ARTSOLL INTEGER;
DECLARE VARIABLE ARTHABEN INTEGER;
DECLARE VARIABLE KSTRSOLL VARCHAR(15);
DECLARE VARIABLE KSTRHABEN VARCHAR(15);
DECLARE VARIABLE IEIGNR INTEGER;
DECLARE VARIABLE IBEWNR INTEGER;
DECLARE VARIABLE OPKONTO_S VARCHAR(204);
DECLARE VARIABLE OPKONTO_H VARCHAR(204);
BEGIN
 SUMMEOP=0;
 /* */
 IF (BALLEEIG='N') THEN
  BEGIN
   /*ein Datensatz*/
   FOR
    SELECT Datum, ONRSOLL, KSOLL, KSTRSOLL, ARTSOLL, ONRHABEN, KHABEN, KSTRHABEN, ARTHABEN, TEXT, BNR, LBNR, buchung.OPBetrag, Betrag, Mwst, SPLITNR, LASTERZEUGT, LASTBANK, GN,WDATUM,(k1.KNRSTR || ' ' || k1.KBEZ) as KTOSTEXT,(k2.KNRSTR || ' ' || k2.KBEZ) as KTOHTEXT from buchung, konten K1, konten K2
    WHERE ((ONRHABEN=:IONR and KHABEN=:IKNR) or (ONRSOLL=:IONR and KSOLL=:IKNR)) AND (((buchung.opbetrag>0) and (:ISPOSITIV='J')) or ((buchung.opbetrag<0) and (:ISPOSITIV='N'))) and (LASTBANK IS NOT NULL) and SPLITNR IS NULL
    and k1.onr=buchung.onrsoll and K1.KNR=buchung.ksoll and k2.onr=buchung.onrhaben and K2.KNR=buchung.khaben
    UNION
    SELECT Datum, ONRSOLL, KSOLL, KSTRSOLL, ARTSOLL, ONRHABEN, KHABEN, KSTRHABEN, ARTHABEN, TEXT, splitbuch.BNR, LBNR, splitbuch.OPBetrag, splitbuch.Betrag, Mwst, SPLITNR, LASTERZEUGT, LASTBANK, GN,buchung.WDATUM,(k1.KNRSTR || ' ' || k1.KBEZ) as KTOSTEXT,(k2.KNRSTR || ' ' || k2.KBEZ) as KTOHTEXT from buchung, splitbuch, konten K1, konten K2
    WHERE ((ONRHABEN=:IONR and KHABEN=:IKNR) or (ONRSOLL=:IONR and KSOLL=:IKNR)) and (((splitbuch.opbetrag>0) and (:ISPOSITIV='J')) or ((splitbuch.opbetrag<0) and (:ISPOSITIV='N'))) AND (SPLITNR IS NOT NULL) and (LASTBANK IS NOT NULL) and buchung.bnr=splitbuch.bnr
    and k1.onr=buchung.onrsoll and K1.KNR=buchung.ksoll and k2.onr=buchung.onrhaben and K2.KNR=buchung.khaben 
   INTO :DATUM, :ONRSOLL, :KSOLL, :KSTRSOLL, :ARTSOLL, :ONRHABEN, :KHABEN, :KSTRHABEN, :ARTHABEN, :TEXT, :BNR, :LBNR, :OPBETRAG, :OPGESBETRAG, :MWST, :SPLITNR, :LASTERZEUGT, :LASTBANK, :GN, :WDATUM, :OPKONTO_S, :OPKONTO_H
   DO
   BEGIN
    OPRESTBETRAG=OPGESBETRAG-OPBETRAG;
    IF (LASTERZEUGT IS NULL) THEN
     LASTERZEUGT=0;
    IF ((ARTSOLL>=60 AND ARTSOLL<=64) or (ARTHABEN>=60 AND ARTHABEN<=64)) THEN
     BEGIN
      ISDEBITOR=1;
      IF (ARTSOLL>=60 AND ARTSOLL<=64) THEN
       BEGIN
        ONR=ONRSOLL;
        KNR=KSOLL;
        KNRSTR=KSTRSOLL;
        KKLASSE=ARTSOLL;
        KNROP=KHABEN;
        ARTOP=ARTHABEN;
       END
      ELSE
       BEGIN
        ONR=ONRHABEN;
        KNR=KHABEN;
        KNRSTR=KSTRHABEN;
        KKLASSE=ARTHABEN;
        KNROP=KSOLL;
        ARTOP=ARTSOLL;
       END
      SUMMEOP=SUMMEOP+OPGESBETRAG;
      IF (LBNR IS NOT NULL) THEN
       BEGIN
        BEMERKUNG='DTA';
        TEXT='[S] ' || TEXT;
       END
      ELSE
       IF (SPLITNR IS NOT NULL) THEN
        BEGIN
         BEMERKUNG='OP..';
        END
       ELSE
        BEMERKUNG='OP';
      SUSPEND;
     END /* DEBITOREN OP */
    ELSE
     /* KREDITOREN OP */
     IF (ARTSOLL=71 or ARTHABEN=71) THEN
      BEGIN
       ISDEBITOR=2;
       IF (ARTSOLL=71) THEN
        BEGIN
         ONR=ONRHABEN;
         KNR=KSOLL;
         KNRSTR=KSTRSOLL;
         KKLASSE=ARTSOLL;
         KNROP=KHABEN;
         ARTOP=ARTHABEN;
         OPKONTO=LEFT(OPKONTO_H, 104);
        END
       ELSE
        BEGIN
         ONR=ONRSOLL;
         KNR=KHABEN;
         KNRSTR=KSTRHABEN;
         KKLASSE=ARTHABEN;
         ARTOP=ARTSOLL;
         KNROP=KSOLL;
         OPKONTO=LEFT(OPKONTO_S, 104);
        END
       LASTERZEUGT=-1;
       SUMMEOP=SUMMEOP+OPGESBETRAG;
       IF (LBNR IS NOT NULL) THEN
        BEGIN
         BEMERKUNG='DTA';
         TEXT='[S] ' || TEXT;
        END
       ELSE
        IF (SPLITNR IS NOT NULL) THEN
         BEGIN
          BEMERKUNG='OP..';
         END
        ELSE
         BEMERKUNG='OP';
       IF (IBANKNR=LASTBANK) THEN
        SUSPEND;
      END /* KREDITOREN OP */ 
   END
  END
 ELSE
  BEGIN
   IF (IKNR >= 200000) THEN
    BEGIN
     SELECT EIGNR from eigentuemer where ONR=:IONR and KNR=:IKNR INTO :IEIGNR;
     FOR
      SELECT onr, knr from eigentuemer where eignr=:IEIGNR and ONR in (select onr from objbanken where BANKNR=:IBANKNR)
      INTO :IONR, :IKNR
     DO 
     BEGIN
      FOR
       SELECT Datum, ONRSOLL, KSOLL, KSTRSOLL, ARTSOLL, ONRHABEN, KHABEN, KSTRHABEN, ARTHABEN, TEXT, BNR, LBNR, buchung.OPBetrag, Betrag, Mwst, SPLITNR, LASTERZEUGT, LASTBANK, GN,WDATUM,(k1.KNRSTR || ' ' || k1.KBEZ) as KTOSTEXT,(k2.KNRSTR || ' ' || k2.KBEZ) as KTOHTEXT from buchung, konten K1, konten K2
       WHERE ((ONRHABEN=:IONR and KHABEN=:IKNR) or (ONRSOLL=:IONR and KSOLL=:IKNR)) AND (((buchung.opbetrag>0) and (:ISPOSITIV='J')) or ((buchung.opbetrag<0) and (:ISPOSITIV='N'))) and (LASTBANK IS NOT NULL) and SPLITNR IS NULL
       and k1.onr=buchung.onrsoll and K1.KNR=buchung.ksoll and k2.onr=buchung.onrhaben and K2.KNR=buchung.khaben
       UNION
       SELECT Datum, ONRSOLL, KSOLL, KSTRSOLL, ARTSOLL, ONRHABEN, KHABEN, KSTRHABEN, ARTHABEN, TEXT, splitbuch.BNR, LBNR, splitbuch.OPBetrag, splitbuch.Betrag, Mwst, SPLITNR, LASTERZEUGT, LASTBANK, GN,buchung.WDATUM,(k1.KNRSTR || ' ' || k1.KBEZ) as KTOSTEXT,(k2.KNRSTR || ' ' || k2.KBEZ) as KTOHTEXT from buchung, splitbuch, konten K1, konten K2
       WHERE ((ONRHABEN=:IONR and KHABEN=:IKNR) or (ONRSOLL=:IONR and KSOLL=:IKNR)) and (((splitbuch.opbetrag>0) and (:ISPOSITIV='J')) or ((splitbuch.opbetrag<0) and (:ISPOSITIV='N'))) AND (SPLITNR IS NOT NULL) and (LASTBANK IS NOT NULL) and buchung.bnr=splitbuch.bnr
       and k1.onr=buchung.onrsoll and K1.KNR=buchung.ksoll and k2.onr=buchung.onrhaben and K2.KNR=buchung.khaben 
      INTO :DATUM, :ONRSOLL, :KSOLL, :KSTRSOLL, :ARTSOLL, :ONRHABEN, :KHABEN, :KSTRHABEN, :ARTHABEN, :TEXT, :BNR, :LBNR, :OPBETRAG, :OPGESBETRAG, :MWST, :SPLITNR, :LASTERZEUGT, :LASTBANK, :GN, :WDATUM, :OPKONTO_S, :OPKONTO_H
      DO
      BEGIN
       OPRESTBETRAG=OPGESBETRAG-OPBETRAG;
       IF (LASTERZEUGT IS NULL) THEN
        LASTERZEUGT=0;
       IF ((ARTSOLL>=60 AND ARTSOLL<=64) or (ARTHABEN>=60 AND ARTHABEN<=64)) THEN
        BEGIN
         ISDEBITOR=1;
         IF (ARTSOLL>=60 AND ARTSOLL<=64) THEN
          BEGIN
           ONR=ONRSOLL;
           KNR=KSOLL;
           KNRSTR=KSTRSOLL;
           KKLASSE=ARTSOLL;
           KNROP=KHABEN;
           ARTOP=ARTHABEN;
          END
         ELSE
          BEGIN
           ONR=ONRHABEN;
           KNR=KHABEN;
           KNRSTR=KSTRHABEN;
           KKLASSE=ARTHABEN;
           KNROP=KSOLL;
           ARTOP=ARTSOLL;
          END
         SUMMEOP=SUMMEOP+OPGESBETRAG;
         IF (LBNR IS NOT NULL) THEN
          BEGIN
           BEMERKUNG='DTA';
           TEXT='[S] ' || TEXT;
          END
         ELSE
          IF (SPLITNR IS NOT NULL) THEN
           BEGIN
            BEMERKUNG='OP..';
           END
          ELSE
           BEMERKUNG='OP';
         SUSPEND;
        END /* DEBITOREN OP */
       ELSE
        /* KREDITOREN OP */
        IF (ARTSOLL=71 or ARTHABEN=71) THEN
         BEGIN
          ISDEBITOR=2;
          IF (ARTSOLL=71) THEN
           BEGIN
            ONR=ONRHABEN;
            KNR=KSOLL;
            KNRSTR=KSTRSOLL;
            KKLASSE=ARTSOLL;
            KNROP=KHABEN;
            ARTOP=ARTHABEN;
            OPKONTO=LEFT(OPKONTO_H, 104);
           END
          ELSE
           BEGIN
            ONR=ONRSOLL;
            KNR=KHABEN;
            KNRSTR=KSTRHABEN;
            KKLASSE=ARTHABEN;
            ARTOP=ARTSOLL;
            KNROP=KSOLL;
            OPKONTO=LEFT(OPKONTO_S, 104);
           END
          LASTERZEUGT=-1;
          SUMMEOP=SUMMEOP+OPGESBETRAG;
          IF (LBNR IS NOT NULL) THEN
           BEGIN
            BEMERKUNG='DTA';
            TEXT='[S] ' || TEXT;
           END
          ELSE
           IF (SPLITNR IS NOT NULL) THEN
            BEGIN
             BEMERKUNG='OP..';
            END
           ELSE
            BEMERKUNG='OP';
          IF (IBANKNR=LASTBANK) THEN
           SUSPEND;
         END /* KREDITOREN OP */ 
      END
     END
    END 
  ELSE
    BEGIN
     SELECT BEWNR from bewohner where ONR=:IONR and KNR=:IKNR INTO :IBEWNR;
     FOR
      SELECT onr, knr from bewohner where bewnr=:IBEWNR and ONR in (select onr from objbanken where BANKNR=:IBANKNR)
      INTO :IONR, :IKNR
     DO 
     BEGIN
      FOR
       SELECT Datum, ONRSOLL, KSOLL, KSTRSOLL, ARTSOLL, ONRHABEN, KHABEN, KSTRHABEN, ARTHABEN, TEXT, BNR, LBNR, buchung.OPBetrag, Betrag, Mwst, SPLITNR, LASTERZEUGT, LASTBANK, GN,WDATUM,(k1.KNRSTR || ' ' || k1.KBEZ) as KTOSTEXT,(k2.KNRSTR || ' ' || k2.KBEZ) as KTOHTEXT from buchung, konten K1, konten K2
       WHERE ((ONRHABEN=:IONR and KHABEN=:IKNR) or (ONRSOLL=:IONR and KSOLL=:IKNR)) AND (((buchung.opbetrag>0) and (:ISPOSITIV='J')) or ((buchung.opbetrag<0) and (:ISPOSITIV='N'))) and (LASTBANK IS NOT NULL) and SPLITNR IS NULL
       and k1.onr=buchung.onrsoll and K1.KNR=buchung.ksoll and k2.onr=buchung.onrhaben and K2.KNR=buchung.khaben
       UNION
       SELECT Datum, ONRSOLL, KSOLL, KSTRSOLL, ARTSOLL, ONRHABEN, KHABEN, KSTRHABEN, ARTHABEN, TEXT, splitbuch.BNR, LBNR, splitbuch.OPBetrag, splitbuch.Betrag, Mwst, SPLITNR, LASTERZEUGT, LASTBANK, GN,buchung.WDATUM,(k1.KNRSTR || ' ' || k1.KBEZ) as KTOSTEXT,(k2.KNRSTR || ' ' || k2.KBEZ) as KTOHTEXT from buchung, splitbuch, konten K1, konten K2
       WHERE ((ONRHABEN=:IONR and KHABEN=:IKNR) or (ONRSOLL=:IONR and KSOLL=:IKNR)) and (((splitbuch.opbetrag>0) and (:ISPOSITIV='J')) or ((splitbuch.opbetrag<0) and (:ISPOSITIV='N'))) AND (SPLITNR IS NOT NULL) and (LASTBANK IS NOT NULL) and buchung.bnr=splitbuch.bnr
       and k1.onr=buchung.onrsoll and K1.KNR=buchung.ksoll and k2.onr=buchung.onrhaben and K2.KNR=buchung.khaben 
      INTO :DATUM, :ONRSOLL, :KSOLL, :KSTRSOLL, :ARTSOLL, :ONRHABEN, :KHABEN, :KSTRHABEN, :ARTHABEN, :TEXT, :BNR, :LBNR, :OPBETRAG, :OPGESBETRAG, :MWST, :SPLITNR, :LASTERZEUGT, :LASTBANK, :GN, :WDATUM, :OPKONTO_S, :OPKONTO_H
      DO
      BEGIN
       OPRESTBETRAG=OPGESBETRAG-OPBETRAG;
       IF (LASTERZEUGT IS NULL) THEN
        LASTERZEUGT=0;
       IF ((ARTSOLL>=60 AND ARTSOLL<=64) or (ARTHABEN>=60 AND ARTHABEN<=64)) THEN
        BEGIN
         ISDEBITOR=1;
         IF (ARTSOLL>=60 AND ARTSOLL<=64) THEN
          BEGIN
           ONR=ONRSOLL;
           KNR=KSOLL;
           KNRSTR=KSTRSOLL;
           KKLASSE=ARTSOLL;
           KNROP=KHABEN;
           ARTOP=ARTHABEN;
          END
         ELSE
          BEGIN
           ONR=ONRHABEN;
           KNR=KHABEN;
           KNRSTR=KSTRHABEN;
           KKLASSE=ARTHABEN;
           KNROP=KSOLL;
           ARTOP=ARTSOLL;
          END
         SUMMEOP=SUMMEOP+OPGESBETRAG;
         IF (LBNR IS NOT NULL) THEN
          BEGIN
           BEMERKUNG='DTA';
           TEXT='[S] ' || TEXT;
          END
         ELSE
          IF (SPLITNR IS NOT NULL) THEN
           BEGIN
            BEMERKUNG='OP..';
           END
          ELSE
           BEMERKUNG='OP';
         SUSPEND;
        END /* DEBITOREN OP */
       ELSE
        /* KREDITOREN OP */
        IF (ARTSOLL=71 or ARTHABEN=71) THEN
         BEGIN
          ISDEBITOR=2;
          IF (ARTSOLL=71) THEN
           BEGIN
            ONR=ONRHABEN;
            KNR=KSOLL;
            KNRSTR=KSTRSOLL;
            KKLASSE=ARTSOLL;
            KNROP=KHABEN;
            ARTOP=ARTHABEN;
            OPKONTO=LEFT(OPKONTO_H, 104);
           END
          ELSE
           BEGIN
            ONR=ONRSOLL;
            KNR=KHABEN;
            KNRSTR=KSTRHABEN;
            KKLASSE=ARTHABEN;
            ARTOP=ARTSOLL;
            KNROP=KSOLL;
            OPKONTO=LEFT(OPKONTO_S, 104);
           END
          LASTERZEUGT=-1;
          SUMMEOP=SUMMEOP+OPGESBETRAG;
          IF (LBNR IS NOT NULL) THEN
           BEGIN
            BEMERKUNG='DTA';
            TEXT='[S] ' || TEXT;
           END
          ELSE
           IF (SPLITNR IS NOT NULL) THEN
            BEGIN
             BEMERKUNG='OP..';
            END
           ELSE
            BEMERKUNG='OP';
          IF (IBANKNR=LASTBANK) THEN
           SUSPEND;
         END /* KREDITOREN OP */ 
      END
     END
    END
  END
END


-- Prozedur: OFFENE_SOLLSTELLUNGEN_OBJ
CREATE OR ALTER PROCEDURE OFFENE_SOLLSTELLUNGEN_OBJ
DECLARE VARIABLE ONRSOLL INTEGER;
 DECLARE VARIABLE ONRHABEN INTEGER;
 DECLARE VARIABLE KSTRSOLL VARCHAR(15);
 DECLARE VARIABLE KSTRHABEN VARCHAR(15);
 DECLARE VARIABLE IANZ INTEGER;
BEGIN
 FOR SELECT
  Datum, ONRSOLL, KSOLL, KSTRSOLL, ARTSOLL, ONRHABEN, KHABEN, KSTRHABEN, ARTHABEN, TEXT, BNR, LBNR, OPBetrag, Betrag, Mwst, SPLITNR, LASTERZEUGT, BANKNRSOLL, BANKNRHABEN, LASTBANK, GN from buchung
  WHERE OPBETRAG<>0 and LBNR IS NULL and SPLITNR IS NULL and (ONRSOLL = :ONR_IN or ONRHABEN=:ONR_IN) and (Datum>=:DTVON and Datum<=:DTBIS)
 UNION
  select Datum, ONRSOLL, KSOLL, KSTRSOLL, ARTSOLL, ONRHABEN, KHABEN, KSTRHABEN, ARTHABEN, TEXT, splitbuch.BNR, LBNR, splitbuch.OPBetrag, splitbuch.Betrag, Mwst, SPLITNR, LASTERZEUGT, BANKNRSOLL, BANKNRHABEN, LASTBANK, GN from buchung, splitbuch
  WHERE splitbuch.OPBETRAG<>0 and LBNR IS NULL and SPLITNR IS NOT NULL and (ONRSOLL = :ONR_IN or ONRHABEN=:ONR_IN) and (Datum>=:DTVON and Datum<=:DTBIS)
  AND buchung.bnr=splitbuch.bnr
  INTO :DATUM, :ONRSOLL, :KSOLL, :KSTRSOLL, :ARTSOLL, :ONRHABEN, :KHABEN, :KSTRHABEN, :ARTHABEN, :TEXT, :BNR, :LBNR, :OPBETRAG, :OPGESBETRAG, :MWST, :SPLITNR, :LASTERZEUGT, :BANKNRSOLL, :BANKNRHABEN, :LASTBANK, :GN
  DO
   BEGIN
    OPRESTBETRAG=OPGESBETRAG-OPBETRAG;
    IF (LASTERZEUGT IS NULL) THEN
     LASTERZEUGT=-1;
    IF ((ARTSOLL>=60 AND ARTSOLL<=64) or (ARTHABEN>=60 AND ARTHABEN<=64)) THEN
     BEGIN
      ISDEBITOR=1;
      IF (ARTSOLL>=60 AND ARTSOLL<=64) THEN
       BEGIN
        ONR=ONRSOLL;
        KNR=KSOLL;
        KKLASSE=ARTSOLL;
        KNROP=KHABEN;
        ARTOP=ARTHABEN;
       END
      ELSE
       BEGIN
        ONR=ONRHABEN;
        KNR=KHABEN;
        KKLASSE=ARTHABEN;
        KNROP=KSOLL;
        ARTOP=ARTSOLL;
       END
      EXECUTE PROCEDURE GET_SOLLSTBEZ(ONR, KNR, ISDEBITOR) RETURNING_VALUES BEZ;
      IF (ARTHABEN=13) THEN /*IF (ARTHABEN=13 OR ARTHABEN=18) THEN*/
       ISGN=1;
      ELSE
       BEGIN
        ISGN=GN;
       end
      SELECT KNRSTR || ' ' || KBEZ from konten where ONR=:ONR AND KNR=:KNR
       into :KNRSTR;
      SUSPEND;
     END /* DEBITOREN OP */
    ELSE
    /* KREDITOREN OP */
    IF (ARTSOLL=71 or ARTHABEN=71) THEN
     BEGIN
      ISDEBITOR=2;
      IF (ARTSOLL=71) THEN
       BEGIN
        ONR=ONRHABEN;
        KNR=KSOLL;
        KNRSTR=KSTRSOLL;
        KKLASSE=ARTSOLL;
        ARTOP=ARTHABEN;
        KNROP=KHABEN;
       END
      ELSE
       BEGIN
        ONR=ONRSOLL;
        KNR=KHABEN;
        KNRSTR=KSTRHABEN;
        KKLASSE=ARTHABEN;
        ARTOP=ARTSOLL;
        KNROP=KSOLL;
       END
      SELECT NAME || ', ' || STRASSE || ' ' || PLZ || ' ' || ORT || TEL1 from lieferan
      where LIEFKNR=:KNR
      INTO
      BEZ;
      LASTERZEUGT=-1;
      SELECT KNRSTR || ' ' || KBEZ from konten where ONR=0 AND KNR=:KNR
       into :KNRSTR;
      SUSPEND;
     END /* KREDITOREN OP */
   END
 /* JETZT NOCH DIE SLEV */
 FOR SELECT
  Datum, Betrag, TEXT, LBNR, ONR, BANKNR  from slevbuch
  WHERE OPBETRAG>0 and (Datum>=:DTVON and Datum<=:DTBIS)
  INTO :DATUM, :OPBETRAG, :TEXT, :LBNR, :ONR, :LASTBANK
  DO
   BEGIN
    BNR=LBNR;
    LASTERZEUGT=1;
    ISDEBITOR=1;
    OPRESTBETRAG=0;
    OPGESBETRAG=OPBETRAG;
    OPRESTBETRAG=OPGESBETRAG-OPBETRAG;
    BEZ='Sammel-Lastschriftseinzug (DTA)';
    IF (ONR IS NULL or ONR=0) then
     begin
      /* feststellen, ob mindestens eine mit ONR_IN vorhanden ist */
      ONR=NULL;
      select count(*) from buchung where LBNR=:LBNR and ((ONRSOLL=:ONR_IN) or (ONRHABEN=:ONR_IN)) into :IANZ;
      if (IANZ>0) then
       begin
        KNR=NULL;
        KNRSTR=NULL;
        KKLASSE=NULL;
        SUSPEND;
       end
     end
    else
     if (ONR=ONR_IN) then
      begin
       KNR=NULL;
       KNRSTR=NULL;
       KKLASSE=NULL;
       SUSPEND;
      end
   END
END


-- Prozedur: ONL_OFFENE_SOLLSTELLUNGEN
CREATE OR ALTER PROCEDURE ONL_OFFENE_SOLLSTELLUNGEN
DECLARE VARIABLE SUMMEOP NUMERIC(15, 2);
DECLARE VARIABLE ONRSOLL INTEGER;
DECLARE VARIABLE ONRHABEN INTEGER;
DECLARE VARIABLE KSTRSOLL VARCHAR(15);
DECLARE VARIABLE KSTRHABEN VARCHAR(15);
DECLARE VARIABLE WHGBEZ VARCHAR(25);
DECLARE VARIABLE SNAME VARCHAR(30);
DECLARE VARIABLE SVNAME VARCHAR(30);
DECLARE VARIABLE SOBEZ VARCHAR(100);
DECLARE VARIABLE ISPOSITIV CHAR(1);
DECLARE VARIABLE OPKONTOSTR VARCHAR(104);
DECLARE VARIABLE LFDBANKNR INTEGER;
DECLARE VARIABLE IBANKNR2 INTEGER;
DECLARE VARIABLE IBANKNR3 INTEGER;
DECLARE VARIABLE IBANKNR4 INTEGER;
DECLARE VARIABLE IBANKNR5 INTEGER;
DECLARE VARIABLE TMPTEXT VARCHAR(80);
BEGIN
 if (ISTATUS=1) then  /* DIREKT */
  BEGIN
   for select BNR, LBNR , SPLITNR, ONR, KNR, KKLASSE, KNRSTR, DATUM,
    TEXT, MWST, OPGESBETRAG, OPBETRAG, OPRESTBETRAG,
    LASTERZEUGT, ISDEBITOR, SUMMEOP, BEMERKUNG, ARTOP, KNROP, GN
   from OFFENE_SOLLSTELLUNGEN_DIREKT (:IBNR)
   INTO BNR, LBNR , SPLITNR, ONR, KNR, KKLASSE, KNRSTR, DATUM,
    TMPTEXT, MWST, OPGESBETRAG, OPBETRAG, OPRESTBETRAG,
    LASTERZEUGT, ISDEBITOR, SUMMEOP, BEMERKUNG, ARTOP, KNROP, GN
    DO
     BEGIN
      IF (ISDEBITOR=1) THEN
       KHABEN=KNROP;
      ELSE
       KSOLL=KNROP;
      EXECUTE PROCEDURE GET_SOLLSTBEZ(ONR, KNR, ISDEBITOR) RETURNING_VALUES BEZ;
      TEXT=TMPTEXT;
      IF (LBNR IS NULL) THEN
       SUSPEND;
     END
  END  /* DIREKT */
 ELSE
 if (ISTATUS=222) then  /* SLEV OP, mehrere */
  BEGIN
   FOR SELECT
   Datum, Betrag, TEXT, LBNR, ONR  from slevbuch
   where (OPBetrag >= :RBETRAG-0.01 and OPBetrag<=:RBETRAG+0.01)
   AND BANKNR=:BANKNR
   INTO :DATUM, :OPBETRAG, TMPTEXT, :LBNR, :ONR
   DO
    BEGIN
     LASTERZEUGT=1;
     ISDEBITOR=1;
     OPRESTBETRAG=0;
     OPGESBETRAG=OPBETRAG;
     OPRESTBETRAG=OPGESBETRAG-OPBETRAG;
     BEZ='Sammel-Lastschriftseinzug (DTA)';
     IF (ONR IS NULL or ONR=0) then
      ONR=NULL;
     KNR=NULL;
     KNRSTR=NULL;
     KKLASSE=NULL;
     TEXT=TMPTEXT;
     SUSPEND;
    END
  END /* SLEV OP mehrere */
 else
 if (ISTATUS=2) then  /* SLEV OP, eine */
  BEGIN
   FOR SELECT
   Datum, Betrag, TEXT, LBNR, ONR  from slevbuch
   where LBNR=:IBNR
   INTO :DATUM, :OPBETRAG, TMPTEXT, :LBNR, :ONR
   DO
    BEGIN
     LASTERZEUGT=1;
     ISDEBITOR=1;
     OPRESTBETRAG=0;
     OPGESBETRAG=OPBETRAG;
     OPRESTBETRAG=OPGESBETRAG-OPBETRAG;
     BEZ='Sammel-Lastschriftseinzug (DTA)';
     IF (ONR IS NULL or ONR=0) then
      ONR=NULL;
     KNR=NULL;
     KNRSTR=NULL;
     KKLASSE=NULL;
     TEXT=TMPTEXT;
     SUSPEND;
    END
  END /* SLEV eine */
 ELSE
  BEGIN
   /* BA2 bis BA5 setzen */
   IF (ISTATUS=3) THEN
    FOR select onr from objekte where (levbanknr=:BANKNR or levbanknr2=:BANKNR)
    into :IONR do
   IBANKNR2=NULL;
   IBANKNR3=NULL;
   IBANKNR4=NULL;
   IBANKNR5=NULL;
   for select banknr from objbanken where ONR=:IONR
   into :LFDBANKNR do
    begin
     IF (LFDBANKNR<>BANKNR) THEN
      BEGIN
       IF (IBANKNR2 IS NULL) THEN
        IBANKNR2=LFDBANKNR;
       ELSE
        IF (IBANKNR3 IS NULL) THEN
         IBANKNR3=LFDBANKNR;
        ELSE
         IF (IBANKNR4 IS NULL) THEN
          IBANKNR4=LFDBANKNR;
        ELSE
         IF (IBANKNR5 IS NULL) THEN
          IBANKNR5=LFDBANKNR;
      END
    end
   IF (:ISTATUS=3) THEN /*mehrere Eigentuemer = Alle OP der EigentÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼mer fÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼r Bank*/
    BEGIN
     /* ONR des Eigentuemers feststellen */
     for select onr, knr from eigentuemer
     where eignr=:eignr and onr in (select onr from objbanken where banknr=:BANKNR)
     INTO :IONR, :IKNR
     DO
      BEGIN
       IF (SOLL_HABEN='H') THEN
        ISPOSITIV='J';
       ELSE
        ISPOSITIV='N';
       for
       select BNR, LBNR, SPLITNR, ONR, KNR, KKLASSE, KNRSTR, DATUM, TEXT, MWST, OPGESBETRAG, OPBETRAG, OPRESTBETRAG,
              LASTERZEUGT, ISDEBITOR, SUMMEOP, BEMERKUNG, OPKONTO, ARTOP, KNROP, GN
       from OFFENE_SOLLSTELLUNGEN_KONTO (:IONR, :IKNR, :ISPOSITIV, -1, 'N')
       INTO :BNR, :LBNR, :SPLITNR, :ONR, :KNR, :KKLASSE,:KNRSTR, :DATUM, TMPTEXT, :MWST, :OPGESBETRAG, :OPBETRAG, :OPRESTBETRAG,
            :LASTERZEUGT, :ISDEBITOR, :SUMMEOP, :BEMERKUNG, :OPKONTOSTR, :ARTOP, :KNROP, :GN
       DO
        IF (LBNR IS NULL) THEN
         BEGIN
          EXECUTE PROCEDURE GET_SOLLSTBEZ(ONR, KNR, ISDEBITOR) RETURNING_VALUES BEZ;
          KHABEN=KNROP;
          TEXT=TMPTEXT;
          SUSPEND;
         END
      END
    END
   ELSE
    BEGIN /* Offene Sollstellungen Konto */
     IF (SOLL_HABEN='H') THEN
      ISPOSITIV='J';
     ELSE
      ISPOSITIV='N';
     for
     select BNR, LBNR, SPLITNR, ONR, KNR, KKLASSE, KNRSTR, DATUM, TEXT, MWST, OPGESBETRAG, OPBETRAG, OPRESTBETRAG,
          LASTERZEUGT, ISDEBITOR, SUMMEOP, BEMERKUNG, OPKONTO, ARTOP, KNROP, GN
     from OFFENE_SOLLSTELLUNGEN_KONTO (:IONR, :IKNR, :ISPOSITIV, :BANKNR, 'N')
     INTO :BNR, :LBNR, :SPLITNR, :ONR, :KNR, :KKLASSE,:KNRSTR, :DATUM, TMPTEXT, :MWST, :OPGESBETRAG, :OPBETRAG, :OPRESTBETRAG,
          :LASTERZEUGT, :ISDEBITOR, :SUMMEOP, :BEMERKUNG, :OPKONTOSTR, :ARTOP, :KNROP, :GN
     DO
      IF (LBNR IS NULL) THEN
       BEGIN
        IF (ISDEBITOR=1) THEN
         KHABEN=KNROP;
        ELSE
         KSOLL=KNROP;
        EXECUTE PROCEDURE GET_SOLLSTBEZ(ONR, KNR, ISDEBITOR) RETURNING_VALUES BEZ;
        TEXT=TMPTEXT;
        SUSPEND;
       END
    END
  END
END


-- Prozedur: RUECKLAGEN_GESAMT_ABR
CREATE OR ALTER PROCEDURE RUECKLAGEN_GESAMT_ABR
DECLARE VARIABLE SUM_IST NUMERIC(18, 2);
DECLARE VARIABLE NETTO NUMERIC(18, 2);
DECLARE VARIABLE SUM_SOLL NUMERIC(18, 2);
DECLARE VARIABLE SUM_RLP NUMERIC(18, 2);
DECLARE VARIABLE ERST_DATUM DATE;
DECLARE VARIABLE DTVON_MINUS_1_TAG DATE;
BEGIN

/* TEMP 
IONR=7;
KNR_VZ=60110;
KNR_RLP=840;
DTVON='1.1.2018';
DTBIS='31.12.2018';
WDATUM='N'; 
 TEMP */

ERST_DATUM='01.01.1900';
DTVON_MINUS_1_TAG = :DTVON -1;
ONR = :IONR;
EXECUTE PROCEDURE KONTOSALDO_ALT (:ONR,:KNR_RLP, :DTVON, 'J','N') RETURNING_VALUES :SUM_RLP;
/* Saldenliste von Anfang bis DTVON -1 */
select * from EIGVZ_ZPOS_GES (:ONR,:ERST_DATUM, :DTVON_MINUS_1_TAG, 'N', :KNR_VZ - 60000, :WDATUM) into :SUM_SOLL, NETTO;  /* ISTVZ = N */ 
IF (SUM_SOLL IS NULL) then
 SUM_SOLL = 0;
select * from EIGVZ_ZPOS_GES (:ONR,:ERST_DATUM, :DTVON_MINUS_1_TAG, 'J', :KNR_VZ - 60000, :WDATUM) into :SUM_IST, NETTO;  /* ISTVZ = J */  
IF (SUM_IST IS NULL) then
 SUM_IST = 0;   
/*
   ANFSTAND_SOLL = alle Sollstellungen aller EigentÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼mer laut Saldenliste
                   zzgl. alle Buchungen auf dem 840er Konto
*/
AB_SOLL_GES = :SUM_SOLL + :SUM_RLP;
/*
  ANFSTAND_IST  = alle Zahlungen der EigentÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼mer fÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼r diese RL-Position aus Saldenliste  +  EB-Wert 
*/
AB_IST_GES = :SUM_IST + :SUM_RLP;
AB_RUECKSTAND_GES = AB_SOLL_GES - AB_IST_GES;
/*
  ZUF_SOLL   
  ZUF_IST  =  alle Buchungen der Eigentuemer fÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼r diese RL-Position aus Saldenliste
*/
select * from EIGVZ_ZPOS_GES (:ONR,:DTVON, :DTBIS, 'N', :KNR_VZ - 60000, :WDATUM) into :ZUF_SOLL_GES, NETTO;  /* ISTVZ = N */ 
IF (ZUF_SOLL_GES IS NULL) then
 ZUF_SOLL_GES = 0;
select * from EIGVZ_ZPOS_GES (:ONR,:DTVON, :DTBIS, 'J', :KNR_VZ - 60000, :WDATUM) into :ZUF_IST_GES, NETTO;  /* ISTVZ = J */  
IF (ZUF_IST_GES IS NULL) then
 ZUF_IST_GES = 0;
ZUF_RUECKSTAND_GES = ZUF_SOLL_GES - ZUF_IST_GES; 
SUSPEND;
END


-- Prozedur: RUECKL_KONTROLL
CREATE OR ALTER PROCEDURE RUECKL_KONTROLL
DECLARE VARIABLE LBNR INTEGER;
DECLARE VARIABLE OPBETRAG NUMERIC(18, 2);
DECLARE VARIABLE DTWVON DATE;
DECLARE VARIABLE DTWBIS DATE;
DECLARE VARIABLE DTTEMPVON DATE;
DECLARE VARIABLE DTTEMPBIS DATE;
DECLARE VARIABLE KENTN INTEGER;
DECLARE VARIABLE KSONDERZUF INTEGER;
DECLARE VARIABLE KSONDERENTN INTEGER;
DECLARE VARIABLE KNRP INTEGER;
DECLARE VARIABLE KNRA INTEGER;
DECLARE VARIABLE RUECKPOSNR INTEGER;
BEGIN

  /* ART = 0 im WIPL */
  /* ART = 1 Nachzahlungen */
  /* ART = 2 Abgrenzung */
  
  /* SOLL_IST 1=SOLLstellungen, 
              2=IST Zahlungen, 
              3=beides */

 /* TEMP 
  ONR = 998;
  KNRVON = 200100;
  KNRBIS = 299999;
  DTVON = '1.1.2020';
  DTBIS = '31.12.2020';
  ZPOS=110;
  SOLL_IST=3; 
  ISTVZ_WDATUM = 'J'; */
  
  if (ISTVZ_WDATUM = 'N') THEN
   BEGIN
    DTWVON='1.1.0001';
    DTWBIS='31.12.9999';
    DTTEMPVON=DTVON; 
    DTTEMPBIS=DTBIS;
   END
  ELSE
   BEGIN /* nach WDATUM auswerten */
    DTWVON=DTVON;
    DTWBIS=DTBIS;
    DTTEMPVON='1.1.0001';
    DTTEMPBIS='31.12.9999';
   END 

   /* Im Abrechnungszeitraum = ART =0 */  
   for select BETRAG_RL, BNR, BETRAG_RL_OFFEN  
   from RUECKL_KONTROLL_DETAIL(:ONR,:KNRVON,:KNRBIS,:DTTEMPVON,:DTTEMPBIS,:DTWVON, :DTWBIS, :ZPOS, :SOLL_IST,0,:ISTVZ_WDATUM) 
   into BETRAG_RL, BNR, BETRAG_RL_OFFEN 
   DO
    BEGIN
     ART =0;  /* im Abrechnungszeitraum */
     select DATUM, WDATUM, TEXT, BELEGNR, BETRAG, OPBETRAG, GN, KSOLL, KHABEN from buchung where BNR=:BNR 
      INTO :DATUM, :WDATUM, :TEXT, :BELEGNR, :BETRAG_GES, :OPBETRAG, :GN, :KSOLL, :KHABEN;
     IF (OPBETRAG IS NOT NULL) THEN
      BEGIN
       /* GESAMTBETRAG aktualisieren */
       SELECT BETRAG from SPLITBUCH where BNR=:BNR
       INTO 
        BETRAG_GES;
       BEMERKUNG='SOLL';
       ISOP = 1;
      end
     ELSE
      BEGIN
       ISOP =0; 
       BEMERKUNG='IST';
      END 
     SUSPEND;
    END 
    
 /* ABGRENZUNGEN */   
 if (ISTVZ_WDATUM = 'J') THEN  
  begin
   /* SOLL_IST = 2;  Abgrenzungen sind nur IST-Zahlungen */
   /* 
   /* WDATUM < Abrechnungszeitraum = Nachzahlungen, BDATUM im Abrechnungszeitraum   */ 
   /*       */  
   ART =1;  /* Nachzahlung */
   for select BETRAG_RL, BNR, BETRAG_RL_OFFEN  
   from RUECKL_KONTROLL_DETAIL(:ONR,:KNRVON,:KNRBIS,:DTVON,:DTBIS, '01.01.0001', :DTVON-1, :ZPOS, 2,:ART,:ISTVZ_WDATUM) 
   into BETRAG_RL, BNR, BETRAG_RL_OFFEN 
   DO
    BEGIN
     select DATUM, WDATUM, TEXT, BELEGNR, BETRAG, OPBETRAG, GN, KSOLL, KHABEN from buchung where BNR=:BNR 
      INTO :DATUM, :WDATUM, :TEXT, :BELEGNR, :BETRAG_GES, :OPBETRAG, :GN, :KSOLL, :KHABEN;
     ISOP=0; 
     BEMERKUNG='IST';
     SUSPEND;
    END   
   /* 
   /* WDATUM < Abrechnungszeitraum = Nachzahlungen, BDATUM > DTBIS   */ 
   /*                                                */
   ART =1;  /* Nachzahlung */
   for select BETRAG_RL, BNR, BETRAG_RL_OFFEN  
   from RUECKL_KONTROLL_DETAIL(:ONR,:KNRVON,:KNRBIS,:DTBIS+1,'31.12.9999', '01.01.0001', :DTVON-1, :ZPOS, 2,:ART,:ISTVZ_WDATUM) 
   into BETRAG_RL, BNR, BETRAG_RL_OFFEN 
   DO
    BEGIN
     select DATUM, WDATUM, TEXT, BELEGNR, BETRAG, OPBETRAG, GN, KSOLL, KHABEN from buchung where BNR=:BNR 
      INTO :DATUM, :WDATUM, :TEXT, :BELEGNR, :BETRAG_GES, :OPBETRAG, :GN, :KSOLL, :KHABEN;
     ISOP=0; 
     BEMERKUNG='IST';
     SUSPEND;
    END  
   /* 
   /* WDATUM > Abrechnungszeitraum d.h. im Abrechnungszeitraum fÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼r nÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤chstes Jahr schon erhalten   */ 
   /*                              */
   ART =2;  /* Abgrenzung */
   for select BETRAG_RL, BNR, BETRAG_RL_OFFEN  
   from RUECKL_KONTROLL_DETAIL(:ONR,:KNRVON,:KNRBIS,:DTVON,:DTBIS, :DTBIS+1, '31.12.9999', :ZPOS, 2,:ART,:ISTVZ_WDATUM) 
   into BETRAG_RL, BNR, BETRAG_RL_OFFEN 
   DO
    BEGIN
     select DATUM, WDATUM, TEXT, BELEGNR, BETRAG, OPBETRAG, GN, KSOLL, KHABEN from buchung where BNR=:BNR 
      INTO :DATUM, :WDATUM, :TEXT, :BELEGNR, :BETRAG_GES, :OPBETRAG, :GN, :KSOLL, :KHABEN;
     ISOP=0; 
     BEMERKUNG='IST';
     SUSPEND;
    END  
   /* 
   /* BDATUM < Abrechnungszeitraum, W-DATUM im Abrechnungszeitraum  */ 
   /*                              */
  ART =2;  /* Abgrenzung - */
  for select BETRAG_RL, BNR, BETRAG_RL_OFFEN  
   from RUECKL_KONTROLL_DETAIL(:ONR,:KNRVON,:KNRBIS,'01.01.0001',:DTVON-1, :DTVON, :DTBIS, :ZPOS, 2,:ART,:ISTVZ_WDATUM) 
   into BETRAG_RL, BNR, BETRAG_RL_OFFEN 
   DO
    BEGIN
     select DATUM, WDATUM, TEXT, BELEGNR, BETRAG, OPBETRAG, GN, KSOLL, KHABEN from buchung where BNR=:BNR 
      INTO :DATUM, :WDATUM, :TEXT, :BELEGNR, :BETRAG_GES, :OPBETRAG, :GN, :KSOLL, :KHABEN;
     ISOP=0; 
     BEMERKUNG='IST';
     BETRAG_GES = - BETRAG_GES;
     BETRAG_RL = - BETRAG_RL;   
     SUSPEND;
    END 
   /* 
   /* BDATUM > Abrechnungszeitraum, W-DATUM im Abrechnungszeitraum oder davor  */ 
   /*                              */
  ART =2;  /* Abgrenzung -  */
  for select BETRAG_RL, BNR, BETRAG_RL_OFFEN  
   from RUECKL_KONTROLL_DETAIL(:ONR,:KNRVON,:KNRBIS,:DTBIS+1,'31.12.9999', '01.01.0001', :DTBIS, :ZPOS, 2,:ART,:ISTVZ_WDATUM) 
   into BETRAG_RL, BNR, BETRAG_RL_OFFEN 
   DO
    BEGIN
     select DATUM, WDATUM, TEXT, BELEGNR, BETRAG, OPBETRAG, GN, KSOLL, KHABEN from buchung where BNR=:BNR 
      INTO :DATUM, :WDATUM, :TEXT, :BELEGNR, :BETRAG_GES, :OPBETRAG, :GN, :KSOLL, :KHABEN;
     ISOP=0; 
     BEMERKUNG='IST';
     BETRAG_GES = - BETRAG_GES;
     BETRAG_RL = - BETRAG_RL;     
     SUSPEND;
    END 
    
   /* ABGRENZUNGEN KZUF, KENTN, KSONDERZUF...*/
   select KENTN,KSONDERZUF,KSONDERENTN,KNRP, NR from rueckpos where KONTO_VZ = 60000 + :ZPOS and ONR=:ONR
    into :KENTN,:KSONDERZUF,:KSONDERENTN,:KNRP, :RUECKPOSNR;   
   /* ABGRENZUNG + fuer KENTN und KSONDERENT */ 
   for select DATUM, WDATUM, TEXT, BELEGNR, BETRAG, OPBETRAG, GN, KSOLL, KHABEN from buchung 
   where ONRSOLL=:ONR and (KHABEN = :KENTN OR KHABEN = :KSONDERENTN) and KSOLL = :KNRP 
   and (WDatum<:DTVON or WDatum>:DTBIS) and (Datum>=:DTVON and Datum<=:DTBIS) and ARTOP IS NULL
   INTO :DATUM, :WDATUM, :TEXT, :BELEGNR, :BETRAG_GES, :OPBETRAG, :GN, :KSOLL, :KHABEN
    DO
     BEGIN
      ISOP=0; 
      BETRAG_RL = BETRAG_GES;
      BETRAG_GES = - BETRAG_GES;
      BETRAG_RL = - BETRAG_RL;   
      BEMERKUNG='IST';
      IF (SOLL_IST>1) THEN
       SUSPEND;     
      BEMERKUNG='SOLL';
      ISOP=1;
      IF (SOLL_IST=1 or SOLL_IST=3) THEN
       SUSPEND;     
     END
   /*  
   /* ABGRENZUNG - fuer KENTN und KSONDERENT */    
   /*                                        */
   for select DATUM, WDATUM, TEXT, BELEGNR, BETRAG, OPBETRAG, GN, KSOLL, KHABEN from buchung 
   where ONRSOLL=:ONR and (KHABEN = :KENTN OR KHABEN = :KSONDERENTN) and KSOLL = :KNRP 
   and (Datum<:DTVON or Datum>:DTBIS) and (WDatum>=:DTVON and WDatum<=:DTBIS) and ARTOP IS NULL
   INTO :DATUM, :WDATUM, :TEXT, :BELEGNR, :BETRAG_GES, :OPBETRAG, :GN, :KSOLL, :KHABEN
    DO
     BEGIN
      ISOP=0; 
      BETRAG_RL = BETRAG_GES;
     /* BETRAG_GES = - BETRAG_GES;
      BETRAG_RL = - BETRAG_RL;     */
      BEMERKUNG='IST';
      IF (SOLL_IST>1) THEN
       SUSPEND;     
      BEMERKUNG='SOLL';
      ISOP=1;
      IF (SOLL_IST=1 or SOLL_IST=3) THEN
       SUSPEND;     
     END
   /* ABGRENZUNG + fuer KSONDERZUF */ 
   for select DATUM, WDATUM, TEXT, BELEGNR, BETRAG, OPBETRAG, GN, KSOLL, KHABEN from buchung 
   where ONRSOLL=:ONR and (KSOLL = :KSONDERZUF OR KSOLL = :KSONDERZUF) and KHABEN = :KNRP 
   and (WDatum<:DTVON or WDatum>:DTBIS) and (Datum>=:DTVON and Datum<=:DTBIS) and ARTOP IS NULL
   INTO :DATUM, :WDATUM, :TEXT, :BELEGNR, :BETRAG_GES, :OPBETRAG, :GN, :KSOLL, :KHABEN
    DO
     BEGIN
      ISOP=0;
      BETRAG_RL = BETRAG_GES; 
      BEMERKUNG='IST';
      IF (SOLL_IST>1) THEN
       SUSPEND;     
      BEMERKUNG='SOLL';
      ISOP=1;
      IF (SOLL_IST=1 or SOLL_IST=3) THEN      
       SUSPEND;     
     END
   /* ABGRENZUNG - fuer KSONDERZUF */    
   for select DATUM, WDATUM, TEXT, BELEGNR, BETRAG, OPBETRAG, GN, KSOLL, KHABEN from buchung 
   where ONRSOLL=:ONR and (KSOLL = :KSONDERZUF OR KSOLL = :KSONDERZUF) and KHABEN = :KNRP 
   and (Datum<:DTVON or Datum>:DTBIS) and (WDatum>=:DTVON and WDatum<=:DTBIS) and ARTOP IS NULL
   INTO :DATUM, :WDATUM, :TEXT, :BELEGNR, :BETRAG_GES, :OPBETRAG, :GN, :KSOLL, :KHABEN
    DO
     BEGIN
      ISOP=0; 
      BETRAG_RL = BETRAG_GES;
      BETRAG_GES = - BETRAG_GES;
      BETRAG_RL = - BETRAG_RL;     
      BEMERKUNG='IST';
      IF (SOLL_IST>1) THEN
       SUSPEND;     
      BEMERKUNG='SOLL';
      ISOP=1;
      IF (SOLL_IST=1 or SOLL_IST=3) THEN
       SUSPEND;     
     END     
   
   /*                                        */  
   /* ABGRENZUNGEN ZINSEN, ZAST, SOLI...     */  
   /*                                        */
   for select KNR from rueckbkt where RUECKPOS=:RUECKPOSNR
   INTO :KNRA DO
    BEGIN
     /* + */
     for select DATUM, WDATUM, TEXT, BELEGNR, BETRAG, OPBETRAG, GN, KSOLL, KHABEN from buchung
                   where onrsoll=:ONR and ksoll=:KNRA and khaben=:KNRP
                   and (WDatum<:DTVON or WDatum>:DTBIS) and (Datum>=:DTVON and Datum<=:DTBIS)
      INTO :DATUM, :WDATUM, :TEXT, :BELEGNR, :BETRAG_GES, :OPBETRAG, :GN, :KSOLL, :KHABEN                   
     DO
      BEGIN
       ISOP=0; 
       BETRAG_RL = BETRAG_GES;
       BEMERKUNG='IST';
       IF (SOLL_IST>1) THEN
        SUSPEND;     
       BEMERKUNG='SOLL';
       ISOP=1;
       IF (SOLL_IST=1 or SOLL_IST=3) THEN
        SUSPEND;     
      END       
     /* - */
     for select DATUM, WDATUM, TEXT, BELEGNR, BETRAG, OPBETRAG, GN, KSOLL, KHABEN from buchung
                   where onrsoll=:ONR and ksoll=:KNRA and khaben=:KNRP
                   and (Datum<:DTVON or Datum>:DTBIS) and (WDatum>=:DTVON and WDatum<=:DTBIS)
      INTO :DATUM, :WDATUM, :TEXT, :BELEGNR, :BETRAG_GES, :OPBETRAG, :GN, :KSOLL, :KHABEN                   
     DO
      BEGIN
       ISOP=0; 
       BETRAG_RL = BETRAG_GES;
       BETRAG_GES = - BETRAG_GES;
       BETRAG_RL = - BETRAG_RL; 
       BEMERKUNG='IST';
       IF (SOLL_IST>1) THEN
        SUSPEND;     
       BEMERKUNG='SOLL';
       ISOP=1;
       IF (SOLL_IST=1 or SOLL_IST=3) THEN
        SUSPEND;     
      END       
      
      
  END    
      
             
    
  end /* abgrenzungen */
   

   

END


-- Prozedur: RUECKL_KONTROLL_DETAIL
CREATE OR ALTER PROCEDURE RUECKL_KONTROLL_DETAIL
DECLARE VARIABLE KSOLL NUMERIC(18, 2);
DECLARE VARIABLE ARTHABEN INTEGER;
DECLARE VARIABLE DTABRVON DATE;
DECLARE VARIABLE DTABRBIS DATE;
BEGIN

 /* SOLL_IST 1=SOLL,
             2=IST, 
             3=SOLL und IST */
 
  /* ART = 0 im WIPL */
  /* ART = 1 Nachzahlungen */
  /* ART = 2 Abgrenzung */

 /* TEMP 
  ONR = 998;
  KNRVON = 200100;
  KNRBIS = 209900;
  DTVON = '1.1.0001';
  DTBIS = '31.12.9999';
  DTWVON = '1.1.2019';
  DTWBIS = '31.12.2019';
  ZPOS=110;
  SOLL_IST=3; 
  ART = 0; */
 /* 
 /* Berechnung 
 */
 
   /*
   /* SOLL
   /*                      */
   IF ((SOLL_IST = 1 OR SOLL_IST = 3) AND (ART=0))  THEN
    BEGIN
    /* Sollstellungen KHABEN = VZART  BNR = OPNR nach BDATUM!*/
    if (ISTVZ_WDATUM = 'N') THEN
     BEGIN
      DTABRVON=DTVON; 
      DTABRBIS=DTBIS;
     END
    ELSE
     BEGIN /* nach WDATUM auswerten */
      DTABRVON=DTWVON;
      DTABRBIS=DTWBIS;
     END 
     for
      select OPNR, BETRAG, OPBETRAG from buchung
      where ((onrsoll=:onr) or (onrhaben=:onr)) 
       and (ksoll>=:knrvon and ksoll <= :knrbis)  
       AND (Datum >= :DTABRVON and Datum <= :DTABRBIS) 
      and Betrag<>0 and opbetrag is not null
      and  ARTHABEN = :ZPOS     
      into :BNR, :BETRAG_RL, BETRAG_RL_OFFEN
       DO
        begin
          SUSPEND;
        end
      END  
      
   /*   
   /* ZAHLUNGEN SPLIT */    
   /*                 */
   IF (SOLL_IST = 2 OR SOLL_IST = 3)  THEN
    BEGIN  
     for
      select buchung.BNR, buchzahl.BETRAG, KSOLL from buchung,buchzahl
      where (buchzahl.bnr=buchung.bnr) and ((onrsoll=:ONR) or (onrhaben=:ONR)) and  
      ((ksoll>=:knrvon and ksoll<=:knrbis) or (khaben>=:knrvon and khaben<=:knrbis)) 
       AND (Datum >= :DTVON and Datum <= :DTBIS) AND (WDATUM>=:DTWVON and WDatum <= :DTWBIS) 
       and buchzahl.Betrag<>0
      and  buchzahl.artop = :ZPOS     
      into :BNR, :BETRAG_RL, :KSOLL
       DO
        begin
         if (ksoll>=:knrvon and ksoll<=:knrbis) then
          BETRAG_RL = - BETRAG_RL;
         BETRAG_RL_OFFEN = 0;
         SUSPEND;
        end    
      /* ZAHLUNGEN KEIN SPLIT */    
      for select BNR, BETRAG, KSOLL from buchung
      where ((onrsoll=:onr) or (onrhaben=:onr)) and  ((ksoll>=:knrvon and ksoll<=:knrbis) or (khaben>=:knrvon and khaben<=:knrbis))
       AND (Datum >= :DTVON and Datum <= :DTBIS) AND (WDATUM>=:DTWVON and WDatum <= :DTWBIS) 
       and Betrag<>0 and opbetrag is null and splitnr is null and artop is not null and artop<>0 
      and  artop = :ZPOS     
      into :BNR, :BETRAG_RL,:KSOLL
       DO
        begin
         if (ksoll>=:knrvon and ksoll<=:knrbis) then
          BETRAG_RL = - BETRAG_RL;
         BETRAG_RL_OFFEN = 0;          
         SUSPEND;
        end   
    END 
END


-- Prozedur: SALDENLISTE_NEU
CREATE OR ALTER PROCEDURE SALDENLISTE_NEU
BEGIN

 /* TEMP 
 IONR=7;
 DTVON = '1.1.2018';
 DTBIS = '31.12.2018';
 VONKTO = 200200;
 BISKTO = 200200;
 WDATUM = 'N';
 BMITVORTRAG = 'J';
 BMITGN = 'J';
  TEMP    */
 
 IF (BNETTO='J') THEN
  BEGIN
   for select SUM(SUM_VZ_NETTO), SUM(SUM_VZ_NETTO_VORTRAG), 
            SUM(SUM_VZ_NETTO_SOLL), SUM(SUM_VZ_NETTO_VORTRAG_SOLL), 
            SUM(SUM_VZ_NETTO_VORTRAG_SOLL) - SUM(SUM_VZ_NETTO_VORTRAG),
            SUM(SUM_VZ_NETTO_SOLL) - SUM(SUM_VZ_NETTO),
            SUM(SUM_VZ_NETTO_VORTRAG_SOLL) - SUM(SUM_VZ_NETTO_VORTRAG) + SUM(SUM_VZ_NETTO_SOLL) - SUM(SUM_VZ_NETTO), 
            KNR, VZPOS, GN  
    from SALDENLISTE_NEU_DETAIL1(:IONR,:DTVON,:DTBIS,:VONKTO,:BISKTO,:WDATUM,:BMITVORTRAG,:BMITGN) 
    group by KNR, VZPOS, GN
    into SUM_VZ, SUM_VZ_VORTRAG, 
     SUM_VZ_SOLL, SUM_VZ_VORTRAG_SOLL,
     SUM_VZ_VORTRAG_SALDO, SUM_VZ_SALDO,SUM_VZ_SALDO_PLUS_VORTRAG,
     KNR, VZPOS, GN 
    DO
     begin
      SUSPEND;
     end 
   END
 ELSE
  BEGIN  
   for select SUM(SUM_VZ), SUM(SUM_VZ_VORTRAG),  
            SUM(SUM_VZ_SOLL), SUM(SUM_VZ_VORTRAG_SOLL),  
            SUM(SUM_VZ_VORTRAG_SOLL) - SUM(SUM_VZ_VORTRAG),
            SUM(SUM_VZ_SOLL) - SUM(SUM_VZ),
            SUM(SUM_VZ_VORTRAG_SOLL) - SUM(SUM_VZ_VORTRAG) + SUM(SUM_VZ_SOLL) - SUM(SUM_VZ), 
            KNR, VZPOS, GN  
    from SALDENLISTE_NEU_DETAIL1(:IONR,:DTVON,:DTBIS,:VONKTO,:BISKTO,:WDATUM,:BMITVORTRAG,:BMITGN) 
    group by KNR, VZPOS, GN
    into SUM_VZ, SUM_VZ_VORTRAG,  
     SUM_VZ_SOLL, SUM_VZ_VORTRAG_SOLL, 
     SUM_VZ_VORTRAG_SALDO, SUM_VZ_SALDO,SUM_VZ_SALDO_PLUS_VORTRAG,
     KNR, VZPOS, GN 
    DO   
     begin
      SUSPEND;
     end 
 END    
END


-- Prozedur: SALDENLISTE_NEU_DETAIL
CREATE OR ALTER PROCEDURE SALDENLISTE_NEU_DETAIL
DECLARE VARIABLE KKLASSE INTEGER;
DECLARE VARIABLE SUMSOLL NUMERIC(15, 2);
DECLARE VARIABLE SUMHABEN NUMERIC(15, 2);
DECLARE VARIABLE SUMSOLL_NETTO NUMERIC(15, 2);
DECLARE VARIABLE SUMHABEN_NETTO NUMERIC(15, 2);
DECLARE VARIABLE DTVONBDATUM DATE;
DECLARE VARIABLE DTBISBDATUM DATE;
DECLARE VARIABLE DTVONWDATUM DATE;
DECLARE VARIABLE DTBISWDATUM DATE;
DECLARE VARIABLE VONKTO INTEGER;
DECLARE VARIABLE BISKTO INTEGER;
BEGIN

/* muss mit 
   select SUM(SUM_VZ) as SUM_VZ, SUM(SUM_VZ_NETTO),KNR,VZPOS,GN from SALDENLISTE_NEU(....)   
   group by KNR, VZPOS, GN 
   aufgerufen werden */

/* TEMP 
  IONR = 7;
  DTVON = '1.1.2018';
  DTBIS = '31.12.2018';
  BISTVZ = 'N';
  BBEW= 'N';
  WDATUM = 'J';
  TEMP */

 /* W_Datum abfragen */
 if (WDATUM = 'N') then
  begin
   DTVONBDATUM = DTVON;
   DTBISBDATUM = DTBIS;
   DTVONWDATUM = '01.01.1980';
   DTBISWDATUM = '01.01.1980';
  end
 else
  begin
   DTVONBDATUM = '01.01.1980';
   DTBISBDATUM = '01.01.1980';
   DTVONWDATUM = DTVON;
   DTBISWDATUM = DTBIS;
  end
 if (BBEW  = 'J') then  
  BEGIN
   VONKTO = 100000;
   BISKTO = 199999;
  END
 if (BBEW  = 'N') then  
  BEGIN
   VONKTO = 200000;
   BISKTO = 299999;
  END
 IF (BISTVZ='J') THEN
  BEGIN
   /*            */
   /* KEIN SPLIT */
   /*            */
   /* SOLL */
   FOR SELECT -sum(betrag), -SUM((BETRAG*100) / (100+MWSTOP)), KSOLL, KNROP, GN from buchung 
   WHERE ONRSOLL=:IONR 
   AND (KSOLL>:VONKTO AND KSOLL<=:BISKTO)
   AND ARTOP <> 0   /* kein SPLIT */
   AND ((Datum >= :DTVONBDATUM and Datum <= :DTBISBDATUM) or (WDatum >= :DTVONWDATUM and WDatum <= :DTBISWDATUM))
   GROUP BY KSOLL, KNROP, GN
   having sum(betrag) <> 0
   INTO :SUM_VZ, SUM_VZ_NETTO, KNR, VZPOS, GN
   DO 
     begin
      SUM_VZ = -:SUM_VZ;
      SUM_VZ_NETTO = - :SUM_VZ;     
      SUSPEND;
    end
   /* HABEN */
   FOR SELECT SUM(BETRAG), SUM((BETRAG*100) / (100+MWSTOP)), KHABEN, KNROP, GN from buchung
   WHERE ONRHABEN=:IONR 
   AND (KHABEN>:VONKTO AND KHABEN<=:BISKTO)
   AND ARTOP <> 0   /* kein SPLIT */
   AND ((Datum >= :DTVONBDATUM and Datum <= :DTBISBDATUM) or (WDatum >= :DTVONWDATUM and WDatum <= :DTBISWDATUM))
   GROUP BY KHABEN, KNROP, GN
   having sum(betrag) <> 0
   INTO :SUM_VZ, SUM_VZ_NETTO, KNR, VZPOS, GN
   DO 
    SUSPEND;
   /*            */
   /*   SPLIT    */
   /*            */
   /* SOLL */
   for select -Sum(buchzahl.Betrag), -SUM((buchzahl.BETRAG*100) / (100+buchzahl.MWSTOP)), KSOLL, buchzahl.KNR, GN from buchung, buchzahl
   where  ONRSOLL=:IONR 
   AND (KSOLL>:VONKTO and KSOLL<=:BISKTO)
   AND ((Datum >= :DTVONBDATUM and Datum <= :DTBISBDATUM) or (WDatum >= :DTVONWDATUM and WDatum <= :DTBISWDATUM))
   and buchung.artop=0
   and buchung.bnr=buchzahl.bnr
   GROUP BY KSOLL, buchzahl.KNR, GN
   having sum(buchzahl.betrag) <> 0
   INTO :SUM_VZ, SUM_VZ_NETTO, KNR, VZPOS, GN
   DO 
    begin
     SUM_VZ = -:SUM_VZ;
     SUM_VZ_NETTO = -:SUM_VZ;     
     SUSPEND;
    end 
   /* Haben */
   for select Sum(buchzahl.Betrag), SUM((buchzahl.BETRAG*100) / (100+buchzahl.MWSTOP)), KHABEN, buchzahl.KNR, GN from buchung, buchzahl
   where  ONRHABEN=:IONR AND KHABEN>:VONKTO and KHABEN<=:BISKTO
   AND ((Datum >= :DTVONBDATUM and Datum <= :DTBISBDATUM) or (WDatum >= :DTVONWDATUM and WDatum <= :DTBISWDATUM))
   and buchung.artop=0
   and buchung.bnr=buchzahl.bnr
   GROUP BY KHABEN, buchzahl.KNR, GN
   having sum(buchzahl.betrag) <> 0   
   INTO :SUM_VZ, SUM_VZ_NETTO, KNR, VZPOS, GN
   DO
    SUSPEND;   
   END
 ELSE
  BEGIN
   /* SOLL VZ */
   for SELECT SUM(BETRAG), SUM((BETRAG*100) / (100+MWST)), KSOLL, KHABEN, GN from buchung
   WHERE ONRSOLL=:IONR AND ONRHABEN=:IONR
   AND OPNR IS NOT NULL and OPBETRAG IS NOT NULL 
   AND ((Datum >= :DTVONBDATUM and Datum <= :DTBISBDATUM) or (WDatum >= :DTVONWDATUM and WDatum <= :DTBISWDATUM))
   AND (KSOLL>:VONKTO and KSOLL<=:BISKTO)
   GROUP BY KSOLL, KHABEN, GN
   having sum(betrag) <> 0
   INTO  :SUM_VZ, SUM_VZ_NETTO, KNR, VZPOS, GN
   do
    SUSPEND;
   /* HABEN */
   for SELECT SUM(BETRAG), SUM((BETRAG*100) / (100+MWST)), KHABEN, KSOLL, GN from buchung
   WHERE (ONRHABEN=:IONR AND ONRSOLL=:IONR)
   AND OPNR IS NOT NULL and OPBETRAG IS NOT NULL 
   AND ((Datum >= :DTVONBDATUM and Datum <= :DTBISBDATUM) or (WDatum >= :DTVONWDATUM and WDatum <= :DTBISWDATUM))
   AND (KHABEN>:VONKTO and KHABEN<=:BISKTO)
   GROUP BY KHABEN, KSOLL, GN
   having sum(betrag) <> 0
   INTO  :SUM_VZ, SUM_VZ_NETTO, KNR, VZPOS, GN
   do
    SUSPEND;
  END    /* SOLL VZ */
END


-- Prozedur: SALDENLISTE_NEU_DETAIL1
CREATE OR ALTER PROCEDURE SALDENLISTE_NEU_DETAIL1
BEGIN


  /* TEMP 
 IONR=7;
 DTVON = '1.1.2018';
 DTBIS = '31.12.2018';
 VONKTO = 200200;
 BISKTO = 200200;
 WDATUM = 'N';
 BMITVORTRAG = 'J';
 BMITGN = 'J';  */


 IF (BMITGN='N') THEN /* NUR GN=0 */
  BEGIN
   for select SUM(SUM_VZ), SUM(SUM_VZ_NETTO), 
              SUM(SUM_VZ_SOLL), SUM(SUM_VZ_NETTO_SOLL),  
              KNR, VZPOS, GN  
    from SALDENLISTE_NEU_DETAIL2(:IONR,:DTVON,:DTBIS,:VONKTO,:BISKTO, :WDATUM) 
    group by KNR, VZPOS, GN
    having GN=0
    into SUM_VZ, SUM_VZ_NETTO, SUM_VZ_SOLL, SUM_VZ_NETTO_SOLL, KNR, VZPOS, GN 
    DO
     SUSPEND;
   END
  ELSE
   BEGIN
    for select SUM(SUM_VZ), SUM(SUM_VZ_NETTO), 
         SUM(SUM_VZ_SOLL), SUM(SUM_VZ_NETTO_SOLL), 
         KNR, VZPOS, GN  
     from SALDENLISTE_NEU_DETAIL2(:IONR,:DTVON,:DTBIS,:VONKTO,:BISKTO,:WDATUM) 
     group by KNR, VZPOS, GN
     into SUM_VZ, SUM_VZ_NETTO, SUM_VZ_SOLL, SUM_VZ_NETTO_SOLL, KNR, VZPOS, GN 
      DO
       begin
        SUM_VZ_VORTRAG = 0;
        SUM_VZ_NETTO_VORTRAG = 0;          
        SUM_VZ_VORTRAG_SOLL = 0;
        SUM_VZ_NETTO_VORTRAG_SOLL = 0; 
        SUSPEND;
       end 
   END   
 IF (BMITVORTRAG = 'J') THEN
  BEGIN  
   DTBIS=DTVON -1; /* ein tag vor beginn */
   DTVON='01.01.0001';
   IF (BMITGN='N') THEN /* NUR GN=0 */
    BEGIN
     for select SUM(SUM_VZ), SUM(SUM_VZ_NETTO), 
         SUM(SUM_VZ_SOLL), SUM(SUM_VZ_NETTO_SOLL),
         KNR, VZPOS, GN  
      from SALDENLISTE_NEU_DETAIL2(:IONR,:DTVON,:DTBIS,:VONKTO,:BISKTO,:WDATUM) 
      group by KNR, VZPOS, GN
      having GN=0
      into SUM_VZ_VORTRAG, SUM_VZ_NETTO_VORTRAG, 
      SUM_VZ_VORTRAG_SOLL, SUM_VZ_NETTO_VORTRAG_SOLL, KNR, VZPOS, GN 
      DO
       begin
        /* Vortrag wird geliefert, andere Werte =0 */
        SUM_VZ = 0;
        SUM_VZ_NETTO = 0;         
        SUM_VZ_SOLL = 0;
        SUM_VZ_NETTO_SOLL = 0;  
        SUSPEND;
       end 
     END
    ELSE
     BEGIN
      for select SUM(SUM_VZ), SUM(SUM_VZ_NETTO), 
          SUM(SUM_VZ_SOLL), SUM(SUM_VZ_NETTO_SOLL),
          KNR, VZPOS, GN  
       from SALDENLISTE_NEU_DETAIL2(:IONR,:DTVON,:DTBIS,:VONKTO,:BISKTO,:WDATUM) 
       group by KNR, VZPOS, GN
       into SUM_VZ_VORTRAG, SUM_VZ_NETTO_VORTRAG, SUM_VZ_VORTRAG_SOLL, SUM_VZ_NETTO_VORTRAG_SOLL, KNR, VZPOS, GN 
        DO
         begin
          /* Vortrag wird geliefert, andere Werte =0 */
          SUM_VZ = 0;
          SUM_VZ_NETTO = 0;  
          SUM_VZ_SOLL = 0;
          SUM_VZ_NETTO_SOLL = 0;  
          SUSPEND;
         end 
     END      
   END /* BMITVORTRAG */  
   
END


-- Prozedur: SALDENLISTE_NEU_DETAIL2
CREATE OR ALTER PROCEDURE SALDENLISTE_NEU_DETAIL2
DECLARE VARIABLE DTVONBDATUM DATE;
DECLARE VARIABLE DTBISBDATUM DATE;
DECLARE VARIABLE DTVONWDATUM DATE;
DECLARE VARIABLE DTBISWDATUM DATE;
BEGIN

/* TEMP 

  IONR=7;
  DTVON = '1.1.2018';
  DTBIS = '31.12.2018';
  VONKTO = 200200;
  BISKTO = 200200;
  WDATUM = 'N';       */

 /* W_Datum abfragen */
 if (WDATUM = 'N') then
  begin
   DTVONBDATUM = DTVON;
   DTBISBDATUM = DTBIS;
   DTVONWDATUM = '01.01.0001';
   DTBISWDATUM = '01.01.0001'; 
  end
 else
  begin
   DTVONBDATUM = '01.01.0001';
   DTBISBDATUM = '01.01.0001';
   DTVONWDATUM = DTVON;
   DTBISWDATUM = DTBIS;
  end
  
 /*
 /*  VZ (IST)
 /* 
 /*            */
 /* KEIN SPLIT */
 /*            */
 /* Konto im SOLL */
 FOR SELECT sum(betrag), SUM((BETRAG*100) / (100+MWSTOP)), KSOLL, KNROP, GN from buchung 
 WHERE ONRSOLL=:IONR 
 AND (KSOLL>=:VONKTO AND KSOLL<=:BISKTO)
 AND ARTOP <> 0 and Betrag<>0 and opbetrag is null and splitnr is null and artop is not null   /* kein SPLIT */
 AND ((Datum >= :DTVONBDATUM and Datum <= :DTBISBDATUM) or (WDatum >= :DTVONWDATUM and WDatum <= :DTBISWDATUM))
 GROUP BY KSOLL, KNROP, GN
 having sum(betrag) <> 0
 INTO :SUM_VZ, SUM_VZ_NETTO, KNR, VZPOS, GN
 DO 
   begin
    SUM_VZ = -:SUM_VZ;
    SUM_VZ_NETTO = - :SUM_VZ; 
    SUM_VZ_SOLL =0;
    SUM_VZ_NETTO_SOLL =0;        
    SUSPEND;
  end
 /* HABEN */
 FOR SELECT SUM(BETRAG), SUM((BETRAG*100) / (100+MWSTOP)), KHABEN, KNROP, GN from buchung
 WHERE ONRHABEN=:IONR 
 AND (KHABEN>=:VONKTO AND KHABEN<=:BISKTO)
 AND ARTOP <> 0 and Betrag<>0 and opbetrag is null and splitnr is null and artop is not null   /* kein SPLIT */
 AND ((Datum >= :DTVONBDATUM and Datum <= :DTBISBDATUM) or (WDatum >= :DTVONWDATUM and WDatum <= :DTBISWDATUM))
 GROUP BY KHABEN, KNROP, GN
 having sum(betrag) <> 0
 INTO :SUM_VZ, SUM_VZ_NETTO, KNR, VZPOS, GN
 DO 
  BEGIN
   SUM_VZ_SOLL =0;
   SUM_VZ_NETTO_SOLL =0;  
   SUSPEND;
  END 
 /*            */
 /*   SPLIT    */
 /*            */
 /* KONTO im SOLL */
 for select Sum(buchzahl.Betrag), SUM((buchzahl.BETRAG*100) / (100+buchzahl.MWSTOP)), KSOLL, buchzahl.KNR, GN from buchung, buchzahl
 where  ONRSOLL=:IONR 
 AND (KSOLL>=:VONKTO and KSOLL<=:BISKTO)
 AND ((Datum >= :DTVONBDATUM and Datum <= :DTBISBDATUM) or (WDatum >= :DTVONWDATUM and WDatum <= :DTBISWDATUM))
 and buchzahl.Betrag<>0
 and buchung.bnr=buchzahl.bnr
 GROUP BY KSOLL, buchzahl.KNR, GN
 having sum(buchzahl.betrag) <> 0
 INTO :SUM_VZ, SUM_VZ_NETTO, KNR, VZPOS, GN
 DO 
  begin
   SUM_VZ = -:SUM_VZ;
   SUM_VZ_NETTO = -:SUM_VZ; 
   SUM_VZ_SOLL =0;
   SUM_VZ_NETTO_SOLL =0;      
   SUSPEND;
  end 
 /* Konto im Haben */
 for select Sum(buchzahl.Betrag), SUM((buchzahl.BETRAG*100) / (100+buchzahl.MWSTOP)), KHABEN, buchzahl.KNR, GN from buchung, buchzahl
 where  ONRHABEN=:IONR 
 AND (KHABEN>=:VONKTO and KHABEN<=:BISKTO)
 AND ((Datum >= :DTVONBDATUM and Datum <= :DTBISBDATUM) or (WDatum >= :DTVONWDATUM and WDatum <= :DTBISWDATUM))
 and buchzahl.Betrag<>0
 and buchung.bnr=buchzahl.bnr
 GROUP BY KHABEN, buchzahl.KNR, GN
 having sum(buchzahl.betrag) <> 0   
 INTO :SUM_VZ, SUM_VZ_NETTO, KNR, VZPOS, GN
 DO
  BEGIN
   SUM_VZ_SOLL =0;
   SUM_VZ_NETTO_SOLL =0;  
   SUSPEND;   
  END 
 /*
  SOLL VZ 
 */
 for SELECT SUM(BETRAG), SUM((BETRAG*100) / (100+MWST)), KSOLL, KHABEN, GN from buchung
 WHERE ONRSOLL=:IONR AND ONRHABEN=:IONR
 AND OPNR IS NOT NULL and OPBETRAG IS NOT NULL 
 AND ((Datum >= :DTVONBDATUM and Datum <= :DTBISBDATUM) or (WDatum >= :DTVONWDATUM and WDatum <= :DTBISWDATUM))
 AND (KSOLL>=:VONKTO and KSOLL<=:BISKTO)
 GROUP BY KSOLL, KHABEN, GN
 having sum(betrag) <> 0
 INTO  :SUM_VZ_SOLL, SUM_VZ_NETTO_SOLL, KNR, VZPOS, GN
 do
  BEGIN
   SUM_VZ =0;
   SUM_VZ_NETTO =0;  
   SUSPEND;
  END 
 /* HABEN */
 for SELECT SUM(BETRAG), SUM((BETRAG*100) / (100+MWST)), KHABEN, KSOLL, GN from buchung
 WHERE (ONRHABEN=:IONR AND ONRSOLL=:IONR)
 AND OPNR IS NOT NULL and OPBETRAG IS NOT NULL 
 AND ((Datum >= :DTVONBDATUM and Datum <= :DTBISBDATUM) or (WDatum >= :DTVONWDATUM and WDatum <= :DTBISWDATUM))
 AND (KHABEN>=:VONKTO and KHABEN<=:BISKTO)
 GROUP BY KHABEN, KSOLL, GN
 having sum(betrag) <> 0
 INTO  :SUM_VZ_SOLL, SUM_VZ_NETTO_SOLL, KNR, VZPOS, GN
 do
  BEGIN
   SUM_VZ =0;
   SUM_VZ_NETTO =0;  
   SUSPEND;
  END 
  
  
END


-- Prozedur: SALDEN_LISTE
CREATE OR ALTER PROCEDURE SALDEN_LISTE
DECLARE VARIABLE RTMP1 NUMERIC(18, 2);
DECLARE VARIABLE RTMP2 NUMERIC(18, 2);
DECLARE VARIABLE IKVON INTEGER;
DECLARE VARIABLE IKBIS INTEGER;
DECLARE VARIABLE ITMP1 INTEGER;
DECLARE VARIABLE ITMP2 INTEGER;
DECLARE VARIABLE IART1 INTEGER;
DECLARE VARIABLE IART2 INTEGER;
DECLARE VARIABLE IART3 INTEGER;
DECLARE VARIABLE IART4 INTEGER;
DECLARE VARIABLE ITMPKLASSE INTEGER;
DECLARE VARIABLE ITMPKNR INTEGER;
DECLARE VARIABLE RTVORTRAG NUMERIC(18, 2);
DECLARE VARIABLE RTGSOLL1 NUMERIC(18, 2);
/* Miete, Hausgeld */
DECLARE VARIABLE RTGBEZ1 NUMERIC(18, 2);
/* Miete, Hausgeld */
DECLARE VARIABLE RTGBEZNETTO1 NUMERIC(18, 2);
/* Miete, Hausgeld */
DECLARE VARIABLE RTGSOLL2 NUMERIC(18, 2);
/* BK, RÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼cklagen */
DECLARE VARIABLE RTGBEZ2 NUMERIC(18, 2);
/* BK, RÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼cklagen */
DECLARE VARIABLE RTGBEZNETTO2 NUMERIC(18, 2);
/* BK, RÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼cklagen */
DECLARE VARIABLE RTGSOLL3 NUMERIC(18, 2);
/* HK, Sonderumlage */
DECLARE VARIABLE RTGBEZ3 NUMERIC(18, 2);
/* HK, Sonderumlage */
DECLARE VARIABLE RTGBEZNETTO3 NUMERIC(18, 2);
/* HK, Sonderumlage */
DECLARE VARIABLE RTGSOLL4 NUMERIC(18, 2);
/* GN, GN */
DECLARE VARIABLE RTGBEZ4 NUMERIC(18, 2);
/* GN, GN */
DECLARE VARIABLE RTGBEZNETTO4 NUMERIC(18, 2);
/* GN, GN */
DECLARE VARIABLE RSUMVORTRAG NUMERIC(18, 2);
DECLARE VARIABLE RSUMGSOLL1 NUMERIC(18, 2);
/* Miete, Hausgeld */
DECLARE VARIABLE RSUMGBEZ1 NUMERIC(18, 2);
/* Miete, Hausgeld */
DECLARE VARIABLE RSUMGBEZNETTO1 NUMERIC(18, 2);
/* Miete, Hausgeld */
DECLARE VARIABLE RSUMGSOLL2 NUMERIC(18, 2);
/* BK, RÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼cklagen */
DECLARE VARIABLE RSUMGBEZ2 NUMERIC(18, 2);
/* BK, RÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼cklagen */
DECLARE VARIABLE RSUMGBEZNETTO2 NUMERIC(18, 2);
/* BK, RÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼cklagen */
DECLARE VARIABLE RSUMGSOLL3 NUMERIC(18, 2);
/* HK, Sonderumlage */
DECLARE VARIABLE RSUMGBEZ3 NUMERIC(18, 2);
/* HK, Sonderumlage */
DECLARE VARIABLE RSUMGBEZNETTO3 NUMERIC(18, 2);
/* HK, Sonderumlage */
DECLARE VARIABLE RSUMGSOLL4 NUMERIC(18, 2);
/* GN, GN */
DECLARE VARIABLE RSUMGBEZ4 NUMERIC(18, 2);
/* GN, GN */
DECLARE VARIABLE RSUMGBEZNETTO4 NUMERIC(18, 2);
/* GN, GN */
DECLARE VARIABLE DTVONBDATUM DATE;
DECLARE VARIABLE DTBISBDATUM DATE;
DECLARE VARIABLE DTVONWDATUM DATE;
DECLARE VARIABLE DTBISWDATUM DATE;
DECLARE VARIABLE SNAME CHAR(188);
DECLARE VARIABLE SVZ1BEZ VARCHAR(188);
DECLARE VARIABLE RVZ1SUMSOLL NUMERIC(18, 2);
DECLARE VARIABLE RVZ1SUMBEZ NUMERIC(18, 2);
DECLARE VARIABLE RVZ1SUMBEZNETTO NUMERIC(18, 2);
DECLARE VARIABLE SVZ2BEZ VARCHAR(188);
DECLARE VARIABLE RVZ2SUMSOLL NUMERIC(18, 2);
DECLARE VARIABLE RVZ2SUMBEZ NUMERIC(18, 2);
DECLARE VARIABLE RVZ2SUMBEZNETTO NUMERIC(18, 2);
DECLARE VARIABLE SVZ3BEZ VARCHAR(188);
DECLARE VARIABLE RVZ3SUMSOLL NUMERIC(18, 2);
DECLARE VARIABLE RVZ3SUMBEZ NUMERIC(18, 2);
DECLARE VARIABLE RVZ3SUMBEZNETTO NUMERIC(18, 2);
DECLARE VARIABLE SVZ4BEZ VARCHAR(188);
DECLARE VARIABLE RVZ4SUMSOLL NUMERIC(18, 2);
DECLARE VARIABLE RVZ4SUMBEZ NUMERIC(18, 2);
DECLARE VARIABLE RVZ4SUMBEZNETTO NUMERIC(18, 2);
DECLARE VARIABLE SVZ5BEZ VARCHAR(188);
DECLARE VARIABLE RVZ5SUMSOLL NUMERIC(18, 2);
DECLARE VARIABLE RVZ5SUMBEZ NUMERIC(18, 2);
DECLARE VARIABLE RVZ5SUMBEZNETTO NUMERIC(18, 2);
DECLARE VARIABLE SVZ6BEZ VARCHAR(188);
DECLARE VARIABLE RVZ6SUMSOLL NUMERIC(18, 2);
DECLARE VARIABLE RVZ6SUMBEZ NUMERIC(18, 2);
DECLARE VARIABLE RVZ6SUMBEZNETTO NUMERIC(18, 2);
DECLARE VARIABLE SVZ7BEZ VARCHAR(188);
DECLARE VARIABLE RVZ7SUMSOLL NUMERIC(18, 2);
DECLARE VARIABLE RVZ7SUMBEZ NUMERIC(18, 2);
DECLARE VARIABLE RVZ7SUMBEZNETTO NUMERIC(18, 2);
DECLARE VARIABLE SVZ8BEZ VARCHAR(188);
DECLARE VARIABLE RVZ8SUMSOLL NUMERIC(18, 2);
DECLARE VARIABLE RVZ8SUMBEZ NUMERIC(18, 2);
DECLARE VARIABLE RVZ8SUMBEZNETTO NUMERIC(18, 2);
DECLARE VARIABLE SVZ9BEZ VARCHAR(188);
DECLARE VARIABLE RVZ9SUMSOLL NUMERIC(18, 2);
DECLARE VARIABLE RVZ9SUMBEZ NUMERIC(18, 2);
DECLARE VARIABLE RVZ9SUMBEZNETTO NUMERIC(18, 2);
DECLARE VARIABLE SVZ10BEZ VARCHAR(188);
DECLARE VARIABLE RVZ10SUMSOLL NUMERIC(18, 2);
DECLARE VARIABLE RVZ10SUMBEZ NUMERIC(18, 2);
DECLARE VARIABLE RVZ10SUMBEZNETTO NUMERIC(18, 2);
DECLARE VARIABLE RGNPOSSOLL NUMERIC(18, 2);
DECLARE VARIABLE RGNPOS NUMERIC(18, 2);
DECLARE VARIABLE RGNPOSNETTO NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGSOLL NUMERIC(18, 2);
DECLARE VARIABLE RGNEIG NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGNETTO NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGSOLL_VZ1 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIG_VZ1 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGNETTO_VZ1 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGSOLL_VZ2 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIG_VZ2 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGNETTO_VZ2 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGSOLL_VZ3 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIG_VZ3 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGNETTO_VZ3 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGSOLL_VZ4 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIG_VZ4 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGNETTO_VZ4 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGSOLL_VZ5 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIG_VZ5 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGNETTO_VZ5 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGSOLL_VZ6 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIG_VZ6 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGNETTO_VZ6 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGSOLL_VZ7 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIG_VZ7 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGNETTO_VZ7 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGSOLL_VZ8 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIG_VZ8 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGNETTO_VZ8 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGSOLL_SUMVZ1 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIG_SUMVZ1 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGNETTO_SUMVZ1 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGSOLL_SUMVZ2 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIG_SUMVZ2 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGNETTO_SUMVZ2 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGSOLL_SUMVZ3 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIG_SUMVZ3 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGNETTO_SUMVZ3 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGSOLL_SUMVZ4 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIG_SUMVZ4 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGNETTO_SUMVZ4 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGSOLL_SUMVZ5 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIG_SUMVZ5 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGNETTO_SUMVZ5 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGSOLL_SUMVZ6 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIG_SUMVZ6 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGNETTO_SUMVZ6 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGSOLL_SUMVZ7 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIG_SUMVZ7 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGNETTO_SUMVZ7 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGSOLL_SUMVZ8 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIG_SUMVZ8 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGNETTO_SUMVZ8 NUMERIC(18, 2);
BEGIN


/*  ONR=998;
  DTVON='1.1.2017';
  DTBIS='31.12.2017';
  BBEW = 'N';
  WDATUM='N'; */

 /* Konten selektieren */
 if (:BBEW = 'J') then
  BEGIN
   IKVON = 100000;
   IKBIS = 199999;
   IART1 = 10;
   IART2 = 11;
   IART3 = 12;
   IART4 = 13; 
  END
 else
  BEGIN
   IKVON = 200000;
   IKBIS = 299999;
   IART1 = 15;
   IART2 = 16;
   IART3 = 17;
   IART4 = 18;
  END
 /* W_Datum abfragen */
 if (WDATUM = 'N') then
  begin
   DTVONBDATUM = DTVON;
   DTBISBDATUM = DTBIS;
   DTVONWDATUM = '01.01.1900';
   DTBISWDATUM = '01.01.1900';
  end
 else
  begin
   DTVONBDATUM = '01.01.1900';
   DTBISBDATUM = '01.01.1900';
   DTVONWDATUM = DTVON;
   DTBISWDATUM = DTBIS;
  end
 RSUMVORTRAG = 0;
 RSUMGSOLL1 = 0; RSUMGBEZ1 = 0; RSUMGBEZNETTO1 = 0;
 RSUMGSOLL2 = 0; RSUMGBEZ2 = 0; RSUMGBEZNETTO2 = 0;
 RSUMGSOLL3 = 0; RSUMGBEZ3 = 0; RSUMGBEZNETTO3 = 0;
 RSUMGSOLL4 = 0; RSUMGBEZ4 = 0; RSUMGBEZNETTO4 = 0;
 SVZ1BEZ = ''; RVZ1SUMSOLL = 0; RVZ1SUMBEZ = 0; RVZ1SUMBEZNETTO = 0;
 SVZ2BEZ = ''; RVZ2SUMSOLL = 0; RVZ2SUMBEZ = 0; RVZ2SUMBEZNETTO = 0;
 SVZ3BEZ = ''; RVZ3SUMSOLL = 0; RVZ3SUMBEZ = 0; RVZ3SUMBEZNETTO = 0;
 SVZ4BEZ = ''; RVZ4SUMSOLL = 0; RVZ4SUMBEZ = 0; RVZ4SUMBEZNETTO = 0;
 SVZ5BEZ = ''; RVZ5SUMSOLL = 0; RVZ5SUMBEZ = 0; RVZ5SUMBEZNETTO = 0;
 SVZ6BEZ = ''; RVZ6SUMSOLL = 0; RVZ6SUMBEZ = 0; RVZ6SUMBEZNETTO = 0;
 SVZ7BEZ = ''; RVZ7SUMSOLL = 0; RVZ7SUMBEZ = 0; RVZ7SUMBEZNETTO = 0;
 SVZ8BEZ = ''; RVZ8SUMSOLL = 0; RVZ8SUMBEZ = 0; RVZ8SUMBEZNETTO = 0;
 SVZ9BEZ = ''; RVZ9SUMSOLL = 0; RVZ9SUMBEZ = 0; RVZ9SUMBEZNETTO = 0;
 SVZ10BEZ = ''; RVZ10SUMSOLL = 0; RVZ10SUMBEZ = 0; RVZ10SUMBEZNETTO = 0;
 RGNEIG_SUMVZ1 = 0; RGNEIGNETTO_SUMVZ1 = 0; RGNEIGSOLL_SUMVZ1 = 0;
 RGNEIG_SUMVZ2 = 0; RGNEIGNETTO_SUMVZ2 = 0; RGNEIGSOLL_SUMVZ2 = 0; 
 RGNEIG_SUMVZ3 = 0; RGNEIGNETTO_SUMVZ3 = 0; RGNEIGSOLL_SUMVZ3 = 0; 
 RGNEIG_SUMVZ4 = 0; RGNEIGNETTO_SUMVZ4 = 0; RGNEIGSOLL_SUMVZ4 = 0; 
 RGNEIG_SUMVZ5 = 0; RGNEIGNETTO_SUMVZ5 = 0; RGNEIGSOLL_SUMVZ5 = 0; 
 RGNEIG_SUMVZ6 = 0; RGNEIGNETTO_SUMVZ6 = 0; RGNEIGSOLL_SUMVZ6 = 0; 
 RGNEIG_SUMVZ7 = 0; RGNEIGNETTO_SUMVZ7 = 0; RGNEIGSOLL_SUMVZ7 = 0; 
 RGNEIG_SUMVZ8 = 0; RGNEIGNETTO_SUMVZ8 = 0; RGNEIGSOLL_SUMVZ8 = 0;  
 /* Auswertung */
 FOR SELECT konten.onr, konten.knr, konten.knrstr, konten.kbez from konten
  WHERE konten.onr = :ONR and konten.knr >= :IKVON and konten.knr <= :IKBIS order by knr
  INTO :IONR, :KNR, :KNRSTR, :SNAME
 DO
  BEGIN
   RTVORTRAG = 0;
   RTGSOLL1 = 0; RTGBEZ1 = 0; RTGBEZNETTO1 = 0;
   RTGSOLL2 = 0; RTGBEZ2 = 0; RTGBEZNETTO2 = 0;
   RTGSOLL3 = 0; RTGBEZ3 = 0; RTGBEZNETTO3 = 0;
   RTGSOLL4 = 0; RTGBEZ4 = 0; RTGBEZNETTO4 = 0;
   RVORTRAG = 0;
   RGSOLL1 = 0; RGBEZ1 = 0; RGBEZNETTO1 = 0;
   RGSOLL2 = 0; RGBEZ2 = 0; RGBEZNETTO2 = 0;
   RGSOLL3 = 0; RGBEZ3 = 0; RGBEZNETTO3 = 0;
   RGSOLL4 = 0; RGBEZ4 = 0; RGBEZNETTO4 = 0; 
   RGNEIG = 0; RGNEIGNETTO = 0; RGNEIGSOLL = 0;
   RGNEIG_VZ1 = 0; RGNEIGNETTO_VZ1 = 0; RGNEIGSOLL_VZ1 = 0;  
   RGNEIG_VZ2 = 0; RGNEIGNETTO_VZ2 = 0; RGNEIGSOLL_VZ2 = 0; 
   RGNEIG_VZ3 = 0; RGNEIGNETTO_VZ3 = 0; RGNEIGSOLL_VZ3 = 0; 
   RGNEIG_VZ4 = 0; RGNEIGNETTO_VZ4 = 0; RGNEIGSOLL_VZ4 = 0; 
   RGNEIG_VZ5 = 0; RGNEIGNETTO_VZ5 = 0; RGNEIGSOLL_VZ5 = 0; 
   RGNEIG_VZ6 = 0; RGNEIGNETTO_VZ6 = 0; RGNEIGSOLL_VZ6 = 0; 
   RGNEIG_VZ7 = 0; RGNEIGNETTO_VZ7 = 0; RGNEIGSOLL_VZ7 = 0; 
   RGNEIG_VZ8 = 0; RGNEIGNETTO_VZ8 = 0; RGNEIGSOLL_VZ8 = 0;     
   GESCHOSS = NULL;
   MIETEINNAHME_ART = NULL;
   /* Vortrag Sollstellungen */
   select SUM(BETRAG) from buchung
    where ONRSOLL = :ONR and KSOLL = :KNR and ((Datum < :DTVONBDATUM) or (WDatum < :DTVONWDATUM)) and OPNR IS NOT NULL AND OPBETRAG IS NOT NULL
    into :RTVORTRAG;
   IF (RTVORTRAG IS NULL) THEN
    RTVORTRAG = 0;
   /* Vortrag Zahlung im Konto (H) */
   SELECT SUM(BETRAG) from buchung
    where ONRHABEN = :ONR and KHABEN = :KNR and (ARTOP IS NOT NULL) and ((Datum < :DTVONBDATUM) or (WDatum < :DTVONWDATUM))
    INTO :RTMP1;
   IF (RTMP1 IS NULL) THEN
    RTMP1 = 0;
   RTMP2=RTMP1;
   /* Vortrag Zahlung im Konto (S) */
   SELECT SUM(BETRAG) from buchung
   where ONRSOLL = :ONR and KSOLL = :KNR and (ARTOP IS NOT NULL) and ((Datum < :DTVONBDATUM) or (WDatum < :DTVONWDATUM))
   INTO :RTMP1;
   IF (RTMP1 IS NULL) THEN
    RTMP1 = 0;
   RTVORTRAG = RTMP2 - RTMP1 - RTVORTRAG;
   RTMP2 = 0;
   RTMP1 = 0;
   for select KNR,KBEZ,KKLASSE from konten where ONR = :ONR and ((KKLASSE = :IART1) or (KKLASSE = :IART2) or (KKLASSE = :IART3) or (KKLASSE = :IART4) or (KKLASSE >= 110)) and KNR <> 60190
    order by 1
   into :ITMPKNR, :SKBEZ, :ITMPKLASSE
   do
    begin
     ITMP1 = 0;
     ITMP2 = 0;
     RTMP1 = 0;
     RTMP2 = 0;
     RPOSSOLL = 0;
     RPOSBEZ = 0;
     RPOSBEZNETTO = 0;
     RGNPOS = 0;
     RGNPOSNETTO = 0;
     RGNPOSSOLL = 0;
     /*                */
     /* SOLLSTELLUNGEN */
     /*                */
     for select SUM(BETRAG), ARTHABEN from buchung
      where ONRSOLL = :ONR and KSOLL = :KNR and KHABEN = :ITMPKNR and ((Datum >= :DTVONBDATUM and Datum <= :DTBISBDATUM) or (WDatum >= :DTVONWDATUM and WDatum <= :DTBISWDATUM)) and OPNR IS NOT NULL AND OPBETRAG IS NOT NULL
      group by KHABEN, ARTHABEN
      into :RTMP1, :ITMP2
     do
      begin
       IF (RTMP1 IS NULL) THEN
        RTMP1 = 0;
       RPOSSOLL = RPOSSOLL + RTMP1;
       /*  */
       IF (ITMP2 = IART1) THEN
        BEGIN
         RTGSOLL1 = RTGSOLL1 + RTMP1;
        END
       ELSE
        IF ((ITMP2 = IART2) or (ITMP2 >= 110 and ITMP2 <= 580)) THEN
         BEGIN
          RTGSOLL2 = RTGSOLL2 + RTMP1;
         END
        ELSE
         IF (ITMP2 = IART3) THEN
          BEGIN
           RTGSOLL3 = RTGSOLL3 + RTMP1;
          END
         ELSE
          IF (ITMP2 = IART4) THEN
           BEGIN
            RTGSOLL4 = RTGSOLL4 + RTMP1;
           END
       RTMP1 = 0;
       ITMP2 = 0;
      end
     /*           */
     /* ZAHLUNGEN */
     /*           */
     /* Zahlung im HABEN KEIN SPLIT */
     for select SUM(BETRAG), SUM((BETRAG*100) / (100+MWSTOP)), ARTOP from buchung
      where ONRHABEN = :ONR and KNROP = :ITMPKNR and KHABEN = :KNR and ((Datum >= :DTVONBDATUM and Datum <= :DTBISBDATUM) or (WDatum >= :DTVONWDATUM and WDatum <= :DTBISWDATUM)) AND (ARTOP <> 0)
      group by ARTOP
     INTO :RTMP1, :RTMP2, :ITMP2
     do
      begin
       if (RTMP1 IS NULL) then
        RTMP1 = 0;
       if (RTMP2 IS NULL) then
        RTMP2 = 0;
       RPOSBEZ = RPOSBEZ + RTMP1;
       RPOSBEZNETTO = RPOSBEZNETTO + RTMP2;
       /*  */
       IF (ITMP2 = IART1) THEN
        BEGIN
         RTGBEZ1 = RTGBEZ1 + RTMP1;
         RTGBEZNETTO1 = RTGBEZNETTO1 + RTMP2;
        END
       ELSE
        IF ((ITMP2 = IART2) or (ITMP2 >= 110 and ITMP2 <= 580)) THEN
         BEGIN
          RTGBEZ2 = RTGBEZ2 + RTMP1;
          RTGBEZNETTO2 = RTGBEZNETTO2 + RTMP2;
         END
        ELSE
         IF (ITMP2 = IART3) THEN
          BEGIN
           RTGBEZ3 = RTGBEZ3 + RTMP1;
           RTGBEZNETTO3 = RTGBEZNETTO3 + RTMP2;
          END
         ELSE
          IF (ITMP2 = IART4) THEN
           BEGIN
            RTGBEZ4 = RTGBEZ4 + RTMP1;
            RTGBEZNETTO4 = RTGBEZNETTO4 + RTMP2;
           END
       RTMP1 = 0;
       RTMP2 = 0;
       ITMP2 = 0;
      end
     /* ZAHLUNG im SOLL KEIN SPLIT */
     for SELECT SUM(BETRAG), SUM((BETRAG*100) / (100+MWSTOP)), ARTOP from buchung
      where ONRSOLL=:ONR and KNROP = :ITMPKNR and KSOLL=:KNR and ((Datum >= :DTVONBDATUM and Datum <= :DTBISBDATUM) or (WDatum >= :DTVONWDATUM and WDatum <= :DTBISWDATUM)) AND (ARTOP<>0)
      group by ARTOP
     INTO :RTMP1, :RTMP2, :ITMP2
     do
      begin
       if (RTMP1 IS NULL) then
        RTMP1 = 0;
       if (RTMP2 IS NULL) then
        RTMP2 = 0;
       RPOSBEZ = RPOSBEZ - RTMP1;
       RPOSBEZNETTO = RPOSBEZNETTO - RTMP2;
       /*  */
       IF (ITMP2 = IART1) THEN
        BEGIN
         RTGBEZ1 = RTGBEZ1 - RTMP1;
         RTGBEZNETTO1 = RTGBEZNETTO1 - RTMP2;
        END
       ELSE
        IF ((ITMP2 = IART2) or (ITMP2 >= 110 and ITMP2 <= 580)) THEN
         BEGIN
          RTGBEZ2 = RTGBEZ2 - RTMP1;
          RTGBEZNETTO2 = RTGBEZNETTO2 - RTMP2;
         END
        ELSE
         IF (ITMP2 = IART3) THEN
          BEGIN
           RTGBEZ3 = RTGBEZ3 - RTMP1;
           RTGBEZNETTO3 = RTGBEZNETTO3 - RTMP2;
          END
         ELSE
          IF (ITMP2 = IART4) THEN
           BEGIN
            RTGBEZ4 = RTGBEZ4 - RTMP1;
            RTGBEZNETTO4 = RTGBEZNETTO4 - RTMP2;
           END
       RTMP1 = 0;
       RTMP2 = 0;
       ITMP2 = 0;
      end
     /* Zahlung im HABEN split*/
     for select sum(buchzahl.betrag), SUM((buchzahl.BETRAG*100) / (100+buchzahl.MWSTOP)), buchzahl.artop from buchzahl, buchung
      where buchzahl.bnr=buchung.bnr
      and onrhaben=:ONR and buchzahl.knr=:ITMPKNR and khaben=:KNR and buchung.ARTOP=0 and ((Datum >= :DTVONBDATUM and Datum <= :DTBISBDATUM) or (WDatum >= :DTVONWDATUM and WDatum <= :DTBISWDATUM))
      group by buchzahl.artop
     into :RTMP1, :RTMP2, :ITMP2
     do
      begin
       if (RTMP1 IS NULL) then
        RTMP1 = 0;
       if (RTMP2 IS NULL) then
        RTMP2 = 0;
       RPOSBEZ = RPOSBEZ + RTMP1;
       RPOSBEZNETTO = RPOSBEZNETTO + RTMP2;
       /*  */
       IF (ITMP2 = IART1) THEN
        BEGIN
         RTGBEZ1 = RTGBEZ1 + RTMP1;
         RTGBEZNETTO1 = RTGBEZNETTO1 + RTMP2;
        END
       ELSE
        IF ((ITMP2 = IART2) or (ITMP2 >= 110 and ITMP2 <= 580)) THEN
         BEGIN
          RTGBEZ2 = RTGBEZ2 + RTMP1;
          RTGBEZNETTO2 = RTGBEZNETTO2 + RTMP2;
         END
        ELSE
         IF (ITMP2 = IART3) THEN
          BEGIN
           RTGBEZ3 = RTGBEZ3 + RTMP1;
           RTGBEZNETTO3 = RTGBEZNETTO3 + RTMP2;
          END
         ELSE
          IF (ITMP2 = IART4) THEN
           BEGIN
            RTGBEZ4 = RTGBEZ4 + RTMP1;
            RTGBEZNETTO4 = RTGBEZNETTO4 + RTMP2;
           END
      end
     RTMP1 = 0;
     RTMP2 = 0;
     ITMP2 = 0;
     /* Zahlung im Soll split */
     for select sum(buchzahl.betrag), SUM((buchzahl.BETRAG*100) / (100+buchzahl.MWSTOP)), buchzahl.artop from buchzahl, buchung
      where buchzahl.bnr=buchung.bnr
      and onrsoll=:ONR and buchzahl.knr=:ITMPKNR and ksoll=:KNR and buchung.ARTOP=0 and ((Datum >= :DTVONBDATUM and Datum <= :DTBISBDATUM) or (WDatum >= :DTVONWDATUM and WDatum <= :DTBISWDATUM))
      group by buchzahl.artop
     into :RTMP1, :RTMP2, :ITMP2
     do
      begin
       if (RTMP1 IS NULL) then
        RTMP1 = 0;
       if (RTMP2 IS NULL) then
        RTMP2 = 0;
       RPOSBEZ = RPOSBEZ - RTMP1;
       RPOSBEZNETTO = RPOSBEZNETTO - RTMP2;
       /*  */
       IF (ITMP2 = IART1) THEN
        BEGIN
         RTGBEZ1 = RTGBEZ1 - RTMP1;
         RTGBEZNETTO1 = RTGBEZNETTO1 - RTMP2;
        END
       ELSE
        IF ((ITMP2 = IART2) or (ITMP2 >= 110 and ITMP2 <= 580)) THEN
         BEGIN
          RTGBEZ2 = RTGBEZ2 - RTMP1;
          RTGBEZNETTO2 = RTGBEZNETTO2 - RTMP2;
         END
        ELSE
         IF (ITMP2 = IART3) THEN
          BEGIN
           RTGBEZ3 = RTGBEZ3 - RTMP1;
           RTGBEZNETTO3 = RTGBEZNETTO3 - RTMP2;
          END
         ELSE
          IF (ITMP2 = IART4) THEN
           BEGIN
            RTGBEZ4 = RTGBEZ4 - RTMP1;
            RTGBEZNETTO4 = RTGBEZNETTO4 - RTMP2;
           END
      end
     /*  */
     BISNULL = 'N';
     ISMASTER = 0;
     VZKNR= ITMPKNR;
     /* Eventuell GN wieder abziehen */
     RPOSSOLL = RPOSSOLL - RGNPOSSOLL;
     RPOSBEZ = RPOSBEZ - RGNPOS;
     RPOSBEZNETTO = RPOSBEZNETTO - RGNPOSNETTO;
     RGNEIG = RGNEIG + RGNPOS;
     RGNEIGNETTO = RGNEIGNETTO + RGNPOSNETTO;
     RGNEIGSOLL = RGNEIGSOLL + RGNPOSSOLL;
     if ((RPOSSOLL <> 0) or (RPOSBEZ <> 0) or (RPOSBEZNETTO <> 0)) then
      begin
       /* VZ1 */
       if ((ITMPKNR = 60000) or (ITMPKNR = 60100)) then
        begin
         SVZ1BEZ = SKBEZ;
         RVZ1SUMSOLL = RVZ1SUMSOLL + RPOSSOLL;
         RVZ1SUMBEZ = RVZ1SUMBEZ + RPOSBEZ;
         RVZ1SUMBEZNETTO = RVZ1SUMBEZNETTO + RPOSBEZNETTO;
        end
       /* VZ2 */
       if ((ITMPKNR = 60010) or (ITMPKNR = 60110)) then
        begin
         SVZ2BEZ = SKBEZ;
         RVZ2SUMSOLL = RVZ2SUMSOLL + RPOSSOLL;
         RVZ2SUMBEZ = RVZ2SUMBEZ + RPOSBEZ;
         RVZ2SUMBEZNETTO = RVZ2SUMBEZNETTO + RPOSBEZNETTO;
        end
       /* VZ3 */
       if ((ITMPKNR = 60020) or (ITMPKNR = 60120)) then
        begin
         SVZ3BEZ = SKBEZ;
         RVZ3SUMSOLL = RVZ3SUMSOLL + RPOSSOLL;
         RVZ3SUMBEZ = RVZ3SUMBEZ + RPOSBEZ;
         RVZ3SUMBEZNETTO = RVZ3SUMBEZNETTO + RPOSBEZNETTO;
        end
       /* VZ4 */
       if ((ITMPKNR = 60030) or (ITMPKNR = 60130)) then
        begin
         SVZ4BEZ = SKBEZ;
         RVZ4SUMSOLL = RVZ4SUMSOLL + RPOSSOLL;
         RVZ4SUMBEZ = RVZ4SUMBEZ + RPOSBEZ;
         RVZ4SUMBEZNETTO = RVZ4SUMBEZNETTO + RPOSBEZNETTO;
        end
       /* VZ5 */
       if ((ITMPKNR = 60040) or (ITMPKNR = 60140)) then
        begin
         SVZ5BEZ = SKBEZ;
         RVZ5SUMSOLL = RVZ5SUMSOLL + RPOSSOLL;
         RVZ5SUMBEZ = RVZ5SUMBEZ + RPOSBEZ;
         RVZ5SUMBEZNETTO = RVZ5SUMBEZNETTO + RPOSBEZNETTO;
        end
       /* VZ6 */
       if ((ITMPKNR = 60050) or (ITMPKNR = 60150)) then
        begin
         SVZ6BEZ = SKBEZ;
         RVZ6SUMSOLL = RVZ6SUMSOLL + RPOSSOLL;
         RVZ6SUMBEZ = RVZ6SUMBEZ + RPOSBEZ;
         RVZ6SUMBEZNETTO = RVZ6SUMBEZNETTO + RPOSBEZNETTO;
        end
       /* VZ7 */
       if ((ITMPKNR = 60060) or (ITMPKNR = 60160)) then
        begin
         SVZ7BEZ = SKBEZ;
         RVZ7SUMSOLL = RVZ7SUMSOLL + RPOSSOLL;
         RVZ7SUMBEZ = RVZ7SUMBEZ + RPOSBEZ;
         RVZ7SUMBEZNETTO = RVZ7SUMBEZNETTO + RPOSBEZNETTO;
        end
       /* VZ8 */
       if ((ITMPKNR = 60070) or (ITMPKNR = 60580)) then
        begin
         SVZ8BEZ = SKBEZ;
         RVZ8SUMSOLL = RVZ8SUMSOLL + RPOSSOLL;
         RVZ8SUMBEZ = RVZ8SUMBEZ + RPOSBEZ;
         RVZ8SUMBEZNETTO = RVZ8SUMBEZNETTO + RPOSBEZNETTO;
        end
       /* VZ Sonderumlage */
       if (ITMPKNR = 60180) then
        begin
         SVZ9BEZ = SKBEZ;
         RVZ9SUMSOLL = RVZ9SUMSOLL + RPOSSOLL;
         RVZ9SUMBEZ = RVZ9SUMBEZ + RPOSBEZ;
         RVZ9SUMBEZNETTO = RVZ9SUMBEZNETTO + RPOSBEZNETTO;
        end
       /* Guthaben/Nachzahlungen */
       if ((ITMPKNR = 60090)) then
        begin
         SVZ10BEZ = 'Guthaben/Nachzahlungen';
         if (ITMPKNR = 60090) then
          begin
           RVZ10SUMSOLL = RVZ10SUMSOLL + RPOSSOLL;
           RVZ10SUMBEZ = RVZ10SUMBEZ + RPOSBEZ;
           RVZ10SUMBEZNETTO = RVZ10SUMBEZNETTO + RPOSBEZNETTO;
          end
         else
          begin
           RVZ10SUMSOLL = RVZ10SUMSOLL + RGNPOSSOLL;
           RVZ10SUMBEZ = RVZ10SUMBEZ + RGNPOS;
           RVZ10SUMBEZNETTO = RVZ10SUMBEZNETTO + RGNPOSNETTO;
          end
        end
       /* Speichern */
       SUSPEND;
      end
     /* G/N EigentÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼mer */ 
     if ((RGNPOSSOLL <> 0) or (RGNPOS <> 0) or (RGNPOSNETTO <> 0)) then
      begin
       /* VZ1 */
       if (ITMPKNR = 60100) then
        begin
         SVZ1BEZ = SKBEZ;
         RGNEIG_VZ1 = RGNEIG_VZ1 + RGNPOS;
         RGNEIGNETTO_VZ1 = RGNEIGNETTO_VZ1 + RGNPOSNETTO;
         RGNEIGSOLL_VZ1 = RGNEIGSOLL_VZ1 + RGNPOSSOLL; 
         RGNEIG_SUMVZ1 = RGNEIG_SUMVZ1 + RGNPOS;
         RGNEIGNETTO_SUMVZ1 = RGNEIGNETTO_SUMVZ1 + RGNPOSNETTO;
         RGNEIGSOLL_SUMVZ1 = RGNEIGSOLL_SUMVZ1 + RGNPOSSOLL;           
        end
       /* VZ2 */
       if (ITMPKNR = 60110) then
        begin
         SVZ2BEZ = SKBEZ;
         RGNEIG_VZ2 = RGNEIG_VZ2 + RGNPOS;
         RGNEIGNETTO_VZ2 = RGNEIGNETTO_VZ2 + RGNPOSNETTO;
         RGNEIGSOLL_VZ2 = RGNEIGSOLL_VZ2 + RGNPOSSOLL;
         RGNEIG_SUMVZ2 = RGNEIG_SUMVZ2 + RGNPOS;
         RGNEIGNETTO_SUMVZ2 = RGNEIGNETTO_SUMVZ2 + RGNPOSNETTO;
         RGNEIGSOLL_SUMVZ2 = RGNEIGSOLL_SUMVZ2 + RGNPOSSOLL;          
        end
       /* VZ3 */
       if (ITMPKNR = 60120) then
        begin
         SVZ3BEZ = SKBEZ;
         RGNEIG_VZ3 = RGNEIG_VZ3 + RGNPOS;
         RGNEIGNETTO_VZ3 = RGNEIGNETTO_VZ3 + RGNPOSNETTO;
         RGNEIGSOLL_VZ3 = RGNEIGSOLL_VZ3 + RGNPOSSOLL;
         RGNEIG_SUMVZ3 = RGNEIG_SUMVZ3 + RGNPOS;
         RGNEIGNETTO_SUMVZ3 = RGNEIGNETTO_SUMVZ3 + RGNPOSNETTO;
         RGNEIGSOLL_SUMVZ3 = RGNEIGSOLL_SUMVZ3 + RGNPOSSOLL;                   
        end
       /* VZ4 */
       if (ITMPKNR = 60130) then
        begin
         SVZ4BEZ = SKBEZ;        
         RGNEIG_VZ4 = RGNEIG_VZ4 + RGNPOS;
         RGNEIGNETTO_VZ4 = RGNEIGNETTO_VZ4 + RGNPOSNETTO;
         RGNEIGSOLL_VZ4 = RGNEIGSOLL_VZ4 + RGNPOSSOLL;
         RGNEIG_SUMVZ4 = RGNEIG_SUMVZ4 + RGNPOS;
         RGNEIGNETTO_SUMVZ4 = RGNEIGNETTO_SUMVZ4 + RGNPOSNETTO;
         RGNEIGSOLL_SUMVZ4 = RGNEIGSOLL_SUMVZ4 + RGNPOSSOLL;                   
        end
       /* VZ5 */
       if (ITMPKNR = 60140) then
        begin
         SVZ5BEZ = SKBEZ;        
         RGNEIG_VZ5 = RGNEIG_VZ5 + RGNPOS;
         RGNEIGNETTO_VZ5 = RGNEIGNETTO_VZ5 + RGNPOSNETTO;
         RGNEIGSOLL_VZ5 = RGNEIGSOLL_VZ5 + RGNPOSSOLL; 
         RGNEIG_SUMVZ5 = RGNEIG_SUMVZ5 + RGNPOS;
         RGNEIGNETTO_SUMVZ5 = RGNEIGNETTO_SUMVZ5 + RGNPOSNETTO;
         RGNEIGSOLL_SUMVZ5 = RGNEIGSOLL_SUMVZ5 + RGNPOSSOLL;                  
        end
       /* VZ6 */
       if (ITMPKNR = 60150) then
        begin
         SVZ6BEZ = SKBEZ;        
         RGNEIG_VZ6 = RGNEIG_VZ6 + RGNPOS;
         RGNEIGNETTO_VZ6 = RGNEIGNETTO_VZ6 + RGNPOSNETTO;
         RGNEIGSOLL_VZ6 = RGNEIGSOLL_VZ6 + RGNPOSSOLL;
         RGNEIG_SUMVZ6 = RGNEIG_SUMVZ6 + RGNPOS;
         RGNEIGNETTO_SUMVZ6 = RGNEIGNETTO_SUMVZ6 + RGNPOSNETTO;
         RGNEIGSOLL_SUMVZ6 = RGNEIGSOLL_SUMVZ6 + RGNPOSSOLL;          
        end
       /* VZ7 */
       if (ITMPKNR = 60160) then
        begin
         SVZ7BEZ = SKBEZ;        
         RGNEIG_VZ7 = RGNEIG_VZ7 + RGNPOS;
         RGNEIGNETTO_VZ7 = RGNEIGNETTO_VZ7 + RGNPOSNETTO;
         RGNEIGSOLL_VZ7 = RGNEIGSOLL_VZ7 + RGNPOSSOLL;
         RGNEIG_SUMVZ7 = RGNEIG_SUMVZ7 + RGNPOS;
         RGNEIGNETTO_SUMVZ7 = RGNEIGNETTO_SUMVZ7 + RGNPOSNETTO;
         RGNEIGSOLL_SUMVZ7 = RGNEIGSOLL_SUMVZ7 + RGNPOSSOLL;                   
        end
       /* VZ8 */
       if (ITMPKNR = 60580) then
        begin
         SVZ8BEZ = SKBEZ;        
         RGNEIG_VZ8 = RGNEIG_VZ8 + RGNPOS;
         RGNEIGNETTO_VZ8 = RGNEIGNETTO_VZ8 + RGNPOSNETTO;
         RGNEIGSOLL_VZ8 = RGNEIGSOLL_VZ8 + RGNPOSSOLL;
         RGNEIG_SUMVZ8 = RGNEIG_SUMVZ8 + RGNPOS;
         RGNEIGNETTO_SUMVZ8 = RGNEIGNETTO_SUMVZ8 + RGNPOSNETTO;
         RGNEIGSOLL_SUMVZ8 = RGNEIGSOLL_SUMVZ8 + RGNPOSSOLL;                   
        end       
      end       
    END    
   /* */ 
   if ((RGNEIG <> 0) or (RGNEIGNETTO <> 0) or (RGNEIGSOLL <> 0)) then
    begin
     if ((RGNEIG_VZ1 <> 0) or (RGNEIGNETTO_VZ1 <> 0) or (RGNEIGSOLL_VZ1 <> 0)) then
      begin
       SKBEZ = 'Guthaben/Nachzahlungen (' || SVZ1BEZ || ')'; RVORTRAG = 0; RGSOLL1 = 0; RGBEZ1 = 0;
       RGBEZNETTO1 = 0; RGSOLL2 = 0; RGBEZ2 = 0; RGBEZNETTO2 = 0; RGSOLL3 = 0; RGBEZ3 = 0;
       RGBEZNETTO3 = 0; RGSOLL4 = 0; RGBEZ4 = 0; RGBEZNETTO4 = 0; RPOSSOLL = RGNEIGSOLL_VZ1;
       RPOSBEZ = RGNEIG_VZ1; RPOSBEZNETTO = RGNEIGNETTO_VZ1; SVZ10BEZ = 'Guthaben/Nachzahlungen (' || SVZ1BEZ || ')';
       BISNULL = 'N';
       ISMASTER = 0;
       VZKNR = 60190;
       SUSPEND;
      END 
     /* */
     if ((RGNEIG_VZ2 <> 0) or (RGNEIGNETTO_VZ2 <> 0) or (RGNEIGSOLL_VZ2 <> 0)) then
      begin
       SKBEZ = 'Guthaben/Nachzahlungen (' || SVZ2BEZ || ')'; RVORTRAG = 0; RGSOLL1 = 0; RGBEZ1 = 0;
       RGBEZNETTO1 = 0; RGSOLL2 = 0; RGBEZ2 = 0; RGBEZNETTO2 = 0; RGSOLL3 = 0; RGBEZ3 = 0;
       RGBEZNETTO3 = 0; RGSOLL4 = 0; RGBEZ4 = 0; RGBEZNETTO4 = 0; RPOSSOLL = RGNEIGSOLL_VZ2;
       RPOSBEZ = RGNEIG_VZ2; RPOSBEZNETTO = RGNEIGNETTO_VZ2; SVZ10BEZ = 'Guthaben/Nachzahlungen (' || SVZ2BEZ || ')';
       BISNULL = 'N';
       ISMASTER = 0;
       VZKNR = 60191;
       SUSPEND;
      END
     /* */
     if ((RGNEIG_VZ3 <> 0) or (RGNEIGNETTO_VZ3 <> 0) or (RGNEIGSOLL_VZ3 <> 0)) then
      begin
       SKBEZ = 'Guthaben/Nachzahlungen (' || SVZ3BEZ || ')'; RVORTRAG = 0; RGSOLL1 = 0; RGBEZ1 = 0;
       RGBEZNETTO1 = 0; RGSOLL2 = 0; RGBEZ2 = 0; RGBEZNETTO2 = 0; RGSOLL3 = 0; RGBEZ3 = 0;
       RGBEZNETTO3 = 0; RGSOLL4 = 0; RGBEZ4 = 0; RGBEZNETTO4 = 0; RPOSSOLL = RGNEIGSOLL_VZ3;
       RPOSBEZ = RGNEIG_VZ3; RPOSBEZNETTO = RGNEIGNETTO_VZ3; SVZ10BEZ = 'Guthaben/Nachzahlungen (' || SVZ3BEZ || ')';
       BISNULL = 'N';
       ISMASTER = 0;
       VZKNR = 60192;
       SUSPEND;
      END 
     /* */
     if ((RGNEIG_VZ4 <> 0) or (RGNEIGNETTO_VZ4 <> 0) or (RGNEIGSOLL_VZ4 <> 0)) then
      begin
       SKBEZ = 'Guthaben/Nachzahlungen (' || SVZ4BEZ || ')'; RVORTRAG = 0; RGSOLL1 = 0; RGBEZ1 = 0;
       RGBEZNETTO1 = 0; RGSOLL2 = 0; RGBEZ2 = 0; RGBEZNETTO2 = 0; RGSOLL3 = 0; RGBEZ3 = 0;
       RGBEZNETTO3 = 0; RGSOLL4 = 0; RGBEZ4 = 0; RGBEZNETTO4 = 0; RPOSSOLL = RGNEIGSOLL_VZ4;
       RPOSBEZ = RGNEIG_VZ4; RPOSBEZNETTO = RGNEIGNETTO_VZ4; SVZ10BEZ = 'Guthaben/Nachzahlungen (' || SVZ4BEZ || ')';
       BISNULL = 'N';
       ISMASTER = 0;
       VZKNR = 60193;
       SUSPEND;
      END
     /* */
     if ((RGNEIG_VZ5 <> 0) or (RGNEIGNETTO_VZ5 <> 0) or (RGNEIGSOLL_VZ5 <> 0)) then
      begin
       SKBEZ = 'Guthaben/Nachzahlungen (' || SVZ5BEZ || ')'; RVORTRAG = 0; RGSOLL1 = 0; RGBEZ1 = 0;
       RGBEZNETTO1 = 0; RGSOLL2 = 0; RGBEZ2 = 0; RGBEZNETTO2 = 0; RGSOLL3 = 0; RGBEZ3 = 0;
       RGBEZNETTO3 = 0; RGSOLL4 = 0; RGBEZ4 = 0; RGBEZNETTO4 = 0; RPOSSOLL = RGNEIGSOLL_VZ5;
       RPOSBEZ = RGNEIG_VZ5; RPOSBEZNETTO = RGNEIGNETTO_VZ5; SVZ10BEZ = 'Guthaben/Nachzahlungen (' || SVZ5BEZ || ')';
       BISNULL = 'N';
       ISMASTER = 0;
       VZKNR = 60194;
       SUSPEND;
      END
     /* */
     if ((RGNEIG_VZ6 <> 0) or (RGNEIGNETTO_VZ6 <> 0) or (RGNEIGSOLL_VZ6 <> 0)) then
      begin
       SKBEZ = 'Guthaben/Nachzahlungen (' || SVZ6BEZ || ')'; RVORTRAG = 0; RGSOLL1 = 0; RGBEZ1 = 0;
       RGBEZNETTO1 = 0; RGSOLL2 = 0; RGBEZ2 = 0; RGBEZNETTO2 = 0; RGSOLL3 = 0; RGBEZ3 = 0;
       RGBEZNETTO3 = 0; RGSOLL4 = 0; RGBEZ4 = 0; RGBEZNETTO4 = 0; RPOSSOLL = RGNEIGSOLL_VZ6;
       RPOSBEZ = RGNEIG_VZ6; RPOSBEZNETTO = RGNEIGNETTO_VZ6; SVZ10BEZ = 'Guthaben/Nachzahlungen (' || SVZ6BEZ || ')';
       BISNULL = 'N';
       ISMASTER = 0;
       VZKNR = 60195;
       SUSPEND;
      END
     /* */
     if ((RGNEIG_VZ7 <> 0) or (RGNEIGNETTO_VZ7 <> 0) or (RGNEIGSOLL_VZ7 <> 0)) then
      begin
       SKBEZ = 'Guthaben/Nachzahlungen (' || SVZ7BEZ || ')'; RVORTRAG = 0; RGSOLL1 = 0; RGBEZ1 = 0;
       RGBEZNETTO1 = 0; RGSOLL2 = 0; RGBEZ2 = 0; RGBEZNETTO2 = 0; RGSOLL3 = 0; RGBEZ3 = 0;
       RGBEZNETTO3 = 0; RGSOLL4 = 0; RGBEZ4 = 0; RGBEZNETTO4 = 0; RPOSSOLL = RGNEIGSOLL_VZ7;
       RPOSBEZ = RGNEIG_VZ7; RPOSBEZNETTO = RGNEIGNETTO_VZ7; SVZ10BEZ = 'Guthaben/Nachzahlungen (' || SVZ7BEZ || ')';
       BISNULL = 'N';
       ISMASTER = 0;
       VZKNR = 60196;
       SUSPEND;
      END   
     /* */
     if ((RGNEIG_VZ8 <> 0) or (RGNEIGNETTO_VZ8 <> 0) or (RGNEIGSOLL_VZ8 <> 0)) then
      begin
       SKBEZ = 'Guthaben/Nachzahlungen (' || SVZ8BEZ || ')'; RVORTRAG = 0; RGSOLL1 = 0; RGBEZ1 = 0;
       RGBEZNETTO1 = 0; RGSOLL2 = 0; RGBEZ2 = 0; RGBEZNETTO2 = 0; RGSOLL3 = 0; RGBEZ3 = 0;
       RGBEZNETTO3 = 0; RGSOLL4 = 0; RGBEZ4 = 0; RGBEZNETTO4 = 0; RPOSSOLL = RGNEIGSOLL_VZ8;
       RPOSBEZ = RGNEIG_VZ8; RPOSBEZNETTO = RGNEIGNETTO_VZ8; SVZ10BEZ = 'Guthaben/Nachzahlungen (' || SVZ8BEZ || ')';
       BISNULL = 'N';
       ISMASTER = 0;
       VZKNR = 60197;
       SUSPEND;
      END                  
    end    
   /* Master einfÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼gen */
   SKBEZ = SNAME;
   RVORTRAG = RTVORTRAG;
   RGSOLL1 = RTGSOLL1;
   RGBEZ1 = RTGBEZ1;
   RGBEZNETTO1 = RTGBEZNETTO1;
   RGSOLL2 = RTGSOLL2;
   RGBEZ2 = RTGBEZ2;
   RGBEZNETTO2 = RTGBEZNETTO2;
   RGSOLL3 = RTGSOLL3;
   RGBEZ3 = RTGBEZ3;
   RGBEZNETTO3 = RTGBEZNETTO3;
   RGSOLL4 = RTGSOLL4;
   RGBEZ4 = RTGBEZ4;
   RGBEZNETTO4 = RTGBEZNETTO4;
   RPOSSOLL = 0;
   RPOSBEZ = 0;
   RPOSBEZNETTO = 0;
   /* FUER SUMME */
   RSUMVORTRAG = RSUMVORTRAG + RTVORTRAG;
   RSUMGSOLL1 = RSUMGSOLL1 + RTGSOLL1;
   RSUMGBEZ1 = RSUMGBEZ1 + RTGBEZ1;
   RSUMGBEZNETTO1 = RSUMGBEZNETTO1 + RTGBEZNETTO1;
   RSUMGSOLL2 = RSUMGSOLL2 + RTGSOLL2;
   RSUMGBEZ2 = RSUMGBEZ2 + RTGBEZ2;
   RSUMGBEZNETTO2 = RSUMGBEZNETTO2 + RTGBEZNETTO2;
   RSUMGSOLL3 = RSUMGSOLL3 + RTGSOLL3;
   RSUMGBEZ3 = RSUMGBEZ3 + RTGBEZ3;
   RSUMGBEZNETTO3 = RSUMGBEZNETTO3 + RSUMGBEZNETTO3;
   RSUMGSOLL4 = RSUMGSOLL4 + RTGSOLL4;
   RSUMGBEZ4 = RSUMGBEZ4 + RTGBEZ4;
   RSUMGBEZNETTO4 = RSUMGBEZNETTO4 + RTGBEZNETTO4;
   /* Wenn alles 0 */
   if ((RGSOLL1 = 0) and (RGBEZ1 = 0) and (RGSOLL2 = 0) and (RGBEZ2 = 0) and (RGSOLL3 = 0) and (RGBEZ3 = 0) and (RGSOLL4 = 0) and (RGBEZ4 = 0)) then
    BISNULL = 'J';
   else
    BISNULL = 'N';
   /* MASTER */
   ISMASTER = 1;
   VZKNR = 0;
   /* GESCHOSS + MIETEINNAHME_ART */
   if (:KNR >= 200000) then
    begin
     GESCHOSS = -1;
     MIETEINNAHME_ART = -1;
    end
   else
    begin
     select geschoss, mieteinnahme_art from bewohner where onr=:onr and knr=:knr into :GESCHOSS, :MIETEINNAHME_ART;
    end
   /* EINTRAG */
   SUSPEND;
  END /* Select Konten */
 /* Summen */
 ISMASTER = 1;
 KNR = 999999;
 KNRSTR = '';
 SKBEZ = 'SUMME HAUS:';
 RVORTRAG = RSUMVORTRAG;
 RGSOLL1 = RSUMGSOLL1;
 RGBEZ1 = RSUMGBEZ1;
 RGBEZNETTO1 = RSUMGBEZNETTO1;
 RGSOLL2 = RSUMGSOLL2;
 RGBEZ2 = RSUMGBEZ2;
 RGBEZNETTO2 = RSUMGBEZNETTO2;
 RGSOLL3 = RSUMGSOLL3;
 RGBEZ3 = RSUMGBEZ3;
 RGBEZNETTO3 = RSUMGBEZNETTO3;
 RGSOLL4 = RSUMGSOLL4;
 RGBEZ4 = RSUMGBEZ4;
 RGBEZNETTO4 = RSUMGBEZNETTO4;
 RPOSSOLL = 0;
 RPOSBEZ = 0;
 RPOSBEZNETTO = 0;
 BISNULL='N';
 VZKNR = 0;
 SUSPEND;
 /* VZ Position 1 */
 if ((RVZ1SUMSOLL <> 0) or (RVZ1SUMBEZ <> 0) or (RVZ1SUMBEZNETTO <> 0)) then
  begin
   KNR = 999999;
   KNRSTR = '';
   SKBEZ = SVZ1BEZ;
   RVORTRAG = 0;
   RGSOLL1 = 0;
   RGBEZ1 = 0;
   RGBEZNETTO1 = 0;
   RGSOLL2 = 0;
   RGBEZ2 = 0;
   RGBEZNETTO2 = 0;
   RGSOLL3 = 0;
   RGBEZ3 = 0;
   RGBEZNETTO3 = 0;
   RGSOLL4 = 0;
   RGBEZ4 = 0;
   RGBEZNETTO4 = 0;
   RPOSSOLL = RVZ1SUMSOLL;
   RPOSBEZ = RVZ1SUMBEZ;
   RPOSBEZNETTO = RVZ1SUMBEZNETTO;
   BISNULL = 'N';
   ISMASTER = 0;
   VZKNR = 1;
   SUSPEND;
  end
 /* VZ Position 2 */
 if ((RVZ2SUMSOLL <> 0) or (RVZ2SUMBEZ <> 0) or (RVZ2SUMBEZNETTO <> 0)) then
  begin
   KNR = 999999;
   KNRSTR = '';
   SKBEZ = SVZ2BEZ;
   RVORTRAG = 0;
   RGSOLL1 = 0;
   RGBEZ1 = 0;
   RGBEZNETTO1 = 0;
   RGSOLL2 = 0;
   RGBEZ2 = 0;
   RGBEZNETTO2 = 0;
   RGSOLL3 = 0;
   RGBEZ3 = 0;
   RGBEZNETTO3 = 0;
   RGSOLL4 = 0;
   RGBEZ4 = 0;
   RGBEZNETTO4 = 0;
   RPOSSOLL = RVZ2SUMSOLL;
   RPOSBEZ = RVZ2SUMBEZ;
   RPOSBEZNETTO = RVZ2SUMBEZNETTO;
   BISNULL = 'N';
   ISMASTER = 0;
   VZKNR = 2;
   SUSPEND;
  end
 /* VZ Position 3 */
 if ((RVZ3SUMSOLL <> 0) or (RVZ3SUMBEZ <> 0) or (RVZ3SUMBEZNETTO <> 0)) then
  begin
   KNR = 999999;
   KNRSTR = '';
   SKBEZ = SVZ3BEZ;
   RVORTRAG = 0;
   RGSOLL1 = 0;
   RGBEZ1 = 0;
   RGBEZNETTO1 = 0;
   RGSOLL2 = 0;
   RGBEZ2 = 0;
   RGBEZNETTO2 = 0;
   RGSOLL3 = 0;
   RGBEZ3 = 0;
   RGBEZNETTO3 = 0;
   RGSOLL4 = 0;
   RGBEZ4 = 0;
   RGBEZNETTO4 = 0;
   RPOSSOLL = RVZ3SUMSOLL;
   RPOSBEZ = RVZ3SUMBEZ;
   RPOSBEZNETTO = RVZ3SUMBEZNETTO;
   BISNULL = 'N';
   ISMASTER = 0;
   VZKNR = 3;
   SUSPEND;
  end
 /* VZ Position 4 */
 if ((RVZ4SUMSOLL <> 0) or (RVZ4SUMBEZ <> 0) or (RVZ4SUMBEZNETTO <> 0)) then
  begin
   KNR = 999999;
   KNRSTR = '';
   SKBEZ = SVZ4BEZ;
   RVORTRAG = 0;
   RGSOLL1 = 0;
   RGBEZ1 = 0;
   RGBEZNETTO1 = 0;
   RGSOLL2 = 0;
   RGBEZ2 = 0;
   RGBEZNETTO2 = 0;
   RGSOLL3 = 0;
   RGBEZ3 = 0;
   RGBEZNETTO3 = 0;
   RGSOLL4 = 0;
   RGBEZ4 = 0;
   RGBEZNETTO4 = 0;
   RPOSSOLL = RVZ4SUMSOLL;
   RPOSBEZ = RVZ4SUMBEZ;
   RPOSBEZNETTO = RVZ4SUMBEZNETTO;
   BISNULL = 'N';
   ISMASTER = 0;
   VZKNR = 4;
   SUSPEND;
  end
 /* VZ Position 5 */
 if ((RVZ5SUMSOLL <> 0) or (RVZ5SUMBEZ <> 0) or (RVZ5SUMBEZNETTO <> 0)) then
  begin
   KNR = 999999;
   KNRSTR = '';
   SKBEZ = SVZ5BEZ;
   RVORTRAG = 0;
   RGSOLL1 = 0;
   RGBEZ1 = 0;
   RGBEZNETTO1 = 0;
   RGSOLL2 = 0;
   RGBEZ2 = 0;
   RGBEZNETTO2 = 0;
   RGSOLL3 = 0;
   RGBEZ3 = 0;
   RGBEZNETTO3 = 0;
   RGSOLL4 = 0;
   RGBEZ4 = 0;
   RGBEZNETTO4 = 0;
   RPOSSOLL = RVZ5SUMSOLL;
   RPOSBEZ = RVZ5SUMBEZ;
   RPOSBEZNETTO = RVZ5SUMBEZNETTO;
   BISNULL = 'N';
   ISMASTER = 0;
   VZKNR = 5;
   SUSPEND;
  end
 /* VZ Position 6 */
 if ((RVZ6SUMSOLL <> 0) or (RVZ6SUMBEZ <> 0) or (RVZ6SUMBEZNETTO <> 0)) then
  begin
   KNR = 999999;
   KNRSTR = '';
   SKBEZ = SVZ6BEZ;
   RVORTRAG = 0;
   RGSOLL1 = 0;
   RGBEZ1 = 0;
   RGBEZNETTO1 = 0;
   RGSOLL2 = 0;
   RGBEZ2 = 0;
   RGBEZNETTO2 = 0;
   RGSOLL3 = 0;
   RGBEZ3 = 0;
   RGBEZNETTO3 = 0;
   RGSOLL4 = 0;
   RGBEZ4 = 0;
   RGBEZNETTO4 = 0;
   RPOSSOLL = RVZ6SUMSOLL;
   RPOSBEZ = RVZ6SUMBEZ;
   RPOSBEZNETTO = RVZ6SUMBEZNETTO;
   BISNULL = 'N';
   ISMASTER = 0;
   VZKNR = 6;
   SUSPEND;
  end
 /* VZ Position 7 */
 if ((RVZ7SUMSOLL <> 0) or (RVZ7SUMBEZ <> 0) or (RVZ7SUMBEZNETTO <> 0)) then
  begin
   KNR = 999999;
   KNRSTR = '';
   SKBEZ = SVZ7BEZ;
   RVORTRAG = 0;
   RGSOLL1 = 0;
   RGBEZ1 = 0;
   RGBEZNETTO1 = 0;
   RGSOLL2 = 0;
   RGBEZ2 = 0;
   RGBEZNETTO2 = 0;
   RGSOLL3 = 0;
   RGBEZ3 = 0;
   RGBEZNETTO3 = 0;
   RGSOLL4 = 0;
   RGBEZ4 = 0;
   RGBEZNETTO4 = 0;
   RPOSSOLL = RVZ7SUMSOLL;
   RPOSBEZ = RVZ7SUMBEZ;
   RPOSBEZNETTO = RVZ7SUMBEZNETTO;
   BISNULL = 'N';
   ISMASTER = 0;
   VZKNR = 7;
   SUSPEND;
  end
 /* VZ Position 8 */
 if ((RVZ8SUMSOLL <> 0) or (RVZ8SUMBEZ <> 0) or (RVZ8SUMBEZNETTO <> 0)) then
  begin
   KNR = 999999;
   KNRSTR = '';
   SKBEZ = SVZ8BEZ;
   RVORTRAG = 0;
   RGSOLL1 = 0;
   RGBEZ1 = 0;
   RGBEZNETTO1 = 0;
   RGSOLL2 = 0;
   RGBEZ2 = 0;
   RGBEZNETTO2 = 0;
   RGSOLL3 = 0;
   RGBEZ3 = 0;
   RGBEZNETTO3 = 0;
   RGSOLL4 = 0;
   RGBEZ4 = 0;
   RGBEZNETTO4 = 0;
   RPOSSOLL = RVZ8SUMSOLL;
   RPOSBEZ = RVZ8SUMBEZ;
   RPOSBEZNETTO = RVZ8SUMBEZNETTO;
   BISNULL = 'N';
   ISMASTER = 0;
   VZKNR = 8;
   SUSPEND;
  end
 /* VZ Position 9 */
 if ((RVZ9SUMSOLL <> 0) or (RVZ9SUMBEZ <> 0) or (RVZ9SUMBEZNETTO <> 0)) then
  begin
   KNR = 999999;
   KNRSTR = '';
   SKBEZ = SVZ9BEZ;
   RVORTRAG = 0;
   RGSOLL1 = 0;
   RGBEZ1 = 0;
   RGBEZNETTO1 = 0;
   RGSOLL2 = 0;
   RGBEZ2 = 0;
   RGBEZNETTO2 = 0;
   RGSOLL3 = 0;
   RGBEZ3 = 0;
   RGBEZNETTO3 = 0;
   RGSOLL4 = 0;
   RGBEZ4 = 0;
   RGBEZNETTO4 = 0;
   RPOSSOLL = RVZ9SUMSOLL;
   RPOSBEZ = RVZ9SUMBEZ;
   RPOSBEZNETTO = RVZ9SUMBEZNETTO;
   BISNULL = 'N';
   ISMASTER = 0;
   VZKNR = 9;
   SUSPEND;
  end
 /* VZ Position 10 */
 if (BBEW = 'J') then
  begin
   if ((RVZ10SUMSOLL <> 0) or (RVZ10SUMBEZ <> 0) or (RVZ10SUMBEZNETTO <> 0)) then
    begin
     KNR = 999999;
     KNRSTR = '';
     SKBEZ = SVZ10BEZ;
     RVORTRAG = 0;
     RGSOLL1 = 0;
     RGBEZ1 = 0;
     RGBEZNETTO1 = 0;
     RGSOLL2 = 0;
     RGBEZ2 = 0;
     RGBEZNETTO2 = 0;
     RGSOLL3 = 0;
     RGBEZ3 = 0;
     RGBEZNETTO3 = 0;
     RGSOLL4 = 0;
     RGBEZ4 = 0;
     RGBEZNETTO4 = 0;
     RPOSSOLL = RVZ10SUMSOLL;
     RPOSBEZ = RVZ10SUMBEZ;
     RPOSBEZNETTO = RVZ10SUMBEZNETTO;
     BISNULL = 'N';
     ISMASTER = 0;
     VZKNR = 10;
     SUSPEND;
    end
  end
 else
  begin
   if ((RGNEIGSOLL_SUMVZ1 <> 0) or (RGNEIG_SUMVZ1 <> 0) or (RGNEIGNETTO_SUMVZ1 <> 0)) then
    begin
     KNR = 999999;
     KNRSTR = '';
     SKBEZ = 'Guthaben/Nachzahlungen (' || SVZ1BEZ || ')';
     RVORTRAG = 0; RGSOLL1 = 0; RGBEZ1 = 0; RGBEZNETTO1 = 0; RGSOLL2 = 0; RGBEZ2 = 0;
     RGBEZNETTO2 = 0; RGSOLL3 = 0; RGBEZ3 = 0; RGBEZNETTO3 = 0; RGSOLL4 = 0; RGBEZ4 = 0;
     RGBEZNETTO4 = 0;
     RPOSSOLL = RGNEIGSOLL_SUMVZ1;
     RPOSBEZ = RGNEIG_SUMVZ1;
     RPOSBEZNETTO = RGNEIGNETTO_SUMVZ1;
     BISNULL = 'N';
     ISMASTER = 0;
     VZKNR = 10;
     SUSPEND;
    end 
   /* */
   if ((RGNEIGSOLL_SUMVZ2 <> 0) or (RGNEIG_SUMVZ2 <> 0) or (RGNEIGNETTO_SUMVZ2 <> 0)) then
    begin
     KNR = 999999;
     KNRSTR = '';
     SKBEZ = 'Guthaben/Nachzahlungen (' || SVZ2BEZ || ')';
     RVORTRAG = 0; RGSOLL1 = 0; RGBEZ1 = 0; RGBEZNETTO1 = 0; RGSOLL2 = 0; RGBEZ2 = 0;
     RGBEZNETTO2 = 0; RGSOLL3 = 0; RGBEZ3 = 0; RGBEZNETTO3 = 0; RGSOLL4 = 0; RGBEZ4 = 0;
     RGBEZNETTO4 = 0;
     RPOSSOLL = RGNEIGSOLL_SUMVZ2;
     RPOSBEZ = RGNEIG_SUMVZ2;
     RPOSBEZNETTO = RGNEIGNETTO_SUMVZ2;
     BISNULL = 'N';
     ISMASTER = 0;
     VZKNR = 11;
     SUSPEND;
    end  
   /* */
   if ((RGNEIGSOLL_SUMVZ3 <> 0) or (RGNEIG_SUMVZ3 <> 0) or (RGNEIGNETTO_SUMVZ3 <> 0)) then
    begin
     KNR = 999999;
     KNRSTR = '';
     SKBEZ = 'Guthaben/Nachzahlungen (' || SVZ3BEZ || ')';
     RVORTRAG = 0; RGSOLL1 = 0; RGBEZ1 = 0; RGBEZNETTO1 = 0; RGSOLL2 = 0; RGBEZ2 = 0;
     RGBEZNETTO2 = 0; RGSOLL3 = 0; RGBEZ3 = 0; RGBEZNETTO3 = 0; RGSOLL4 = 0; RGBEZ4 = 0;
     RGBEZNETTO4 = 0;
     RPOSSOLL = RGNEIGSOLL_SUMVZ3;
     RPOSBEZ = RGNEIG_SUMVZ3;
     RPOSBEZNETTO = RGNEIGNETTO_SUMVZ3;
     BISNULL = 'N';
     ISMASTER = 0;
     VZKNR = 12;
     SUSPEND;
    end
   /* */
   if ((RGNEIGSOLL_SUMVZ4 <> 0) or (RGNEIG_SUMVZ4 <> 0) or (RGNEIGNETTO_SUMVZ4 <> 0)) then
    begin
     KNR = 999999;
     KNRSTR = '';
     SKBEZ = 'Guthaben/Nachzahlungen (' || SVZ4BEZ || ')';
     RVORTRAG = 0; RGSOLL1 = 0; RGBEZ1 = 0; RGBEZNETTO1 = 0; RGSOLL2 = 0; RGBEZ2 = 0;
     RGBEZNETTO2 = 0; RGSOLL3 = 0; RGBEZ3 = 0; RGBEZNETTO3 = 0; RGSOLL4 = 0; RGBEZ4 = 0;
     RGBEZNETTO4 = 0;
     RPOSSOLL = RGNEIGSOLL_SUMVZ4;
     RPOSBEZ = RGNEIG_SUMVZ4;
     RPOSBEZNETTO = RGNEIGNETTO_SUMVZ4;
     BISNULL = 'N';
     ISMASTER = 0;
     VZKNR = 13;
     SUSPEND;
    end 
   /* */
   if ((RGNEIGSOLL_SUMVZ5 <> 0) or (RGNEIG_SUMVZ5 <> 0) or (RGNEIGNETTO_SUMVZ5 <> 0)) then
    begin
     KNR = 999999;
     KNRSTR = '';
     SKBEZ = 'Guthaben/Nachzahlungen (' || SVZ5BEZ || ')';
     RVORTRAG = 0; RGSOLL1 = 0; RGBEZ1 = 0; RGBEZNETTO1 = 0; RGSOLL2 = 0; RGBEZ2 = 0;
     RGBEZNETTO2 = 0; RGSOLL3 = 0; RGBEZ3 = 0; RGBEZNETTO3 = 0; RGSOLL4 = 0; RGBEZ4 = 0;
     RGBEZNETTO4 = 0;
     RPOSSOLL = RGNEIGSOLL_SUMVZ5;
     RPOSBEZ = RGNEIG_SUMVZ5;
     RPOSBEZNETTO = RGNEIGNETTO_SUMVZ5;
     BISNULL = 'N';
     ISMASTER = 0;
     VZKNR = 14;
     SUSPEND;
    end
   /* */
   if ((RGNEIGSOLL_SUMVZ6 <> 0) or (RGNEIG_SUMVZ6 <> 0) or (RGNEIGNETTO_SUMVZ6 <> 0)) then
    begin
     KNR = 999999;
     KNRSTR = '';
     SKBEZ = 'Guthaben/Nachzahlungen (' || SVZ6BEZ || ')';
     RVORTRAG = 0; RGSOLL1 = 0; RGBEZ1 = 0; RGBEZNETTO1 = 0; RGSOLL2 = 0; RGBEZ2 = 0;
     RGBEZNETTO2 = 0; RGSOLL3 = 0; RGBEZ3 = 0; RGBEZNETTO3 = 0; RGSOLL4 = 0; RGBEZ4 = 0;
     RGBEZNETTO4 = 0;
     RPOSSOLL = RGNEIGSOLL_SUMVZ6;
     RPOSBEZ = RGNEIG_SUMVZ6;
     RPOSBEZNETTO = RGNEIGNETTO_SUMVZ6;
     BISNULL = 'N';
     ISMASTER = 0;
     VZKNR = 15;
     SUSPEND;
    end
   /* */
   if ((RGNEIGSOLL_SUMVZ7 <> 0) or (RGNEIG_SUMVZ7 <> 0) or (RGNEIGNETTO_SUMVZ7 <> 0)) then
    begin
     KNR = 999999;
     KNRSTR = '';
     SKBEZ = 'Guthaben/Nachzahlungen (' || SVZ7BEZ || ')';
     RVORTRAG = 0; RGSOLL1 = 0; RGBEZ1 = 0; RGBEZNETTO1 = 0; RGSOLL2 = 0; RGBEZ2 = 0;
     RGBEZNETTO2 = 0; RGSOLL3 = 0; RGBEZ3 = 0; RGBEZNETTO3 = 0; RGSOLL4 = 0; RGBEZ4 = 0;
     RGBEZNETTO4 = 0;
     RPOSSOLL = RGNEIGSOLL_SUMVZ7;
     RPOSBEZ = RGNEIG_SUMVZ7;
     RPOSBEZNETTO = RGNEIGNETTO_SUMVZ7;
     BISNULL = 'N';
     ISMASTER = 0;
     VZKNR = 16;
     SUSPEND;
    end
   /* */
   if ((RGNEIGSOLL_SUMVZ8 <> 0) or (RGNEIG_SUMVZ8 <> 0) or (RGNEIGNETTO_SUMVZ8 <> 0)) then
    begin
     KNR = 999999;
     KNRSTR = '';
     SKBEZ = 'Guthaben/Nachzahlungen (' || SVZ8BEZ || ')';
     RVORTRAG = 0; RGSOLL1 = 0; RGBEZ1 = 0; RGBEZNETTO1 = 0; RGSOLL2 = 0; RGBEZ2 = 0;
     RGBEZNETTO2 = 0; RGSOLL3 = 0; RGBEZ3 = 0; RGBEZNETTO3 = 0; RGSOLL4 = 0; RGBEZ4 = 0;
     RGBEZNETTO4 = 0;
     RPOSSOLL = RGNEIGSOLL_SUMVZ8;
     RPOSBEZ = RGNEIG_SUMVZ8;
     RPOSBEZNETTO = RGNEIGNETTO_SUMVZ8;
     BISNULL = 'N';
     ISMASTER = 0;
     VZKNR = 17;
     SUSPEND;
    end                       
  end   
END


-- Prozedur: SALDEN_LISTE_ALL
CREATE OR ALTER PROCEDURE SALDEN_LISTE_ALL
DECLARE VARIABLE GN SMALLINT;
DECLARE VARIABLE RTMP1 NUMERIC(18, 2);
DECLARE VARIABLE RTMP2 NUMERIC(18, 2);
DECLARE VARIABLE IKVON INTEGER;
DECLARE VARIABLE IKBIS INTEGER;
DECLARE VARIABLE ITMP1 INTEGER;
DECLARE VARIABLE ITMP2 INTEGER;
DECLARE VARIABLE IART1 INTEGER;
DECLARE VARIABLE IART2 INTEGER;
DECLARE VARIABLE IART3 INTEGER;
DECLARE VARIABLE IART4 INTEGER;
DECLARE VARIABLE ITMPKLASSE INTEGER;
DECLARE VARIABLE ITMPKNR INTEGER;
DECLARE VARIABLE RTVORTRAG NUMERIC(18, 2);
DECLARE VARIABLE RTGSOLL1 NUMERIC(18, 2);
/* Miete, Hausgeld */
DECLARE VARIABLE RTGBEZ1 NUMERIC(18, 2);
/* Miete, Hausgeld */
DECLARE VARIABLE RTGBEZNETTO1 NUMERIC(18, 2);
/* Miete, Hausgeld */
DECLARE VARIABLE RTGSOLL2 NUMERIC(18, 2);
/* BK, RÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼cklagen */
DECLARE VARIABLE RTGBEZ2 NUMERIC(18, 2);
/* BK, RÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼cklagen */
DECLARE VARIABLE RTGBEZNETTO2 NUMERIC(18, 2);
/* BK, RÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼cklagen */
DECLARE VARIABLE RTGSOLL3 NUMERIC(18, 2);
/* HK, Sonderumlage */
DECLARE VARIABLE RTGBEZ3 NUMERIC(18, 2);
/* HK, Sonderumlage */
DECLARE VARIABLE RTGBEZNETTO3 NUMERIC(18, 2);
/* HK, Sonderumlage */
DECLARE VARIABLE RTGSOLL4 NUMERIC(18, 2);
/* GN, GN */
DECLARE VARIABLE RTGBEZ4 NUMERIC(18, 2);
/* GN, GN */
DECLARE VARIABLE RTGBEZNETTO4 NUMERIC(18, 2);
/* GN, GN */
DECLARE VARIABLE RSUMVORTRAG NUMERIC(18, 2);
DECLARE VARIABLE RSUMGSOLL1 NUMERIC(18, 2);
/* Miete, Hausgeld */
DECLARE VARIABLE RSUMGBEZ1 NUMERIC(18, 2);
/* Miete, Hausgeld */
DECLARE VARIABLE RSUMGBEZNETTO1 NUMERIC(18, 2);
/* Miete, Hausgeld */
DECLARE VARIABLE RSUMGSOLL2 NUMERIC(18, 2);
/* BK, RÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼cklagen */
DECLARE VARIABLE RSUMGBEZ2 NUMERIC(18, 2);
/* BK, RÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼cklagen */
DECLARE VARIABLE RSUMGBEZNETTO2 NUMERIC(18, 2);
/* BK, RÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼cklagen */
DECLARE VARIABLE RSUMGSOLL3 NUMERIC(18, 2);
/* HK, Sonderumlage */
DECLARE VARIABLE RSUMGBEZ3 NUMERIC(18, 2);
/* HK, Sonderumlage */
DECLARE VARIABLE RSUMGBEZNETTO3 NUMERIC(18, 2);
/* HK, Sonderumlage */
DECLARE VARIABLE RSUMGSOLL4 NUMERIC(18, 2);
/* GN, GN */
DECLARE VARIABLE RSUMGBEZ4 NUMERIC(18, 2);
/* GN, GN */
DECLARE VARIABLE RSUMGBEZNETTO4 NUMERIC(18, 2);
/* GN, GN */
DECLARE VARIABLE DTVONBDATUM DATE;
DECLARE VARIABLE DTBISBDATUM DATE;
DECLARE VARIABLE DTVONWDATUM DATE;
DECLARE VARIABLE DTBISWDATUM DATE;
DECLARE VARIABLE SNAME CHAR(88);
DECLARE VARIABLE SVZ1BEZ VARCHAR(88);
DECLARE VARIABLE RVZ1SUMSOLL NUMERIC(18, 2);
DECLARE VARIABLE RVZ1SUMBEZ NUMERIC(18, 2);
DECLARE VARIABLE RVZ1SUMBEZNETTO NUMERIC(18, 2);
DECLARE VARIABLE SVZ2BEZ VARCHAR(88);
DECLARE VARIABLE RVZ2SUMSOLL NUMERIC(18, 2);
DECLARE VARIABLE RVZ2SUMBEZ NUMERIC(18, 2);
DECLARE VARIABLE RVZ2SUMBEZNETTO NUMERIC(18, 2);
DECLARE VARIABLE SVZ3BEZ VARCHAR(88);
DECLARE VARIABLE RVZ3SUMSOLL NUMERIC(18, 2);
DECLARE VARIABLE RVZ3SUMBEZ NUMERIC(18, 2);
DECLARE VARIABLE RVZ3SUMBEZNETTO NUMERIC(18, 2);
DECLARE VARIABLE SVZ4BEZ VARCHAR(88);
DECLARE VARIABLE RVZ4SUMSOLL NUMERIC(18, 2);
DECLARE VARIABLE RVZ4SUMBEZ NUMERIC(18, 2);
DECLARE VARIABLE RVZ4SUMBEZNETTO NUMERIC(18, 2);
DECLARE VARIABLE SVZ5BEZ VARCHAR(88);
DECLARE VARIABLE RVZ5SUMSOLL NUMERIC(18, 2);
DECLARE VARIABLE RVZ5SUMBEZ NUMERIC(18, 2);
DECLARE VARIABLE RVZ5SUMBEZNETTO NUMERIC(18, 2);
DECLARE VARIABLE SVZ6BEZ VARCHAR(88);
DECLARE VARIABLE RVZ6SUMSOLL NUMERIC(18, 2);
DECLARE VARIABLE RVZ6SUMBEZ NUMERIC(18, 2);
DECLARE VARIABLE RVZ6SUMBEZNETTO NUMERIC(18, 2);
DECLARE VARIABLE SVZ7BEZ VARCHAR(88);
DECLARE VARIABLE RVZ7SUMSOLL NUMERIC(18, 2);
DECLARE VARIABLE RVZ7SUMBEZ NUMERIC(18, 2);
DECLARE VARIABLE RVZ7SUMBEZNETTO NUMERIC(18, 2);
DECLARE VARIABLE SVZ8BEZ VARCHAR(88);
DECLARE VARIABLE RVZ8SUMSOLL NUMERIC(18, 2);
DECLARE VARIABLE RVZ8SUMBEZ NUMERIC(18, 2);
DECLARE VARIABLE RVZ8SUMBEZNETTO NUMERIC(18, 2);
DECLARE VARIABLE SVZ9BEZ VARCHAR(88);
DECLARE VARIABLE RVZ9SUMSOLL NUMERIC(18, 2);
DECLARE VARIABLE RVZ9SUMBEZ NUMERIC(18, 2);
DECLARE VARIABLE RVZ9SUMBEZNETTO NUMERIC(18, 2);
DECLARE VARIABLE SVZ10BEZ VARCHAR(88);
DECLARE VARIABLE RVZ10SUMSOLL NUMERIC(18, 2);
DECLARE VARIABLE RVZ10SUMBEZ NUMERIC(18, 2);
DECLARE VARIABLE RVZ10SUMBEZNETTO NUMERIC(18, 2);
DECLARE VARIABLE RGNPOSSOLL NUMERIC(18, 2);
DECLARE VARIABLE RGNPOS NUMERIC(18, 2);
DECLARE VARIABLE RGNPOSNETTO NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGSOLL NUMERIC(18, 2);
DECLARE VARIABLE RGNEIG NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGNETTO NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGSOLL_VZ1 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIG_VZ1 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGNETTO_VZ1 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGSOLL_VZ2 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIG_VZ2 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGNETTO_VZ2 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGSOLL_VZ3 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIG_VZ3 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGNETTO_VZ3 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGSOLL_VZ4 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIG_VZ4 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGNETTO_VZ4 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGSOLL_VZ5 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIG_VZ5 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGNETTO_VZ5 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGSOLL_VZ6 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIG_VZ6 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGNETTO_VZ6 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGSOLL_VZ7 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIG_VZ7 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGNETTO_VZ7 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGSOLL_VZ8 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIG_VZ8 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGNETTO_VZ8 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGSOLL_SUMVZ1 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIG_SUMVZ1 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGNETTO_SUMVZ1 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGSOLL_SUMVZ2 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIG_SUMVZ2 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGNETTO_SUMVZ2 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGSOLL_SUMVZ3 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIG_SUMVZ3 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGNETTO_SUMVZ3 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGSOLL_SUMVZ4 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIG_SUMVZ4 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGNETTO_SUMVZ4 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGSOLL_SUMVZ5 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIG_SUMVZ5 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGNETTO_SUMVZ5 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGSOLL_SUMVZ6 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIG_SUMVZ6 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGNETTO_SUMVZ6 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGSOLL_SUMVZ7 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIG_SUMVZ7 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGNETTO_SUMVZ7 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGSOLL_SUMVZ8 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIG_SUMVZ8 NUMERIC(18, 2);
DECLARE VARIABLE RGNEIGNETTO_SUMVZ8 NUMERIC(18, 2);
BEGIN
 /* Konten selektieren */
 if (:BBEW = 'J') then
  BEGIN
   IKVON = 100000;
   IKBIS = 199999;
   IART1 = 10;
   IART2 = 11;
   IART3 = 12;
   IART4 = 13; 
  END
 else
  BEGIN
   IKVON = 200000;
   IKBIS = 299999;
   IART1 = 15;
   IART2 = 16;
   IART3 = 17;
   IART4 = 18;
  END
 /* W_Datum abfragen */
 if (WDATUM = 'N') then
  begin
   DTVONBDATUM = DTVON;
   DTBISBDATUM = DTBIS;
   DTVONWDATUM = '01.01.1900';
   DTBISWDATUM = '01.01.1900';
  end
 else
  begin
   DTVONBDATUM = '01.01.1900';
   DTBISBDATUM = '01.01.1900';
   DTVONWDATUM = DTVON;
   DTBISWDATUM = DTBIS;
  end
 RSUMVORTRAG = 0;
 RSUMGSOLL1 = 0; RSUMGBEZ1 = 0; RSUMGBEZNETTO1 = 0;
 RSUMGSOLL2 = 0; RSUMGBEZ2 = 0; RSUMGBEZNETTO2 = 0;
 RSUMGSOLL3 = 0; RSUMGBEZ3 = 0; RSUMGBEZNETTO3 = 0;
 RSUMGSOLL4 = 0; RSUMGBEZ4 = 0; RSUMGBEZNETTO4 = 0;
 SVZ1BEZ = ''; RVZ1SUMSOLL = 0; RVZ1SUMBEZ = 0; RVZ1SUMBEZNETTO = 0;
 SVZ2BEZ = ''; RVZ2SUMSOLL = 0; RVZ2SUMBEZ = 0; RVZ2SUMBEZNETTO = 0;
 SVZ3BEZ = ''; RVZ3SUMSOLL = 0; RVZ3SUMBEZ = 0; RVZ3SUMBEZNETTO = 0;
 SVZ4BEZ = ''; RVZ4SUMSOLL = 0; RVZ4SUMBEZ = 0; RVZ4SUMBEZNETTO = 0;
 SVZ5BEZ = ''; RVZ5SUMSOLL = 0; RVZ5SUMBEZ = 0; RVZ5SUMBEZNETTO = 0;
 SVZ6BEZ = ''; RVZ6SUMSOLL = 0; RVZ6SUMBEZ = 0; RVZ6SUMBEZNETTO = 0;
 SVZ7BEZ = ''; RVZ7SUMSOLL = 0; RVZ7SUMBEZ = 0; RVZ7SUMBEZNETTO = 0;
 SVZ8BEZ = ''; RVZ8SUMSOLL = 0; RVZ8SUMBEZ = 0; RVZ8SUMBEZNETTO = 0;
 SVZ9BEZ = ''; RVZ9SUMSOLL = 0; RVZ9SUMBEZ = 0; RVZ9SUMBEZNETTO = 0;
 SVZ10BEZ = ''; RVZ10SUMSOLL = 0; RVZ10SUMBEZ = 0; RVZ10SUMBEZNETTO = 0;
 RGNEIG_SUMVZ1 = 0; RGNEIGNETTO_SUMVZ1 = 0; RGNEIGSOLL_SUMVZ1 = 0;
 RGNEIG_SUMVZ2 = 0; RGNEIGNETTO_SUMVZ2 = 0; RGNEIGSOLL_SUMVZ2 = 0; 
 RGNEIG_SUMVZ3 = 0; RGNEIGNETTO_SUMVZ3 = 0; RGNEIGSOLL_SUMVZ3 = 0; 
 RGNEIG_SUMVZ4 = 0; RGNEIGNETTO_SUMVZ4 = 0; RGNEIGSOLL_SUMVZ4 = 0; 
 RGNEIG_SUMVZ5 = 0; RGNEIGNETTO_SUMVZ5 = 0; RGNEIGSOLL_SUMVZ5 = 0; 
 RGNEIG_SUMVZ6 = 0; RGNEIGNETTO_SUMVZ6 = 0; RGNEIGSOLL_SUMVZ6 = 0; 
 RGNEIG_SUMVZ7 = 0; RGNEIGNETTO_SUMVZ7 = 0; RGNEIGSOLL_SUMVZ7 = 0; 
 RGNEIG_SUMVZ8 = 0; RGNEIGNETTO_SUMVZ8 = 0; RGNEIGSOLL_SUMVZ8 = 0;  
 /* Auswertung */
 FOR SELECT konten.onr, konten.knr, konten.knrstr, konten.kbez from konten, objekte
  WHERE konten.knr >= :IKVON and konten.knr <= :IKBIS and konten.onr=objekte.onr and ((knr<200000 and bsonst<>1) or (knr>199999 and bsonst<>0)) order by konten.onr, knr
  INTO :IONR, :KNR, :KNRSTR, :SNAME
 DO
  BEGIN
   RTVORTRAG = 0;
   RTGSOLL1 = 0; RTGBEZ1 = 0; RTGBEZNETTO1 = 0;
   RTGSOLL2 = 0; RTGBEZ2 = 0; RTGBEZNETTO2 = 0;
   RTGSOLL3 = 0; RTGBEZ3 = 0; RTGBEZNETTO3 = 0;
   RTGSOLL4 = 0; RTGBEZ4 = 0; RTGBEZNETTO4 = 0;
   RVORTRAG = 0;
   RGSOLL1 = 0; RGBEZ1 = 0; RGBEZNETTO1 = 0;
   RGSOLL2 = 0; RGBEZ2 = 0; RGBEZNETTO2 = 0;
   RGSOLL3 = 0; RGBEZ3 = 0; RGBEZNETTO3 = 0;
   RGSOLL4 = 0; RGBEZ4 = 0; RGBEZNETTO4 = 0; 
   RGNEIG = 0; RGNEIGNETTO = 0; RGNEIGSOLL = 0;
   RGNEIG_VZ1 = 0; RGNEIGNETTO_VZ1 = 0; RGNEIGSOLL_VZ1 = 0;  
   RGNEIG_VZ2 = 0; RGNEIGNETTO_VZ2 = 0; RGNEIGSOLL_VZ2 = 0;  
   RGNEIG_VZ3 = 0; RGNEIGNETTO_VZ3 = 0; RGNEIGSOLL_VZ3 = 0; 
   RGNEIG_VZ4 = 0; RGNEIGNETTO_VZ4 = 0; RGNEIGSOLL_VZ4 = 0; 
   RGNEIG_VZ5 = 0; RGNEIGNETTO_VZ5 = 0; RGNEIGSOLL_VZ5 = 0; 
   RGNEIG_VZ6 = 0; RGNEIGNETTO_VZ6 = 0; RGNEIGSOLL_VZ6 = 0; 
   RGNEIG_VZ7 = 0; RGNEIGNETTO_VZ7 = 0; RGNEIGSOLL_VZ7 = 0; 
   RGNEIG_VZ8 = 0; RGNEIGNETTO_VZ8 = 0; RGNEIGSOLL_VZ8 = 0;     
   GESCHOSS = NULL;
   MIETEINNAHME_ART = NULL;
   /* Vortrag Sollstellungen */
   select SUM(BETRAG) from buchung
    where ONRSOLL = :IONR and KSOLL = :KNR and ((Datum < :DTVONBDATUM) or (WDatum < :DTVONWDATUM)) and OPNR IS NOT NULL AND OPBETRAG IS NOT NULL
    into :RTVORTRAG;
   IF (RTVORTRAG IS NULL) THEN
    RTVORTRAG = 0;
   /* Vortrag Zahlung im Konto (H) */
   SELECT SUM(BETRAG) from buchung
    where ONRHABEN = :IONR and KHABEN = :KNR and (ARTOP IS NOT NULL) and ((Datum < :DTVONBDATUM) or (WDatum < :DTVONWDATUM))
    INTO :RTMP1;
   IF (RTMP1 IS NULL) THEN
    RTMP1 = 0;
   RTMP2=RTMP1;
   /* Vortrag Zahlung im Konto (S) */
   SELECT SUM(BETRAG) from buchung
   where ONRSOLL = :IONR and KSOLL = :KNR and (ARTOP IS NOT NULL) and ((Datum < :DTVONBDATUM) or (WDatum < :DTVONWDATUM))
   INTO :RTMP1;
   IF (RTMP1 IS NULL) THEN
    RTMP1 = 0;
   RTVORTRAG = RTMP2 - RTMP1 - RTVORTRAG;
   RTMP2 = 0;
   RTMP1 = 0;
   for select KNR,KBEZ,KKLASSE from konten where ONR = :IONR and ((KKLASSE = :IART1) or (KKLASSE = :IART2) or (KKLASSE = :IART3) or (KKLASSE = :IART4) or (KKLASSE >= 110)) and KNR <> 60190
    order by 1
   into :ITMPKNR, :SKBEZ, :ITMPKLASSE
   do
    begin
     ITMP1 = 0;
     ITMP2 = 0;
     RTMP1 = 0;
     RTMP2 = 0;
     RPOSSOLL = 0;
     RPOSBEZ = 0;
     RPOSBEZNETTO = 0;
     RGNPOS = 0;
     RGNPOSNETTO = 0;
     RGNPOSSOLL = 0;
     /*                */
     /* SOLLSTELLUNGEN */
     /*                */
     for select SUM(BETRAG), ARTHABEN, GN from buchung
      where ONRSOLL = :IONR and KSOLL = :KNR and KHABEN = :ITMPKNR and ((Datum >= :DTVONBDATUM and Datum <= :DTBISBDATUM) or (WDatum >= :DTVONWDATUM and WDatum <= :DTBISWDATUM)) and OPNR IS NOT NULL AND OPBETRAG IS NOT NULL
      group by KHABEN, ARTHABEN, GN
      into :RTMP1, :ITMP2, :GN
     do
      begin
       IF (RTMP1 IS NULL) THEN
        RTMP1 = 0;
       RPOSSOLL = RPOSSOLL + RTMP1;
       /*  */
       if (GN = 1) then
        begin
         ITMP2 = IART4;
         RGNPOSSOLL = RGNPOSSOLL + RTMP1;
        end
       IF (ITMP2 = IART1) THEN
        BEGIN
         RTGSOLL1 = RTGSOLL1 + RTMP1;
        END
       ELSE
        IF ((ITMP2 = IART2) or (ITMP2 >= 110 and ITMP2 <= 170)) THEN
         BEGIN
          RTGSOLL2 = RTGSOLL2 + RTMP1;
         END
        ELSE
         IF (ITMP2 = IART3) THEN
          BEGIN
           RTGSOLL3 = RTGSOLL3 + RTMP1;
          END
         ELSE
          IF (ITMP2 = IART4) THEN
           BEGIN
            RTGSOLL4 = RTGSOLL4 + RTMP1;
           END
       RTMP1 = 0;
       ITMP2 = 0;
      end
     /*           */
     /* ZAHLUNGEN */
     /*           */
     /* Zahlung im HABEN KEIN SPLIT */
     for select SUM(BETRAG), SUM((BETRAG*100) / (100+MWSTOP)), ARTOP, GN from buchung
      where ONRHABEN = :IONR and KNROP = :ITMPKNR and KHABEN = :KNR and ((Datum >= :DTVONBDATUM and Datum <= :DTBISBDATUM) or (WDatum >= :DTVONWDATUM and WDatum <= :DTBISWDATUM)) AND (ARTOP <> 0)
      group by ARTOP, GN
     INTO :RTMP1, :RTMP2, :ITMP2, :GN
     do
      begin
       if (RTMP1 IS NULL) then
        RTMP1 = 0;
       if (RTMP2 IS NULL) then
        RTMP2 = 0;
       RPOSBEZ = RPOSBEZ + RTMP1;
       RPOSBEZNETTO = RPOSBEZNETTO + RTMP2;
       /*  */
       if (GN = 1) then
        begin
         ITMP2 = IART4;
         RGNPOS = RGNPOS + RTMP1;
         RGNPOSNETTO = RGNPOSNETTO + RTMP2;
        end
       IF (ITMP2 = IART1) THEN
        BEGIN
         RTGBEZ1 = RTGBEZ1 + RTMP1;
         RTGBEZNETTO1 = RTGBEZNETTO1 + RTMP2;
        END
       ELSE
        IF ((ITMP2 = IART2) or (ITMP2 >= 110 and ITMP2 <= 170)) THEN
         BEGIN
          RTGBEZ2 = RTGBEZ2 + RTMP1;
          RTGBEZNETTO2 = RTGBEZNETTO2 + RTMP2;
         END
        ELSE
         IF (ITMP2 = IART3) THEN
          BEGIN
           RTGBEZ3 = RTGBEZ3 + RTMP1;
           RTGBEZNETTO3 = RTGBEZNETTO3 + RTMP2;
          END
         ELSE
          IF (ITMP2 = IART4) THEN
           BEGIN
            RTGBEZ4 = RTGBEZ4 + RTMP1;
            RTGBEZNETTO4 = RTGBEZNETTO4 + RTMP2;
           END
       RTMP1 = 0;
       RTMP2 = 0;
       ITMP2 = 0;
       GN = 0;
      end
     /* ZAHLUNG im SOLL KEIN SPLIT */
     for SELECT SUM(BETRAG), SUM((BETRAG*100) / (100+MWSTOP)), ARTOP, GN from buchung
      where ONRSOLL=:IONR and KNROP = :ITMPKNR and KSOLL=:KNR and ((Datum >= :DTVONBDATUM and Datum <= :DTBISBDATUM) or (WDatum >= :DTVONWDATUM and WDatum <= :DTBISWDATUM)) AND (ARTOP<>0)
      group by ARTOP, GN
     INTO :RTMP1, :RTMP2, :ITMP2, :GN
     do
      begin
       if (RTMP1 IS NULL) then
        RTMP1 = 0;
       if (RTMP2 IS NULL) then
        RTMP2 = 0;
       RPOSBEZ = RPOSBEZ - RTMP1;
       RPOSBEZNETTO = RPOSBEZNETTO - RTMP2;
       /*  */
       if (GN = 1) then
        begin
         ITMP2 = IART4;
         RGNPOS = RGNPOS - RTMP1;
         RGNPOSNETTO = RGNPOSNETTO - RTMP2;
        end
       IF (ITMP2 = IART1) THEN
        BEGIN
         RTGBEZ1 = RTGBEZ1 - RTMP1;
         RTGBEZNETTO1 = RTGBEZNETTO1 - RTMP2;
        END
       ELSE
        IF ((ITMP2 = IART2) or (ITMP2 >= 110 and ITMP2 <= 170)) THEN
         BEGIN
          RTGBEZ2 = RTGBEZ2 - RTMP1;
          RTGBEZNETTO2 = RTGBEZNETTO2 - RTMP2;
         END
        ELSE
         IF (ITMP2 = IART3) THEN
          BEGIN
           RTGBEZ3 = RTGBEZ3 - RTMP1;
           RTGBEZNETTO3 = RTGBEZNETTO3 - RTMP2;
          END
         ELSE
          IF (ITMP2 = IART4) THEN
           BEGIN
            RTGBEZ4 = RTGBEZ4 - RTMP1;
            RTGBEZNETTO4 = RTGBEZNETTO4 - RTMP2;
           END
       RTMP1 = 0;
       RTMP2 = 0;
       ITMP2 = 0;
       GN = 0;
      end
     /* Zahlung im HABEN split*/
     for select sum(buchzahl.betrag), SUM((buchzahl.BETRAG*100) / (100+buchzahl.MWSTOP)), buchzahl.artop, GN from buchzahl, buchung
      where buchzahl.bnr=buchung.bnr
      and onrhaben=:IONR and buchzahl.knr=:ITMPKNR and khaben=:KNR and buchung.ARTOP=0 and ((Datum >= :DTVONBDATUM and Datum <= :DTBISBDATUM) or (WDatum >= :DTVONWDATUM and WDatum <= :DTBISWDATUM))
      group by buchzahl.artop, GN
     into :RTMP1, :RTMP2, :ITMP2, :GN
     do
      begin
       if (RTMP1 IS NULL) then
        RTMP1 = 0;
       if (RTMP2 IS NULL) then
        RTMP2 = 0;
       RPOSBEZ = RPOSBEZ + RTMP1;
       RPOSBEZNETTO = RPOSBEZNETTO + RTMP2;
       /*  */
       if (GN = 1) then
        begin
         ITMP2 = IART4;
         RGNPOS = RGNPOS + RTMP1;
         RGNPOSNETTO = RGNPOSNETTO + RTMP2;
        end
       IF (ITMP2 = IART1) THEN
        BEGIN
         RTGBEZ1 = RTGBEZ1 + RTMP1;
         RTGBEZNETTO1 = RTGBEZNETTO1 + RTMP2;
        END
       ELSE
        IF ((ITMP2 = IART2) or (ITMP2 >= 110 and ITMP2 <= 170)) THEN
         BEGIN
          RTGBEZ2 = RTGBEZ2 + RTMP1;
          RTGBEZNETTO2 = RTGBEZNETTO2 + RTMP2;
         END
        ELSE
         IF (ITMP2 = IART3) THEN
          BEGIN
           RTGBEZ3 = RTGBEZ3 + RTMP1;
           RTGBEZNETTO3 = RTGBEZNETTO3 + RTMP2;
          END
         ELSE
          IF (ITMP2 = IART4) THEN
           BEGIN
            RTGBEZ4 = RTGBEZ4 + RTMP1;
            RTGBEZNETTO4 = RTGBEZNETTO4 + RTMP2;
           END
      end
     RTMP1 = 0;
     RTMP2 = 0;
     ITMP2 = 0;
     GN = 0;
     /* Zahlung im Soll split */
     for select sum(buchzahl.betrag), SUM((buchzahl.BETRAG*100) / (100+buchzahl.MWSTOP)), buchzahl.artop, GN from buchzahl, buchung
      where buchzahl.bnr=buchung.bnr
      and onrsoll=:IONR and buchzahl.knr=:ITMPKNR and ksoll=:KNR and buchung.ARTOP=0 and ((Datum >= :DTVONBDATUM and Datum <= :DTBISBDATUM) or (WDatum >= :DTVONWDATUM and WDatum <= :DTBISWDATUM))
      group by buchzahl.artop, GN
     into :RTMP1, :RTMP2, :ITMP2, :GN
     do
      begin
       if (RTMP1 IS NULL) then
        RTMP1 = 0;
       if (RTMP2 IS NULL) then
        RTMP2 = 0;
       RPOSBEZ = RPOSBEZ - RTMP1;
       RPOSBEZNETTO = RPOSBEZNETTO - RTMP2;
       /*  */
       if (GN = 1) then
        begin
         ITMP2 = IART4;
         RGNPOS = RGNPOS - RTMP1;
         RGNPOSNETTO = RGNPOSNETTO - RTMP2;
        end
       IF (ITMP2 = IART1) THEN
        BEGIN
         RTGBEZ1 = RTGBEZ1 - RTMP1;
         RTGBEZNETTO1 = RTGBEZNETTO1 - RTMP2;
        END
       ELSE
        IF ((ITMP2 = IART2) or (ITMP2 >= 110 and ITMP2 <= 170)) THEN
         BEGIN
          RTGBEZ2 = RTGBEZ2 - RTMP1;
          RTGBEZNETTO2 = RTGBEZNETTO2 - RTMP2;
         END
        ELSE
         IF (ITMP2 = IART3) THEN
          BEGIN
           RTGBEZ3 = RTGBEZ3 - RTMP1;
           RTGBEZNETTO3 = RTGBEZNETTO3 - RTMP2;
          END
         ELSE
          IF (ITMP2 = IART4) THEN
           BEGIN
            RTGBEZ4 = RTGBEZ4 - RTMP1;
            RTGBEZNETTO4 = RTGBEZNETTO4 - RTMP2;
           END
      end
     /*  */
     BISNULL = 'N';
     ISMASTER = 0;
     VZKNR= ITMPKNR;
     /* Eventuell GN wieder abziehen */
     RPOSSOLL = RPOSSOLL - RGNPOSSOLL;
     RPOSBEZ = RPOSBEZ - RGNPOS;
     RPOSBEZNETTO = RPOSBEZNETTO - RGNPOSNETTO;
     RGNEIG = RGNEIG + RGNPOS;
     RGNEIGNETTO = RGNEIGNETTO + RGNPOSNETTO;
     RGNEIGSOLL = RGNEIGSOLL + RGNPOSSOLL;
     if ((RPOSSOLL <> 0) or (RPOSBEZ <> 0) or (RPOSBEZNETTO <> 0)) then
      begin
       /* VZ1 */
       if ((ITMPKNR = 60000) or (ITMPKNR = 60100)) then
        begin
         SVZ1BEZ = SKBEZ;
         RVZ1SUMSOLL = RVZ1SUMSOLL + RPOSSOLL;
         RVZ1SUMBEZ = RVZ1SUMBEZ + RPOSBEZ;
         RVZ1SUMBEZNETTO = RVZ1SUMBEZNETTO + RPOSBEZNETTO;
        end
       /* VZ2 */
       if ((ITMPKNR = 60010) or (ITMPKNR = 60110)) then
        begin
         SVZ2BEZ = SKBEZ;
         RVZ2SUMSOLL = RVZ2SUMSOLL + RPOSSOLL;
         RVZ2SUMBEZ = RVZ2SUMBEZ + RPOSBEZ;
         RVZ2SUMBEZNETTO = RVZ2SUMBEZNETTO + RPOSBEZNETTO;
        end
       /* VZ3 */
       if ((ITMPKNR = 60020) or (ITMPKNR = 60120)) then
        begin
         SVZ3BEZ = SKBEZ;
         RVZ3SUMSOLL = RVZ3SUMSOLL + RPOSSOLL;
         RVZ3SUMBEZ = RVZ3SUMBEZ + RPOSBEZ;
         RVZ3SUMBEZNETTO = RVZ3SUMBEZNETTO + RPOSBEZNETTO;
        end
       /* VZ4 */
       if ((ITMPKNR = 60030) or (ITMPKNR = 60130)) then
        begin
         SVZ4BEZ = SKBEZ;
         RVZ4SUMSOLL = RVZ4SUMSOLL + RPOSSOLL;
         RVZ4SUMBEZ = RVZ4SUMBEZ + RPOSBEZ;
         RVZ4SUMBEZNETTO = RVZ4SUMBEZNETTO + RPOSBEZNETTO;
        end
       /* VZ5 */
       if ((ITMPKNR = 60040) or (ITMPKNR = 60140)) then
        begin
         SVZ5BEZ = SKBEZ;
         RVZ5SUMSOLL = RVZ5SUMSOLL + RPOSSOLL;
         RVZ5SUMBEZ = RVZ5SUMBEZ + RPOSBEZ;
         RVZ5SUMBEZNETTO = RVZ5SUMBEZNETTO + RPOSBEZNETTO;
        end
       /* VZ6 */
       if ((ITMPKNR = 60050) or (ITMPKNR = 60150)) then
        begin
         SVZ6BEZ = SKBEZ;
         RVZ6SUMSOLL = RVZ6SUMSOLL + RPOSSOLL;
         RVZ6SUMBEZ = RVZ6SUMBEZ + RPOSBEZ;
         RVZ6SUMBEZNETTO = RVZ6SUMBEZNETTO + RPOSBEZNETTO;
        end
       /* VZ7 */
       if ((ITMPKNR = 60060) or (ITMPKNR = 60160)) then
        begin
         SVZ7BEZ = SKBEZ;
         RVZ7SUMSOLL = RVZ7SUMSOLL + RPOSSOLL;
         RVZ7SUMBEZ = RVZ7SUMBEZ + RPOSBEZ;
         RVZ7SUMBEZNETTO = RVZ7SUMBEZNETTO + RPOSBEZNETTO;
        end
       /* VZ8 */
       if ((ITMPKNR = 60070) or (ITMPKNR = 60170)) then
        begin
         SVZ8BEZ = SKBEZ;
         RVZ8SUMSOLL = RVZ8SUMSOLL + RPOSSOLL;
         RVZ8SUMBEZ = RVZ8SUMBEZ + RPOSBEZ;
         RVZ8SUMBEZNETTO = RVZ8SUMBEZNETTO + RPOSBEZNETTO;
        end
       /* VZ Sonderumlage */
       if (ITMPKNR = 60180) then
        begin
         SVZ9BEZ = SKBEZ;
         RVZ9SUMSOLL = RVZ9SUMSOLL + RPOSSOLL;
         RVZ9SUMBEZ = RVZ9SUMBEZ + RPOSBEZ;
         RVZ9SUMBEZNETTO = RVZ9SUMBEZNETTO + RPOSBEZNETTO;
        end
       /* Guthaben/Nachzahlungen */
       if ((ITMPKNR = 60090)) then
        begin
         SVZ10BEZ = 'Guthaben/Nachzahlungen';
         if (ITMPKNR = 60090) then
          begin
           RVZ10SUMSOLL = RVZ10SUMSOLL + RPOSSOLL;
           RVZ10SUMBEZ = RVZ10SUMBEZ + RPOSBEZ;
           RVZ10SUMBEZNETTO = RVZ10SUMBEZNETTO + RPOSBEZNETTO;
          end
         else
          begin
           RVZ10SUMSOLL = RVZ10SUMSOLL + RGNPOSSOLL;
           RVZ10SUMBEZ = RVZ10SUMBEZ + RGNPOS;
           RVZ10SUMBEZNETTO = RVZ10SUMBEZNETTO + RGNPOSNETTO;
          end
        end
       /* Speichern */
       SUSPEND;
      end
     /* G/N EigentÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼mer */ 
     if ((RGNPOSSOLL <> 0) or (RGNPOS <> 0) or (RGNPOSNETTO <> 0)) then
      begin
       /* VZ1 */
       if (ITMPKNR = 60100) then
        begin
         SVZ1BEZ = SKBEZ;
         RGNEIG_VZ1 = RGNEIG_VZ1 + RGNPOS;
         RGNEIGNETTO_VZ1 = RGNEIGNETTO_VZ1 + RGNPOSNETTO;
         RGNEIGSOLL_VZ1 = RGNEIGSOLL_VZ1 + RGNPOSSOLL; 
         RGNEIG_SUMVZ1 = RGNEIG_SUMVZ1 + RGNPOS;
         RGNEIGNETTO_SUMVZ1 = RGNEIGNETTO_SUMVZ1 + RGNPOSNETTO;
         RGNEIGSOLL_SUMVZ1 = RGNEIGSOLL_SUMVZ1 + RGNPOSSOLL;           
        end
       /* VZ2 */
       if (ITMPKNR = 60110) then
        begin
         SVZ2BEZ = SKBEZ;
         RGNEIG_VZ2 = RGNEIG_VZ2 + RGNPOS;
         RGNEIGNETTO_VZ2 = RGNEIGNETTO_VZ2 + RGNPOSNETTO;
         RGNEIGSOLL_VZ2 = RGNEIGSOLL_VZ2 + RGNPOSSOLL;
         RGNEIG_SUMVZ2 = RGNEIG_SUMVZ2 + RGNPOS;
         RGNEIGNETTO_SUMVZ2 = RGNEIGNETTO_SUMVZ2 + RGNPOSNETTO;
         RGNEIGSOLL_SUMVZ2 = RGNEIGSOLL_SUMVZ2 + RGNPOSSOLL;          
        end
       /* VZ3 */
       if (ITMPKNR = 60120) then
        begin
         SVZ3BEZ = SKBEZ;
         RGNEIG_VZ3 = RGNEIG_VZ3 + RGNPOS;
         RGNEIGNETTO_VZ3 = RGNEIGNETTO_VZ3 + RGNPOSNETTO;
         RGNEIGSOLL_VZ3 = RGNEIGSOLL_VZ3 + RGNPOSSOLL;
         RGNEIG_SUMVZ3 = RGNEIG_SUMVZ3 + RGNPOS;
         RGNEIGNETTO_SUMVZ3 = RGNEIGNETTO_SUMVZ3 + RGNPOSNETTO;
         RGNEIGSOLL_SUMVZ3 = RGNEIGSOLL_SUMVZ3 + RGNPOSSOLL;                   
        end
       /* VZ4 */
       if (ITMPKNR = 60130) then
        begin
         SVZ4BEZ = SKBEZ;        
         RGNEIG_VZ4 = RGNEIG_VZ4 + RGNPOS;
         RGNEIGNETTO_VZ4 = RGNEIGNETTO_VZ4 + RGNPOSNETTO;
         RGNEIGSOLL_VZ4 = RGNEIGSOLL_VZ4 + RGNPOSSOLL;
         RGNEIG_SUMVZ4 = RGNEIG_SUMVZ4 + RGNPOS;
         RGNEIGNETTO_SUMVZ4 = RGNEIGNETTO_SUMVZ4 + RGNPOSNETTO;
         RGNEIGSOLL_SUMVZ4 = RGNEIGSOLL_SUMVZ4 + RGNPOSSOLL;                   
        end
       /* VZ5 */
       if (ITMPKNR = 60140) then
        begin
         SVZ5BEZ = SKBEZ;        
         RGNEIG_VZ5 = RGNEIG_VZ5 + RGNPOS;
         RGNEIGNETTO_VZ5 = RGNEIGNETTO_VZ5 + RGNPOSNETTO;
         RGNEIGSOLL_VZ5 = RGNEIGSOLL_VZ5 + RGNPOSSOLL; 
         RGNEIG_SUMVZ5 = RGNEIG_SUMVZ5 + RGNPOS;
         RGNEIGNETTO_SUMVZ5 = RGNEIGNETTO_SUMVZ5 + RGNPOSNETTO;
         RGNEIGSOLL_SUMVZ5 = RGNEIGSOLL_SUMVZ5 + RGNPOSSOLL;                  
        end
       /* VZ6 */
       if (ITMPKNR = 60150) then
        begin
         SVZ6BEZ = SKBEZ;        
         RGNEIG_VZ6 = RGNEIG_VZ6 + RGNPOS;
         RGNEIGNETTO_VZ6 = RGNEIGNETTO_VZ6 + RGNPOSNETTO;
         RGNEIGSOLL_VZ6 = RGNEIGSOLL_VZ6 + RGNPOSSOLL;
         RGNEIG_SUMVZ6 = RGNEIG_SUMVZ6 + RGNPOS;
         RGNEIGNETTO_SUMVZ6 = RGNEIGNETTO_SUMVZ6 + RGNPOSNETTO;
         RGNEIGSOLL_SUMVZ6 = RGNEIGSOLL_SUMVZ6 + RGNPOSSOLL;          
        end
       /* VZ7 */
       if (ITMPKNR = 60160) then
        begin
         SVZ7BEZ = SKBEZ;        
         RGNEIG_VZ7 = RGNEIG_VZ7 + RGNPOS;
         RGNEIGNETTO_VZ7 = RGNEIGNETTO_VZ7 + RGNPOSNETTO;
         RGNEIGSOLL_VZ7 = RGNEIGSOLL_VZ7 + RGNPOSSOLL;
         RGNEIG_SUMVZ7 = RGNEIG_SUMVZ7 + RGNPOS;
         RGNEIGNETTO_SUMVZ7 = RGNEIGNETTO_SUMVZ7 + RGNPOSNETTO;
         RGNEIGSOLL_SUMVZ7 = RGNEIGSOLL_SUMVZ7 + RGNPOSSOLL;                   
        end
       /* VZ8 */
       if (ITMPKNR = 60170) then
        begin
         SVZ8BEZ = SKBEZ;        
         RGNEIG_VZ8 = RGNEIG_VZ8 + RGNPOS;
         RGNEIGNETTO_VZ8 = RGNEIGNETTO_VZ8 + RGNPOSNETTO;
         RGNEIGSOLL_VZ8 = RGNEIGSOLL_VZ8 + RGNPOSSOLL;
         RGNEIG_SUMVZ8 = RGNEIG_SUMVZ8 + RGNPOS;
         RGNEIGNETTO_SUMVZ8 = RGNEIGNETTO_SUMVZ8 + RGNPOSNETTO;
         RGNEIGSOLL_SUMVZ8 = RGNEIGSOLL_SUMVZ8 + RGNPOSSOLL;                   
        end       
      end       
    END    
   /* */ 
   if ((RGNEIG <> 0) or (RGNEIGNETTO <> 0) or (RGNEIGSOLL <> 0)) then
    begin
     if ((RGNEIG_VZ1 <> 0) or (RGNEIGNETTO_VZ1 <> 0) or (RGNEIGSOLL_VZ1 <> 0)) then
      begin
       SKBEZ = 'Guthaben/Nachzahlungen (' || SVZ1BEZ || ')'; RVORTRAG = 0; RGSOLL1 = 0; RGBEZ1 = 0;
       RGBEZNETTO1 = 0; RGSOLL2 = 0; RGBEZ2 = 0; RGBEZNETTO2 = 0; RGSOLL3 = 0; RGBEZ3 = 0;
       RGBEZNETTO3 = 0; RGSOLL4 = 0; RGBEZ4 = 0; RGBEZNETTO4 = 0; RPOSSOLL = RGNEIGSOLL_VZ1;
       RPOSBEZ = RGNEIG_VZ1; RPOSBEZNETTO = RGNEIGNETTO_VZ1; SVZ10BEZ = 'Guthaben/Nachzahlungen (' || SVZ1BEZ || ')';
       BISNULL = 'N';
       ISMASTER = 0;
       VZKNR = 60190;
       SUSPEND;
      END 
     /* */
     if ((RGNEIG_VZ2 <> 0) or (RGNEIGNETTO_VZ2 <> 0) or (RGNEIGSOLL_VZ2 <> 0)) then
      begin
       SKBEZ = 'Guthaben/Nachzahlungen (' || SVZ2BEZ || ')'; RVORTRAG = 0; RGSOLL1 = 0; RGBEZ1 = 0;
       RGBEZNETTO1 = 0; RGSOLL2 = 0; RGBEZ2 = 0; RGBEZNETTO2 = 0; RGSOLL3 = 0; RGBEZ3 = 0;
       RGBEZNETTO3 = 0; RGSOLL4 = 0; RGBEZ4 = 0; RGBEZNETTO4 = 0; RPOSSOLL = RGNEIGSOLL_VZ2;
       RPOSBEZ = RGNEIG_VZ2; RPOSBEZNETTO = RGNEIGNETTO_VZ2; SVZ10BEZ = 'Guthaben/Nachzahlungen (' || SVZ2BEZ || ')';
       BISNULL = 'N';
       ISMASTER = 0;
       VZKNR = 60191;
       SUSPEND;
      END
     /* */
     if ((RGNEIG_VZ3 <> 0) or (RGNEIGNETTO_VZ3 <> 0) or (RGNEIGSOLL_VZ3 <> 0)) then
      begin
       SKBEZ = 'Guthaben/Nachzahlungen (' || SVZ3BEZ || ')'; RVORTRAG = 0; RGSOLL1 = 0; RGBEZ1 = 0;
       RGBEZNETTO1 = 0; RGSOLL2 = 0; RGBEZ2 = 0; RGBEZNETTO2 = 0; RGSOLL3 = 0; RGBEZ3 = 0;
       RGBEZNETTO3 = 0; RGSOLL4 = 0; RGBEZ4 = 0; RGBEZNETTO4 = 0; RPOSSOLL = RGNEIGSOLL_VZ3;
       RPOSBEZ = RGNEIG_VZ3; RPOSBEZNETTO = RGNEIGNETTO_VZ3; SVZ10BEZ = 'Guthaben/Nachzahlungen (' || SVZ3BEZ || ')';
       BISNULL = 'N';
       ISMASTER = 0;
       VZKNR = 60192;
       SUSPEND;
      END 
     /* */
     if ((RGNEIG_VZ4 <> 0) or (RGNEIGNETTO_VZ4 <> 0) or (RGNEIGSOLL_VZ4 <> 0)) then
      begin
       SKBEZ = 'Guthaben/Nachzahlungen (' || SVZ4BEZ || ')'; RVORTRAG = 0; RGSOLL1 = 0; RGBEZ1 = 0;
       RGBEZNETTO1 = 0; RGSOLL2 = 0; RGBEZ2 = 0; RGBEZNETTO2 = 0; RGSOLL3 = 0; RGBEZ3 = 0;
       RGBEZNETTO3 = 0; RGSOLL4 = 0; RGBEZ4 = 0; RGBEZNETTO4 = 0; RPOSSOLL = RGNEIGSOLL_VZ4;
       RPOSBEZ = RGNEIG_VZ4; RPOSBEZNETTO = RGNEIGNETTO_VZ4; SVZ10BEZ = 'Guthaben/Nachzahlungen (' || SVZ4BEZ || ')';
       BISNULL = 'N';
       ISMASTER = 0;
       VZKNR = 60193;
       SUSPEND;
      END
     /* */
     if ((RGNEIG_VZ5 <> 0) or (RGNEIGNETTO_VZ5 <> 0) or (RGNEIGSOLL_VZ5 <> 0)) then
      begin
       SKBEZ = 'Guthaben/Nachzahlungen (' || SVZ5BEZ || ')'; RVORTRAG = 0; RGSOLL1 = 0; RGBEZ1 = 0;
       RGBEZNETTO1 = 0; RGSOLL2 = 0; RGBEZ2 = 0; RGBEZNETTO2 = 0; RGSOLL3 = 0; RGBEZ3 = 0;
       RGBEZNETTO3 = 0; RGSOLL4 = 0; RGBEZ4 = 0; RGBEZNETTO4 = 0; RPOSSOLL = RGNEIGSOLL_VZ5;
       RPOSBEZ = RGNEIG_VZ5; RPOSBEZNETTO = RGNEIGNETTO_VZ5; SVZ10BEZ = 'Guthaben/Nachzahlungen (' || SVZ5BEZ || ')';
       BISNULL = 'N';
       ISMASTER = 0;
       VZKNR = 60194;
       SUSPEND;
      END
     /* */
     if ((RGNEIG_VZ6 <> 0) or (RGNEIGNETTO_VZ6 <> 0) or (RGNEIGSOLL_VZ6 <> 0)) then
      begin
       SKBEZ = 'Guthaben/Nachzahlungen (' || SVZ6BEZ || ')'; RVORTRAG = 0; RGSOLL1 = 0; RGBEZ1 = 0;
       RGBEZNETTO1 = 0; RGSOLL2 = 0; RGBEZ2 = 0; RGBEZNETTO2 = 0; RGSOLL3 = 0; RGBEZ3 = 0;
       RGBEZNETTO3 = 0; RGSOLL4 = 0; RGBEZ4 = 0; RGBEZNETTO4 = 0; RPOSSOLL = RGNEIGSOLL_VZ6;
       RPOSBEZ = RGNEIG_VZ6; RPOSBEZNETTO = RGNEIGNETTO_VZ6; SVZ10BEZ = 'Guthaben/Nachzahlungen (' || SVZ6BEZ || ')';
       BISNULL = 'N';
       ISMASTER = 0;
       VZKNR = 60195;
       SUSPEND;
      END
     /* */
     if ((RGNEIG_VZ7 <> 0) or (RGNEIGNETTO_VZ7 <> 0) or (RGNEIGSOLL_VZ7 <> 0)) then
      begin
       SKBEZ = 'Guthaben/Nachzahlungen (' || SVZ7BEZ || ')'; RVORTRAG = 0; RGSOLL1 = 0; RGBEZ1 = 0;
       RGBEZNETTO1 = 0; RGSOLL2 = 0; RGBEZ2 = 0; RGBEZNETTO2 = 0; RGSOLL3 = 0; RGBEZ3 = 0;
       RGBEZNETTO3 = 0; RGSOLL4 = 0; RGBEZ4 = 0; RGBEZNETTO4 = 0; RPOSSOLL = RGNEIGSOLL_VZ7;
       RPOSBEZ = RGNEIG_VZ7; RPOSBEZNETTO = RGNEIGNETTO_VZ7; SVZ10BEZ = 'Guthaben/Nachzahlungen (' || SVZ7BEZ || ')';
       BISNULL = 'N';
       ISMASTER = 0;
       VZKNR = 60196;
       SUSPEND;
      END   
     /* */
     if ((RGNEIG_VZ8 <> 0) or (RGNEIGNETTO_VZ8 <> 0) or (RGNEIGSOLL_VZ8 <> 0)) then
      begin
       SKBEZ = 'Guthaben/Nachzahlungen (' || SVZ8BEZ || ')'; RVORTRAG = 0; RGSOLL1 = 0; RGBEZ1 = 0;
       RGBEZNETTO1 = 0; RGSOLL2 = 0; RGBEZ2 = 0; RGBEZNETTO2 = 0; RGSOLL3 = 0; RGBEZ3 = 0;
       RGBEZNETTO3 = 0; RGSOLL4 = 0; RGBEZ4 = 0; RGBEZNETTO4 = 0; RPOSSOLL = RGNEIGSOLL_VZ8;
       RPOSBEZ = RGNEIG_VZ8; RPOSBEZNETTO = RGNEIGNETTO_VZ8; SVZ10BEZ = 'Guthaben/Nachzahlungen (' || SVZ8BEZ || ')';
       BISNULL = 'N';
       ISMASTER = 0;
       VZKNR = 60197;
       SUSPEND;
      END                  
    end    
   /* Master einfÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼gen */
   SKBEZ = SNAME;
   RVORTRAG = RTVORTRAG;
   RGSOLL1 = RTGSOLL1;
   RGBEZ1 = RTGBEZ1;
   RGBEZNETTO1 = RTGBEZNETTO1;
   RGSOLL2 = RTGSOLL2;
   RGBEZ2 = RTGBEZ2;
   RGBEZNETTO2 = RTGBEZNETTO2;
   RGSOLL3 = RTGSOLL3;
   RGBEZ3 = RTGBEZ3;
   RGBEZNETTO3 = RTGBEZNETTO3;
   RGSOLL4 = RTGSOLL4;
   RGBEZ4 = RTGBEZ4;
   RGBEZNETTO4 = RTGBEZNETTO4;
   RPOSSOLL = 0;
   RPOSBEZ = 0;
   RPOSBEZNETTO = 0;
   /* FUER SUMME */
   RSUMVORTRAG = RSUMVORTRAG + RTVORTRAG;
   RSUMGSOLL1 = RSUMGSOLL1 + RTGSOLL1;
   RSUMGBEZ1 = RSUMGBEZ1 + RTGBEZ1;
   RSUMGBEZNETTO1 = RSUMGBEZNETTO1 + RTGBEZNETTO1;
   RSUMGSOLL2 = RSUMGSOLL2 + RTGSOLL2;
   RSUMGBEZ2 = RSUMGBEZ2 + RTGBEZ2;
   RSUMGBEZNETTO2 = RSUMGBEZNETTO2 + RTGBEZNETTO2;
   RSUMGSOLL3 = RSUMGSOLL3 + RTGSOLL3;
   RSUMGBEZ3 = RSUMGBEZ3 + RTGBEZ3;
   RSUMGBEZNETTO3 = RSUMGBEZNETTO3 + RSUMGBEZNETTO3;
   RSUMGSOLL4 = RSUMGSOLL4 + RTGSOLL4;
   RSUMGBEZ4 = RSUMGBEZ4 + RTGBEZ4;
   RSUMGBEZNETTO4 = RSUMGBEZNETTO4 + RTGBEZNETTO4;
   /* Wenn alles 0 */
   if ((RGSOLL1 = 0) and (RGBEZ1 = 0) and (RGSOLL2 = 0) and (RGBEZ2 = 0) and (RGSOLL3 = 0) and (RGBEZ3 = 0) and (RGSOLL4 = 0) and (RGBEZ4 = 0)) then
    BISNULL = 'J';
   else
    BISNULL = 'N';
   /* MASTER */
   ISMASTER = 1;
   VZKNR = 0;
   /* GESCHOSS + MIETEINNAHME_ART */
   if (:KNR >= 200000) then
    begin
     GESCHOSS = -1;
     MIETEINNAHME_ART = -1;
    end
   else
    begin
     select geschoss, mieteinnahme_art from bewohner where onr=:ionr and knr=:knr into :GESCHOSS, :MIETEINNAHME_ART;
    end
   /* EINTRAG */
   SUSPEND;
  END /* Select Konten */
 /* Summen */
 ISMASTER = 1;
 KNR = 999999;
 KNRSTR = '';
 SKBEZ = 'SUMME HAUS:';
 RVORTRAG = RSUMVORTRAG;
 RGSOLL1 = RSUMGSOLL1;
 RGBEZ1 = RSUMGBEZ1;
 RGBEZNETTO1 = RSUMGBEZNETTO1;
 RGSOLL2 = RSUMGSOLL2;
 RGBEZ2 = RSUMGBEZ2;
 RGBEZNETTO2 = RSUMGBEZNETTO2;
 RGSOLL3 = RSUMGSOLL3;
 RGBEZ3 = RSUMGBEZ3;
 RGBEZNETTO3 = RSUMGBEZNETTO3;
 RGSOLL4 = RSUMGSOLL4;
 RGBEZ4 = RSUMGBEZ4;
 RGBEZNETTO4 = RSUMGBEZNETTO4;
 RPOSSOLL = 0;
 RPOSBEZ = 0;
 RPOSBEZNETTO = 0;
 BISNULL='N';
 VZKNR = 0;
 SUSPEND;
 /* VZ Position 1 */
 if ((RVZ1SUMSOLL <> 0) or (RVZ1SUMBEZ <> 0) or (RVZ1SUMBEZNETTO <> 0)) then
  begin
   KNR = 999999;
   KNRSTR = '';
   SKBEZ = SVZ1BEZ;
   RVORTRAG = 0;
   RGSOLL1 = 0;
   RGBEZ1 = 0;
   RGBEZNETTO1 = 0;
   RGSOLL2 = 0;
   RGBEZ2 = 0;
   RGBEZNETTO2 = 0;
   RGSOLL3 = 0;
   RGBEZ3 = 0;
   RGBEZNETTO3 = 0;
   RGSOLL4 = 0;
   RGBEZ4 = 0;
   RGBEZNETTO4 = 0;
   RPOSSOLL = RVZ1SUMSOLL;
   RPOSBEZ = RVZ1SUMBEZ;
   RPOSBEZNETTO = RVZ1SUMBEZNETTO;
   BISNULL = 'N';
   ISMASTER = 0;
   VZKNR = 1;
   SUSPEND;
  end
 /* VZ Position 2 */
 if ((RVZ2SUMSOLL <> 0) or (RVZ2SUMBEZ <> 0) or (RVZ2SUMBEZNETTO <> 0)) then
  begin
   KNR = 999999;
   KNRSTR = '';
   SKBEZ = SVZ2BEZ;
   RVORTRAG = 0;
   RGSOLL1 = 0;
   RGBEZ1 = 0;
   RGBEZNETTO1 = 0;
   RGSOLL2 = 0;
   RGBEZ2 = 0;
   RGBEZNETTO2 = 0;
   RGSOLL3 = 0;
   RGBEZ3 = 0;
   RGBEZNETTO3 = 0;
   RGSOLL4 = 0;
   RGBEZ4 = 0;
   RGBEZNETTO4 = 0;
   RPOSSOLL = RVZ2SUMSOLL;
   RPOSBEZ = RVZ2SUMBEZ;
   RPOSBEZNETTO = RVZ2SUMBEZNETTO;
   BISNULL = 'N';
   ISMASTER = 0;
   VZKNR = 2;
   SUSPEND;
  end
 /* VZ Position 3 */
 if ((RVZ3SUMSOLL <> 0) or (RVZ3SUMBEZ <> 0) or (RVZ3SUMBEZNETTO <> 0)) then
  begin
   KNR = 999999;
   KNRSTR = '';
   SKBEZ = SVZ3BEZ;
   RVORTRAG = 0;
   RGSOLL1 = 0;
   RGBEZ1 = 0;
   RGBEZNETTO1 = 0;
   RGSOLL2 = 0;
   RGBEZ2 = 0;
   RGBEZNETTO2 = 0;
   RGSOLL3 = 0;
   RGBEZ3 = 0;
   RGBEZNETTO3 = 0;
   RGSOLL4 = 0;
   RGBEZ4 = 0;
   RGBEZNETTO4 = 0;
   RPOSSOLL = RVZ3SUMSOLL;
   RPOSBEZ = RVZ3SUMBEZ;
   RPOSBEZNETTO = RVZ3SUMBEZNETTO;
   BISNULL = 'N';
   ISMASTER = 0;
   VZKNR = 3;
   SUSPEND;
  end
 /* VZ Position 4 */
 if ((RVZ4SUMSOLL <> 0) or (RVZ4SUMBEZ <> 0) or (RVZ4SUMBEZNETTO <> 0)) then
  begin
   KNR = 999999;
   KNRSTR = '';
   SKBEZ = SVZ4BEZ;
   RVORTRAG = 0;
   RGSOLL1 = 0;
   RGBEZ1 = 0;
   RGBEZNETTO1 = 0;
   RGSOLL2 = 0;
   RGBEZ2 = 0;
   RGBEZNETTO2 = 0;
   RGSOLL3 = 0;
   RGBEZ3 = 0;
   RGBEZNETTO3 = 0;
   RGSOLL4 = 0;
   RGBEZ4 = 0;
   RGBEZNETTO4 = 0;
   RPOSSOLL = RVZ4SUMSOLL;
   RPOSBEZ = RVZ4SUMBEZ;
   RPOSBEZNETTO = RVZ4SUMBEZNETTO;
   BISNULL = 'N';
   ISMASTER = 0;
   VZKNR = 4;
   SUSPEND;
  end
 /* VZ Position 5 */
 if ((RVZ5SUMSOLL <> 0) or (RVZ5SUMBEZ <> 0) or (RVZ5SUMBEZNETTO <> 0)) then
  begin
   KNR = 999999;
   KNRSTR = '';
   SKBEZ = SVZ5BEZ;
   RVORTRAG = 0;
   RGSOLL1 = 0;
   RGBEZ1 = 0;
   RGBEZNETTO1 = 0;
   RGSOLL2 = 0;
   RGBEZ2 = 0;
   RGBEZNETTO2 = 0;
   RGSOLL3 = 0;
   RGBEZ3 = 0;
   RGBEZNETTO3 = 0;
   RGSOLL4 = 0;
   RGBEZ4 = 0;
   RGBEZNETTO4 = 0;
   RPOSSOLL = RVZ5SUMSOLL;
   RPOSBEZ = RVZ5SUMBEZ;
   RPOSBEZNETTO = RVZ5SUMBEZNETTO;
   BISNULL = 'N';
   ISMASTER = 0;
   VZKNR = 5;
   SUSPEND;
  end
 /* VZ Position 6 */
 if ((RVZ6SUMSOLL <> 0) or (RVZ6SUMBEZ <> 0) or (RVZ6SUMBEZNETTO <> 0)) then
  begin
   KNR = 999999;
   KNRSTR = '';
   SKBEZ = SVZ6BEZ;
   RVORTRAG = 0;
   RGSOLL1 = 0;
   RGBEZ1 = 0;
   RGBEZNETTO1 = 0;
   RGSOLL2 = 0;
   RGBEZ2 = 0;
   RGBEZNETTO2 = 0;
   RGSOLL3 = 0;
   RGBEZ3 = 0;
   RGBEZNETTO3 = 0;
   RGSOLL4 = 0;
   RGBEZ4 = 0;
   RGBEZNETTO4 = 0;
   RPOSSOLL = RVZ6SUMSOLL;
   RPOSBEZ = RVZ6SUMBEZ;
   RPOSBEZNETTO = RVZ6SUMBEZNETTO;
   BISNULL = 'N';
   ISMASTER = 0;
   VZKNR = 6;
   SUSPEND;
  end
 /* VZ Position 7 */
 if ((RVZ7SUMSOLL <> 0) or (RVZ7SUMBEZ <> 0) or (RVZ7SUMBEZNETTO <> 0)) then
  begin
   KNR = 999999;
   KNRSTR = '';
   SKBEZ = SVZ7BEZ;
   RVORTRAG = 0;
   RGSOLL1 = 0;
   RGBEZ1 = 0;
   RGBEZNETTO1 = 0;
   RGSOLL2 = 0;
   RGBEZ2 = 0;
   RGBEZNETTO2 = 0;
   RGSOLL3 = 0;
   RGBEZ3 = 0;
   RGBEZNETTO3 = 0;
   RGSOLL4 = 0;
   RGBEZ4 = 0;
   RGBEZNETTO4 = 0;
   RPOSSOLL = RVZ7SUMSOLL;
   RPOSBEZ = RVZ7SUMBEZ;
   RPOSBEZNETTO = RVZ7SUMBEZNETTO;
   BISNULL = 'N';
   ISMASTER = 0;
   VZKNR = 7;
   SUSPEND;
  end
 /* VZ Position 8 */
 if ((RVZ8SUMSOLL <> 0) or (RVZ8SUMBEZ <> 0) or (RVZ8SUMBEZNETTO <> 0)) then
  begin
   KNR = 999999;
   KNRSTR = '';
   SKBEZ = SVZ8BEZ;
   RVORTRAG = 0;
   RGSOLL1 = 0;
   RGBEZ1 = 0;
   RGBEZNETTO1 = 0;
   RGSOLL2 = 0;
   RGBEZ2 = 0;
   RGBEZNETTO2 = 0;
   RGSOLL3 = 0;
   RGBEZ3 = 0;
   RGBEZNETTO3 = 0;
   RGSOLL4 = 0;
   RGBEZ4 = 0;
   RGBEZNETTO4 = 0;
   RPOSSOLL = RVZ8SUMSOLL;
   RPOSBEZ = RVZ8SUMBEZ;
   RPOSBEZNETTO = RVZ8SUMBEZNETTO;
   BISNULL = 'N';
   ISMASTER = 0;
   VZKNR = 8;
   SUSPEND;
  end
 /* VZ Position 9 */
 if ((RVZ9SUMSOLL <> 0) or (RVZ9SUMBEZ <> 0) or (RVZ9SUMBEZNETTO <> 0)) then
  begin
   KNR = 999999;
   KNRSTR = '';
   SKBEZ = SVZ9BEZ;
   RVORTRAG = 0;
   RGSOLL1 = 0;
   RGBEZ1 = 0;
   RGBEZNETTO1 = 0;
   RGSOLL2 = 0;
   RGBEZ2 = 0;
   RGBEZNETTO2 = 0;
   RGSOLL3 = 0;
   RGBEZ3 = 0;
   RGBEZNETTO3 = 0;
   RGSOLL4 = 0;
   RGBEZ4 = 0;
   RGBEZNETTO4 = 0;
   RPOSSOLL = RVZ9SUMSOLL;
   RPOSBEZ = RVZ9SUMBEZ;
   RPOSBEZNETTO = RVZ9SUMBEZNETTO;
   BISNULL = 'N';
   ISMASTER = 0;
   VZKNR = 9;
   SUSPEND;
  end
 /* VZ Position 10 */
 if (BBEW = 'J') then
  begin
   if ((RVZ10SUMSOLL <> 0) or (RVZ10SUMBEZ <> 0) or (RVZ10SUMBEZNETTO <> 0)) then
    begin
     KNR = 999999;
     KNRSTR = '';
     SKBEZ = SVZ10BEZ;
     RVORTRAG = 0;
     RGSOLL1 = 0;
     RGBEZ1 = 0;
     RGBEZNETTO1 = 0;
     RGSOLL2 = 0;
     RGBEZ2 = 0;
     RGBEZNETTO2 = 0;
     RGSOLL3 = 0;
     RGBEZ3 = 0;
     RGBEZNETTO3 = 0;
     RGSOLL4 = 0;
     RGBEZ4 = 0;
     RGBEZNETTO4 = 0;
     RPOSSOLL = RVZ10SUMSOLL;
     RPOSBEZ = RVZ10SUMBEZ;
     RPOSBEZNETTO = RVZ10SUMBEZNETTO;
     BISNULL = 'N';
     ISMASTER = 0;
     VZKNR = 10;
     SUSPEND;
    end
  end
 else
  begin
   if ((RGNEIGSOLL_SUMVZ1 <> 0) or (RGNEIG_SUMVZ1 <> 0) or (RGNEIGNETTO_SUMVZ1 <> 0)) then
    begin
     KNR = 999999;
     KNRSTR = '';
     SKBEZ = 'Guthaben/Nachzahlungen (' || SVZ1BEZ || ')';
     RVORTRAG = 0; RGSOLL1 = 0; RGBEZ1 = 0; RGBEZNETTO1 = 0; RGSOLL2 = 0; RGBEZ2 = 0;
     RGBEZNETTO2 = 0; RGSOLL3 = 0; RGBEZ3 = 0; RGBEZNETTO3 = 0; RGSOLL4 = 0; RGBEZ4 = 0;
     RGBEZNETTO4 = 0;
     RPOSSOLL = RGNEIGSOLL_SUMVZ1;
     RPOSBEZ = RGNEIG_SUMVZ1;
     RPOSBEZNETTO = RGNEIGNETTO_SUMVZ1;
     BISNULL = 'N';
     ISMASTER = 0;
     VZKNR = 10;
     SUSPEND;
    end 
   /* */
   if ((RGNEIGSOLL_SUMVZ2 <> 0) or (RGNEIG_SUMVZ2 <> 0) or (RGNEIGNETTO_SUMVZ2 <> 0)) then
    begin
     KNR = 999999;
     KNRSTR = '';
     SKBEZ = 'Guthaben/Nachzahlungen (' || SVZ2BEZ || ')';
     RVORTRAG = 0; RGSOLL1 = 0; RGBEZ1 = 0; RGBEZNETTO1 = 0; RGSOLL2 = 0; RGBEZ2 = 0;
     RGBEZNETTO2 = 0; RGSOLL3 = 0; RGBEZ3 = 0; RGBEZNETTO3 = 0; RGSOLL4 = 0; RGBEZ4 = 0;
     RGBEZNETTO4 = 0;
     RPOSSOLL = RGNEIGSOLL_SUMVZ2;
     RPOSBEZ = RGNEIG_SUMVZ2;
     RPOSBEZNETTO = RGNEIGNETTO_SUMVZ2;
     BISNULL = 'N';
     ISMASTER = 0;
     VZKNR = 11;
     SUSPEND;
    end  
   /* */
   if ((RGNEIGSOLL_SUMVZ3 <> 0) or (RGNEIG_SUMVZ3 <> 0) or (RGNEIGNETTO_SUMVZ3 <> 0)) then
    begin
     KNR = 999999;
     KNRSTR = '';
     SKBEZ = 'Guthaben/Nachzahlungen (' || SVZ3BEZ || ')';
     RVORTRAG = 0; RGSOLL1 = 0; RGBEZ1 = 0; RGBEZNETTO1 = 0; RGSOLL2 = 0; RGBEZ2 = 0;
     RGBEZNETTO2 = 0; RGSOLL3 = 0; RGBEZ3 = 0; RGBEZNETTO3 = 0; RGSOLL4 = 0; RGBEZ4 = 0;
     RGBEZNETTO4 = 0;
     RPOSSOLL = RGNEIGSOLL_SUMVZ3;
     RPOSBEZ = RGNEIG_SUMVZ3;
     RPOSBEZNETTO = RGNEIGNETTO_SUMVZ3;
     BISNULL = 'N';
     ISMASTER = 0;
     VZKNR = 12;
     SUSPEND;
    end
   /* */
   if ((RGNEIGSOLL_SUMVZ4 <> 0) or (RGNEIG_SUMVZ4 <> 0) or (RGNEIGNETTO_SUMVZ4 <> 0)) then
    begin
     KNR = 999999;
     KNRSTR = '';
     SKBEZ = 'Guthaben/Nachzahlungen (' || SVZ4BEZ || ')';
     RVORTRAG = 0; RGSOLL1 = 0; RGBEZ1 = 0; RGBEZNETTO1 = 0; RGSOLL2 = 0; RGBEZ2 = 0;
     RGBEZNETTO2 = 0; RGSOLL3 = 0; RGBEZ3 = 0; RGBEZNETTO3 = 0; RGSOLL4 = 0; RGBEZ4 = 0;
     RGBEZNETTO4 = 0;
     RPOSSOLL = RGNEIGSOLL_SUMVZ4;
     RPOSBEZ = RGNEIG_SUMVZ4;
     RPOSBEZNETTO = RGNEIGNETTO_SUMVZ4;
     BISNULL = 'N';
     ISMASTER = 0;
     VZKNR = 13;
     SUSPEND;
    end 
   /* */
   if ((RGNEIGSOLL_SUMVZ5 <> 0) or (RGNEIG_SUMVZ5 <> 0) or (RGNEIGNETTO_SUMVZ5 <> 0)) then
    begin
     KNR = 999999;
     KNRSTR = '';
     SKBEZ = 'Guthaben/Nachzahlungen (' || SVZ5BEZ || ')';
     RVORTRAG = 0; RGSOLL1 = 0; RGBEZ1 = 0; RGBEZNETTO1 = 0; RGSOLL2 = 0; RGBEZ2 = 0;
     RGBEZNETTO2 = 0; RGSOLL3 = 0; RGBEZ3 = 0; RGBEZNETTO3 = 0; RGSOLL4 = 0; RGBEZ4 = 0;
     RGBEZNETTO4 = 0;
     RPOSSOLL = RGNEIGSOLL_SUMVZ5;
     RPOSBEZ = RGNEIG_SUMVZ5;
     RPOSBEZNETTO = RGNEIGNETTO_SUMVZ5;
     BISNULL = 'N';
     ISMASTER = 0;
     VZKNR = 14;
     SUSPEND;
    end
   /* */
   if ((RGNEIGSOLL_SUMVZ6 <> 0) or (RGNEIG_SUMVZ6 <> 0) or (RGNEIGNETTO_SUMVZ6 <> 0)) then
    begin
     KNR = 999999;
     KNRSTR = '';
     SKBEZ = 'Guthaben/Nachzahlungen (' || SVZ6BEZ || ')';
     RVORTRAG = 0; RGSOLL1 = 0; RGBEZ1 = 0; RGBEZNETTO1 = 0; RGSOLL2 = 0; RGBEZ2 = 0;
     RGBEZNETTO2 = 0; RGSOLL3 = 0; RGBEZ3 = 0; RGBEZNETTO3 = 0; RGSOLL4 = 0; RGBEZ4 = 0;
     RGBEZNETTO4 = 0;
     RPOSSOLL = RGNEIGSOLL_SUMVZ6;
     RPOSBEZ = RGNEIG_SUMVZ6;
     RPOSBEZNETTO = RGNEIGNETTO_SUMVZ6;
     BISNULL = 'N';
     ISMASTER = 0;
     VZKNR = 15;
     SUSPEND;
    end
   /* */
   if ((RGNEIGSOLL_SUMVZ7 <> 0) or (RGNEIG_SUMVZ7 <> 0) or (RGNEIGNETTO_SUMVZ7 <> 0)) then
    begin
     KNR = 999999;
     KNRSTR = '';
     SKBEZ = 'Guthaben/Nachzahlungen (' || SVZ7BEZ || ')';
     RVORTRAG = 0; RGSOLL1 = 0; RGBEZ1 = 0; RGBEZNETTO1 = 0; RGSOLL2 = 0; RGBEZ2 = 0;
     RGBEZNETTO2 = 0; RGSOLL3 = 0; RGBEZ3 = 0; RGBEZNETTO3 = 0; RGSOLL4 = 0; RGBEZ4 = 0;
     RGBEZNETTO4 = 0;
     RPOSSOLL = RGNEIGSOLL_SUMVZ7;
     RPOSBEZ = RGNEIG_SUMVZ7;
     RPOSBEZNETTO = RGNEIGNETTO_SUMVZ7;
     BISNULL = 'N';
     ISMASTER = 0;
     VZKNR = 16;
     SUSPEND;
    end
   /* */
   if ((RGNEIGSOLL_SUMVZ8 <> 0) or (RGNEIG_SUMVZ8 <> 0) or (RGNEIGNETTO_SUMVZ8 <> 0)) then
    begin
     KNR = 999999;
     KNRSTR = '';
     SKBEZ = 'Guthaben/Nachzahlungen (' || SVZ8BEZ || ')';
     RVORTRAG = 0; RGSOLL1 = 0; RGBEZ1 = 0; RGBEZNETTO1 = 0; RGSOLL2 = 0; RGBEZ2 = 0;
     RGBEZNETTO2 = 0; RGSOLL3 = 0; RGBEZ3 = 0; RGBEZNETTO3 = 0; RGSOLL4 = 0; RGBEZ4 = 0;
     RGBEZNETTO4 = 0;
     RPOSSOLL = RGNEIGSOLL_SUMVZ8;
     RPOSBEZ = RGNEIG_SUMVZ8;
     RPOSBEZNETTO = RGNEIGNETTO_SUMVZ8;
     BISNULL = 'N';
     ISMASTER = 0;
     VZKNR = 17;
     SUSPEND;
    end                       
  end   
END


-- Prozedur: SEV_ABRECHNUNG
CREATE OR ALTER PROCEDURE SEV_ABRECHNUNG
BEGIN
  if (MIT_MIETAUSZAHLUNG='J') then
   begin
    for select BNR, ONR, KNR, SEVKNR, BUCHDATUM, BELEGNR, BETRAG,TEXT,SEVBANKNR, MWST, BUCHNR from sevmieten
    where (ONR>=:ONRVON and ONR<=:ONRBIS)
    and (BUCHDATUM>=:DTVON and BUCHDATUM<=:DTBIS)
    and ((KNR<60 and STATUS=10) or (STATUS=10 and KNR=64) or KNR=60)
    into :BNR, :ONR, :KNR, :SEVKNR, :BUCHDATUM, :BELEGNR, :BETRAG, :TEXT, :SEVBANKNR, :MWST, :BUCHNR
    do
     begin
      if (KNR=50 or KNR=51 or KNR=52 or KNR=54) then
       begin
        EA=2;
        AUSGABE=BETRAG;
        EINNAHME=0;
       end
      else
       if (KNR=53) THEN
        BEGIN
         EA=3;
         AUSGABE=BETRAG;
         EINNAHME=0;
        END
       else
        BEGIN
         EA=1;
         EINNAHME=BETRAG;
         AUSGABE=0;
        END
      suspend;
    end
   end
  else
   begin
    for select BNR, ONR, KNR, SEVKNR, BUCHDATUM, BELEGNR, BETRAG,TEXT,SEVBANKNR, MWST, BUCHNR from sevmieten
    where (ONR>=:ONRVON and ONR<=:ONRBIS)
    and (BUCHDATUM>=:DTVON and BUCHDATUM<=:DTBIS)
    and (((KNR=50 or KNR=51 or KNR=52 or KNR=54) and STATUS=10) or ((STATUS=10 and KNR=64) or KNR=60))
    into :BNR, :ONR, :KNR, :SEVKNR, :BUCHDATUM, :BELEGNR, :BETRAG, :TEXT, :SEVBANKNR, :MWST, :BUCHNR
    do
     begin
     if (KNR=50 or KNR=51 or KNR=52 or KNR=54) then
       begin
        EA=2;
        AUSGABE=BETRAG;
        EINNAHME=0;
       end
      else
       if (KNR=53) THEN
        BEGIN
         EA=3;
         AUSGABE=BETRAG;
         EINNAHME=0;
        END
       else
        BEGIN
         EA=1;
         EINNAHME=BETRAG;
         AUSGABE=0;
        END
       suspend;
     end
   end
 END


-- Prozedur: SEV_SOLLSTELLUNGEN
CREATE OR ALTER PROCEDURE SEV_SOLLSTELLUNGEN
DECLARE VARIABLE BANKNR_BLZ INTEGER;
 DECLARE VARIABLE ITEMP INTEGER;
 DECLARE VARIABLE IANZ INTEGER;
 DECLARE VARIABLE RTEMP NUMERIC (15 ,2);
 DECLARE VARIABLE SLEV_ANZAHL INTEGER;
BEGIN
  IF (LBNR_IN>=0) THEN
  BEGIN
    SEVBANKNR=:IBANKNR;
    FOR
    SELECT LBNR, SUM (BETRAG), COUNT (LBNR) from sevmieten where LBNR = :LBNR_IN
     group by LBNR
    INTO
    :LBNR, :BETRAG, :SLEV_ANZAHL
    do
    begin
      /* mehrere verschiedene Objekte */
      IANZ=0;
      for
      select count (ONR),
      ONR
      from sevmieten
      where LBNR = :LBNR
      group by ONR
      into
      :ITEMP, ONR
      do
      begin
        IANZ=IANZ+1;
      end
      IF (IANZ>1) THEN
      ONR=NULL;
      /* mehrere verschiedene Vertraege */
      IANZ=0;
      for
      select count (SEVKNR),
      SEVKNR
      from sevmieten
      where LBNR = :LBNR
      group by ONR,
      SEVKNR
      into
      :ITEMP, SEVKNR
      do
      begin
        IANZ=IANZ+1;
      end
      IF (IANZ>1) THEN
      SEVKNR=NULL;
      for
      select SLEVDATUM,
      KNR,
      BETRAG,
      BNR,
      BELEGNR
      from sevmieten
      where LBNR = :LBNR
      into
      DATUM, :ITEMP, :RTEMP, :BNR, :BELEGNR
      do
      begin
        IF ((ITEMP<60 AND RTEMP>=0) OR (ITEMP>=60 AND RTEMP < 0)) THEN
        VZ='-';
        else
        VZ='+';
      end
      /* mehrere verschiedene Datumsangaben */
      IANZ=0;
      IF (DATUM IS NULL) THEN
      BEGIN
        for
        select DATUM
        from sevmieten
        where LBNR = :LBNR
        group by DATUM
        into
        DATUM
        do
        begin
          IANZ=IANZ+1;
        end
        IF (IANZ>1) THEN
        DATUM=NULL;
      END
      /* vorzeichen feststellen */
      IF (VZ='-') then
      TEXT='Sammler (ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã¢â‚¬Å“berweisungen: ' || CAST(SLEV_ANZAHL AS VARCHAR(10)) || ')'
      ;
      ELSE
      TEXT='Sammler (Lastschriften: ' || CAST(SLEV_ANZAHL AS VARCHAR(10)) || ')'
      ;
      SUSPEND;
    end
  END
  ELSE
  BEGIN
    IF (SBLZ<>' ') THEN
    BEGIN
      FOR
      SELECT NR
      from BANKEN
      where BLZ = :SBLZ or
      BIC = :SBLZ
      into
      :BANKNR_BLZ
      do
      begin
        /* Sammler */
        SEVBANKNR=:BANKNR_BLZ;
        FOR
        SELECT LBNR,
        SUM (BETRAG),
        COUNT (LBNR)
        from sevmieten
        where SEVBANKNR = :BANKNR_BLZ and
        LBNR IS NOT NULL and
          (STATUS >= :STATUSVON and
          STATUS <= :STATUSBIS)
        group by LBNR
        INTO
        :LBNR, :BETRAG, :SLEV_ANZAHL
        do
        begin
          /* mehrere verschiedene Objekte */
          IANZ=0;
          for
          select count (ONR),
          ONR
          from sevmieten
          where LBNR = :LBNR
          group by ONR
          into
          :ITEMP, ONR
          do
          begin
            IANZ=IANZ+1;
          end
          IF (IANZ>1) THEN
          ONR=NULL;
          /* mehrere verschiedene Vertraege */
          IANZ=0;
          for
          select count (SEVKNR),
          SEVKNR
          from sevmieten
          where LBNR = :LBNR
          group by ONR,
          SEVKNR
          into
          :ITEMP, SEVKNR
          do
          begin
            IANZ=IANZ+1;
          end
          IF (IANZ>1) THEN
          SEVKNR=NULL;
          for
          select SLEVDATUM,
          KNR,
          BETRAG,
          BNR
          from sevmieten
          where LBNR = :LBNR
          into
          DATUM, :ITEMP, :RTEMP, :BNR
          do
          begin
            IF ((ITEMP<60 AND RTEMP>=0) OR (ITEMP>=60 AND RTEMP < 0)) THEN
            VZ='-';
            else
            VZ='+';
          end
          /* mehrere verschiedene Datumsangaben */
          IANZ=0;
          IF (DATUM IS NULL) THEN
          BEGIN
            for
            select DATUM
            from sevmieten
            where LBNR = :LBNR
            group by DATUM
            into
            DATUM
            do
            begin
              IANZ=IANZ+1;
            end
            IF (IANZ>1) THEN
            DATUM=NULL;
          END
          /* vorzeichen feststellen */
          IF (VZ='-') then
          TEXT='Sammler (ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã¢â‚¬Å“berweisungen: ' || CAST(SLEV_ANZAHL AS VARCHAR(10)) ||
          ')';
          ELSE
          TEXT='Sammler (Lastschriften: ' || CAST(SLEV_ANZAHL AS VARCHAR(10)) ||
          ')';
          SUSPEND;
        end
        SLEV_ANZAHL=NULL;
        LBNR=NULL;
        FOR
        SELECT BNR,
        ONR,
        KNR,
        SEVKNR,
        DATUM,
        BELEGNR,
        BETRAG,
        TEXT,
        JAHRMONAT,
        STATUS,
        SEVBANKNR,
        LBNR,
        LIEFKNR,
        MWST,
        SLEVDATUM
        from sevmieten
        where SEVBANKNR = :BANKNR_BLZ and
        LBNR IS NULL and
          (STATUS >= :STATUSVON and
          STATUS <= :STATUSBIS)
        INTO
        :BNR, :ONR, :KNR, :SEVKNR, :DATUM, :BELEGNR, :BETRAG, :TEXT,
        :JAHRMONAT, :STATUS, :SEVBANKNR, :LBNR, :LIEFKNR, :MWST, :SLEVDATUM
        do
        BEGIN
          IF ((KNR<60 AND BETRAG>=0) OR (KNR>=60 AND BETRAG < 0)) THEN
          VZ='-';
          else
          VZ='+';
          SUSPEND;
        END
      end
    END /* pro BLZ */
    ELSE
    BEGIN /* pro konto */
      /* Sammler */
      SEVBANKNR=:IBANKNR;
      FOR
      SELECT LBNR,
      SUM (BETRAG),
      COUNT (LBNR)
      from sevmieten
      where SEVBANKNR = :IBANKNR and
      LBNR IS NOT NULL and
        (STATUS >= :STATUSVON and
        STATUS <= :STATUSBIS)
      group by LBNR
      INTO
      :LBNR, :BETRAG, :SLEV_ANZAHL
      do
      begin
        /* mehrere verschiedene Objekte */
        IANZ=0;
        for
        select count (ONR),
        ONR
        from sevmieten
        where LBNR = :LBNR
        group by ONR
        into
        :ITEMP, ONR
        do
        begin
          IANZ=IANZ+1;
        end
        IF (IANZ>1) THEN
        ONR=NULL;
        /* mehrere verschiedene Vertraege */
        IANZ=0;
        for
        select count (SEVKNR),
        SEVKNR
        from sevmieten
        where LBNR = :LBNR
        group by ONR,
        SEVKNR
        into
        :ITEMP, SEVKNR
        do
        begin
          IANZ=IANZ+1;
        end
        IF (IANZ>1) THEN
        SEVKNR=NULL;
        for
        select SLEVDATUM,
        KNR,
        BETRAG,
        BNR
        from sevmieten
        where LBNR = :LBNR
        into
        DATUM, :ITEMP, :RTEMP, :BNR
        do
        begin
          IF ((ITEMP<60 AND RTEMP>=0) OR (ITEMP>=60 AND RTEMP < 0)) THEN
          VZ='-';
          else
          VZ='+';
        end
        /* mehrere verschiedene Datumsangaben */
        IANZ=0;
        IF (DATUM IS NULL) THEN
        BEGIN
          for
          select DATUM
          from sevmieten
          where LBNR = :LBNR
          group by DATUM
          into
          DATUM
          do
          begin
            IANZ=IANZ+1;
          end
          IF (IANZ>1) THEN
          DATUM=NULL;
        END
        /* vorzeichen feststellen */
        IF (VZ='-') then
        TEXT='Sammler (ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã¢â‚¬Å“berweisungen: ' || CAST(SLEV_ANZAHL AS VARCHAR(10)) ||
        ')';
        ELSE
        TEXT='Sammler (Lastschriften: ' || CAST(SLEV_ANZAHL AS VARCHAR(10)) ||
        ')';
        SUSPEND;
      end
      SLEV_ANZAHL=NULL;
      LBNR=NULL;
      FOR
      SELECT BNR,
      ONR,
      KNR,
      SEVKNR,
      DATUM,
      BELEGNR,
      BETRAG,
      TEXT,
      JAHRMONAT,
      STATUS,
      SEVBANKNR,
      LBNR,
      LIEFKNR,
      MWST,
      SLEVDATUM
      from sevmieten
      where SEVBANKNR = :IBANKNR and
      LBNR IS NULL and
        (STATUS >= :STATUSVON and
        STATUS <= :STATUSBIS)
      INTO
      :BNR, :ONR, :KNR, :SEVKNR, :DATUM, :BELEGNR, :BETRAG, :TEXT, :JAHRMONAT,
      :STATUS, :SEVBANKNR, :LBNR, :LIEFKNR, :MWST, :SLEVDATUM
      do
      BEGIN
        IF ((KNR<60 AND BETRAG>=0) OR (KNR>=60 AND BETRAG < 0)) THEN
        VZ='-';
        else
        VZ='+';
        SUSPEND;
      END
    END /* pro konto */
  END /* LBNR>=0 */
END


-- Prozedur: SOLLBUCH_GET_ART_MWST
CREATE OR ALTER PROCEDURE SOLLBUCH_GET_ART_MWST
DECLARE VARIABLE MWSTAUS CHAR(1);
 DECLARE VARIABLE MWSTS INTEGER;
BEGIN
  /* HOLT ILASTSCHR, MWST und GKONTO FÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã¢â‚¬Å“R SOLLSTELLUNGS-BUCHUNG */
  /* ZUERST GKONTO */
  IF (IKNR<200000) THEN
   SELECT LEVBankNR FROM objekte
   WHERE ONR=:IONR
   INTO :GKONTO;
  ELSE
   SELECT LEVBankNR2 FROM objekte
   WHERE ONR=:IONR
   INTO :GKONTO;
  IF (IKNR<200000) THEN
   SELECT BLASTJA, BMWSTAUSW, BMWSTSATZ FROM bewohner
   WHERE ONR=:IONR and KNR=:IKNR
   INTO :ISLASTSCHR, :ISGEWERBLICH, :MWSTSATZ;
  ELSE  /* EigentÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼mer */
   SELECT ELASTJA, EMWSTAUSW, EMWSTSATZ FROM eigentuemer
    WHERE ONR=:IONR and KNR=:IKNR
    INTO :ISLASTSCHR, :ISGEWERBLICH, :MWSTSATZ;
 SUSPEND;
END


-- Prozedur: SP_WHGLIST
CREATE OR ALTER PROCEDURE SP_WHGLIST
--Author RM
--Erstellt 03.03.2023
--Erstellt fÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼r die ZÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤hlerverwaltung
--Geandert 16.03.2023
--Null Werte abfangen
--Geandert 16.05.2023
--Null Werte abfangen
--
--Hier wird die BAdresse und die EAdresse gebildet
begin
  FOR
    with cteWhgList
    AS
    (
    SELECT
         wohnung.ONR
        ,wohnung.ENR
        ,bewohner.knr as BKNR
        ,eigentuemer.knr as EKNR
        ,wohnung.EBEZ
        ,wohnung.art
        ,bewohner.bewstatus
        ,bewohner.BLASTJA
        ,Right(1000000 + wohnung.ENR,3) as ENRSTR
        ,Right(1000000 + wohnung.ENR,3) || ' ' || wohnung.EBEZ as EBEZSTR
        ,case
           when bewadr.bname is Null then ''
           else bewadr.bname
         end as bname
        ,case
           when bewadr.bvname is Null then ''
           else bewadr.bvname
         end as bvname
        ,CASE
            WHEN bewadr.BFIRMA = 'J'
                THEN CASE
                        WHEN bewadr.BBriefAn = 'Sehr geehrte Damen und Herren'
                            THEN case 
                                   when NOT (bewadr.BFirmaName IS NULL) then bewadr.BFirmaName
                                   else ''
                                 end  
                        ELSE CASE
                                WHEN NOT (bewadr.BFirmaName IS NULL)
                                    THEN Trim(bewadr.BFirmaName) || CASE
                                            WHEN NOT (bewadr.BName IS NULL)
                                                THEN '; ' || Trim(bewadr.BName) || CASE
                                                        WHEN NOT (bewadr.BVName IS NULL)
                                                            THEN ', ' || TRIM(bewadr.BVName)
                                                        ELSE ''
                                                        END
                                            ELSE ''
                                            END
                                ELSE ''
                                END
                        END
            ELSE CASE
                    WHEN (
                            (Trim(bewadr.BNAME) <> '')
                            OR (Trim(bewadr.BVNAME) <> '')
                            )
                        THEN CASE
                                WHEN (Trim(bewadr.BNAME) <> '')
                                    THEN bewadr.BNAME || CASE
                                            WHEN Trim(bewadr.BVNAME) <> ''
                                                THEN ', ' || Trim(bewadr.BVNAME)
                                            ELSE ''
                                            END
                                ELSE CASE
                                        WHEN Trim(bewadr.BVNAME) <> ''
                                            THEN Trim(bewadr.BVNAME)
                                        ELSE ''
                                        END
                                END
                    ELSE ''
                    END
            END AS BAdresse
        ,bewadr.BFIRMA
        ,case
           when eigadr.ename is Null then ''
           else eigadr.ename
         end as ename
        ,case
           when eigadr.evname is Null then ''
           else eigadr.evname
         end as evname
        ,CASE
            WHEN eigadr.EFIRMA = 'J'
                THEN CASE
                        WHEN eigadr.EBriefAn = 'Sehr geehrte Damen und Herren'
                            THEN case 
                                   when NOT (eigadr.EFirmaName IS NULL) then eigadr.EFirmaName
                                   else ''
                                 end  
                        ELSE CASE
                                WHEN NOT (eigadr.EFirmaName IS NULL)
                                    THEN Trim(eigadr.EFirmaName) || CASE
                                            WHEN NOT (eigadr.EName IS NULL)
                                                THEN '; ' || Trim(eigadr.EName) || CASE
                                                        WHEN NOT (eigadr.EVNAME IS NULL)
                                                            THEN ', ' || TRIM(eigadr.EVName)
                                                        ELSE ''
                                                        END
                                            ELSE ''
                                            END
                                ELSE ''
                                END
                        END
            ELSE CASE
                    WHEN (
                            (Trim(eigadr.ENAME) <> '')
                            OR (Trim(eigadr.EVNAME) <> '')
                            )
                        THEN CASE
                                WHEN (Trim(eigadr.ENAME) <> '')
                                    THEN eigadr.ENAME || CASE
                                            WHEN Trim(eigadr.EVNAME) <> ''
                                                THEN ', ' || Trim(eigadr.EVNAME)
                                            ELSE ''
                                            END
                                ELSE CASE
                                        WHEN Trim(eigadr.EVNAME) <> ''
                                            THEN Trim(eigadr.EVNAME)
                                        ELSE ''
                                        END
                                END
                    ELSE ''
                    END
            END AS EAdresse
        ,eigadr.EFIRMA
        ,objekte.BSONST
        ,objekte.BKVON
        ,objekte.BKBIS

    FROM WOHNUNG
    INNER JOIN BEWOHNER ON wohnung.onr = bewohner.onr AND wohnung.bknr = bewohner.knr
    INNER JOIN EIGENTUEMER ON wohnung.onr = eigentuemer.onr AND wohnung.eknr = eigentuemer.knr
    INNER JOIN eigadr ON eigentuemer.eignr = eigadr.eignr
    INNER JOIN objekte ON objekte.onr = wohnung.onr
    INNER JOIN bewadr ON bewohner.bewnr = bewadr.bewnr
    WHERE wohnung.onr =:IONR

    UNION

	SELECT MAX(w.ONr) AS ONr
          ,0 AS ENR
          ,Null as BKNR
          ,Null as EKNR
          ,NULL AS EBEZ
          ,NULL AS art
          ,0 AS bewstatus
          ,Null as BLASTJA

          ,NULL AS ENRSTR
          ,' Objekt (AllgemeinzÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤hler) ' AS EBEZSTR
          ,NULL AS bname
          ,NULL AS bvname
          ,NULL AS BAdresse
          ,NULL AS BFIRMA
          ,NULL AS ename
          ,NULL AS evname
          ,NULL AS EAdresse
          ,NULL AS EFIRMA
          ,Max(bsonst) AS bsonst
          ,Min(bkvon) AS bkvon
          ,MAX(bkbis) AS bkbis
	FROM WOHNUNG w
	INNER JOIN objekte	ON objekte.onr = w.onr
	WHERE w.onr = :IONR
    )
    Select
         ONr, ENr, BKNR, EKNR, EBEZ, ART,
         ENRSTR, EBEZSTR,
         BNAME, BVNAME, BADRESSE, BFIRMA,
         ENAME, EVNAME, EADRESSE, EFIRMA,
         BSONST, BKVON, BKBIS, BEWSTATUS

        ,case
           when BSonst = 0 then CASE
                                  when ENR = 0 then EBEZSTR
                                  when bewstatus <> 1 then EBEZSTR || ' ' || BADRESSE
                                  else EBEZSTR
                                end
           when BSonst = 1 then CASE
                                  when ENR = 0 then EBEZSTR
                                  when not EADRESSE is Null then EBEZSTR || ' ' || EADRESSE
                                  else EBEZSTR
                                end
           when BSonst = 2 then CASE
                                  when ENR = 0 then EBEZSTR
                                  when not ename is NULL then case
                                                                when bewstatus <> 1 then EBEZSTR || ' ' || bname || ' / ' || ENAME
                                                                when not EADRESSE is Null then EBEZSTR || ' ' || EADRESSE
                                                                else EBEZSTR
                                                              end
                                END
         end as ENRBez
    from cteWhgList

    into ONr, ENr, BKNR, EKNR, EBEZ, ART,
         ENRSTR, EBEZSTR,
         BNAME, BVNAME, BADRESSE, BFIRMA,
         ENAME, EVNAME, EADRESSE, EFIRMA,
         BSONST, BKVON, BKBIS, BEWSTATUS,
         ENRBez
  do
  begin
    suspend;
  end
end


-- Prozedur: STAFFMIETERH
CREATE OR ALTER PROCEDURE STAFFMIETERH
DECLARE VARIABLE DTMIN DATE;
DECLARE VARIABLE DTMIN2 DATE;
DECLARE VARIABLE NMIN INTEGER;
DECLARE VARIABLE NSTAFFMIN1 NUMERIC(15, 2);
DECLARE VARIABLE NSTAFFMIN2 NUMERIC(15, 2);
DECLARE VARIABLE NMIET1 NUMERIC(15, 2);
DECLARE VARIABLE DTDATUM1 DATE;
DECLARE VARIABLE NMIET2 NUMERIC(15, 2);
DECLARE VARIABLE DTDATUM2 DATE;
DECLARE VARIABLE NMIET3 NUMERIC(15, 2);
DECLARE VARIABLE DTDATUM3 DATE;
DECLARE VARIABLE NMIET4 NUMERIC(15, 2);
DECLARE VARIABLE DTDATUM4 DATE;
DECLARE VARIABLE NMIET5 NUMERIC(15, 2);
DECLARE VARIABLE DTDATUM5 DATE;
DECLARE VARIABLE NMIET6 NUMERIC(15, 2);
DECLARE VARIABLE DTDATUM6 DATE;
DECLARE VARIABLE NMIET7 NUMERIC(15, 2);
DECLARE VARIABLE DTDATUM7 DATE;
DECLARE VARIABLE NMIET8 NUMERIC(15, 2);
DECLARE VARIABLE DTDATUM8 DATE;
DECLARE VARIABLE NMIET9 NUMERIC(15, 2);
DECLARE VARIABLE DTDATUM9 DATE;
DECLARE VARIABLE NMIET10 NUMERIC(15, 2);
DECLARE VARIABLE DTDATUM10 DATE;
DECLARE VARIABLE SBNAME VARCHAR(80);
DECLARE VARIABLE SBVNAME VARCHAR(80);
DECLARE VARIABLE IFOUND SMALLINT;
DECLARE VARIABLE DTNEUESTAFFEL DATE;
DECLARE VARIABLE DTALTESTAFFEL DATE;
DECLARE VARIABLE NNEUESTAFFEL NUMERIC(15, 2);
DECLARE VARIABLE NALTESTAFFEL NUMERIC(15, 2);
DECLARE VARIABLE DTEINZUG DATE;
DECLARE VARIABLE DTAUSZUG DATE;
BEGIN
 if (:IONR <> -1) then
  begin
   for
   select staffelvz.onr,staffelvz.betrag1,staffelvz.datum1,staffelvz.betrag2,staffelvz.datum2,staffelvz.betrag3,staffelvz.datum3,
   staffelvz.betrag4,staffelvz.datum4,staffelvz.betrag5,staffelvz.datum5,staffelvz.betrag6,staffelvz.datum6,staffelvz.betrag7,
   staffelvz.datum7,staffelvz.betrag8,staffelvz.datum8,staffelvz.betrag9,staffelvz.datum9,staffelvz.betrag10,staffelvz.datum10,
   staffelvz.knr,ba.bname,ba.bvname,vorausz.bez, b.vbeginn, b.vende 
   from staffelvz,bewohner b, bewadr ba, vorausz
   where b.bewnr=ba.bewnr and staffelvz.onr=b.onr and staffelvz.knr=b.knr and b.staffel='J' and vorausz.onr=b.onr
   and vorausz.knr=(((staffelvz.zpos-1)*10)+60000) and b.onr=:IONR
   order by staffelvz.onr,staffelvz.knr,staffelvz.zpos    
   into :ONR,nMiet1,dtDatum1,nMiet2,dtDatum2,nMiet3,dtDatum3,nMiet4,dtDatum4,nMiet5,dtDatum5,nMiet6,dtDatum6,nMiet7,dtDatum7,nMiet8,dtDatum8,nMiet9,dtDatum9,nMiet10,dtDatum10,:KNR,sbname,sbvname,:VZBEZ, dtEinzug, dtAuszug
   do
    begin
     dtNeueStaffel='01.01.1753';
     dtAlteStaffel='01.01.1753';
     nNeueStaffel=0;
     nAlteStaffel=0;
     ifound=0;
     if (dtEinzug is Null) then
      dtEinzug = '01.01.1900';
     if (dtAuszug is Null) then
      dtAuszug = '31.12.9990';     

     /*10 mal*/
     if ((dtDatum1 is not null) and (dtDatum1 >= :DTVON) and (dtDatum1 <= :DTBIS)) then
      begin
       if (dtDatum1 >= dtNeueStaffel) then
         begin
          dtNeueStaffel=dtDatum1;
          nNeueStaffel=nMiet1;
          ifound=1;
         end
      end

     if ((dtDatum2 is not null) and (dtDatum2 >= :DTVON) and (dtDatum2 <= :DTBIS)) then
      begin
       if (dtDatum2 >= dtNeueStaffel) then
         begin
          dtNeueStaffel=dtDatum2;
          nNeueStaffel=nMiet2;
          ifound=1;
         end
      end

     if ((dtDatum3 is not null) and (dtDatum3 >= :DTVON) and (dtDatum3 <= :DTBIS)) then
      begin
       if (dtDatum3 >= dtNeueStaffel) then
         begin
          dtNeueStaffel=dtDatum3;
          nNeueStaffel=nMiet3;
          ifound=1;
         end
      end

     if ((dtDatum4 is not null) and (dtDatum4 >= :DTVON) and (dtDatum4 <= :DTBIS)) then
      begin
       if (dtDatum4 >= dtNeueStaffel) then
         begin
          dtNeueStaffel=dtDatum4;
          nNeueStaffel=nMiet4;
          ifound=1;
         end
      end

     if ((dtDatum5 is not null) and (dtDatum5 >= :DTVON) and (dtDatum5 <= :DTBIS)) then
      begin
       if (dtDatum5 >= dtNeueStaffel) then
         begin
          dtNeueStaffel=dtDatum5;
          nNeueStaffel=nMiet5;
          ifound=1;
         end
      end

     if ((dtDatum6 is not null) and (dtDatum6 >= :DTVON) and (dtDatum6 <= :DTBIS)) then
      begin
       if (dtDatum6 >= dtNeueStaffel) then
         begin
          dtNeueStaffel=dtDatum6;
          nNeueStaffel=nMiet6;
          ifound=1;
         end
      end

     if ((dtDatum7 is not null) and (dtDatum7 >= :DTVON) and (dtDatum7 <= :DTBIS)) then
      begin
       if (dtDatum7 >= dtNeueStaffel) then
         begin
          dtNeueStaffel=dtDatum7;
          nNeueStaffel=nMiet7;
          ifound=1;
         end
      end

     if ((dtDatum8 is not null) and (dtDatum8 >= :DTVON) and (dtDatum8 <= :DTBIS)) then
      begin
       if (dtDatum8 >= dtNeueStaffel) then
         begin
          dtNeueStaffel=dtDatum8;
          nNeueStaffel=nMiet8;
          ifound=1;
         end
      end

     if ((dtDatum9 is not null) and (dtDatum9 >= :DTVON) and (dtDatum9 <= :DTBIS)) then
      begin
       if (dtDatum9 >= dtNeueStaffel) then
         begin
          dtNeueStaffel=dtDatum9;
          nNeueStaffel=nMiet9;
          ifound=1;
         end
      end

     if ((dtDatum10 is not null) and (dtDatum10 >= :DTVON) and (dtDatum10 <= :DTBIS)) then
      begin
       if (dtDatum10 >= dtNeueStaffel) then
         begin
          dtNeueStaffel=dtDatum10;
          nNeueStaffel=nMiet10;
          ifound=1;
         end
      end

     /*Alte Staffel*/
     if ((ifound=1) and (dtDatum1 >= dtAlteStaffel) and (dtDatum1 < dtNeueStaffel)) then
      begin
       dtAlteStaffel=dtDatum1;
       nAlteStaffel=nMiet1;
      end

     if ((ifound=1) and (dtDatum2 >= dtAlteStaffel) and (dtDatum2 < dtNeueStaffel)) then
      begin
       dtAlteStaffel=dtDatum2;
       nAlteStaffel=nMiet2;
      end

     if ((ifound=1) and (dtDatum3 >= dtAlteStaffel) and (dtDatum3 < dtNeueStaffel)) then
      begin
       dtAlteStaffel=dtDatum3;
       nAlteStaffel=nMiet3;
      end

     if ((ifound=1) and (dtDatum4 >= dtAlteStaffel) and (dtDatum4 < dtNeueStaffel)) then
      begin
       dtAlteStaffel=dtDatum4;
       nAlteStaffel=nMiet4;
      end

     if ((ifound=1) and (dtDatum5 >= dtAlteStaffel) and (dtDatum5 < dtNeueStaffel)) then
      begin
       dtAlteStaffel=dtDatum5;
       nAlteStaffel=nMiet5;
      end

     if ((ifound=1) and (dtDatum6 >= dtAlteStaffel) and (dtDatum6 < dtNeueStaffel)) then
      begin
       dtAlteStaffel=dtDatum6;
       nAlteStaffel=nMiet6;
      end

     if ((ifound=1) and (dtDatum7 >= dtAlteStaffel) and (dtDatum7 < dtNeueStaffel)) then
      begin
       dtAlteStaffel=dtDatum7;
       nAlteStaffel=nMiet7;
      end

     if ((ifound=1) and (dtDatum8 >= dtAlteStaffel) and (dtDatum8 < dtNeueStaffel)) then
      begin
       dtAlteStaffel=dtDatum8;
       nAlteStaffel=nMiet8;
      end

     if ((ifound=1) and (dtDatum9 >= dtAlteStaffel) and (dtDatum9 < dtNeueStaffel)) then
      begin
       dtAlteStaffel=dtDatum9;
       nAlteStaffel=nMiet9;
      end

     if ((ifound=1) and (dtDatum10 >= dtAlteStaffel) and (dtDatum10 < dtNeueStaffel)) then
      begin
       dtAlteStaffel=dtDatum10;
       nAlteStaffel=nMiet10;
      end

     if ((sbvname is not null) and (sbname is not null)) then
      BEWSTR=sbvname || ' ' || sbname;
     else
      begin
       if (sbvname is not null) then
        BEWSTR=sbvname;
       if (sbname is not null) then
        BEWSTR=sbname;
      end

     SDATUM=dtNeueStaffel;
     if (dtAlteStaffel='01.01.1753') then
      SDATUMALT=null;
     else
      SDATUMALT=dtAlteStaffel;
     STAFFMIET=nNeueStaffel;
     STAFFMIETALT=nAlteStaffel;
     DIFFSTAFFMIET=nNeueStaffel - nAlteStaffel;
     
     if ((dtAuszug < DTVON) or (dtEinzug > DTBIS)) then
      ifound = 0;
      
     if (ifound=1) then
      SUSPEND;
   end
  end
 else
  begin
   for
    select staffelvz.onr,staffelvz.betrag1,staffelvz.datum1,staffelvz.betrag2,staffelvz.datum2,staffelvz.betrag3,staffelvz.datum3,
    staffelvz.betrag4,staffelvz.datum4,staffelvz.betrag5,staffelvz.datum5,staffelvz.betrag6,staffelvz.datum6,staffelvz.betrag7,
    staffelvz.datum7,staffelvz.betrag8,staffelvz.datum8,staffelvz.betrag9,staffelvz.datum9,staffelvz.betrag10,staffelvz.datum10,
    staffelvz.knr,ba.bname,ba.bvname,vorausz.bez, b.vbeginn, b.vende 
    from staffelvz,bewohner b,bewadr ba, vorausz,objekte
    where b.bewnr=ba.bewnr and objekte.onr=b.onr and staffelvz.onr=b.onr and staffelvz.knr=b.knr and b.staffel='J' and 
    vorausz.onr=b.onr
    and vorausz.knr=(((staffelvz.zpos-1)*10)+60000) and objekte.bsonst<>1
    order by staffelvz.onr,staffelvz.knr,staffelvz.zpos
    into :ONR,nMiet1,dtDatum1,nMiet2,dtDatum2,nMiet3,dtDatum3,nMiet4,dtDatum4,nMiet5,dtDatum5,nMiet6,dtDatum6,nMiet7,dtDatum7,nMiet8,dtDatum8,nMiet9,dtDatum9,nMiet10,dtDatum10,:KNR,sbname,sbvname,:VZBEZ, dtEinzug, dtAuszug
   do
    begin
     dtNeueStaffel='01.01.1753';
     dtAlteStaffel='01.01.1753';
     nNeueStaffel=0;
     nAlteStaffel=0;
     ifound=0;
     if (dtEinzug is Null) then
      dtEinzug = '01.01.1900';
     if (dtAuszug is Null) then
      dtAuszug = '31.12.9990';     

     /*10 mal*/
     if ((dtDatum1 is not null) and (dtDatum1 >= :DTVON) and (dtDatum1 <= :DTBIS)) then
      begin
       if (dtDatum1 >= dtNeueStaffel) then
         begin
          dtNeueStaffel=dtDatum1;
          nNeueStaffel=nMiet1;
          ifound=1;
         end
      end

     if ((dtDatum2 is not null) and (dtDatum2 >= :DTVON) and (dtDatum2 <= :DTBIS)) then
      begin
       if (dtDatum2 >= dtNeueStaffel) then
         begin
          dtNeueStaffel=dtDatum2;
          nNeueStaffel=nMiet2;
          ifound=1;
         end
      end

     if ((dtDatum3 is not null) and (dtDatum3 >= :DTVON) and (dtDatum3 <= :DTBIS)) then
      begin
       if (dtDatum3 >= dtNeueStaffel) then
         begin
          dtNeueStaffel=dtDatum3;
          nNeueStaffel=nMiet3;
          ifound=1;
         end
      end

     if ((dtDatum4 is not null) and (dtDatum4 >= :DTVON) and (dtDatum4 <= :DTBIS)) then
      begin
       if (dtDatum4 >= dtNeueStaffel) then
         begin
          dtNeueStaffel=dtDatum4;
          nNeueStaffel=nMiet4;
          ifound=1;
         end
      end

     if ((dtDatum5 is not null) and (dtDatum5 >= :DTVON) and (dtDatum5 <= :DTBIS)) then
      begin
       if (dtDatum5 >= dtNeueStaffel) then
         begin
          dtNeueStaffel=dtDatum5;
          nNeueStaffel=nMiet5;
          ifound=1;
         end
      end

     if ((dtDatum6 is not null) and (dtDatum6 >= :DTVON) and (dtDatum6 <= :DTBIS)) then
      begin
       if (dtDatum6 >= dtNeueStaffel) then
         begin
          dtNeueStaffel=dtDatum6;
          nNeueStaffel=nMiet6;
          ifound=1;
         end
      end

     if ((dtDatum7 is not null) and (dtDatum7 >= :DTVON) and (dtDatum7 <= :DTBIS)) then
      begin
       if (dtDatum7 >= dtNeueStaffel) then
         begin
          dtNeueStaffel=dtDatum7;
          nNeueStaffel=nMiet7;
          ifound=1;
         end
      end

     if ((dtDatum8 is not null) and (dtDatum8 >= :DTVON) and (dtDatum8 <= :DTBIS)) then
      begin
       if (dtDatum8 >= dtNeueStaffel) then
         begin
          dtNeueStaffel=dtDatum8;
          nNeueStaffel=nMiet8;
          ifound=1;
         end
      end

     if ((dtDatum9 is not null) and (dtDatum9 >= :DTVON) and (dtDatum9 <= :DTBIS)) then
      begin
       if (dtDatum9 >= dtNeueStaffel) then
         begin
          dtNeueStaffel=dtDatum9;
          nNeueStaffel=nMiet9;
          ifound=1;
         end
      end

     if ((dtDatum10 is not null) and (dtDatum10 >= :DTVON) and (dtDatum10 <= :DTBIS)) then
      begin
       if (dtDatum10 >= dtNeueStaffel) then
         begin
          dtNeueStaffel=dtDatum10;
          nNeueStaffel=nMiet10;
          ifound=1;
         end
      end

     /*Alte Staffel*/
     if ((ifound=1) and (dtDatum1 >= dtAlteStaffel) and (dtDatum1 < dtNeueStaffel)) then
      begin
       dtAlteStaffel=dtDatum1;
       nAlteStaffel=nMiet1;
      end

     if ((ifound=1) and (dtDatum2 >= dtAlteStaffel) and (dtDatum2 < dtNeueStaffel)) then
      begin
       dtAlteStaffel=dtDatum2;
       nAlteStaffel=nMiet2;
      end

     if ((ifound=1) and (dtDatum3 >= dtAlteStaffel) and (dtDatum3 < dtNeueStaffel)) then
      begin
       dtAlteStaffel=dtDatum3;
       nAlteStaffel=nMiet3;
      end

     if ((ifound=1) and (dtDatum4 >= dtAlteStaffel) and (dtDatum4 < dtNeueStaffel)) then
      begin
       dtAlteStaffel=dtDatum4;
       nAlteStaffel=nMiet4;
      end

     if ((ifound=1) and (dtDatum5 >= dtAlteStaffel) and (dtDatum5 < dtNeueStaffel)) then
      begin
       dtAlteStaffel=dtDatum5;
       nAlteStaffel=nMiet5;
      end

     if ((ifound=1) and (dtDatum6 >= dtAlteStaffel) and (dtDatum6 < dtNeueStaffel)) then
      begin
       dtAlteStaffel=dtDatum6;
       nAlteStaffel=nMiet6;
      end

     if ((ifound=1) and (dtDatum7 >= dtAlteStaffel) and (dtDatum7 < dtNeueStaffel)) then
      begin
       dtAlteStaffel=dtDatum7;
       nAlteStaffel=nMiet7;
      end

     if ((ifound=1) and (dtDatum8 >= dtAlteStaffel) and (dtDatum8 < dtNeueStaffel)) then
      begin
       dtAlteStaffel=dtDatum8;
       nAlteStaffel=nMiet8;
      end

     if ((ifound=1) and (dtDatum9 >= dtAlteStaffel) and (dtDatum9 < dtNeueStaffel)) then
      begin
       dtAlteStaffel=dtDatum9;
       nAlteStaffel=nMiet9;
      end

     if ((ifound=1) and (dtDatum10 >= dtAlteStaffel) and (dtDatum10 < dtNeueStaffel)) then
      begin
       dtAlteStaffel=dtDatum10;
       nAlteStaffel=nMiet10;
      end
      
     if ((sbvname is not null) and (sbname is not null)) then
      BEWSTR=sbvname || ' ' || sbname;
     else
      begin
       if (sbvname is not null) then
        BEWSTR=sbvname;
       if (sbname is not null) then
        BEWSTR=sbname;
      end

     SDATUM=dtNeueStaffel;
     if (dtAlteStaffel='01.01.1753') then
      SDATUMALT=null;
     else
      SDATUMALT=dtAlteStaffel;
     STAFFMIET=nNeueStaffel;
     STAFFMIETALT=nAlteStaffel;
     DIFFSTAFFMIET=nNeueStaffel - nAlteStaffel;
     
     if ((dtAuszug < DTVON) or (dtEinzug > DTBIS)) then
      ifound = 0;     
     
     if (ifound=1) then
      SUSPEND;
    end
  end
END


-- Prozedur: SUMMEN_UND_SALDENLISTE
CREATE OR ALTER PROCEDURE SUMMEN_UND_SALDENLISTE
DECLARE VARIABLE KKLASSE_VON INTEGER;
DECLARE VARIABLE KKLASSE_BIS INTEGER;
DECLARE VARIABLE SOLL_PLUS CHAR(1);
BEGIN
 IF (IBESTANDSKONTEN=1) THEN
  BEGIN
   KKLASSE = 1; /* Aktive Bestandskonten 20 bis 24*/
   KKLASSE_VON = 20;
   KKLASSE_BIS = 24;
   SOLL_PLUS = 'J';
   SUM_SALDO=0;
   FOR
    SELECT KNR,KBEZ,EBWERT_S,EBWERT_H,EBWERT,SALDO_S,SALDO_H,SALDO_KUM_S,SALDO_KUM_H,SALDO,EBWERT_SH,SALDO_SH from summen_und_saldenliste_klasse(:IONR,:DTVON,:DTBIS,:DTEBWERT,:KKLASSE_VON,:KKLASSE_BIS,:SOLL_PLUS,:KKLASSE,1,:IEBWERTSACHKONTEN)
    into KNR,KBEZ,EBWERT_S,EBWERT_H,EBWERT,SALDO_S,SALDO_H,SALDO_KUM_S,SALDO_KUM_H,SALDO,EBWERT_SH,SALDO_SH do
   begin
    IF (SALDO_SH='S') then
     SUM_SALDO=SUM_SALDO+SALDO;
    ELSE
     SUM_SALDO=SUM_SALDO-SALDO;
    IF (KNR<90000) THEN
     SUSPEND;
   end
   
   IF (ISBRUTTO=0) THEN
    BEGIN
     /* VORSTEUER */
     KKLASSE_VON = 1;
     KKLASSE_BIS = 1;
     SOLL_PLUS = 'J';
     FOR
      SELECT KNR,KBEZ,EBWERT_S,EBWERT_H,EBWERT,SALDO_S,SALDO_H,SALDO_KUM_S,SALDO_KUM_H,SALDO,EBWERT_SH,SALDO_SH from summen_und_saldenliste_ust(:IONR,:DTVON,:DTBIS,:DTEBWERT,:KKLASSE_VON,:KKLASSE_BIS,:SOLL_PLUS,:KKLASSE,:ISBRUTTO,:IEBWERTSACHKONTEN)
      into KNR,KBEZ,EBWERT_S,EBWERT_H,EBWERT,SALDO_S,SALDO_H,SALDO_KUM_S,SALDO_KUM_H,SALDO,EBWERT_SH,SALDO_SH do
     begin
      IF (SALDO_SH='S') then
       SUM_SALDO=SUM_SALDO+SALDO;
      ELSE
       SUM_SALDO=SUM_SALDO-SALDO;
      SUSPEND;
     end
     /* UMSATZSTEUER */
     KKLASSE_VON = 10;
     KKLASSE_BIS = 19;
     SOLL_PLUS = 'J';
     FOR 
      SELECT KNR,KBEZ,EBWERT_S,EBWERT_H,EBWERT,SALDO_S,SALDO_H,SALDO_KUM_S,SALDO_KUM_H,SALDO,EBWERT_SH,SALDO_SH from summen_und_saldenliste_ust(:IONR,:DTVON,:DTBIS,:DTEBWERT,:KKLASSE_VON,:KKLASSE_BIS,:SOLL_PLUS,:KKLASSE,:ISBRUTTO,:IEBWERTSACHKONTEN)
      into KNR,KBEZ,EBWERT_S,EBWERT_H,EBWERT,SALDO_S,SALDO_H,SALDO_KUM_S,SALDO_KUM_H,SALDO,EBWERT_SH,SALDO_SH do
     begin
      IF (SALDO_SH='S') then
       SUM_SALDO=SUM_SALDO+SALDO;
      ELSE
       SUM_SALDO=SUM_SALDO-SALDO;
      SUSPEND;
     END
    END  /* ISBRUTTO */
   KKLASSE = 3; /* passive Bestandskonten 27*/
   KKLASSE_VON = 27;
   KKLASSE_BIS = 27;
   SOLL_PLUS = 'N';
   SUM_SALDO=0;
   FOR
    SELECT KNR,KBEZ,EBWERT_S,EBWERT_H,EBWERT,SALDO_S,SALDO_H,SALDO_KUM_S,SALDO_KUM_H,SALDO,EBWERT_SH,SALDO_SH from summen_und_saldenliste_klasse(:IONR,:DTVON,:DTBIS,:DTEBWERT,:KKLASSE_VON,:KKLASSE_BIS,:SOLL_PLUS,:KKLASSE,1,:IEBWERTSACHKONTEN)
    into KNR,KBEZ,EBWERT_S,EBWERT_H,EBWERT,SALDO_S,SALDO_H,SALDO_KUM_S,SALDO_KUM_H,SALDO,EBWERT_SH,SALDO_SH do
   begin
    IF (SALDO_SH='S') then
     SUM_SALDO=SUM_SALDO+SALDO;
    ELSE
     SUM_SALDO=SUM_SALDO-SALDO;
    SUSPEND;
   end
  end  /* IBESTANDSKONTEN */

 IF (ISACHKONTEN=1) THEN
  BEGIN
   KKLASSE = 4; /* Einnahmen */
   KKLASSE_VON = 10;
   KKLASSE_BIS = 19;
   SOLL_PLUS = 'J';
   SUM_SALDO=0;
   FOR
    SELECT KNR,KBEZ,EBWERT_S,EBWERT_H,EBWERT,SALDO_S,SALDO_H,SALDO_KUM_S,SALDO_KUM_H,SALDO,EBWERT_SH,SALDO_SH from summen_und_saldenliste_klasse(:IONR,:DTVON,:DTBIS,:DTEBWERT,:KKLASSE_VON,:KKLASSE_BIS,:SOLL_PLUS,:KKLASSE,:ISBRUTTO,:IEBWERTSACHKONTEN)
    into KNR,KBEZ,EBWERT_S,EBWERT_H,EBWERT,SALDO_S,SALDO_H,SALDO_KUM_S,SALDO_KUM_H,SALDO,EBWERT_SH,SALDO_SH do
   begin
    IF (SALDO_SH='S') then
     SUM_SALDO=SUM_SALDO+SALDO;
    ELSE
     SUM_SALDO=SUM_SALDO-SALDO;
    SUSPEND;
   end
   /* RÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼cklagen */
   KKLASSE_VON = 110;
   KKLASSE_BIS = 580;
   SOLL_PLUS = 'J';
   FOR
    SELECT KNR,KBEZ,EBWERT_S,EBWERT_H,EBWERT,SALDO_S,SALDO_H,SALDO_KUM_S,SALDO_KUM_H,SALDO,EBWERT_SH,SALDO_SH from summen_und_saldenliste_klasse(:IONR,:DTVON,:DTBIS,:DTEBWERT,:KKLASSE_VON,:KKLASSE_BIS,:SOLL_PLUS,:KKLASSE,:ISBRUTTO,:IEBWERTSACHKONTEN)
    into KNR,KBEZ,EBWERT_S,EBWERT_H,EBWERT,SALDO_S,SALDO_H,SALDO_KUM_S,SALDO_KUM_H,SALDO,EBWERT_SH,SALDO_SH do
   begin
    IF (SALDO_SH='S') then
     SUM_SALDO=SUM_SALDO+SALDO;
    ELSE
     SUM_SALDO=SUM_SALDO-SALDO;
    SUSPEND;
   end
   KKLASSE = 5; /* Ausgaben */
   KKLASSE_VON = 1;
   KKLASSE_BIS = 1;
   SOLL_PLUS = 'J';
   SUM_SALDO=0;
   FOR
    SELECT KNR,KBEZ,EBWERT_S,EBWERT_H,EBWERT,SALDO_S,SALDO_H,SALDO_KUM_S,SALDO_KUM_H,SALDO,EBWERT_SH,SALDO_SH from summen_und_saldenliste_klasse(:IONR,:DTVON,:DTBIS,:DTEBWERT,:KKLASSE_VON,:KKLASSE_BIS,:SOLL_PLUS,:KKLASSE,:ISBRUTTO,:IEBWERTSACHKONTEN)
    into KNR,KBEZ,EBWERT_S,EBWERT_H,EBWERT,SALDO_S,SALDO_H,SALDO_KUM_S,SALDO_KUM_H,SALDO,EBWERT_SH,SALDO_SH do
   begin
    IF (SALDO_SH='S') then
     SUM_SALDO=SUM_SALDO+SALDO;
    ELSE
     SUM_SALDO=SUM_SALDO-SALDO;
    SUSPEND;
   end
   /* ErÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â·ffnungsbilantkonten, Durchlauf, auch eigene Durchlaufkonen 9xxxxx */
   KKLASSE = 9; /* EB */
   KKLASSE_VON = 30;
   KKLASSE_BIS = 30;
   SOLL_PLUS = 'J';
   SUM_SALDO=0;
   FOR 
    SELECT KNR,KBEZ,EBWERT_S,EBWERT_H,EBWERT,SALDO_S,SALDO_H,SALDO_KUM_S,SALDO_KUM_H,SALDO,EBWERT_SH,SALDO_SH from summen_und_saldenliste_klasse(:IONR,:DTVON,:DTBIS,:DTEBWERT,:KKLASSE_VON,:KKLASSE_BIS,:SOLL_PLUS,:KKLASSE,:ISBRUTTO,:IEBWERTSACHKONTEN)
    into KNR,KBEZ,EBWERT_S,EBWERT_H,EBWERT,SALDO_S,SALDO_H,SALDO_KUM_S,SALDO_KUM_H,SALDO,EBWERT_SH,SALDO_SH do
   begin
    IF (SALDO_SH='S') then
     SUM_SALDO=SUM_SALDO+SALDO;
    ELSE
     SUM_SALDO=SUM_SALDO-SALDO;
    SUSPEND;
   end
   /* selbst angelegte Bestandskonten A mit 9xxxxx */
   KKLASSE_VON = 20;
   KKLASSE_BIS = 24;
   SOLL_PLUS = 'J';
   FOR 
    SELECT KNR,KBEZ,EBWERT_S,EBWERT_H,EBWERT,SALDO_S,SALDO_H,SALDO_KUM_S,SALDO_KUM_H,SALDO,EBWERT_SH,SALDO_SH from summen_und_saldenliste_klasse(:IONR,:DTVON,:DTBIS,:DTEBWERT,:KKLASSE_VON,:KKLASSE_BIS,:SOLL_PLUS,:KKLASSE,1,:IEBWERTSACHKONTEN)
    into KNR,KBEZ,EBWERT_S,EBWERT_H,EBWERT,SALDO_S,SALDO_H,SALDO_KUM_S,SALDO_KUM_H,SALDO,EBWERT_SH,SALDO_SH do
   begin
    IF (KNR>=90000) THEN /* 9xxxx sind Durchlaufkonten */
     BEGIN
      IF (SALDO_SH='S') then
       SUM_SALDO=SUM_SALDO+SALDO;
      ELSE
       SUM_SALDO=SUM_SALDO-SALDO;
      SUSPEND;
     END 
   end
  end  /* Durchlauf */

 IF (IDEBITOREN=1) THEN
  BEGIN
   KKLASSE = 10; /* DEBITOREN */
   KKLASSE_VON = 60;
   KKLASSE_BIS = 62;
   SOLL_PLUS = 'J';
   SUM_SALDO=0;
   FOR 
    SELECT KNR,KBEZ,EBWERT_S,EBWERT_H,EBWERT,SALDO_S,SALDO_H,SALDO_KUM_S,SALDO_KUM_H,SALDO,EBWERT_SH,SALDO_SH from summen_und_saldenliste_klasse(:IONR,:DTVON,:DTBIS,:DTEBWERT,:KKLASSE_VON,:KKLASSE_BIS,:SOLL_PLUS,:KKLASSE,1,:IEBWERTSACHKONTEN)
    into KNR,KBEZ,EBWERT_S,EBWERT_H,EBWERT,SALDO_S,SALDO_H,SALDO_KUM_S,SALDO_KUM_H,SALDO,EBWERT_SH,SALDO_SH do
   begin
    IF (SALDO_SH='S') then
     SUM_SALDO=SUM_SALDO+SALDO;
    ELSE
     SUM_SALDO=SUM_SALDO-SALDO;
    SUSPEND;
   end
  end  /* DEBITOREN */

 IF (IKREDITOREN=1) THEN
  BEGIN
   KKLASSE = 70; /* Kreditoren */
   KKLASSE_VON = 71;
   KKLASSE_BIS = 71;
   SOLL_PLUS = 'N';
   SUM_SALDO=0;
   FOR 
    SELECT KNR,KBEZ,EBWERT_S,EBWERT_H,EBWERT,SALDO_S,SALDO_H,SALDO_KUM_S,SALDO_KUM_H,SALDO,EBWERT_SH,SALDO_SH from summen_und_saldenliste_klasse(:IONR,:DTVON,:DTBIS,:DTEBWERT,:KKLASSE_VON,:KKLASSE_BIS,:SOLL_PLUS,:KKLASSE,1,:IEBWERTSACHKONTEN)
    into KNR,KBEZ,EBWERT_S,EBWERT_H,EBWERT,SALDO_S,SALDO_H,SALDO_KUM_S,SALDO_KUM_H,SALDO,EBWERT_SH,SALDO_SH do
   begin
    IF (SALDO_SH='S') then
     SUM_SALDO=SUM_SALDO+SALDO;
    ELSE
     SUM_SALDO=SUM_SALDO-SALDO;
    SUSPEND;
   end
  end  /* KREDITOREN */
end


-- Prozedur: SUMMEN_UND_SALDENLISTE_KLASSE
CREATE OR ALTER PROCEDURE SUMMEN_UND_SALDENLISTE_KLASSE
DECLARE VARIABLE IONR_ INTEGER;
DECLARE VARIABLE IRLPOS INTEGER;
DECLARE VARIABLE IRLVZ INTEGER;
DECLARE VARIABLE SALDO_S_NETTO NUMERIC(18, 2);
DECLARE VARIABLE SALDO_H_NETTO NUMERIC(18, 2);
DECLARE VARIABLE SALDO_KUM_S_NETTO NUMERIC(18, 2);
DECLARE VARIABLE SALDO_KUM_H_NETTO NUMERIC(18, 2);
DECLARE VARIABLE RUECKLAB NUMERIC(18, 2);
DECLARE VARIABLE TMP NUMERIC(18, 2);
BEGIN
 IF (KKLASSE_VON=71 OR KKLASSE_VON=30) THEN
  IONR_=0;
 ELSE
  IONR_=IONR;
 FOR SELECT KNR, KBEZ, RLPOS from KONTEN where (KKLASSE>=:KKLASSE_VON and KKLASSE<=:KKLASSE_BIS) and ONR=:IONR_ order by KNR into :KNR, :KBEZ, :IRLPOS do
  begin
   IF (IRLPOS IS NULL) THEN
    IRLPOS = 0;
   IF ((IEBWERTSACHKONTEN=1) OR ((IEBWERTSACHKONTEN=0) AND (:KKLASSE<>4) AND (:KKLASSE <>5))) THEN  /* HINWEIS : EB WERT beu Einnahme/Ausgabekonten nur wenn IEBWERTSACHKONRTEB = 1 */
    BEGIN
     select SUM(BETRAG), SUM((Betrag*100) / (100+MWST)) from buchung where (ONRSOLL=:IONR_ AND (ONRHABEN=:IONR or ONRHABEN=0)) and KSOLL=:KNR and (DATUM<:DTEBWERT) into :SALDO_S, :SALDO_S_NETTO;

     IF (ISBRUTTO=0) THEN
      SALDO_S=SALDO_S_NETTO;
     IF (SALDO_S IS NULL) then
      SALDO_S = 0;

     select SUM(BETRAG), SUM((Betrag*100) / (100+MWST)) from buchung where (ONRHABEN=:IONR_ AND (ONRSOLL=:IONR or ONRSOLL=0)) and KHABEN=:KNR and (DATUM<:DTEBWERT) into :SALDO_H, :SALDO_H_NETTO;

     IF (ISBRUTTO=0) THEN
      SALDO_H=SALDO_H_NETTO;
     IF (SALDO_H IS NULL) then
      SALDO_H = 0;
     /* wenn negativ dann S/H tauschen, weil es in der doppleten kein - gibt */
     IF ((SALDO_S < 0) and (SALDO_H < 0)) THEN
      BEGIN
       /* TMP = ABS(SALDO_S);
       SALDO_S = ABS(SALDO_H);
       SALDO_H = TMP;
       TMP = 0;*/
      END
     ELSE
      BEGIN
       IF (SALDO_S < 0) then
        begin
         SALDO_H = SALDO_H + ABS(SALDO_S);
         SALDO_S = 0;
        end
       IF (SALDO_H < 0) then
        begin
         SALDO_S = SALDO_S + ABS(SALDO_H);
         SALDO_H = 0;
        end
      END
     /* Beitragsverpflichtung in AB einrechnen */
     IF ((KKLASSE_VON = 27) and (IRLPOS>0)) THEN
      BEGIN
       select KONTO_VZ from rueckpos where NR=:IRLPOS INTO :IRLVZ;
       /* In dieser Abfrage muss das Bis Datum < sein. Also nicht <= Deshalb Tag -1*/
       select sum(sum_vz) from VZ_BE_DETAIL (:IONR_, '01.01.1950', dateadd (-1 day to :DTEBWERT), 200000, 299999, 'N') where vzpos=(:IRLVZ-60000) into :RUECKLAB;
       if (RUECKLAB is null) then
        RUECKLAB = 0;
       SALDO_H = SALDO_H + RUECKLAB;
     END
     EBWERT_S = SALDO_S;
     EBWERT_H = SALDO_H;
     EBWERT = EBWERT_S - EBWERT_H;
     IF (SOLL_PLUS='J') THEN
      BEGIN
       EBWERT = SALDO_S - SALDO_H;
       IF (EBWERT>=0) THEN
        BEGIN
         EBWERT_SH='S';
        END
       ELSE
        BEGIN
         EBWERT_SH='H';
         EBWERT = - EBWERT;
        END
      END
     ELSE
      BEGIN
       EBWERT = SALDO_H - SALDO_S;
       IF (EBWERT>=0) THEN
        BEGIN
         EBWERT_SH='H';
        END
       ELSE
        BEGIN
         EBWERT_SH='S';
         EBWERT = - EBWERT;
        END
      END
    END
   ELSE
    BEGIN
     EBWERT_SH='S';
     EBWERT = 0;
    END

    WITH cteB
    AS
    (
    SELECT b.BETRAG, b.MWST,
    CASE when b.Datum >= :DTVON
    then b.Datum
    else ''
    end as Datum
    FROM buchung b
    where
    (b.ONRSOLL = :IONR_ AND (b.ONRHABEN = :IONR or b.ONRHABEN = 0))
    and b.KSOLL = :KNR
    and b.DATUM <= :DTBIS
    )
    SELECT SUM(q.BETRAG), SUM((q.BETRAG * 100) / (100 + q.MWST))
    FROM cteB q
    WHERE  q.Datum <> ''
	into :SALDO_S, :SALDO_S_NETTO;

   IF (ISBRUTTO=0) THEN
    SALDO_S=SALDO_S_NETTO;
   IF (SALDO_S IS NULL) then
    SALDO_S = 0;

    WITH cteB
    AS
    (
    SELECT b.BETRAG, b.MWST,
    CASE when b.Datum >= :DTVON
    then b.Datum
    else ''
    end as Datum
    FROM buchung b
    where
    (b.ONRHABEN = :IONR_ AND (b.ONRSOLL = :IONR or b.ONRSOLL = 0))
    and b.KHABEN = :KNR
    and b.DATUM <= :DTBIS
    )
    SELECT SUM(q.BETRAG), SUM((q.BETRAG * 100) / (100 + q.MWST))
    FROM cteB q
    WHERE  q.Datum <> ''
    into :SALDO_H, :SALDO_H_NETTO;

   IF (ISBRUTTO=0) THEN
    SALDO_H=SALDO_H_NETTO;
   IF (SALDO_H IS NULL) then
    SALDO_H = 0;
   /* Beitragsverpflichtung in AB einrechnen */
   IF ((KKLASSE_VON = 27) and (IRLPOS>0)) THEN
    BEGIN
     select KONTO_VZ from rueckpos where NR=:IRLPOS INTO :IRLVZ;
     select sum(sum_vz) from VZ_BE_DETAIL (:IONR_, :DTVON, :DTBIS, 200000, 299999, 'N') where vzpos=(:IRLVZ-60000) into :RUECKLAB;
     if (RUECKLAB is null) then
      RUECKLAB = 0;
     SALDO_H = SALDO_H + RUECKLAB;
    END
   /* wenn negativ dann S/H tauschen, weil es in der doppleten kein - gibt */
   IF ((SALDO_S < 0) and (SALDO_H < 0)) THEN
    BEGIN
     /* TMP = ABS(SALDO_S);
     SALDO_S = ABS(SALDO_H);
     SALDO_H = TMP;
     TMP = 0; */
    END
   ELSE
    BEGIN
     IF (SALDO_S < 0) then
      begin
       SALDO_H = SALDO_H + ABS(SALDO_S);
       SALDo_S = 0;
      end
     IF (SALDO_H < 0) then
      begin
       SALDO_S = SALDO_S + ABS(SALDO_H);
       SALDo_H = 0;
      end
    END

    WITH cteB
    AS
    (
    SELECT b.BETRAG, b.MWST,
    CASE when b.Datum >= :DTEBWERT
    then b.Datum
    else ''
    end as Datum
    FROM buchung b
    where
    (b.ONRSOLL = :IONR_ AND (b.ONRHABEN = :IONR or b.ONRHABEN = 0))
    and b.KSOLL = :KNR
    and b.DATUM <= :DTBIS
    )
    SELECT SUM(q.BETRAG), SUM((q.BETRAG * 100) / (100 + q.MWST))
    FROM cteB q
    WHERE  q.Datum <> ''
	into :SALDO_KUM_S, :SALDO_KUM_S_NETTO;

   IF (ISBRUTTO=0) THEN
    SALDO_KUM_S=SALDO_KUM_S_NETTO;
   IF (SALDO_KUM_S IS NULL) then
    SALDO_KUM_S = 0;

    WITH cteB
    AS
    (
    SELECT b.BETRAG, b.MWST,
    CASE when b.Datum >= :DTEBWERT
    then b.Datum
    else ''
    end as Datum
    FROM buchung b
    where
    (b.ONRHABEN = :IONR_ AND (b.ONRSOLL = :IONR or b.ONRSOLL = 0))
    and b.KHABEN = :KNR
    and b.DATUM <= :DTBIS
    )
    SELECT SUM(q.BETRAG), SUM((q.BETRAG * 100) / (100 + q.MWST))
    FROM cteB q
    WHERE  q.Datum <> ''
    into :SALDO_KUM_H, SALDO_KUM_H_NETTO;

   IF (ISBRUTTO=0) THEN
    SALDO_KUM_H=SALDO_KUM_H_NETTO;
   IF (SALDO_KUM_H IS NULL) then
    SALDO_KUM_H = 0;
   /* Beitragsverpflichtung in AB einrechnen */
   IF ((KKLASSE_VON = 27) and (IRLPOS>0)) THEN
    BEGIN
     select KONTO_VZ from rueckpos where NR=:IRLPOS INTO :IRLVZ;
     select sum(sum_vz) from VZ_BE_DETAIL (:IONR_, :DTEBWERT, :DTBIS, 200000, 299999, 'N') where vzpos=(:IRLVZ-60000) into :RUECKLAB;
     if (RUECKLAB is null) then
      RUECKLAB = 0;
     SALDO_KUM_H = SALDO_KUM_H + RUECKLAB;
    END
   /* wenn negativ dann S/H tauschen, weil es in der doppleten kein - gibt */
   IF ((SALDO_KUM_S < 0) and (SALDO_KUM_H < 0)) THEN
    BEGIN
     /* TMP = ABS(SALDO_KUM_S);
     SALDO_KUM_S = ABS(SALDO_KUM_H);
     SALDO_KUM_H = TMP;
     TMP = 0; */
    END
   ELSE
    BEGIN
     IF (SALDO_KUM_S < 0) then
      begin
       SALDO_KUM_H = SALDO_KUM_H + ABS(SALDO_KUM_S);
       SALDO_KUM_S = 0;
      end
     IF (SALDO_KUM_H < 0) then
      begin
       SALDO_KUM_S = SALDO_KUM_S + ABS(SALDO_KUM_H);
       SALDO_KUM_H = 0;
      end
    END
   IF (SOLL_PLUS='J') THEN
    BEGIN
     IF (EBWERT_SH='S') THEN
      SALDO = SALDO_KUM_S - SALDO_KUM_H + EBWERT;
     ELSE
      SALDO = SALDO_KUM_S - SALDO_KUM_H - EBWERT;
     IF (SALDO>=0) THEN
      BEGIN
       SALDO_SH='S';
      END
     ELSE
      BEGIN
       SALDO_SH='H';
       SALDO = - SALDO;
      END
    END
   ELSE
    BEGIN
     IF (EBWERT_SH='H') THEN
      SALDO = SALDO_KUM_H - SALDO_KUM_S + EBWERT;
     ELSE
      SALDO = SALDO_KUM_H - SALDO_KUM_S - EBWERT;
     IF (SALDO>=0) THEN
      BEGIN
       SALDO_SH='H';
      END
     ELSE
      BEGIN
       SALDO_SH='S';
       SALDO = - SALDO;
      END
    END
   IF (NOT (EBWERT=0 AND SALDO_S =0 AND SALDO_H = 0 AND SALDO_KUM_S = 0 AND SALDO_KUM_H = 0 AND SALDO = 0)) THEN
    BEGIN
     SUSPEND;
    END
  end
 /* Beitragsverpflichtung in Kosten aufnehmen einrechnen */
 IF (KKLASSE = 5) THEN
  BEGIN
   for
    select KONTO_VZ, KBEZ from rueckpos, konten where rueckpos.ONR=:IONR_ and rueckpos.onr=konten.onr and RUECKPOS.KONTO_VZ=KONTEN.KNR INTO :KNR, :KBEZ
   do
    begin
     KBEZ = 'ZufÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼hrung ' || KBEZ;
     /* AB */
     EBWERT_H = 0;
     EBWERT_S = 0;
     /* In dieser Abfrage muss das Bis Datum < sein. Also nicht <= Deshalb Tag -1*/
     if (IEBWERTSACHKONTEN=1) then
      BEGIN
       select sum(sum_vz) from VZ_BE_DETAIL (:IONR_, '01.01.1950', dateadd (-1 day to :DTEBWERT), 200000, 299999, 'N') where vzpos=(:KNR-60000) into :EBWERT_S;
       if (EBWERT_S is null) then
        EBWERT_S = 0;
      END

     EBWERT = EBWERT_S;
     /* Monat/Quartal */
     SALDO_H = 0;
     select sum(sum_vz) from VZ_BE_DETAIL (:IONR_, :DTVON, :DTBIS, 200000, 299999, 'N') where vzpos=(:KNR-60000) into :SALDO_S;
     if (SALDO_S is null) then
      SALDO_S = 0;
     /* Kumuliert */
     SALDO_KUM_H = 0;
     select sum(sum_vz) from VZ_BE_DETAIL (:IONR_, :DTEBWERT, :DTBIS, 200000, 299999, 'N') where vzpos=(:KNR-60000) into :SALDO_KUM_S;
     if (SALDO_KUM_S is null) then
      SALDO_KUM_S = 0;
     /* SALDO */
     SALDO = SALDO_KUM_S + EBWERT;
     EBWERT_SH = 'S';
     SALDO_SH = 'S';
     /* FERTIG */
     IF (NOT (EBWERT=0 AND SALDO_S =0 AND SALDO_H = 0 AND SALDO_KUM_S = 0 AND SALDO_KUM_H = 0 AND SALDO = 0)) THEN
      BEGIN
       SUSPEND;
      END
    end
  END
end


-- Prozedur: SUMMEN_UND_SALDENLISTE_UST
CREATE OR ALTER PROCEDURE SUMMEN_UND_SALDENLISTE_UST
DECLARE VARIABLE IONR_ INTEGER;
BEGIN
 IF (KKLASSE_VON=71 OR KKLASSE_VON=30) THEN
  IONR_=0;
 ELSE
  IONR_=IONR; 
  IF (KKLASSE_VON = 1) THEN
   BEGIN
    KNR=1576;
    KBEZ='Abziehbare Vorsteuer';
   END
  ELSE
   BEGIN
    KNR=1776;
    KBEZ='Umsatzsteuer';
   END 
/* FOR SELECT KNR, KBEZ from KONTEN where (KKLASSE>=:KKLASSE_VON and KKLASSE<=:KKLASSE_BIS) and ONR=:IONR_ order by KNR into :KNR, :KBEZ do */
    begin
     IF (:IEBWERTSACHKONTEN=1) THEN  /* auch EB-Wert UST bei Sachkonten */
      BEGIN
       select SUM(BETRAG) -  SUM((Betrag*100) / (100+MWST)) from buchung where (ONRSOLL=:IONR_ AND (ONRHABEN=:IONR or ONRHABEN=0)) and (ARTSOLL>=:KKLASSE_VON and ARTSOLL<=:KKLASSE_BIS) and (DATUM<:DTEBWERT) AND (MWST<>0) into :SALDO_S;    
       IF (SALDO_S IS NULL) then
        SALDO_S = 0;
       select SUM(BETRAG) -  SUM((Betrag*100) / (100+MWST)) from buchung where (ONRHABEN=:IONR_ AND (ONRSOLL=:IONR or ONRSOLL=0)) and (ARTHABEN>=:KKLASSE_VON and ARTHABEN<=:KKLASSE_BIS) and (DATUM<:DTEBWERT) AND (MWST<>0) into :SALDO_H;    
       IF (SALDO_H IS NULL) then
        SALDO_H = 0;
       /* wenn negativ dann S/H tauschen, weil es in der doppleten kein - gibt */
       IF (SALDO_S < 0) then
        begin
         SALDO_H = SALDO_H + ABS(SALDO_S);
         SALDO_S = 0;
        end 
       IF (SALDO_H < 0) then
        begin
         SALDO_S = SALDO_S + ABS(SALDO_H);
         SALDO_H = 0;
        end 
       EBWERT_S = SALDO_S;
       EBWERT_H = SALDO_H;
       EBWERT = EBWERT_S - EBWERT_H;
       IF (SOLL_PLUS='J') THEN
        BEGIN 
         EBWERT = SALDO_S - SALDO_H;
         IF (EBWERT>=0) THEN
          BEGIN
           EBWERT_SH='S';
          END 
         ELSE
          BEGIN
           EBWERT_SH='H';
           EBWERT = - EBWERT;      
          END 
        END
       ELSE
        BEGIN
         EBWERT = SALDO_H - SALDO_S;
         IF (EBWERT>=0) THEN
          BEGIN
           EBWERT_SH='H';
          END 
         ELSE
          BEGIN
           EBWERT_SH='S';
           EBWERT = - EBWERT;      
          END 
        END   
      END
     ELSE
      BEGIN
       EBWERT_SH='S';
       EBWERT = 0;
      END  
       

     select SUM(BETRAG) - SUM((Betrag*100) / (100+MWST)) from buchung where (ONRSOLL=:IONR_ AND (ONRHABEN=:IONR or ONRHABEN=0)) and (ARTSOLL>=:KKLASSE_VON and ARTSOLL<=:KKLASSE_BIS) and (DATUM>=:DTVON and DATUM<=:DTBIS) AND (MWST<>0) into :SALDO_S;

     IF (SALDO_S IS NULL) then
      SALDO_S = 0;
     select SUM(BETRAG) -  SUM((Betrag*100) / (100+MWST)) from buchung where (ONRHABEN=:IONR_ AND (ONRSOLL=:IONR or ONRSOLL=0)) and (ARTHABEN>=:KKLASSE_VON and ARTHABEN<=:KKLASSE_BIS) and (DATUM>=:DTVON and DATUM<=:DTBIS) AND (MWST<>0) into :SALDO_H;     
     IF (SALDO_H IS NULL) then
      SALDO_H = 0;  
     /* wenn negativ dann S/H tauschen, weil es in der doppleten kein - gibt */
     IF (SALDO_S < 0) then
      begin
       SALDO_H = SALDO_H + ABS(SALDO_S);
       SALDo_S = 0;
      end 
     IF (SALDO_H < 0) then
      begin
       SALDO_S = SALDO_S + ABS(SALDO_H);
       SALDo_H = 0;
      end 
    select SUM(BETRAG) -  SUM((Betrag*100) / (100+MWST)) from buchung where (ONRSOLL=:IONR_ AND (ONRHABEN=:IONR or ONRHABEN=0)) and (ARTSOLL>=:KKLASSE_VON and ARTSOLL<=:KKLASSE_BIS) and (DATUM>=:DTEBWERT and DATUM<=:DTBIS) AND (MWST<>0) into :SALDO_KUM_S;     
     IF (SALDO_KUM_S IS NULL) then
      SALDO_KUM_S = 0;
     select SUM(BETRAG) -  SUM((Betrag*100) / (100+MWST)) from buchung where (ONRHABEN=:IONR_ AND (ONRSOLL=:IONR or ONRSOLL=0)) and (ARTHABEN>=:KKLASSE_VON and ARTHABEN<=:KKLASSE_BIS) and (DATUM>=:DTEBWERT and DATUM<=:DTBIS) AND (MWST<>0) into :SALDO_KUM_H;          
     IF (SALDO_KUM_H IS NULL) then
      SALDO_KUM_H = 0;
 /* wenn negativ dann S/H tauschen, weil es in der doppleten kein - gibt */
     IF (SALDO_KUM_S < 0) then
      begin
       SALDO_KUM_H = SALDO_KUM_H + ABS(SALDO_KUM_S);
       SALDO_KUM_S = 0;
      end 
     IF (SALDO_KUM_H < 0) then
      begin
       SALDO_KUM_S = SALDO_KUM_S + ABS(SALDO_KUM_H);
       SALDO_KUM_H = 0;
      end       
      
      
     IF (SOLL_PLUS='J') THEN
      BEGIN 
       IF (EBWERT_SH='S') THEN
        SALDO = SALDO_KUM_S - SALDO_KUM_H + EBWERT;
       ELSE
        SALDO = SALDO_KUM_S - SALDO_KUM_H - EBWERT;
       IF (SALDO>=0) THEN
        BEGIN
         SALDO_SH='S';
        END 
       ELSE
        BEGIN
         SALDO_SH='H';
         SALDO = - SALDO;      
        END 
      END
     ELSE
      BEGIN
       IF (EBWERT_SH='H') THEN
        SALDO = SALDO_KUM_H - SALDO_KUM_S + EBWERT;
       ELSE
        SALDO = SALDO_KUM_H - SALDO_KUM_S - EBWERT;
       IF (SALDO>=0) THEN
        BEGIN
         SALDO_SH='H';
        END 
       ELSE
        BEGIN
         SALDO_SH='S';
         SALDO = - SALDO;      
        END 
      END  
     IF (NOT (EBWERT=0 AND SALDO_S =0 AND SALDO_H = 0 AND SALDO_KUM_S = 0 AND SALDO_KUM_H = 0 AND SALDO = 0)) THEN
      BEGIN
       SUSPEND;
      END 
    end
end


-- Prozedur: TRANSITIONS
-- Kein Quelltext für Prozedur TRANSITIONS gefunden

-- Prozedur: UEBERSICHT_BANKKONTO
CREATE OR ALTER PROCEDURE UEBERSICHT_BANKKONTO
declare variable ISSPLIT INTEGER;
BEGIN
 KONTOSTAND=:IALTSALDO; 
 UMSATZ=0;
 IF (ISORT=0) THEN
  BEGIN /* Datum sortiert */
   FOR SELECT DATUM,HAUS,IKONTO,KONTO,BELEG,KAUSZ,BLATTNR,BUCHUNGSTEXT,UST,EINNAHME, AUSGABE,SH,BNR,LBNR,ISSPLIT
    from uebersicht_bankkonto_ohne_saldo(:GKONTO, :DTVON, :DTBIS)
    ORDER BY DATUM,BELEG,LBNR,BNR
    INTO DATUM,HAUS,IKONTO,KONTO,BELEG,KAUSZ,BLATTNR,BUCHUNGSTEXT,UST,EINNAHME, AUSGABE,SH,BNR,LBNR,:ISSPLIT
    DO
     BEGIN
      IF (SH='+') THEN
       BEGIN
        KONTOSTAND=KONTOSTAND+EINNAHME;
        UMSATZ=UMSATZ+EINNAHME;
       END
      ELSE
       BEGIN
        KONTOSTAND=KONTOSTAND-AUSGABE;
        UMSATZ=UMSATZ-AUSGABE;
       END
      IF (KONTOSTAND>=0) THEN
       SH_GES='+';
      ELSE
       SH_GES='-';
      IF (UMSATZ>=0) THEN
       SH_UMS='+';
      ELSE
       SH_UMS='-';
      IF (EINNAHME=0) THEN
       EINNAHME=NULL;
      IF (AUSGABE=0) THEN
       AUSGABE=NULL;
      IF (LBNR IS NOT NULL) THEN
       BEMERKUNG='LEV';
      ELSE
       IF (ISSPLIT=1) then
        BEMERKUNG='Split';
       else
        BEMERKUNG='';
      SUSPEND;
     END
  END
 ELSE
  BEGIN  /* BelNr sortiert */
   IF (ISORT=1) THEN
    BEGIN
     FOR SELECT DATUM,HAUS,IKONTO,KONTO,BELEG,KAUSZ,BLATTNR,BUCHUNGSTEXT,UST,EINNAHME, AUSGABE,SH,BNR,LBNR
      from uebersicht_bankkonto_ohne_saldo(:GKONTO, :DTVON, :DTBIS)
      ORDER BY BELEG,DATUM,LBNR,BNR
      INTO DATUM,HAUS,IKONTO,KONTO,BELEG,KAUSZ,BLATTNR,BUCHUNGSTEXT,UST,EINNAHME, AUSGABE,SH,BNR,LBNR
      DO
       BEGIN
        IF (SH='+') THEN
         BEGIN
          KONTOSTAND=KONTOSTAND+EINNAHME;
          UMSATZ=UMSATZ+EINNAHME;
         END
        ELSE
         BEGIN
          KONTOSTAND=KONTOSTAND-AUSGABE;
          UMSATZ=UMSATZ-AUSGABE;
         END
        IF (KONTOSTAND>=0) THEN
         SH_GES='+';
        ELSE
         SH_GES='-';
        IF (UMSATZ>=0) THEN
         SH_UMS='+';
        ELSE
         SH_UMS='-';
        IF (EINNAHME=0) THEN
         EINNAHME=NULL;
        IF (AUSGABE=0) THEN
         AUSGABE=NULL;
        IF (LBNR IS NOT NULL) THEN
         BEMERKUNG='LEV';
        ELSE
         BEMERKUNG='';
        SUSPEND;
       END
    END
   ELSE
    FOR SELECT DATUM,HAUS,IKONTO,KONTO,BELEG,KAUSZ,BLATTNR,BUCHUNGSTEXT,UST,EINNAHME, AUSGABE,SH,BNR,LBNR
     from uebersicht_bankkonto_ohne_saldo(:GKONTO, :DTVON, :DTBIS)
     ORDER BY IKONTO,DATUM,BELEG,LBNR,BNR
     INTO DATUM,HAUS,IKONTO,KONTO,BELEG,KAUSZ,BLATTNR,BUCHUNGSTEXT,UST,EINNAHME, AUSGABE,SH,BNR,LBNR
     DO
      BEGIN
       IF (SH='+') THEN
        BEGIN
         KONTOSTAND=KONTOSTAND+EINNAHME;
         UMSATZ=UMSATZ+EINNAHME;
        END
       ELSE
        BEGIN
         KONTOSTAND=KONTOSTAND-AUSGABE;
         UMSATZ=UMSATZ-AUSGABE;
        END
       IF (KONTOSTAND>=0) THEN
        SH_GES='+';
       ELSE
        SH_GES='-';
       IF (UMSATZ>=0) THEN
        SH_UMS='+';
       ELSE
        SH_UMS='-';
       IF (EINNAHME=0) THEN
        EINNAHME=NULL;
       IF (AUSGABE=0) THEN
        AUSGABE=NULL;
       IF (LBNR IS NOT NULL) THEN
        BEMERKUNG='LEV';
       ELSE
        BEMERKUNG='';
       SUSPEND;
      END
  END
END


-- Prozedur: UEBERSICHT_BANKKONTO_OHNE_SALDO
CREATE OR ALTER PROCEDURE UEBERSICHT_BANKKONTO_OHNE_SALDO
DECLARE VARIABLE Betrag NUMERIC(15, 2);
DECLARE VARIABLE ONRSOLL INTEGER;
DECLARE VARIABLE ONRHABEN INTEGER;
DECLARE VARIABLE KSTRSOLL VARCHAR(18);
DECLARE VARIABLE KSTRHABEN VARCHAR(18);
DECLARE VARIABLE KSOLL INTEGER;
DECLARE VARIABLE KHABEN INTEGER;
DECLARE VARIABLE IBANKNRSOLL INTEGER;
DECLARE VARIABLE IBANKNRHABEN INTEGER;
DECLARE VARIABLE ARTOP INTEGER;
DECLARE VARIABLE ARTSOLL INTEGER;
DECLARE VARIABLE ANZ INTEGER;
DECLARE VARIABLE IGN INTEGER;
DECLARE VARIABLE IOPNR INTEGER;
BEGIN
 FOR
  SELECT DATUM,BELEGNR,KAUSZUGNR,KAUSZUGBLATT,TEXT,MWST,BNR,BETRAG,LBNR,BANKNRSOLL,BANKNRHABEN, ONRSOLL,ONRHABEN,KSOLL,KHABEN,KSTRSOLL,KSTRHABEN, ARTOP, ARTSOLL, OPNR from buchung
   WHERE (BANKNRSOLL=:GKONTO or BANKNRHABEN=:GKONTO)
   AND (Datum>=:DTVON AND DATUM<=:DTBIS)
   AND LBNR IS NULL 
  INTO :DATUM, :BELEG, :KAUSZ,:BLATTNR,:BUCHUNGSTEXT,:UST,:BNR,:BETRAG, :LBNR, :IBANKNRSOLL,:IBANKNRHABEN, :ONRSOLL, :ONRHABEN, :KSOLL, :KHABEN, :KSTRSOLL, :KSTRHABEN, :ARTOP, :ARTSOLL, :IOPNR
  DO
   BEGIN
    IF (:IBANKNRSOLL=:GKONTO) THEN 
     BEGIN
      HAUS=ONRSOLL;
      IKONTO=KHABEN;
      KONTO=KSTRHABEN;
      IF (BETRAG<0) THEN  /* negative einnahme = ausgabe */
       BEGIN
        EINNAHME=0;
        AUSGABE=-BETRAG;
        SH='-';
       END
      ELSE
       BEGIN
        EINNAHME=BETRAG;
        AUSGABE=0;
        SH='+';
       END
     END
    ELSE
     BEGIN
      HAUS=ONRHABEN;
      IKONTO=KSOLL;
      KONTO=KSTRSOLL;
      IF (BETRAG<0) THEN /* NEGATIVE AUSGABE = EINNAHME */
       BEGIN
        EINNAHME=-BETRAG;
        AUSGABE=0;
        SH='+';
       END
      ELSE
       BEGIN
        AUSGABE=BETRAG;
        EINNAHME=0;
        SH='-';
       END
     END
    IF ((IOPNR IS NOT NULL) AND (UST = 0)) THEN
     BEGIN
      select mwst from buchung where bnr=:iopnr into :UST;
     END 
    IF (not (ARTOP IS NOT NULL AND ARTSOLL=1)) then
     BEGIN
      ISSPLIT=0;
      SUSPEND;
     END
   END
 /* JETZT NOCH DIE SLEV */
 FOR
  select onr, lbnr,betrag,datum,text,belegnr from slevbuch
  where banknr=:gkonto AND OPBETRAG IS NULL and (Datum>=:DTVON AND DATUM<=:DTBIS)
  into :HAUS, :LBNR, :BETRAG, DATUM, BUCHUNGSTEXT, BELEG
  DO
   BEGIN
    select max(kauszugnr) as kausz, max(kauszugblatt) from buchung where lbnr=:lbnr into kausz, blattnr;
    BNR=NULL;
    KONTO=NULL;
    IKONTO=NULL;
    KAUSZ=NULL;
    BLATTNR=NULL;
    UST=NULL;
    IF (BETRAG<0) then
     begin
      EINNAHME=0;
      AUSGABE=-BETRAG;
      SH='-';
     end
    Else
     begin
      SH='+';
      AUSGABE=0;
      EINNAHME=BETRAG;
     end
    IF (HAUS=0) THEN
     HAUS=NULL;
    ISSPLIT=0;
    SUSPEND;
   END
 /* JETZT NOCH DIE SPLITBUCHUNGEN AUSGABEN */
 FOR
  select sum(betrag), artop, count(*) from buchung
  where artop is not null and artsoll=1 and (BANKNRSOLL=:GKONTO or BANKNRHABEN=:GKONTO) AND (Datum>=:DTVON AND DATUM<=:DTBIS)
  group by artop
  into :BETRAG, :ARTOP, :ANZ
  DO
   BEGIN
    SELECT DATUM,BELEGNR,KAUSZUGNR,KAUSZUGBLATT,TEXT,MWST,BNR,LBNR,BANKNRSOLL,BANKNRHABEN, ONRSOLL,ONRHABEN,KSOLL,KHABEN,KSTRSOLL,KSTRHABEN, GN from buchung
    WHERE BNR=:ARTOP
    INTO :DATUM, :BELEG, :KAUSZ,:BLATTNR,:BUCHUNGSTEXT,:UST,:BNR,:LBNR, :IBANKNRSOLL,:IBANKNRHABEN, :ONRSOLL, :ONRHABEN, :KSOLL, :KHABEN, :KSTRSOLL, :KSTRHABEN, :IGN;
    IF (:IBANKNRSOLL=:GKONTO) THEN
     BEGIN
      HAUS=ONRSOLL;
      IKONTO=KHABEN;
      KONTO=KSTRHABEN;
      IF (BETRAG<0) THEN  /* negative einnahme = ausgabe */
       BEGIN
        EINNAHME=0;
        AUSGABE=-BETRAG;
        SH='-';
       END
      ELSE
       BEGIN
        EINNAHME=BETRAG;
        AUSGABE=0;
        SH='+';
       END
     END
    ELSE
     BEGIN
      if (IGN=71) then
       HAUS=ONRSOLL;
      ELSE
       HAUS=ONRHABEN;
      IKONTO=KSOLL;
      KONTO=KSTRSOLL;
      IF (BETRAG<0) THEN /* NEGATIVE AUSGABE = EINNAHME */
       BEGIN
        EINNAHME=-BETRAG;
        AUSGABE=0;
        SH='+';
       END
      ELSE
       BEGIN
        AUSGABE=BETRAG;
        EINNAHME=0;
        SH='-';
       END
      END
     KONTO=KONTO || '+';
     if (char_length(BUCHUNGSTEXT)<45) then
      BUCHUNGSTEXT=BUCHUNGSTEXT || ' (Split auf ' || :ANZ || ' Konten)';
     ISSPLIT=1;
     SUSPEND;
   END /* SPLITBUCH AUSGABEN */
END


-- Prozedur: UNTERSCHR_LISTE
CREATE OR ALTER PROCEDURE UNTERSCHR_LISTE
BEGIN
 IF (BBEW='J') THEN
  BEGIN
   FOR 
   select ONR, KNR, ENR, ba.BNAME, ba.BVName, ba.BName2, ba.BVName2, ba.BTitel, ba.BTitel2,
    ba.BFIRMA, ba.BFIRMANAME, ba.BBRIEFAN  
   from bewohner b,bewadr ba  
   where b.bewnr=ba.bewnr and ONR=:IONR and (KNR - 100000 - ENR*100) = 0
   INTO :ONR, :KNR, :ENR, :NAME, :VName, :NAME2, :VNAME2, :TITEL, :TITEL2, :FIRMA, :FIRMANAME, :BRIEFAN
   DO
    BEGIN
     ANZ_WHG=1;
     SUSPEND;
    END
  END
 ELSE  /*EIGENTUEMER */
  BEGIN
   FOR select eignr, count(eignr), min(knr) from eigentuemer
   where ONR=:IONR and (KNR - 200000 - ENR*100) = 0
   group by eignr
   INTO :EIGNR, :ANZ_WHG, :KNR
   DO
    BEGIN
     SELECT ENAME, EVNAME, ENAME2, EVNAME2, ETITEL, ETITEL2, EFIRMA, EFIRMANAME, EBRIEFAN  from eigadr
     where EIGNR=:EIGNR
     INTO :NAME, :VName, :NAME2, :VNAME2, :TITEL, :TITEL2, :FIRMA, :FIRMANAME, :BRIEFAN;
     ONR=:IONR;
     ENR=(:KNR - 200000) / 100;
     SUSPEND;
    END
  END
END


-- Prozedur: USTLISTE
CREATE OR ALTER PROCEDURE USTLISTE
DECLARE VARIABLE KONTO INTEGER;
DECLARE VARIABLE KKLASSE INTEGER;
DECLARE VARIABLE KEINNAHME CHAR(1);
DECLARE VARIABLE IMWSTART INTEGER;
DECLARE VARIABLE IPROZ_UST NUMERIC(15, 2);
DECLARE VARIABLE IS_HAUSTYP INTEGER;
DECLARE VARIABLE KBEW1 CHAR(1);
DECLARE VARIABLE KBEW2 CHAR(1);
BEGIN
 ANRECH_PROZ=100;
 AUS=0;
 IF (VON_ONR=BIS_ONR) THEN
  ISAMMEL=0;
 ELSE
  ISAMMEL=1;
 FOR SELECT ONR, BSONST, HUWERT from OBJEKTE
 WHERE ONR>=:VON_ONR and ONR<=:BIS_ONR
 INTO :ONR, :IS_HAUSTYP, :IPROZ_UST
 DO
  BEGIN
   IF (IS_HAUSTYP = 0) THEN
    BEGIN
     KBEW1='J';
     KBEW2='J';
    END
   ELSE
    IF (IS_HAUSTYP = 1) THEN
     BEGIN
      KBEW1='N';
      KBEW2='N';
    END
   ELSe
    BEGIN
     KBEW1='J';
     KBEW2='N';
    END
   /*
   /* Alle E/K Konten */
   /*               */
   FOR SELECT KNR, KNRSTR, KBEZ, IFREI1, KKLASSE from konten
   where ONR=:ONR AND (KKLASSE<20 or (KKLASSE>=110 and KKLASSE<=580)) AND (KBEW=:KBEW1 OR KBEW=:KBEW2) AND KNR<>0
   INTO :KNR, :KNRSTR, :KBEZ, IMWSTART, KKLASSE
    DO
     begin
      for select UST_PROZ, SUM(UST), SUM(NETTO), SUM(BRUTTO) from
       USTLISTE_KONTO(:DTVON, :DTBIS, :ONR, :KNR, :KKLASSE, :IST_BUCHHALTUNG)
       group by ust_proz
      INTO :UST_PROZ, :UST, :NETTO, :BRUTTO
       DO
        BEGIN
         /* RL-VZ immer ohne Steuer */
         if ((KKLASSE>=110 and KKLASSE<=580)) then
          begin
           UST_PROZ = 0;
           UST = 0;
           NETTO = BRUTTO;
          end
         /*  */
         IF (KKLASSE=1) THEN
          BEGIN
           AUS=1;
           POS=20;
           IF (IMWSTART=0) THEN
            ANRECH_PROZ=0;   /* 0% anrechenbar */
           ELSE
            IF (IMWSTART=1) THEN
             ANRECH_PROZ=100;  /* 100% anrechenbar */
            ELSE
             IF (IMWSTART=2) THEN
              ANRECH_PROZ=IPROZ_UST; /* lt. Anteil Haus */
           UST_ANRECH=-(UST * ANRECH_PROZ / 100);
           UST=-UST;
          END
         ELSE  /* Einnahmen */
          BEGIN
           IF (KKLASSE=19) THEN
            BEGIN
             POS=20;
             IF (IMWSTART=0) THEN
              ANRECH_PROZ=0;   /* 0% anrechenbar */
             ELSE
              IF (IMWSTART=1) THEN
               ANRECH_PROZ=100;  /* 100% anrechenbar */
              ELSE
               IF (IMWSTART=2) THEN
                ANRECH_PROZ=IPROZ_UST; /* lt. Anteil Haus */
             UST_ANRECH=UST * ANRECH_PROZ / 100;
            END
           ELSE
            BEGIN
             POS=(KNR-60000)/10 + 1;
             ANRECH_PROZ=100;
             UST_ANRECH=UST;
             IF (IST_BUCHHALTUNG='J') THEN
              KNRSTR='Debitor';
            END
           AUS=0;
          END
         SUSPEND;
        END
     end /* Konto */
  end /* objekt */
END


-- Prozedur: USTLISTE_KONTO
CREATE OR ALTER PROCEDURE USTLISTE_KONTO
DECLARE VARIABLE UST_TEMP INTEGER;
 DECLARE VARIABLE NETTO_TEMP INTEGER;
 DECLARE VARIABLE BRUTTO_TEMP INTEGER;
BEGIN
 IF (IST_BUCHHALTUNG='J') THEN
  BEGIN
   /* K Konto */
   IF (KKLASSE=1) THEN
    BEGIN
     /* K im Soll auf A/P direkt gebucht + */
     for select Sum(Betrag), SUM((BETRAG*100)/(MWST+100)), MWST from buchung
     where (ONRSOLL=:ONR And KSOLL=:KNR)
     and ((ONRHABEN=:ONR And ARTHABEN>=20 And ArtHaben<=27) OR (ArtHaben=1) OR (KHABEN=99990))
     and (Datum>=:DTVON and Datum<=:DTBIS)
     group by MWST
     into :BRUTTO, :NETTO,  UST_PROZ
     do
      BEGIN
       IF (BRUTTO IS NULL) THEN
        BRUTTO=0;
       IF (NETTO IS NULL) THEN
        NETTO=0;
       UST=BRUTTO-NETTO;
       IF (NETTO<>0 AND BRUTTO<>0) THEN
        SUSPEND;
      END
     /* K im Haben auf A/P direkt gebucht - */
     for select -Sum(Betrag), -SUM((BETRAG*100)/(MWST+100)), MWST from buchung
     where (ONRHABEN=:ONR And KHABEN=:KNR)
     and ((ONRSOLL=:ONR And ARTSOLL>=20 And ArtSoll<=27) OR (ArtSoll=1) OR (KSOLL=99990))
     and (Datum>=:DTVON and Datum<=:DTBIS)
     group by MWST
     into :BRUTTO, :NETTO,  UST_PROZ
     do
      begin
       IF (BRUTTO IS NULL) THEN
        BRUTTO=0;
       IF (NETTO IS NULL) THEN
        NETTO=0;
       UST=BRUTTO-NETTO;
       IF (NETTO<>0 AND BRUTTO<>0) THEN
        SUSPEND;
      end
     /*A/P im SOll, KRED im Haben, kein SpLIT -*/
     for select -Sum(Betrag), -SUM((BETRAG*100)/(MWSTOP+100)), MWSTOP from buchung
     where KNROP=:KNR
     AND (ONRSOLL=:ONR And ArtSoll>=20 And ArtSoll<=27)
          and (Datum>=:DTVON and Datum<=:DTBIS)
     group by MWSTOP
     into :BRUTTO, :NETTO,  UST_PROZ
     do
      begin
       IF (BRUTTO IS NULL) THEN
        BRUTTO=0;
       IF (NETTO IS NULL) THEN
        NETTO=0;
       UST=BRUTTO-NETTO;
       IF (NETTO<>0 AND BRUTTO<>0) THEN
        SUSPEND;
      end
     /*A/P im Haben, KRED im Soll, kein SPLIT +*/
     for select Sum(Betrag),SUM((BETRAG*100)/(MWSTOP+100)), MWSTOP from buchung
     where KNROP=:KNR
     AND
     (ONRHABEN=:ONR And ArtHaben>=20 And ArtHaben<=27)
     and (Datum>=:DTVON and Datum<=:DTBIS)
     group by MWSTOP
     into :BRUTTO, :NETTO,  UST_PROZ
     do
      begin
       IF (BRUTTO IS NULL) THEN
        BRUTTO=0;
       IF (NETTO IS NULL) THEN
        NETTO=0;
       UST=BRUTTO-NETTO;
       IF (NETTO<>0 AND BRUTTO<>0) THEN
        SUSPEND;
      end
     /* K SPLIT Bank immer im Haben bei Kosten*/
     for select sum(buchzahl.betrag),SUM((buchzahl.BETRAG*100)/(buchzahl.MWSTOP+100)),buchzahl.mwstop from buchzahl, buchung
     where buchzahl.knr=:KNR
     and buchzahl.bnr=buchung.bnr
     and (buchung.datum>=:DTVON and buchung.datum<=:DTBIS)
     and (buchung.onrhaben=:ONR and buchung.arthaben>=20 and buchung.arthaben<=27)
     group by buchzahl.mwstop
     into :BRUTTO, :NETTO,  UST_PROZ
     do
      begin
       if (BRUTTO IS NULL) then
        BRUTTO=0;
       if (NETTO IS NULL) then
        NETTO=0;
       UST=BRUTTO-Netto;
       SUSPEND;
      end
    END
   ELSE /* E */
    BEGIN
     /* E im Soll auf A/P direkt gebucht - */
     for select -Sum(Betrag), -SUM((BETRAG*100)/(MWST+100)), MWST from buchung
     where (ONRSOLL=:ONR And KSOLL=:KNR)
     and ((ONRHABEN=:ONR And ARTHABEN>=20 And ArtHaben<=27) OR (KSOLL=99990))
     and (Datum>=:DTVON and Datum<=:DTBIS)
     group by MWST
     into :BRUTTO, :NETTO,  UST_PROZ
     do
      BEGIN
       IF (BRUTTO IS NULL) THEN
        BRUTTO=0;
       IF (NETTO IS NULL) THEN
        NETTO=0;
       UST=BRUTTO-NETTO;
       IF (NETTO<>0 AND BRUTTO<>0) THEN
        SUSPEND;
      END
     /* E im Haben auf A/P direkt gebucht */
     for select Sum(Betrag), SUM((BETRAG*100)/(MWST+100)), MWST from buchung
     where (ONRHABEN=:ONR And KHABEN=:KNR)
     and ((ONRSOLL=:ONR And ARTSOLL>=20 And ArtSoll<=27) OR (KSOLL=99990))
     and (Datum>=:DTVON and Datum<=:DTBIS)
     group by MWST
     into :BRUTTO, :NETTO,  UST_PROZ
     do
      begin
       IF (BRUTTO IS NULL) THEN
        BRUTTO=0;
       IF (NETTO IS NULL) THEN
        NETTO=0;
       UST=BRUTTO-NETTO;
       IF (NETTO<>0 AND BRUTTO<>0) THEN
        SUSPEND;
      end
     /*A/P im SOll, DEB im Haben, kein SpLIT  */
     for select Sum(Betrag), SUM((BETRAG*100)/(MWSTOP+100)), MWSTOP from buchung
     where KNROP=:KNR
     AND (ONRSOLL=:ONR And ArtSoll>=20 And ArtSoll<=27)
          and (Datum>=:DTVON and Datum<=:DTBIS)
     group by MWSTOP
     into :BRUTTO, :NETTO,  UST_PROZ
     do
      begin
       IF (BRUTTO IS NULL) THEN
        BRUTTO=0;
       IF (NETTO IS NULL) THEN
        NETTO=0;
       UST=BRUTTO-NETTO;
       IF (NETTO<>0 AND BRUTTO<>0) THEN
        SUSPEND;
      end
     /*A/P im Haben, DEB im Soll, kein SPLIT +*/
     for select -Sum(Betrag), -SUM((BETRAG*100)/(MWSTOP+100)), MWSTOP from buchung
     where KNROP=:KNR
     AND
     (ONRHABEN=:ONR And ArtHaben>=20 And ArtHaben<=27)
     and (Datum>=:DTVON and Datum<=:DTBIS)
     group by MWSTOP
     into :BRUTTO, :NETTO,  UST_PROZ
     do
      begin
       IF (BRUTTO IS NULL) THEN
        BRUTTO=0;
       IF (NETTO IS NULL) THEN
        NETTO=0;
       UST=BRUTTO-NETTO;
       IF (NETTO<>0 AND BRUTTO<>0) THEN
        SUSPEND;
      end

     /* Umwandlungen G/N in geleistete BK*/
     IF (KKLASSE>=10 AND KKLASSE<=18) THEN
      BEGIN
       /* KEIN SPLIT */
       for select -Sum(Betrag),-SUM((BETRAG*100)/(MWSTOP+100)), MWSTOP from buchung
       where KNROP=:KNR
        AND (ONRSOLL=:ONR And ArtSoll>=60 And ArtSoll<=62)
        AND (ONRHABEN=:ONR And ArtHaben>=10  And ArtHaben<=18)
        and (Datum>=:DTVON and Datum<=:DTBIS)
       group by MWSTOP
       into :BRUTTO, :NETTO,  UST_PROZ
       do
        begin
         IF (BRUTTO IS NULL) THEN
          BRUTTO=0;
         IF (NETTO IS NULL) THEN
          NETTO=0;
         UST=BRUTTO-NETTO;
         IF (NETTO<>0 AND BRUTTO<>0) THEN
          SUSPEND;
        end
       /* SPLIT */
       for select -sum(buchzahl.betrag),-SUM((buchzahl.BETRAG*100)/(buchzahl.MWSTOP+100)),buchzahl.mwstop from buchzahl, buchung
       where buchzahl.knr=:KNR
        and buchzahl.bnr=buchung.bnr
        and (buchung.datum>=:DTVON and buchung.datum<=:DTBIS)
        and (buchung.onrsoll=:ONR and buchung.artsoll>=60 and buchung.artsoll<=62)
       group by MWSTOP
       into :BRUTTO, :NETTO,  UST_PROZ
       do
        begin
         IF (BRUTTO IS NULL) THEN
          BRUTTO=0;
         IF (NETTO IS NULL) THEN
          NETTO=0;
         UST=BRUTTO-NETTO;
         IF (NETTO<>0 AND BRUTTO<>0) THEN
          SUSPEND;
        end
      END

     /* E SPLIT Bank immer im Soll bei E*/
     for select sum(buchzahl.betrag),SUM((buchzahl.BETRAG*100)/(buchzahl.MWSTOP+100)),buchzahl.mwstop from buchzahl, buchung
     where buchzahl.knr=:KNR
     and buchzahl.bnr=buchung.bnr
     and (buchung.datum>=:DTVON and buchung.datum<=:DTBIS)
     and (buchung.onrsoll=:ONR and buchung.artsoll>=20 and buchung.artsoll<=27)
     group by buchzahl.mwstop
     into :BRUTTO, :NETTO,  UST_PROZ
     do
      begin
       if (BRUTTO IS NULL) then
        BRUTTO=0;
       if (NETTO IS NULL) then
        NETTO=0;
       UST=BRUTTO-Netto;
       SUSPEND;
      end
    END
   END
  ELSE
    BEGIN  /* SOLL Buchhaltung */
     /* K/E im Soll  */
     for select Sum(Betrag), SUM((BETRAG*100)/(MWST+100)), MWST from buchung
     where (ONRSOLL=:ONR And KSOLL=:KNR)
     and (Datum>=:DTVON and Datum<=:DTBIS)
     group by MWST
     into :BRUTTO, :NETTO,  UST_PROZ
     do
      BEGIN
       IF (BRUTTO IS NULL) THEN
        BRUTTO=0;
       IF (NETTO IS NULL) THEN
        NETTO=0;
       IF (KKLASSE<>1) THEN
        BEGIN
         BRUTTO=-BRUTTO;
         NETTO=-NETTO;
        END
       UST=BRUTTO-NETTO;
       IF (NETTO<>0 AND BRUTTO<>0) THEN
        SUSPEND;
      END
     /* - K im Haben E im HAben */
     for select Sum(Betrag), SUM((BETRAG*100)/(MWST+100)), MWST from buchung
     where (ONRHABEN=:ONR And KHABEN=:KNR)
     and (Datum>=:DTVON and Datum<=:DTBIS)
     group by MWST
     into :BRUTTO, :NETTO,  UST_PROZ
     do
      BEGIN
       IF (BRUTTO IS NULL) THEN
        BRUTTO=0;
       IF (NETTO IS NULL) THEN
        NETTO=0;
       IF (KKLASSE=1) THEN
        BEGIN
         BRUTTO=-BRUTTO;
         NETTO=-NETTO;
        END
       UST=BRUTTO-NETTO;
       IF (NETTO<>0 AND BRUTTO<>0) THEN
        SUSPEND;
      END
    END    /* SOLL Buchhaltung */
END


-- Prozedur: VERSAMMLUNG_ERG
CREATE OR ALTER PROCEDURE VERSAMMLUNG_ERG
DECLARE VARIABLE ISUM1 NUMERIC(18, 4);
DECLARE VARIABLE ISUM2 NUMERIC(18, 4);
DECLARE VARIABLE ISUM3 NUMERIC(18, 4);
DECLARE VARIABLE ISUM NUMERIC(18, 4);
DECLARE VARIABLE IANZ1 INTEGER;
DECLARE VARIABLE IANZ2 INTEGER;
DECLARE VARIABLE IANZ3 INTEGER;
DECLARE VARIABLE IABWESEND INTEGER;
DECLARE VARIABLE IALLE NUMERIC(18, 4);
BEGIN
 select count(*) from vereig where ONR=:IONR and VERNR=:IVERNR and abwesend>0 into IABWESEND;
 /* */
 FOR select versammlung.vernr,versammlung.onr,obez,oplzort,ostr,verdat,
  htp,utp,kurzbez, id,text,text_protokoll,abstimmung,doppqual,abstimmung_art
  from versammlung, verthemen
  where versammlung.onr=:IONR and verthemen.vernr=:IVERNR and versammlung.vernr=verthemen.vernr and versammlung.onr=verthemen.onr
  order by htp,utp
 INTO :VERNR,:ONR,:OBJBEZ,:OBJPLZORT,:OBJSTR,:VDATUM,:HTP,:UTP,:KURZBEZ,:ID,:TEXT,:TEXT_PROTOKOLL, :ABSTIMMUNG,:DOPPQUALI,:ABSTIMMUNG_ART
  DO 
   BEGIN
    BESCHLUSS_TEXT = '';
    ANTEILESUM1=0;
    ANTEILESUM2=0;
    ANTEILESUM3=0;
    ANZPERSJA=0;
    ANZPERSNEIN=0;
    ANZPERSENTHALTUNG=0;
          
    if (ABSTIMMUNG_ART>0) then
     begin
      for select sum(vereig.eiganteil) as Anteil, count(vererg.sja) as ANZPERS from vererg,vereig,verthemen
      where vererg.vernr=:IVERNR and vererg.onr=:IONR and vererg.eigid=vereig.nr and vereig.onr=vererg.onr and vererg.vernr=vereig.vernr and vererg.themaid=verthemen.id
      and vererg.themaid=:ID and vererg.sja='J'
      group by vererg.themaid,verthemen.kurzbez
      into :ISUM1, :IANZ1
       do
        begin
         ANTEILESUM1=ISUM1;
         ANZPERSJA=IANZ1;
        end

      for select sum(vereig.eiganteil) as Anteil, count(vererg.snein) as ANZPERS from vererg,vereig,verthemen
      where vererg.vernr=:IVERNR and vererg.onr=:IONR and vererg.eigid=vereig.nr and vereig.onr=vererg.onr and vererg.vernr=vereig.vernr and vererg.themaid=verthemen.id
      and vererg.themaid=:ID and vererg.snein='J'
      group by vererg.themaid,verthemen.kurzbez
      into :ISUM2, :IANZ2
       do
        begin
         ANTEILESUM2=ISUM2;
         ANZPERSNEIN=IANZ2;
        end

      for select sum(vereig.eiganteil) as Anteil, count(vererg.senthaltung) as ANZPERS from vererg,vereig,verthemen
      where vererg.vernr=:IVERNR and vererg.onr=:IONR and vererg.eigid=vereig.nr and vereig.onr=vererg.onr and vererg.vernr=vereig.vernr and vererg.themaid=verthemen.id
      and vererg.themaid=:ID and vererg.senthaltung='J'
      group by vererg.themaid,verthemen.kurzbez
      into :ISUM3, :IANZ3
       do
        begin
         ANTEILESUM3=ISUM3;
         ANZPERSENTHALTUNG=IANZ3;
        end
       
        
      for select sum(vereig.eiganteil) as Anteil
      from vererg,vereig,verthemen
      where vererg.vernr=:IVERNR and vererg.onr=:IONR and vererg.eigid=vereig.nr and vereig.onr=vererg.onr and vererg.vernr=vereig.vernr and vererg.themaid=verthemen.id
      and vererg.themaid=:ID 
      group by vererg.themaid,verthemen.kurzbez
      into :ISUM
       do
        begin
         ANTEILEGESAMMT=ISUM;   
        end
        
        
        
        
      /* */
      if (ABSTIMMUNG_ART = 1) then /* BeschlÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼ssen mit einfacher Mehrheit */ 
       BEGIN
        IF (BKOPF = 'N') THEN
         BEGIN
          IF (ANTEILESUM1 > ((ANTEILESUM1+ANTEILESUM2)/2)) THEN
           BESCHLUSS_TEXT = 'Beschluss aufgrund einfacher Mehrheit angenommen (die Ja-Stimmen sind hÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¶her als die Nein-Stimmen)';
          ELSE
           BESCHLUSS_TEXT = 'Beschluss aufgrund einfacher Mehrheit nicht angenommen (die Ja-Stimmen sind niedriger als die Nein-Stimmen)';         
         END
        ELSE
         BEGIN  
          IF (ANZPERSJA > ((ANZPERSJA+ANZPERSNEIN)/2)) THEN
           BESCHLUSS_TEXT = 'Beschluss aufgrund einfacher Mehrheit angenommen (die Ja-Stimmen sind hÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¶her als die Nein-Stimmen)';
          ELSE
           BESCHLUSS_TEXT = 'Beschluss aufgrund einfacher Mehrheit nicht angenommen (die Ja-Stimmen sind niedriger als die Nein-Stimmen)';
         END  
       END
      ELSE
       BEGIN
        if (ABSTIMMUNG_ART = 2) then /* BeschlÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼ssen mit doppelt qualifizierter Mehrheit */ 
         BEGIN
          IALLE = ANZPERSJA+ANZPERSNEIN+ANZPERSENTHALTUNG+IABWESEND;
          IF ((ANTEILESUM1 > (ANTEILEGESAMMT/2)) and (ANZPERSJA>=((IALLE/3)*2))) THEN
           BESCHLUSS_TEXT = 'Beschluss aufgrund doppelt qualifizierter Mehrheit angenommen (mehr als 50% aller Miteigentumsanteile und 2/3 aller Stimmberechtigten, inkl. Abwesende, haben mit Ja gestimmt)';
          ELSE
           BESCHLUSS_TEXT = 'Beschluss aufgrund doppelt qualifizierter Mehrheit nicht angenommen (weniger als 51% aller Miteigentumsanteile und 2/3 aller Stimmberechtigten, inkl. Abwesende, haben mit Ja gestimmt)';
         END
        ELSE
         BEGIN
          if (ABSTIMMUNG_ART = 3) then /* Einstimmiger Beschluss */ 
           BEGIN
            IF (ANZPERSJA = (ANZPERSJA + ANZPERSNEIN + ANZPERSENTHALTUNG)) THEN
             BEGIN
              BESCHLUSS_TEXT = 'Beschluss aufgrund Einstimmigkeit angenommen (alle Anwesenden haben mit Ja gestimmt)';
             END 
            ELSE
             BESCHLUSS_TEXT = 'Beschluss aufgrund fehlender Einstimmigkeit nicht angenommen (nicht alle der Anwesenden haben mit Ja gestimmt)';
           END
          ELSE
           BEGIN
            if (ABSTIMMUNG_ART = 4) then /* Allstimmiger Beschluss */ 
             BEGIN
              IF ((ANZPERSJA = (ANZPERSJA + ANZPERSNEIN + ANZPERSENTHALTUNG)) AND (IABWESEND = 0)) THEN
               BESCHLUSS_TEXT = 'Beschluss aufgrund Allstimmigkeit angenommen (keiner Abwesend und alle haben mit Ja gestimmt)';
              ELSE
               BESCHLUSS_TEXT = 'Beschluss aufgrund fehlender Allstimmigkeit nicht angenommen (durch Abwesenheit oder nicht alle haben mit Ja gestimmt)';
             END            
            ELSE
             BEGIN
              IF (ABSTIMMUNG_ART = 5) then /* Umlaufbeschluss*/
               BEGIN
                IF (ANZPERSJA=(ANZPERSJA+ANZPERSNEIN+ANZPERSENTHALTUNG+IABWESEND)) THEN
                 BESCHLUSS_TEXT = 'Beschluss aufgrund Allstimmigkeit angenommen (alle EigentÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼mer haben mit Ja gestimmt)';
                ELSE
                 BESCHLUSS_TEXT = 'Beschluss aufgrund fehlender Allstimmigkeit nicht angenommen (nicht alle EigentÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼mer haben mit Ja gestimmt)';
               END
              ELSE
               BEGIN
                if (ABSTIMMUNG_ART = 6) then /* Baulichen VerÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤nderungen */ 
                 BEGIN
                  IALLE = ANZPERSJA+ANZPERSNEIN+ANZPERSENTHALTUNG; /* +IABWESEND - nicht gueltig */
                  IF ((ANTEILESUM1 > (ANTEILEGESAMMT/2)) and (ANZPERSJA>=((IALLE/3)*2))) THEN
                   BESCHLUSS_TEXT = 'Beschluss einer baulichen VerÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤nderungen angenommen (mehr als 50% aller Miteigentumsanteile und 2/3 aller Stimmberechtigten haben mit Ja gestimmt)';
                  ELSE
                   BEGIN
                    IF (ANTEILESUM1 > ((ANTEILESUM1+ANTEILESUM2)/2)) THEN
                     BESCHLUSS_TEXT = 'Beschluss einer baulichen VerÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤nderungen aufgrund einfacher Mehrheit angenommen (die Ja-Miteigentumsanteile sind hÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¶her als die Nein-Miteigentumsanteile)';
                    ELSE
                     BESCHLUSS_TEXT = 'Beschluss einer baulichen VerÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤nderungen aufgrund einfacher Mehrheit nicht angenommen (die Ja-Miteigentumsanteile sind niedriger als die Nein-Miteigentumsanteile)';  
                   END 
                 END 
               END 
             END           
           END   
         END        
       END
     end
    suspend;
   END
END


-- Prozedur: VZ_BE_DETAIL
CREATE OR ALTER PROCEDURE VZ_BE_DETAIL
DECLARE VARIABLE DTVONBDATUM DATE;
DECLARE VARIABLE DTBISBDATUM DATE;
DECLARE VARIABLE DTVONWDATUM DATE;
DECLARE VARIABLE DTBISWDATUM DATE;
BEGIN

/* TEMP 
  IONR=998;
  DTVON = '1.1.2019';
  DTBIS = '31.12.2019';
  VONKTO = 200100;
  BISKTO = 209900; 
  WDATUM = 'J'; */
  
 /* W-Datum oder B-Datum */
 if (WDATUM = 'N') then
  begin
   DTVONBDATUM = DTVON;
   DTBISBDATUM = DTBIS;
   DTVONWDATUM = '01.01.0001';
   DTBISWDATUM = '01.01.0001';
  end
 else
  begin
   DTVONBDATUM = '01.01.0001';
   DTBISBDATUM = '01.01.0001';
   DTVONWDATUM = DTVON;
   DTBISWDATUM = DTBIS;
  end
 /*
 /*  VZ-IST = Alle Buchungen mit W-Datum im Abrechnungszeitraum
 /* 
 /*            */
 /* KEIN SPLIT */
 /*            */
 FOR SELECT -sum(betrag), -SUM((BETRAG*100) / (100+MWSTOP)), KSOLL, ARTOP, GN from buchung 
 WHERE ONRSOLL=:IONR 
 AND (KSOLL>=:VONKTO AND KSOLL<=:BISKTO)
 AND ARTOP <> 0   /* kein SPLIT */
 AND ((Datum >= :DTVONBDATUM and Datum <= :DTBISBDATUM) or (WDatum >= :DTVONWDATUM and WDatum <= :DTBISWDATUM))
 GROUP BY KSOLL, ARTOP, GN
 having sum(betrag) <> 0
 INTO :SUM_VZ, SUM_VZ_NETTO, KNR, VZPOS, GN
 DO 
   begin
    SUM_VZ = -:SUM_VZ;
    SUM_VZ_NETTO = -:SUM_VZ_NETTO; 
    SUM_VZ_SOLL =0;
    SUM_VZ_NETTO_SOLL =0;        
    SUSPEND;
  end
 /* HABEN */
 FOR SELECT SUM(BETRAG), SUM((BETRAG*100) / (100+MWSTOP)), KHABEN, ARTOP, GN from buchung
 WHERE ONRHABEN=:IONR 
 AND (KHABEN>=:VONKTO AND KHABEN<=:BISKTO)
 AND ARTOP <> 0   /* kein SPLIT */
 AND ((Datum >= :DTVONBDATUM and Datum <= :DTBISBDATUM) or (WDatum >= :DTVONWDATUM and WDatum <= :DTBISWDATUM))
 GROUP BY KHABEN, ARTOP, GN
 having sum(betrag) <> 0
 INTO :SUM_VZ, SUM_VZ_NETTO, KNR, VZPOS, GN
 DO 
  BEGIN
   SUM_VZ_SOLL =0;
   SUM_VZ_NETTO_SOLL =0;   
   SUSPEND;
  END 
 /*            */
 /*   SPLIT    */
 /*            */
 /* KONTO im SOLL */
 for select -Sum(buchzahl.Betrag), -SUM((buchzahl.BETRAG*100) / (100+buchzahl.MWSTOP)), KSOLL, buchzahl.ARTOP, GN from buchung, buchzahl
 where  ONRSOLL=:IONR 
 AND (KSOLL>=:VONKTO and KSOLL<=:BISKTO)
 AND ((Datum >= :DTVONBDATUM and Datum <= :DTBISBDATUM) or (WDatum >= :DTVONWDATUM and WDatum <= :DTBISWDATUM))
 and buchung.artop=0
 and buchung.bnr=buchzahl.bnr
 GROUP BY KSOLL, buchzahl.ARTOP, GN
 having sum(buchzahl.betrag) <> 0
 INTO :SUM_VZ, SUM_VZ_NETTO, KNR, VZPOS, GN
 DO 
  begin
   SUM_VZ = -:SUM_VZ;
   SUM_VZ_NETTO = -:SUM_VZ_NETTO; 
   SUM_VZ_SOLL =0;
   SUM_VZ_NETTO_SOLL =0;      
   SUSPEND;
  end 
 /* Konto im Haben */
 for select Sum(buchzahl.Betrag), SUM((buchzahl.BETRAG*100) / (100+buchzahl.MWSTOP)), KHABEN, buchzahl.ARTOP, GN from buchung, buchzahl
 where  ONRHABEN=:IONR 
 AND (KHABEN>=:VONKTO and KHABEN<=:BISKTO)
 AND ((Datum >= :DTVONBDATUM and Datum <= :DTBISBDATUM) or (WDatum >= :DTVONWDATUM and WDatum <= :DTBISWDATUM))
 and buchung.artop=0
 and buchung.bnr=buchzahl.bnr
 GROUP BY KHABEN, buchzahl.ARTOP, GN
 having sum(buchzahl.betrag) <> 0   
 INTO :SUM_VZ, SUM_VZ_NETTO, KNR, VZPOS, GN
 DO
  BEGIN
   SUM_VZ_SOLL =0;
   SUM_VZ_NETTO_SOLL =0;  
   SUSPEND;   
  END 
 /*
  SOLL VZ NICHT nach WDATUM, immer DATUM!
 */
 for WITH cteB
  AS
  (
  SELECT b.BETRAG, b.MWST, b.KSOLL, b.ARTHABEN, b.GN,
  CASE when b.Datum >= :DTVON 
  then b.Datum
  else ''
  end as Datum
  FROM buchung b
  WHERE b.ONRSOLL = :IONR 
  AND b.ONRHABEN = :IONR
  AND b.OPNR IS NOT NULL
  AND b.OPBETRAG IS NOT NULL
  AND b.Datum <= :DTBIS
  AND b.KSOLL >= :VONKTO
  AND b.KSOLL <= :BISKTO
  )
  SELECT SUM(q.BETRAG), SUM((q.BETRAG * 100) / (100 + q.MWST)), q.KSOLL, q.ARTHABEN, q.GN
  FROM cteB q
  WHERE  q.Datum <> ''
  GROUP BY q.KSOLL, q.ARTHABEN, q.GN
  having sum(q.betrag) <> 0
 INTO  :SUM_VZ_SOLL, SUM_VZ_NETTO_SOLL, KNR, VZPOS, GN
 do
  BEGIN
   SUM_VZ =0;
   SUM_VZ_NETTO =0;  
   SUSPEND;
  END 
 /* HABEN */
 for WITH cteB
  AS
  (
  SELECT b.BETRAG, b.MWST, b.KHABEN, b.ARTSOLL, b.GN,
  CASE when b.Datum >= :DTVON 
  then b.Datum
  else ''
  end as Datum
  FROM buchung b
  WHERE b.ONRSOLL = :IONR 
  AND b.ONRHABEN = :IONR
  AND b.OPNR IS NOT NULL
  AND b.OPBETRAG IS NOT NULL
  AND b.Datum <= :DTBIS
  AND b.KHABEN >= :VONKTO
  AND b.KHABEN <= :BISKTO
  )
  SELECT SUM(q.BETRAG), SUM((q.BETRAG * 100) / (100 + q.MWST)), q.KHABEN, q.ARTSOLL, q.GN
  FROM cteB q
  WHERE  q.Datum <> ''
  GROUP BY q.KHABEN, q.ARTSOLL, q.GN
  having sum(q.betrag) <> 0
 INTO  :SUM_VZ_SOLL, SUM_VZ_NETTO_SOLL, KNR, VZPOS, GN
 do
  BEGIN
   SUM_VZ =0;
   SUM_VZ_NETTO =0;  
   SUSPEND;
  END 
END


-- Prozedur: WEG_SAMMELLIST
CREATE OR ALTER PROCEDURE WEG_SAMMELLIST
DECLARE VARIABLE BKANT NUMERIC(15, 2);
DECLARE VARIABLE HKANT NUMERIC(15, 2);
DECLARE VARIABLE BKVZ NUMERIC(15, 2);
DECLARE VARIABLE HKVZ NUMERIC(15, 2);
DECLARE VARIABLE BKERG NUMERIC(15, 2);
DECLARE VARIABLE HKERG NUMERIC(15, 2);
DECLARE VARIABLE RTMP NUMERIC(15, 2);
DECLARE VARIABLE ART INTEGER;
BEGIN
 IF (IART=1) THEN  /* WEG-Abrechnung reines WEG-HAUS */
  BEGIN
   FOR SELECT ONR, KNR, KNRSTR, KBEZ, HAUSGVZ, IHRABRVON, IHRABRBIS, WEG_ZUF_GES_SOLL, ENTRL_ANTEIL, SONUML_ANTEIL 
   FROM NKMASTER
   WHERE ONR = :IONR
   ORDER BY KNR
   INTO :ONR, :KNR, :KNRSTR, :KBEZ, :VZ, :DTVON, :DTBIS, :WEG_ZUF_GES_SOLL, :ENTRL_ANTEIL, :SONUML_ANTEIL
   DO
    BEGIN
     KOST_UML = 0;
     KOST_NUML = 0;
     KOST_EIN = 0;
     KOST_GES = 0;
     ERG = 0;
     /*  */
     select -kanteil from nkdetail where onr=:onr and knr=:knr and ear=4 and kklasse is null and haupt_nr=1 and kgesamt<0 and kname='Entnahmen' INTO :ENTRL_ANTEIL;
     /* */     
     IF (WEG_ZUF_GES_SOLL IS NULL) THEN
      WEG_ZUF_GES_SOLL = 0;
     IF (ENTRL_ANTEIL IS NULL) THEN
      ENTRL_ANTEIL = 0;
     IF (SONUML_ANTEIL IS NULL) THEN
      SONUML_ANTEIL = 0;
     IF (VZ IS NULL) THEN
      VZ = 0;      
     /*  */     
     FOR
      select sum(kbruttoanteil) as BETRAG, 1 as ART from NKDETAIL where ONR = :IONR and KNR=:KNR and haupt_nr=1 and ((abrnr=1 and ear=1) or (abrnr=4 and ear=4 and kklasse is not null)) /* numl Ausgaben */
      union all
      select sum(kbruttoanteil) as BETRAG, 2 as ART from NKDETAIL where ONR = :IONR and KNR=:KNR and haupt_nr=1 and abrnr=2 and ear=1 /* uml  Ausgaben */
      union all
      select sum(kbruttoanteil) as BETRAG, 3 as ART from NKDETAIL where ONR = :IONR and KNR=:KNR and haupt_nr=1 and ear=3 /*  s. Einnahmen */
     into :RTMP, :ART
     do
      begin
       if (RTMP IS NULL) then
        RTMP = 0;
       if (:ART = 1) then
        KOST_NUML = RTMP;
       else
        begin
         if (:ART= 2) then
          KOST_UML = RTMP;
         else
          begin
           if (:ART = 3) then
            KOST_EIN = - RTMP;
          end
        end
      end
     /*  */
     KOST_GES = KOST_NUML + KOST_UML - KOST_EIN + WEG_ZUF_GES_SOLL - ENTRL_ANTEIL;
     ERG = VZ + SONUML_ANTEIL - KOST_GES;
     /*  */
     SUSPEND;
    END
  END /* IART = 1 */
 ELSE
 IF (IART=3) THEN  /* WEG-Abrechnung E/B gemeinsam */
  BEGIN
   FOR SELECT ONR, KNR, KNRSTR, KBEZ, HAUSGVZ, IHRABRVON, IHRABRBIS, WEG_ZUF_GES_SOLL, ENTRL_ANTEIL, SONUML_ANTEIL 
   FROM NKMASTER
   WHERE ONR = :IONR
   ORDER BY KNR
   INTO :ONR, :KNR, :KNRSTR, :KBEZ, :VZ, :DTVON, :DTBIS, :WEG_ZUF_GES_SOLL, :ENTRL_ANTEIL, :SONUML_ANTEIL 
   DO
    BEGIN
     KOST_UML = 0;
     KOST_NUML = 0;
     KOST_EIN = 0;
     KOST_GES = 0;
     ERG = 0;
     /*  */
     select -kanteil from nkdetail where onr=:onr and knr=:knr and ear=4 and kklasse is null and haupt_nr=1 and kgesamt<0 and kname='Entnahmen' INTO :ENTRL_ANTEIL;
     /* */    
     IF (WEG_ZUF_GES_SOLL IS NULL) THEN
      WEG_ZUF_GES_SOLL = 0;
     IF (ENTRL_ANTEIL IS NULL) THEN
      ENTRL_ANTEIL = 0;
     IF (SONUML_ANTEIL IS NULL) THEN
      SONUML_ANTEIL = 0;
     IF (VZ IS NULL) THEN
      VZ = 0; 
     /*  */ 
     FOR
      select sum(kbruttoanteil) as BETRAG, 1 as ART from NKDETAIL where ONR = :IONR and KNR=:KNR and haupt_nr=1 and ((ear=1) or (ear=4 and kklasse is not null)) and name is null /* numl Ausgaben */
      union all
      select sum(kbruttoanteil) as BETRAG, 2 as ART from NKDETAIL where ONR = :IONR and KNR=:KNR and haupt_nr=1  and ear=1 and name is not null /* uml  Ausgaben */
      union all
      select sum(kbruttoanteil) as BETRAG, 3 as ART from NKDETAIL where ONR = :IONR and KNR=:KNR and haupt_nr=1 and ear=3 /*  s. Einnahmen */
     into :RTMP, :ART
     do
      begin
       if (RTMP IS NULL) then
        RTMP = 0;
       if (:ART = 1) then
        KOST_NUML = RTMP;
       else
        begin
         if (:ART= 2) then
          KOST_UML = RTMP;
         else
          begin
           if (:ART = 3) then
            KOST_EIN = - RTMP;
          end
        end
      end
     /*  */
     KOST_GES = KOST_NUML + KOST_UML - KOST_EIN + WEG_ZUF_GES_SOLL - ENTRL_ANTEIL;
     ERG = VZ + SONUML_ANTEIL - KOST_GES;
     /*  */
     SUSPEND;
    END
  END /* IART = 3 */
 ELSE
 IF (IART=2) THEN  /* WEG-Abrechnung E/B getrennt */
  BEGIN
   FOR SELECT ONR, KNR, KNRSTR, KBEZ, HAUSGVZ, IHRABRVON, IHRABRBIS, WEG_ZUF_GES_SOLL, ENTRL_ANTEIL, BKANT, HKANT, BKVZ, HKVZ, BKERG, HKERG, SONUML_ANTEIL
   FROM NKMASTER
   WHERE ONR = :IONR
   ORDER BY ENR, KNR DESC
   INTO :ONR, :KNR, :KNRSTR, :KBEZ, :VZ, :DTVON, :DTBIS, :WEG_ZUF_GES_SOLL, :ENTRL_ANTEIL, :BKANT, :HKANT, :BKVZ, :HKVZ, :BKERG, :HKERG, :SONUML_ANTEIL
   DO
    BEGIN
     KOST_UML = 0;
     KOST_NUML = 0;
     KOST_EIN = 0;
     KOST_GES = 0;
     ERG = 0;
     /*  */
     select -kanteil from nkdetail where onr=:onr and knr=:knr and ear=4 and kklasse is null and haupt_nr=1 and kgesamt<0 and kname='Entnahmen' INTO :ENTRL_ANTEIL;
     /* */     
     IF (WEG_ZUF_GES_SOLL IS NULL) THEN
      WEG_ZUF_GES_SOLL = 0;
     IF (ENTRL_ANTEIL IS NULL) THEN
      ENTRL_ANTEIL = 0;
     IF (SONUML_ANTEIL IS NULL) THEN
      SONUML_ANTEIL = 0;
     IF (VZ IS NULL) THEN
      VZ = 0; 
     /*  */ 
     IF (KNR<200000) THEN
      BEGIN
       KOST_GES = BKANT + HKANT;
       VZ = BKVZ + HKVZ;
       KOST_UML = KOST_GES;
       KOST_NUML = 0;
       ERG = BKERG + HKERG;
      END
     ELSE
      BEGIN
       FOR
        select sum(kbruttoanteil) as BETRAG, 1 as ART from NKDETAIL where ONR = :IONR and KNR=:KNR and haupt_nr=1 and ((ear=1) or (ear=4 and kklasse is not null)) /* numl Ausgaben */
        union all
        select sum(kbruttoanteil) as BETRAG, 3 as ART from NKDETAIL where ONR = :IONR and KNR=:KNR and haupt_nr=1 and ear=3 /*  s. Einnahmen */
       into :RTMP, :ART
       do
        begin
         if (RTMP IS NULL) then
          RTMP = 0;        
         if (:ART = 1) then
          KOST_NUML = RTMP;
         else
          begin
           if (:ART = 3) then
            KOST_EIN = - RTMP;
          end
        end
       /*  */
       KOST_GES = KOST_NUML + KOST_UML - KOST_EIN + WEG_ZUF_GES_SOLL - ENTRL_ANTEIL;
       ERG = VZ + SONUML_ANTEIL - KOST_GES;
       /*  */
      END
     SUSPEND;
    END
  END /* IART = 2 */
END


-- Prozedur: WEG_VERMOEGENSSTATUS
CREATE OR ALTER PROCEDURE WEG_VERMOEGENSSTATUS
DECLARE VARIABLE FESTBETRAG NUMERIC(15, 2);
DECLARE VARIABLE BETRAG1 NUMERIC(15, 2);
DECLARE VARIABLE BETRAG2 NUMERIC(15, 2);
DECLARE VARIABLE KBRUTTO NUMERIC(15, 2);
DECLARE VARIABLE BETRAG_HABEN NUMERIC(15, 2);
DECLARE VARIABLE TEMPNR INTEGER;
DECLARE VARIABLE KNR INTEGER;
DECLARE VARIABLE TEMPONR INTEGER;
DECLARE VARIABLE KKLASSE INTEGER;
DECLARE VARIABLE KBEZ VARCHAR(188);
DECLARE VARIABLE BANKART INTEGER;
DECLARE VARIABLE BANKKURZBEZ VARCHAR(40);
DECLARE VARIABLE RLPOS INTEGER;
DECLARE VARIABLE KSTAND NUMERIC(15, 2);
BEGIN



 /* Salden Bankkonten/Kassen bestimmen */
 SALDO=0;
 FOR SELECT BANKNR
 FROM OBJBANKEN
 WHERE ONR = :ONR
 INTO :GKONTO
 DO
  BEGIN
   NR=1;
   /* BEZ Bank/Kasse */
   select KURZBEZ, ART from banken where NR=:GKONTO
   INTO :BANKKURZBEZ, :BANKART;
   IF (BANKART=0) THEN
    BANKKURZBEZ='Girokonto ' || BANKKURZBEZ;
   ELSE
    BANKKURZBEZ='Kasse ''' || BANKKURZBEZ || '''';
   /* Endsaldo */
   EXECUTE PROCEDURE BANKSALDO_ALT(:GKONTO, DTBIS_PLUSEINS) RETURNING_VALUES :BETRAG;
   IF (BETRAG<>0 and BETRAG IS NOT NULL) THEN
    BEGIN
     /* Endsaldo */
     TEXT='Saldo ' || BANKKURZBEZ || ' per ' || DTBISTEXT;
     SALDO=SALDO+BETRAG;
     ART=1;
     SUSPEND;
     NR=NR+1;
    end
  /* RAP */
  /* RÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼ckstÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ndige Zahlungen EigetÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼mer, Bewohner BK/HK */
   Betrag=0;
   for
   select SUM(BETRAG) from buchung where
   banknrsoll=:GKONTO and (artop=15 or artop=11 or artop=12)  and WDatum<:DTVON
   and (Datum>=:DTVON and Datum<=:DTBIS)
   union
   SELECT SUM(BETRAG) from buchzahl
   where (artop=15 or artop=11 or artop=12) and BNR IN (select bnr from buchung where banknrsoll=:GKONTO and ARTOP=0 and (WDatum<:DTVON) and (Datum>=:DTVON and Datum<=:DTBIS))
   into Betrag1
   do
    begin
     if (BETRAG1 IS NOT NULL and BETRAG1<>0) THEN
      BETRAG=BETRAG-BETRAG1;
    end
   if (BETRAG<>0) then
    begin
     TEXT='rÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼ckstÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ndige Hausgeldvorauszahlungen';
     SALDO=SALDO+BETRAG;
     ART=3;
     SUSPEND;
     NR=NR+1;
    END
    
 /* Guthaben/Nachzahlungen aus Vorjahr EigetÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼mer + Bewohner*/
   select SUM(BETRAG) from buchung where
   banknrsoll=:GKONTO and (artop=18 or artop=13) and WDatum<:DTVON
   and (Datum>=:DTVON and Datum<=:DTBIS)
   into Betrag;
   if (BETRAG IS NOT NULL AND BETRAG<>0) THEN
    BEGIN
     IF (BETRAG<0) then
      begin
       BETRAG=-BETRAG;
       TEXT='Guthaben aus Vorjahresabrechnungen';
       SALDO=SALDO+BETRAG;
       ART=2;
       SUSPEND;
       NR=NR+1;
      END
     ELSE
      IF(BETRAG>0) THEN
       begin
        BETRAG=-BETRAG;
        TEXT='Nachzahlungen aus Vorjahresabrechnungen';
        SALDO=SALDO+BETRAG;
        ART=3;
        SUSPEND;
        NR=NR+1;
      end
    END
    
   /* Zahlungen fÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼r Folgejahr EigetÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼mer, BK/HK */
   Betrag=0;
   for
   select SUM(BETRAG) from buchung where
   banknrsoll=:GKONTO and (artop=15 or ARTOP=18) and WDatum>:DTBIS
   and (Datum>=:DTVON and Datum<=:DTBIS)
   union
   SELECT SUM(BETRAG) from buchzahl
   where (artop=11 or artop=12) and BNR IN (select bnr from buchung where banknrsoll=:GKONTO and ARTOP=0 and (WDatum>:DTBIS) and (Datum>=:DTVON and Datum<=:DTBIS))
   into Betrag1
   do
    Betrag=Betrag-Betrag1;
   if (BETRAG<>0) THEN
    BEGIN
     BETRAG=-BETRAG;
     TEXT='Zahlungen der EigentÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼mer fÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼r Folgejahr im Abrechnungszeitraum vereinnahmt';
     SALDO=SALDO+BETRAG;
     ART=3;
     SUSPEND;
     NR=NR+1;
    END
    
  /* umlagefÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤hige kosten im nÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤chten Jahr gebucht, W-Datum Abrechnungszeitraum */
   select SUM(BETRAG) from buchung where
   banknrsoll=:GKONTO and arthaben=71 and (WDatum>=:DTVON and WDATUM<=:DTBIS)
     and Datum>:DTBIS
     into Betrag1;
     if (BETRAG1 IS NULL) THEN
      BETRAG1=0;
     select SUM(BETRAG) from buchung where
     banknrhaben=:GKONTO and artsoll=71 and (WDatum>=:DTVON and WDATUM<=:DTBIS)
     and (Datum>:DTBIS)
     into Betrag2;
     if (BETRAG2 IS NULL) THEN
      BETRAG2=0;
     BETRAG=BETRAG2-BETRAG1;
     /* DIREKT gebucht */
     select SUM(BETRAG) from buchung where
     banknrsoll=:GKONTO and arthaben=1 and (WDatum>=:DTVON and WDATUM<=:DTBIS)
     and (Datum>:DTBIS)
     into Betrag1;
     if (BETRAG1 IS NULL) THEN
      BETRAG1=0;
     BETRAG=BETRAG-BETRAG1;
     select SUM(BETRAG) from buchung where
     banknrhaben=:GKONTO and artsoll=1 and (WDatum>=:DTVON and WDATUM<=:DTBIS)
     and Datum>:DTBIS
     into Betrag2;
     if (BETRAG2 IS NULL) THEN
      BETRAG2=0;
     BETRAG=BETRAG+BETRAG2;
     IF (BETRAG<>0) THEN
      begin
       BETRAG=-BETRAG;
       SALDO=SALDO+BETRAG;
       TEXT='Kosten fÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼r Abrechnungszeitraum im Folgejahr gebucht';
       ART=3;
       SUSPEND;
       NR=NR+1;
      end
      
  /* umlagefÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤hige kosten im Abrechnungszeitraum, noch nicht bezahlt */
  for select OPBetrag, Text, ONRSOLL, KSOLL from buchung
  where ARTSOLL=1 and OPBETRAG <> 0 and lastbank=:gkonto and (wdatum>=:DTVON and wdatum<=:DTBIS)
  into Betrag, TEXT, TEMPONR, KNR do
   begin
    BETRAG=-Betrag;
    SALDO=SALDO+BETRAG;
    select KBEZ from konten where ONR=:TEMPONR and KNR=:KNR into :KBEZ;
    :KBEZ = SUBSTRING(:KBEZ FROM 1 FOR 88);
    TEXT=KBEZ || ' ' || TEXT;
    ART=3;
    SUSPEND;
    NR=NR+1;
   end
   
  /* umlagefÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤hige einnahmen im Abrechnungszeitraum, noch nicht erhalten */
  for select OPBetrag, Text, ONRHABEN, KHABEN from buchung
  where ARTHABEN=19 and OPBETRAG <> 0 and lastbank=:gkonto and (wdatum>=:DTVON and wdatum<=:DTBIS)
  into Betrag, TEXT, TEMPONR, KNR do
   begin
    SALDO=SALDO+BETRAG;
    select KBEZ from konten where ONR=:TEMPONR and KNR=:KNR into :KBEZ;
    :KBEZ = SUBSTRING(:KBEZ FROM 1 FOR 88);
    TEXT=KBEZ || ' ' || TEXT;
    ART=2;
    SUSPEND;
    NR=NR+1;
   end

      
 /* umlagefÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤hige Einnahmen  im nÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤chten Jahr gebucht, W-Datum Abrechnungszeitraum */
   select SUM(BETRAG) from buchung where
   banknrsoll=:GKONTO and (arthaben=60 or arthaben=62 or arthaben=64) and (WDatum>=:DTVON and WDATUM<=:DTBIS)
     and Datum>:DTBIS
     into Betrag1;
     if (BETRAG1 IS NULL) THEN
      BETRAG1=0;
     select SUM(BETRAG) from buchung where
     banknrhaben=:GKONTO and (artsoll=60 or artsoll=62 or arthaben=64) and (WDatum>=:DTVON and WDATUM<=:DTBIS)
     and (Datum>:DTBIS)
     into Betrag2;
     if (BETRAG2 IS NULL) THEN
      BETRAG2=0;
     BETRAG=BETRAG1-BETRAG2;
     /* DIREKT gebucht */
     select SUM(BETRAG) from buchung where
     banknrsoll=:GKONTO and (arthaben=19) and (WDatum>=:DTVON and WDATUM<=:DTBIS)
     and (Datum>:DTBIS)
     into Betrag1;
     if (BETRAG1 IS NULL) THEN
      BETRAG1=0;
     BETRAG=BETRAG+BETRAG1;
     select SUM(BETRAG) from buchung where
     banknrhaben=:GKONTO and (artsoll=19) and (WDatum>=:DTVON and WDATUM<=:DTBIS)
     and Datum>:DTBIS
     into Betrag2;
     if (BETRAG2 IS NULL) THEN
      BETRAG2=0;
     BETRAG=BETRAG-BETRAG2;
     IF (BETRAG<>0) THEN
      begin
       SALDO=SALDO+BETRAG;
       TEXT='Einnahmen fÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼r Folgejahr im Abrechnungszeitraum gebucht';
       ART=2;
       SUSPEND;
       NR=NR+1;
      end
      
      

/* abzgl reine miete */
     Betrag=0;
     for
     select SUM(BETRAG) from buchung where
     banknrsoll=:GKONTO and artop=10 and (Datum>=:DTVON and Datum<=:DTBIS)
     union
     SELECT SUM(BETRAG) from buchzahl
     where artop=10 and BNR IN (select bnr from buchung where banknrsoll=:GKONTO and ARTOP=0 and (Datum>=:DTVON and Datum<=:DTBIS))
     into :Betrag1
     do
      begin
       if (BETRAG1 IS NOT NULL and BETRAG1<>0) THEN
        BETRAG=BETRAG-BETRAG1;
      end
     if (BETRAG<>0) then
      begin
       TEXT='vereinnahmte Mieten';
       SALDO=SALDO+BETRAG;
       ART=2;
       SUSPEND;
       NR=NR+1;
      END
      
   /* BUCHUNG auf andere Bestandskonten Bank im Soll abzgl */
      for select sum(betrag), onrhaben, khaben from buchung
      where banknrsoll=:gkonto and (arthaben=27 or arthaben=24)
      and (datum>=:DTVON and datum<=:DTBIS)
      group by onrhaben, khaben
      into :Betrag, :TEMPONR, :KNR
      do
       begin
        IF (BETRAG IS NOT NULL and BETRAg<>0) THEN
         BEGIN
          BETRAG=-BETRAG;
          select KBEZ from konten where ONR=:TEMPONR and KNR=:KNR into :KBEZ;
          :KBEZ = SUBSTRING(:KBEZ FROM 1 FOR 88);
          TEXT=KBEZ;
          SALDO=SALDO+BETRAG;
          ART=3;
          SUSPEND;
          NR=NR+1;
         END
       end
       
   /* BUCHUNG auf andere Bestandskonten Bank im Haben zzgl */
      for select sum(betrag), onrsoll, ksoll from buchung
      where banknrhaben=:gkonto and (artsoll=27 or artsoll=24)
      and (datum>=:DTVON and datum<=:DTBIS)
      group by onrsoll, ksoll
      into :Betrag, :TEMPONR, :KNR
      do
       begin
        IF (BETRAG IS NOT NULL and BETRAg<>0) THEN
         BEGIN
          select KBEZ from konten where ONR=:TEMPONR and KNR=:KNR into :KBEZ;
          :KBEZ = SUBSTRING(:KBEZ FROM 1 FOR 88);
          TEXT=KBEZ;
          SALDO=SALDO+BETRAG;
          ART=2;
          SUSPEND;
          NR=NR+1;
         END
       end
       
  END /* SALDEN Banken/Kassen */

/*         */
/*         */


/* Nicht umlagefÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤hige Kosten */
  for select onr, knr, kbez from konten where kkstnr=3 and onr=:ONR and KKLASSE=1
  into :TEMPONR, :KNR, :TEXT do
   begin
    EXECUTE PROCEDURE KONTOSALDO_ALT (:TEMPONR, :KNR, :DTBIS_PLUSEINS, 'J','N') RETURNING_VALUES :BETRAG;
    IF (BETRAG IS NOT NULL and BETRAg<>0) THEN
     BEGIN
      SALDO=SALDO+BETRAG;
      ART=2;
      SUSPEND;
      NR=NR+1;
     END
   end
  
/* G/N * /
/* Ergebnis Abrechnung */
 SELECT SUM(GESERG) FROM NKMASTER WHERE ONR=:ONR INTO BETRAG;
 IF (BETRAG IS NOT NULL) THEN
  BEGIN
   BETRAG=-BETRAG;
   SALDO=SALDO+BETRAG;
   IF (BETRAG>0) THEN
    BEGIN
     TEXT='Nachzahlungen aus Abrechnung (Abrechnungsergebnis)';
     ART=2;
     SUSPEND;
     NR=NR+1;
    END
   ELSE
    IF (BETRAG<0) THEN
     BEGIN
      TEXT='Guthaben aus Abrechnung (Abrechnungsergebnis)';
      ART=3;
      SUSPEND;
      NR=NR+1;
     END
  END
  
  
 /* Abgrenzung FestbetrÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ge */
 /* alle Konten nach Festbetrag */
 for select konten.knr, kbrutto, opbetrag, KBEZ from konten,euschlu
  where konten.onr=:ONR and KNR<100000
  and konten.onr = euschlu.onr
  and (konten.kuschlnr1 = euschlu.nr or konten.kuschlnr2 = euschlu.nr)
  and (euschlu.art=3 or euschlu.art=4)
  union
  select konten.knr, kbrutto, opbetrag, KBEZ from konten,buschlu
  where konten.onr=:ONR and KNR<100000
  and konten.onr = buschlu.onr
  and (konten.kuschlnr1 = buschlu.nr or konten.kuschlnr2 = buschlu.nr)
  and (buschlu.art=3 or buschlu.art=4)
  into :KNR, :KBRUTTO, :FESTBETRAG, :KBEZ
  do
   begin
    :KBEZ = SUBSTRING(:KBEZ FROM 1 FOR 88);
    IF (KBRUTTO<>FESTBETRAG) THEN
     begin
      TEXT='Abgrenzung '|| KBEZ || ' (Kosten: ' || KBRUTTO || ' , Verbrauch: ' || FESTBETRAG ||')';
      BETRAG=KBRUTTO-FESTBETRAG;
      SALDO=SALDO+BETRAG;
      IF (BETRAG>=0) THEN
       ART=2;
      ELSE
       ART=3;
      SUSPEND;
      NR=NR+1;
     end
   end
   
   
    /* RÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã¢â‚¬Å“CKLAGEN RLA */
 for select knr, kklasse, kbez from konten
  where onr=:onr and kklasse=22
  into :KNR, :KKLasse, :KBEZ
  do
   begin
    :KBEZ = SUBSTRING(:KBEZ FROM 1 FOR 88);
    EXECUTE PROCEDURE KONTOSALDO_ALT (:ONR, :KNR, :DTBIS_PLUSEINS, 'J','N') RETURNING_VALUES :BETRAG;
    IF (BETRAG<>0 and BETRAG IS NOT NULL) THEN
     BEGIN
      ART=1;
      /* Endsaldo */
      SALDO=SALDO+BETRAG;
      TEXT='Saldo ' || KBEZ || ' per ' || DTBISTEXT;
      SUSPEND;
      NR=NR+1;
     END
   end
   

/***********************************/
/***********************************/
/***********************************/
/***********************************/
   
 /* abgestimmtes VermÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¶gen */
 ART=4;
 BETRAG=SALDO;
 TEXT='Abgestimmtes VermÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¶gen';
 SUSPEND;
 NR=NR+1;
 /* Vergleich mir RL 840 */
 /* RÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã¢â‚¬Å“CKLAGEN RLP */
 SALDO_RL=0;
 for select knr, kklasse, kbez from konten
  where onr=:onr and kklasse=27 and RLPOS IS NOT NULL
  into :KNR, :KKLasse, :KBEZ
  do
   begin
    :KBEZ = SUBSTRING(:KBEZ FROM 1 FOR 88);
    EXECUTE PROCEDURE KONTOSALDO_ALT (:ONR, :KNR, :DTBIS_PLUSEINS, 'J','N') RETURNING_VALUES :BETRAG;
    IF (BETRAG<>0 and BETRAG IS NOT NULL) THEN
     BEGIN
      /* Endsaldo */
      SALDO_RL=SALDO_RL+BETRAG;
     END
   end
 BETRAG=SALDO_RL;
 TEXT='RÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼cklagenvermÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¶gen per ' || DTBISTEXT;
 SUSPEND;
 NR=NR+1;
 DIFF=SALDO-SALDO_RL;
 BETRAG=DIFF;
 TEXT='Abstimmungsdifferenz';
 SUSPEND;
 NR=NR+1;



END


-- Prozedur: ZAHLUNGSUEBERSICHT
CREATE OR ALTER PROCEDURE ZAHLUNGSUEBERSICHT
DECLARE VARIABLE datum DATE;
DECLARE VARIABLE betrag NUMERIC(15, 2);
DECLARE VARIABLE kklasse INTEGER;
DECLARE VARIABLE ksoll INTEGER;
DECLARE VARIABLE khaben INTEGER;
DECLARE VARIABLE banknrsoll INTEGER;
DECLARE VARIABLE banknrhaben INTEGER;
DECLARE VARIABLE splitnr INTEGER;
DECLARE VARIABLE banknr INTEGER;
DECLARE VARIABLE onrsoll INTEGER;
DECLARE VARIABLE onrhaben INTEGER;
DECLARE VARIABLE kstrsoll VARCHAR(15);
DECLARE VARIABLE kstrhaben VARCHAR(15);
DECLARE VARIABLE levbankstr VARCHAR(15);
DECLARE VARIABLE levbank2str VARCHAR(15);
DECLARE VARIABLE levbanknr INTEGER;
DECLARE VARIABLE levbank2nr INTEGER;
DECLARE VARIABLE sollvorhanden INTEGER;
DECLARE VARIABLE solldatum DATE;
DECLARE VARIABLE LBNR INTEGER;
DECLARE VARIABLE test VARCHAR(10);
DECLARE VARIABLE artsoll INTEGER;
BEGIN
 KONTO_=KONTO;
 SELECT NR, KURZBEZ FROM BANKEN WHERE NR IN (SELECT LEVBANKNR FROM OBJEKTE WHERE ONR=:ONR) INTO :LEVBANKNR, :LEVBANKSTR;
 SELECT NR, KURZBEZ FROM BANKEN WHERE NR IN (SELECT LEVBANKNR2 FROM OBJEKTE WHERE ONR=:ONR) INTO :LEVBANK2NR, :LEVBANK2STR;
 IF (BDATUM='N') THEN
  BEGIN /* NACH SOLL und dazugehÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¶rige Zahlungen */
   /* Sollstellungen */
   FOR select OPNR, DATUM, BELEGNR, TEXT, MWST, SUM(BETRAG) as BETRAG, SUM(OPBETRAG) as OPBETRAG, SPLITNR from buchung
    where (onrsoll=:ONR or onrhaben=:ONR) and (ksoll=:KONTO or khaben=:KONTO) and ((betrag <> 0) or ((betrag=0) and (OPBETRAG<>0))) and opbetrag is not null AND (Datum >= :FROMDATUM and Datum <= :TODATUM)
    group by OPNR, DATUM, BELEGNR, TEXT, MWST, SPLITNR
    order by 1, 3
   into
    :OPNR, :DATUM, :BELEGNR, :TEXT, :MWST, :BETRAG, :OPBETRAG, :SPLITNR
   DO
    BEGIN
     DATUMS = DATUM;
     DATUMH = NULL;
     BETRAGS = BETRAG;
     BETRAGH = NULL;
     OPBETRAG = OPBETRAG;
     BNR = OPNR;
     SSORT = DATUM || '_' || OPNR || '_1_' || DATUM;
     BEMERKUNG = '';
     IF (OPBETRAG = 0) THEN
      BEGIN
       IF (SPLITNR IS NULL) THEN
        BEMERKUNG = 'SO';
       ELSE
        BEMERKUNG = 'SO..';
      END
     ELSE
      BEGIN
       IF (SPLITNR IS NULL) THEN
        BEMERKUNG = 'OP';
       ELSE
        BEMERKUNG = 'OP..';
      END
     IF (OPBETRAG > 0) THEN
      SH = 'S';
     ELSE
      IF (OPBETRAG < 0) THEN
       BEGIN
        SH = 'H';
        OPBETRAG = -OPBETRAG;
       END
      ELSE
       BEGIN
        OPBETRAG=NULL;
        SH='';
       END       
     GKONTOSTR = '';
     TEST = '01.' || EXTRACT(MONTH FROM CAST(DATUM AS DATE)) || '.' || EXTRACT(YEAR FROM CAST(DATUM AS DATE));
     DATUMSORT = CAST(TEST AS DATE);
     SUSPEND;
    END
   /* Zahlungen */
   FOR select OPNR, BNR, DATUM, KSOLL, KHABEN, BELEGNR, TEXT, MWST, BETRAG, BANKNRSOLL, BANKNRHABEN, OPBETRAG, SPLITNR, ONRSOLL, ONRHABEN, KSTRSOLL, KSTRHABEN, LBNR, ARTSOLL from buchung
    where (onrsoll=:ONR or onrhaben=:ONR) and (ksoll=:KONTO or khaben=:KONTO) and opbetrag is null and betrag <> 0 AND (Datum >= :FROMDATUM and Datum <= :TODATUM)
    order by 1, 3
   into
    :OPNR, :BNR, :DATUM, :KSOLL, :KHABEN, :BELEGNR, :TEXT, :MWST, :BETRAG, :BANKNRSOLL, :BANKNRHABEN, :OPBETRAG, :SPLITNR, :ONRSOLL, :ONRHABEN, :KSTRSOLL, :KSTRHABEN, :LBNR, :ARTSOLL 
   DO
    BEGIN
     DATUMH = DATUM;
     DATUMS = NULL;
     BETRAGS = NULL;
     SH = '';
     BEMERKUNG = '';
     OPBETRAG = NULL;
     /* */
     select datum from buchung where bnr=:opnr into :solldatum;
     IF (SOLLDATUM IS NULL) THEN
      SOLLDATUM = '1900-01-01';
     SSORT = SOLLDATUM || '_' || OPNR || '_2_' || DATUM;
     IF (BANKNRSOLL IS NULL AND BANKNRHABEN IS NULL) THEN
      BEGIN /* VERRECHNUNG */
       IF ((ARTSOLL = 24) OR (ARTSOLL = 27) or (ARTSOLL = 1)) THEN
        BEGIN
         BETRAGH = BETRAG;
        END
       ELSE
        BEGIN         
         BETRAGH = -BETRAG;
        END
      END
     ELSE
      BEGIN /* ZAhlung */       
       BETRAGH = BETRAG;
       IF (LBNR IS NOT NULL) then
        BEMERKUNG = 'LEV';
      END
     GKONTOSTR='';
     IF (BANKNRSOLL IS NOT NULL) THEN
      BEGIN
       IF (BANKNRSOLL = LEVBANKNR) THEN
        GKONTOSTR = LEVBANKSTR;
       ELSE
        IF (BANKNRSOLL = LEVBANK2NR) THEN
         GKONTOSTR = LEVBANK2STR;
        ELSE
         SELECT KURZBEZ from Banken where NR=:BANKNRSOLL into :GKONTOSTR;
      END
     ELSE
      BEGIN
       IF (BANKNRHABEN = LEVBANKNR) THEN
        GKONTOSTR = LEVBANKSTR;
       ELSE
        IF (BANKNRHABEN = LEVBANK2NR) THEN
         GKONTOSTR = LEVBANK2STR;
        ELSE
         SELECT KURZBEZ from Banken where NR=:BANKNRHABEN into :GKONTOSTR;
      END
     TEST = '01.' || EXTRACT(MONTH FROM CAST(DATUM AS DATE)) || '.' || EXTRACT(YEAR FROM CAST(DATUM AS DATE));
     DATUMSORT = CAST(TEST AS DATE);
     SUSPEND;
    END   
  END
 ELSE
  BEGIN  /* chronologisch */
   FOR SELECT BNR, DATUM, KSOLL, KHABEN, BELEGNR, TEXT, MWST, BETRAG, BANKNRSOLL, BANKNRHABEN, OPBETRAG, SPLITNR, ONRSOLL, ONRHABEN,LBNR,ARTSOLL from buchung
     WHERE ((ONRSOLL = :ONR AND KSOLL = :KONTO) OR (ONRHABEN = :ONR AND KHABEN = :KONTO))
     AND (Datum >= :FROMDATUM and Datum <= :TODATUM)
     AND SPLITNR IS NULL and ((betrag <> 0) or ((betrag=0) and (OPBETRAG<>0)))
     UNION
     SELECT buchung.BNR, DATUM, KSOLL, KHABEN, BELEGNR, TEXT, MWST, splitbuch.BETRAG, BANKNRSOLL, BANKNRHABEN, buchung.OPBETRAG, SPLITNR, ONRSOLL, ONRHABEN,LBNR,ARTSOLL from buchung, splitbuch
     WHERE ((ONRSOLL = :ONR AND KSOLL = :KONTO) OR (ONRHABEN = :ONR AND KHABEN = :KONTO))
     AND (Datum >= :FROMDATUM and Datum <= :TODATUM)
     AND SPLITNR IS NOT NULL and ((splitbuch.betrag <> 0) or ((splitbuch.betrag=0) and (splitbuch.OPBETRAG<>0)))
     AND BUCHUNG.BNR = SPLITBUCH.BNR
     ORDER BY 2, 1
    INTO :BNR, :DATUM, :KSOLL, :KHABEN, :BELEGNR, :TEXT, :MWST, :BETRAG, :BANKNRSOLL, :BANKNRHABEN, :OPBETRAG, :SPLITNR, :ONRSOLL, :ONRHABEN, :LBNR,:ARTSOLL
    DO
     BEGIN
      BEMERKUNG='';
      SSORT = DATUM;
      IF (OPBETRAG IS NOT NULL) THEN
       BEGIN
        IF (SPLITNR IS NOT NULL) THEN
         SELECT SUM(OPBETRAG) from splitbuch where BNR=:SPLITNR into :OPBETRAG;
        DATUMS=DATUM;
        BETRAGS=BETRAG;
        DATUMH=NULL;
        BETRAGH=NULL;
        IF (OPBETRAG=0) THEN
         BEGIN
          IF (SPLITNR IS NULL) THEN
           BEMERKUNG='SO';
          ELSE
           BEMERKUNG='SO..';
         END
        ELSE
         BEGIN
          IF (SPLITNR IS NULL) THEN
           BEMERKUNG='OP';
          ELSE
           BEMERKUNG='OP..';
         END
        IF (OPBETRAG>0) THEN
         SH='S';
        ELSE
         IF (OPBETRAG<0) THEN
          BEGIN
           SH='H';
           OPBETRAG=-OPBETRAG;
          END
         ELSE
          BEGIN
           OPBETRAG=NULL;
           SH='';
          END
       END
      ELSE
       BEGIN /* ZAHLUNG */
        DATUMH=DATUM;
        IF (KSOLL=KONTO) THEN /* Bank im Haben = - */
         BETRAGH=-BETRAG;
        ELSE
         BETRAGH=BETRAG;
        DATUMS=NULL;
        BETRAGS=NULL;
        SH='';
        IF (LBNR IS NOT NULL) then
         BEMERKUNG='LEV';
        ELSE
         BEMERKUNG='';
       END
      GKONTOSTR='';
      /*IF (BETRAG<>0) THEN  Sollstellung Betrag=0 nicht anzeigen */
       BEGIN
        IF (BANKNRSOLL IS NOT NULL) THEN
         BEGIN
          IF (BANKNRSOLL=LEVBANKNR) THEN
           GKONTOSTR=LEVBANKSTR;
          ELSE
           IF (BANKNRSOLL=LEVBANK2NR) THEN
            GKONTOSTR=LEVBANK2STR;
           ELSE
            SELECT KURZBEZ from Banken where NR=:BANKNRSOLL into :GKONTOSTR;
         END
        ELSE
         BEGIN
          IF (BANKNRHABEN=LEVBANKNR) THEN
           GKONTOSTR=LEVBANKSTR;
          ELSE
           IF (BANKNRHABEN=LEVBANK2NR) THEN
            GKONTOSTR=LEVBANK2STR;
           ELSE
            SELECT KURZBEZ from Banken where NR=:BANKNRHABEN into :GKONTOSTR;
         END
        TEST='01.' || EXTRACT(MONTH FROM CAST(DATUM AS DATE)) || '.' || EXTRACT(YEAR FROM CAST(DATUM AS DATE));
        DATUMSORT=CAST(TEST AS DATE)/*DATUMS*/;
        SUSPEND;
       END
     END
  END
END


