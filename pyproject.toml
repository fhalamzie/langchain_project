[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "wincasa-langchain-agent"
version = "1.0.0"
description = "Intelligent natural language database query system for Firebird databases using LLM agents"
authors = [{name = "WINCASA Development Team"}]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.8"
keywords = ["llm", "langchain", "firebird", "database", "ai", "nlp"]

[tool.black]
# Black configuration - zero-config, opinionated formatter
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
    # Exclude specific directories
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | venv
  | logs
  | output
  | fb_temp
  | fb_temp_direct
)/
'''
# Enable experimental string processing
preview = true

[tool.isort]
# isort configuration - compatible with Black
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
skip_gitignore = true
known_first_party = [
    "firebird_sql_agent_direct",
    "enhanced_retrievers", 
    "fdb_direct_interface",
    "langchain_sql_retriever_fixed",
    "global_context",
    "phoenix_monitoring",
    "llm_interface"
]
known_third_party = [
    "langchain",
    "streamlit",
    "pandas",
    "numpy",
    "fdb",
    "faiss",
    "openai",
    "phoenix"
]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

[tool.flake8]
# flake8 configuration
max-line-length = 88
extend-ignore = [
    "E203",  # whitespace before ':' (conflicts with Black)
    "E501",  # line too long (handled by Black)
    "W503",  # line break before binary operator (conflicts with Black)
    "W504",  # line break after binary operator (conflicts with Black)
]
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "venv",
    "build",
    "dist",
    "*.egg-info",
    "logs",
    "output",
    "fb_temp",
    "fb_temp_direct"
]
per-file-ignores = [
    "__init__.py:F401",  # imported but unused
    "test_*.py:D100,D101,D102,D103",  # missing docstrings in tests
]

[tool.bandit]
# bandit security linter configuration
exclude_dirs = [
    "tests",
    "integration_tests", 
    "logs",
    "output",
    "fb_temp",
    "fb_temp_direct",
    "venv"
]
skips = [
    "B101",  # assert_used - we use asserts in tests
    "B603",  # subprocess_without_shell_equals_true
]

[tool.pytest.ini_options]
# pytest configuration (alternative to pytest.ini)
minversion = "7.0"
addopts = [
    "-ra",
    "-q", 
    "--strict-markers",
    "--strict-config",
    "--cov=firebird_sql_agent_direct",
    "--cov=enhanced_retrievers",
    "--cov=fdb_direct_interface",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=75"
]
testpaths = ["tests", "integration_tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests for individual components",
    "integration: Integration tests with database and external services", 
    "system: End-to-end system tests",
    "slow: Tests that take more than 1 second",
    "firebird: Tests requiring Firebird database connection",
    "llm: Tests requiring LLM API access",
    "phoenix: Tests for Phoenix monitoring integration",
    "retrieval: Tests for different retrieval modes",
    "context7: Tests for MCP Context7 integration"
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning:fdb.*",
    "ignore::UserWarning:firebird.*"
]

[tool.coverage.run]
# Coverage configuration
source = [
    "firebird_sql_agent_direct",
    "enhanced_retrievers",
    "fdb_direct_interface", 
    "langchain_sql_retriever_fixed",
    "global_context",
    "phoenix_monitoring",
    "llm_interface"
]
omit = [
    "*/tests/*",
    "*/test_*",
    "*_test.py",
    "venv/*",
    "*/venv/*",
    "logs/*",
    "output/*",
    "fb_temp/*",
    "fb_temp_direct/*"
]

[tool.coverage.report]
# Coverage reporting
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]

[tool.coverage.html]
directory = "htmlcov"